[
  {
    "path": "enyo/Scroller",
    "base": "/Users/jason/Git/bootplate/src/views",
    "external": true,
    "relName": "enyo/Scroller",
    "name": "enyo/Scroller",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/Scroller",
    "isPackage": true,
    "packageFile": "/Users/jason/Git/bootplate/lib/enyo/lib/Scroller/package.json",
    "mtime": {
      "/Users/jason/Git/bootplate/lib/enyo/lib/Scroller/package.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo/lib/Scroller/Scroller.js": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo/lib/Scroller/Scroller.css": 1434758950000
    },
    "json": {
      "main": "Scroller.js",
      "styles": [
        "Scroller.css"
      ]
    },
    "main": "/Users/jason/Git/bootplate/lib/enyo/lib/Scroller/Scroller.js",
    "contents": "require('enyo');\n\n/**\n* Contains the declaration for the {@link module:enyo/Scroller~Scroller} kind.\n* @module enyo/Scroller\n*/\n\n\n\nvar\n\tkind = require('../kind'),\n\tutils = require('../utils'),\n\tplatform = require('../platform');\n\nvar\n\tControl = require('../Control'),\n\tScrollStrategy = require('../ScrollStrategy'),\n\tTouchScrollStrategy = require('../TouchScrollStrategy'),\n\tTranslateScrollStrategy = require('../TranslateScrollStrategy');\n\n/**\n* An [object]{@glossary Object} representing the scroll boundaries.\n*\n* @typedef {Object} enyo.Scroller~BoundaryObject\n* @property {Number} left - The left scroll position.\n* @property {Number} top - The top scroll position.\n* @property {Number} maxLeft - Maximum value for the left scroll position (minimum is always 0).\n* @property {Number} maxTop - Maximum value for the top scroll position (minimum is always 0).\n* @property {Number} clientHeight - The vertical size of the [scroller]{@link module:enyo/Scroller~Scroller} on\n*\tscreen.\n* @property {Number} clientWidth - The horizontal size of the [scroller]{@link module:enyo/Scroller~Scroller} on\n*\tscreen.\n* @property {Number} width - The horizontal size of the full area of the scrolled region.\n* @property {Number} height - The vertical size of the full area of the scrolled region.\n* @property {Number} xDir - Either `1`, `-1`, or `0`, indicating positive movement along the\n*\tx-axis, negative movement, or no movement, respectively.\n* @property {Number} yDir - Either `1`, `-1`, or `0`, indicating positive movement along the\n*\ty-axis, negative movement, or no movement, respectively.\n*/\n\n\n/**\n* An [object]{@glossary Object} representing the overscroll boundaries.\n*\n* @typedef {Object} enyo.Scroller~OverscrollBoundaryObject\n* @property {Number} overleft - The left overscroll position.\n* @property {Number} overtop - The top overscroll position.\n*/\n\n/**\n* The extended {@glossary event} [object]{@glossary Object} that is provided \n* when a scroll event is fired.\n*\n* @typedef {Object} enyo.Scroller~ScrollEvent\n* @property {module:enyo/Scroller~BoundaryObject} bounds Current values of scroller bounds.\n*/\n\n/**\n* Fires when a scrolling action starts.\n*\n* @event module:enyo/Scroller~Scroller#onScrollStart\n* @type {Object}\n* @property {Object} sender - The [component]{@link module:enyo/Component~Component} that most recently \n*\tpropagated the {@glossary event}.\n* @property {module:enyo/Scroller~ScrollEvent} event - An [object]{@glossary Object} containing\n*\tevent information.\n* @public\n*/\n\n/**\n* Fires while a scrolling action is in progress.\n*\n* @event module:enyo/Scroller~Scroller#onScroll\n* @type {Object}\n* @property {Object} sender - The [component]{@link module:enyo/Component~Component} that most recently \n*\tpropagated the {@glossary event}.\n* @property {Object} event - An [object]{@glossary Object} containing \n*\tevent information.\n* @public\n*/\n\n/**\n* Fires when a scrolling action stops.\n*\n* @event module:enyo/Scroller~Scroller#onScrollStop\n* @type {Object}\n* @property {Object} sender - The [component]{@link module:enyo/Component~Component} that most recently \n*\tpropagated the {@glossary event}.\n* @property {Object} event - An [object]{@glossary Object} containing \n*\tevent information.\n* @public\n*/\n\n/**\n* {@link module:enyo/Scroller~Scroller} is a scroller suitable for use in both desktop and mobile\n* applications.\n* \n* In some mobile environments, a default scrolling solution is not implemented for\n* DOM elements. In such cases, `enyo.Scroller` implements a touch-based scrolling\n* solution, which may be opted into either globally (by setting\n* [touchScrolling]{@link module:enyo/Scroller~Scroller#touchScrolling} to `true`) or on a\n* per-instance basis (by specifying a [strategyKind]{@link module:enyo/Scroller~Scroller#strategyKind}\n* of `\"TouchScrollStrategy\"`).\n* \n* For more information, see the documentation on\n* [Scrollers]{@linkplain $dev-guide/building-apps/layout/scrollers.html} in the\n* Enyo Developer Guide.\n*\n* @class Scroller\n* @public\n*/\nvar Scroller = module.exports = kind(\n\t/** @lends module:enyo/Scroller~Scroller.prototype */ {\n\t\n\tname: 'enyo.Scroller',\n\t\n\tkind: Control,\n\t\n\t/**\n\t* @private\n\t*/\n\tpublished: \n\t\t/** @lends module:enyo/Scroller~Scroller.prototype */ {\n\n\t\t/**\n\t\t* Specifies how to horizontally scroll.  Acceptable values are `'scroll'`, `'auto'`,\n\t\t* `'hidden'`, and `'default'`. The precise effect of the setting is determined by the\n\t\t* scroll strategy.\n\t\t* \n\t\t* @type {String}\n\t\t* @default 'default'\n\t\t* @public\n\t\t*/\n\t\thorizontal: 'default',\n\n\t\t/**\n\t\t* Specifies how to vertically scroll.  Acceptable values are `'scroll'`, `'auto'`,\n\t\t* `'hidden'`, and `'default'`. The precise effect of the setting is determined by the\n\t\t* scroll strategy.\n\t\t* \n\t\t* @type {String}\n\t\t* @default 'default'\n\t\t* @public\n\t\t*/\n\t\tvertical: 'default',\n\n\t\t/**\n\t\t* The vertical scroll position.\n\t\t* \n\t\t* @type {Number}\n\t\t* @default 0\n\t\t* @public\n\t\t*/\n\t\tscrollTop: 0,\n\n\t\t/**\n\t\t* The horizontal scroll position.\n\t\t* \n\t\t* @type {Number}\n\t\t* @default 0\n\t\t* @public\n\t\t*/\n\t\tscrollLeft: 0,\n\n\t\t/**\n\t\t* Maximum height of the scroll content.\n\t\t* \n\t\t* @type {Number}\n\t\t* @default null\n\t\t* @memberof enyo.Scroller.prototype\n\t\t* @public\n\t\t*/\n\t\tmaxHeight: null,\n\n\t\t/**\n\t\t* Set to `true` to make this [scroller]{@link module:enyo/Scroller~Scroller} select a \n\t\t* platform-appropriate touch-based scrolling strategy. Note that if you specify a value \n\t\t* for [strategyKind]{@link module:enyo/Scroller~Scroller#strategyKind}, that will take precedence over\n\t\t* this setting.\n\t\t* \n\t\t* @type {Boolean}\n\t\t* @default false\n\t\t* @public\n\t\t*/\n\t\ttouch: false,\n\t\t/**\n\t\t* Specifies a type of scrolling. The [scroller]{@link module:enyo/Scroller~Scroller} will attempt to \n\t\t* automatically select a strategy compatible with the runtime environment. Alternatively,\n\t\t* you may choose to use a specific strategy:\n\t\t* \n\t\t* - [ScrollStrategy]{@link module:enyo/ScrollStrategy~ScrollStrategy} is the default and implements no \n\t\t*\tscrolling, relying instead on the environment to scroll properly.\n\t\t* - [TouchScrollStrategy]{@link module:enyo/TouchScrollStrategy~TouchScrollStrategy} implements a touch scrolling \n\t\t*\tmechanism.\n\t\t* - [TranslateScrollStrategy]{@link module:enyo/TranslateScrollStrategy~TranslateScrollStrategy} implements a touch \n\t\t*\tscrolling mechanism using translations; it is currently recommended only for Android\n\t\t*\t3 and 4, and Windows Phone 8.\n\t\t* - [TransitionScrollStrategy]{@link module:enyo/TransitionScrollStrategy~TransitionScrollStrategy} implements a touch \n\t\t*\tscrolling mechanism using CSS transitions; it is currently recommended only for iOS \n\t\t*\t5 and later.\n\t\t*\n\t\t* @type {String}\n\t\t* @default 'ScrollStrategy'\n\t\t* @public\n\t\t*/\n\t\tstrategyKind: ScrollStrategy,\n\n\t\t/**\n\t\t* Set to `true` to display a scroll thumb in touch [scrollers]{@link module:enyo/Scroller~Scroller}.\n\t\t* \n\t\t* @type {Boolean}\n\t\t* @default true\n\t\t* @public\n\t\t*/\n\t\tthumb: true,\n\n\t\t/**\n\t\t* If `true`, mouse wheel may be used to move the [scroller]{@link module:enyo/Scroller~Scroller}.\n\t\t* \n\t\t* @type {Boolean}\n\t\t* @default true\n\t\t* @public\n\t\t*/\n\t\tuseMouseWheel: true\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tevents: {\n\t\tonScrollStart: '',\n\t\tonScroll: '',\n\t\tonScrollStop: ''\n\t},\n\n\t/**\n\t* If `true`, enables touch scrolling globally.\n\t*\n\t* @name touchScrolling\n\t* @type {Boolean}\n\t* @default undefined\n\t* @memberof enyo.Scroller.prototype\n\t* @public\n\t*/\n\n\t/**\n\t* If `true` and this is a touch [scroller]{@link module:enyo/Scroller~Scroller}, the scroller\n\t* will overscroll and bounce back at the edges.\n\t*\n\t* @type {Boolean}\n\t* @default true\n\t* @public\n\t*/\n\ttouchOverscroll: true,\n\n\t/**\n\t* If `true`, the [scroller]{@link module:enyo/Scroller~Scroller} will not propagate `dragstart` \n\t* [events]{@glossary event} that cause it to start scrolling.\n\t*\n\t* @type {Boolean}\n\t* @default true\n\t* @public\n\t*/\n\tpreventDragPropagation: true,\n\n\t/**\n\t* If `true`, the [scroller]{@link module:enyo/Scroller~Scroller} will not propagate scroll \n\t* [events]{@glossary event}.\n\t*\n\t* @type {Boolean}\n\t* @default true\n\t* @public\n\t*/\n\tpreventScrollPropagation: true,\n\n\t/**\n\t* Needed to allow global mods to `enyo.Scroller.touchScrolling`.\n\t* \n\t* @private\n\t*/\n\n\n\t/**\n\t* @private\n\t*/\n\thandlers: {\n\t\tonscroll: 'domScroll',\n\t\tonScrollStart: 'scrollStart',\n\t\tonScroll: 'scroll',\n\t\tonScrollStop: 'scrollStop'\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tclasses: 'enyo-scroller',\n\n\t/**\n\t* @private\n\t*/\n\tstatics: {\n\t\tosInfo: [\n\t\t\t{os: 'android', version: 3},\n\t\t\t{os: 'androidChrome', version: 18},\n\t\t\t{os: 'androidFirefox', version: 16},\n\t\t\t{os: 'firefoxOS', version: 16},\n\t\t\t{os: 'ios', version: 5},\n\t\t\t{os: 'webos', version: 1e9},\n\t\t\t{os: 'blackberry', version:1e9},\n\t\t\t{os: 'tizen', version: 2}\n\t\t],\n\t\t//* Returns true if platform should have touch events.\n\t\thasTouchScrolling: function() {\n\t\t\tfor (var i=0, t; (t=this.osInfo[i]); i++) {\n\t\t\t\tif (platform[t.os]) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// special detection for IE10+ on touch devices\n\t\t\tif ((platform.ie >= 10 || platform.windowsPhone >= 8) && platform.touch) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t\tReturns true if the platform has native div scrollers (desktop\n\t\t\tbrowsers always have them).\n\t\t*/\n\t\thasNativeScrolling: function() {\n\t\t\tfor (var i=0, t; (t=this.osInfo[i]); i++) {\n\t\t\t\tif (platform[t.os] < t.version) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\t\tgetTouchStrategy: function() {\n\t\t\treturn (platform.androidChrome >= 27) || (platform.android >= 3) || (platform.windowsPhone === 8) || (platform.webos >= 4)\n\t\t\t\t? TranslateScrollStrategy\n\t\t\t\t: TouchScrollStrategy;\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tcontrolParentName: 'strategy',\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tcreate: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tsup.apply(this, arguments);\n\t\t\tthis.horizontalChanged();\n\t\t\tthis.verticalChanged();\n\t\t\tthis.useMouseWheelChanged();\n\t\t};\n\t}),\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\timportProps: kind.inherit(function (sup) {\n\t\treturn function(inProps) {\n\t\t\tsup.apply(this, arguments);\n\t\t\t// allow global overriding of strategy kind\n\t\t\tif (inProps && inProps.strategyKind === undefined && (Scroller.touchScrolling || this.touch)) {\n\t\t\t\tthis.strategyKind = Scroller.getTouchStrategy();\n\t\t\t}\n\t\t};\n\t}),\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tinitComponents: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tthis.strategyKindChanged();\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\trendered: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tsup.apply(this, arguments);\n\t\t\tthis.syncStrategy();\n\t\t};\n\t}),\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tsyncStrategy: function() {\n\t\tthis.$.strategy.setScrollLeft(this.scrollLeft);\n\t\tthis.$.strategy.setScrollTop(this.scrollTop);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tstrategyKindChanged: function () {\n\t\tif (this.$.strategy) {\n\t\t\tthis.$.strategy.destroy();\n\t\t\tthis.controlParent = null;\n\t\t}\n\t\t// note: createComponents automatically updates controlParent.\n\t\tthis.createStrategy();\n\t\tif (this.hasNode()) {\n\t\t\tthis.render();\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tcreateStrategy: function () {\n\t\tthis.createComponents([{name: 'strategy', maxHeight: this.maxHeight,\n\t\t\tkind: this.strategyKind, thumb: this.thumb,\n\t\t\tpreventDragPropagation: this.preventDragPropagation,\n\t\t\toverscroll:this.touchOverscroll, isChrome: true}]);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tgetStrategy: function () {\n\t\treturn this.$.strategy;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tmaxHeightChanged: function () {\n\t\tthis.$.strategy.setMaxHeight(this.maxHeight);\n\t},\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tshowingChanged: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tsup.apply(this, arguments);\n\t\t\tif (this.showing) {\n\t\t\t\tthis.syncStrategy();\n\t\t\t}\n\t\t};\n\t}),\n\n\t/**\n\t* @private\n\t*/\n\tshowingChangedHandler: kind.inherit(function(sup) {\n\t\treturn function(sender, event) {\n\t\t\tif (this.showing && event.showing) {\n\t\t\t\tthis.syncStrategy();\n\t\t\t}\n\t\t};\n\t}),\n\n\t/**\n\t* @private\n\t*/\n\tthumbChanged: function () {\n\t\tthis.$.strategy.setThumb(this.thumb);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\thorizontalChanged: function () {\n\t\tthis.$.strategy.setHorizontal(this.horizontal);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tverticalChanged: function () {\n\t\tthis.$.strategy.setVertical(this.vertical);\n\t},\n\n\t// FIXME: these properties are virtual; property changed methods are fired only if\n\t// property value changes, not if getter changes.\n\t\n\t/**\n\t* Sets the horizontal scroll position.\n\t*\n\t* @param {Number} left - The horizontal scroll position in pixels.\n\t* @public\n\t*/\n\tsetScrollLeft: function (left) {\n\t\tthis.$.strategy.setScrollLeft(left);\n\t},\n\n\t/**\n\t* Sets the vertical scroll position.\n\t*\n\t* @param {Number} top - The vertical scroll position in pixels.\n\t* @public\n\t*/\n\tsetScrollTop: function (top) {\n\t\tthis.$.strategy.setScrollTop(top);\n\t},\n\n\t/**\n\t* Retrieves the horizontal scroll position.\n\t*\n\t* @returns {Number} The horizontal scroll position in pixels.\n\t* @public\n\t*/\n\tgetScrollLeft: function () {\n\t\t// sync our internal property\n\t\tthis.scrollLeft = this.$.strategy.getScrollLeft();\n\t\treturn this.scrollLeft;\n\t},\n\n\t/**\n\t* Retrieves the vertical scroll position.\n\t*\n\t* @returns {Number} The vertical scroll position in pixels.\n\t* @public\n\t*/\n\tgetScrollTop: function () {\n\t\t// sync our internal property\n\t\tthis.scrollTop = this.$.strategy.getScrollTop();\n\t\treturn this.scrollTop;\n\t},\n\n\t/**\n\t* Retrieves the scroll boundaries of the [scroller]{@link module:enyo/Scroller~Scroller}.\n\t* \n\t* @returns {module:enyo/Scroller~BoundaryObject} An [object]{@glossary Object} describing the\n\t*\tscroll boundaries.\n\t* @public\n\t*/\n\tgetScrollBounds: function () {\n\t\tvar bounds  = this.$.strategy.getScrollBounds();\n\t\tif (\n\t\t\t(bounds.xDir !== -1 && bounds.xDir !== 0 && bounds.xDir !== 1) ||\n\t\t\t(bounds.yDir !== -1 && bounds.yDir !== 0 && bounds.yDir !== 1)\n\t\t) {\n\t\t\tthis.decorateBounds(bounds);\n\t\t}\n\t\t// keep our properties synchronized always and without extra calls\n\t\tthis.scrollTop  = bounds.top;\n\t\tthis.scrollLeft = bounds.left;\n\t\treturn bounds;\n\t},\n\n\t/** \n\t* Trigger a remeasurement of the scroller's metrics (specifically, the\n\t* size of its viewport, the size of its contents and the difference between\n\t* the two, which determines the extent to which the scroller may scroll).\n\t* \n\t* You should generally not need to call this from application code, as the\n\t* scroller usually remeasures automatically whenever needed. This method\n\t* exists primarily to support an internal use case for\n\t* [enyo.DataList]{@link module:enyo/DataList~DataList}.\n\t*\n\t* @public\n\t*/\n\tremeasure: function() {\n\t\tvar s = this.$.strategy;\n\t\tif (s.remeasure) s.remeasure();\n\t},\n\n\t/**\n\t* Scrolls the given [control]{@link module:enyo/Control~Control} into view.\n\t*\n\t* @param {module:enyo/Control~Control} ctl - The control to make visible in the\n\t*\t[scroller's]{@link module:enyo/Scroller~Scroller} viewport.\n\t* @param {Boolean} alignWithTop - If `true`, the node is aligned with the top\n\t* of the scroller.\n\t* @public\n\t*/\n\tscrollIntoView: function (ctl, alignWithTop) {\n\t\tthis.$.strategy.scrollIntoView(ctl, alignWithTop);\n\t},\n\n\t/** \n\t* Scrolls to the specified position.\n\t*\n\t* @param {Number} x - The `x` position in pixels.\n\t* @param {Number} y - The `y` position in pixels.\n\t* @public\n\t*/\n\tscrollTo: function (x, y) {\n\t\tthis.$.strategy.scrollTo(x, y);\n\t},\n\n\t/**\n\t* Ensures that the given [control]{@link module:enyo/Control~Control} is visible in the \n\t* [scroller's]{@link module:enyo/Scroller~Scroller} viewport. Unlike \n\t* [scrollIntoView()]{@link module:enyo/Scroller~Scroller#scrollIntoView}, which uses DOM's \n\t* [scrollIntoView()]{@glossary scrollIntoView}, this only affects the current \n\t* scroller.\n\t*\n\t* @param {module:enyo/Control~Control} ctl - The [control]{@link module:enyo/Control~Control} to make visible in the\n\t*\t[scroller's]{@link module:enyo/Scroller~Scroller} viewport.\n\t* @param {Boolean} alignWithTop - If `true`, the node is aligned with the top of the\n\t*\tscroller.\n\t* @public\n\t*/\n\tscrollToControl: function (ctl, alignWithTop) {\n\t\tthis.scrollToNode(ctl.hasNode(), alignWithTop);\n\t},\n\n\t/** \n\t* Ensures that the given node is visible in the [scroller's]{@link module:enyo/Scroller~Scroller} viewport.\n\t*\n\t* @param {Node} node - The node to make visible in the [scroller's]{@link module:enyo/Scroller~Scroller}\n\t*\tviewport.\n\t* @param {Boolean} alignWithTop - If `true`, the node is aligned with the top of the\n\t*\tscroller.\n\t* @public\n\t*/\n\tscrollToNode: function (node, alignWithTop) {\n\t\tthis.$.strategy.scrollToNode(node, alignWithTop);\n\t},\n\n\t/** \n\t* Stops the scroller if it is currently animating.\n\t* \n\t* @public\n\t*/\n\tstop: function() {\n\t\tif (typeof this.$.strategy.stop == 'function') {\n\t\t\tthis.$.strategy.stop(true);\n\t\t}\n\t},\n\n\t/** \n\t* Adds current values of `getScrollBounds()` to {@glossary event}.\n\t* \n\t* @private\n\t*/\n\tdecorateScrollEvent: function (e) {\n\t\tvar bounds = e.scrollBounds = e.scrollBounds || this.$.strategy._getScrollBounds();\n\t\t// in the off chance that the event already had scrollBounds then we need\n\t\t// to make sure they are decorated\n\t\tif (\n\t\t\t(bounds.xDir !== -1 && bounds.xDir !== 0 && bounds.xDir !== 1) ||\n\t\t\t(bounds.yDir !== -1 && bounds.yDir !== 0 && bounds.yDir !== 1)\n\t\t) {\n\t\t\tthis.decorateBounds(bounds);\n\t\t}\n\t\t// keep our properties synchronized always and without extra calls\n\t\tthis.scrollTop  = bounds.top;\n\t\tthis.scrollLeft = bounds.left;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tdecorateBounds: function (bounds) {\n\t\tvar x       = this.scrollLeft - bounds.left,\n\t\t\ty       = this.scrollTop  - bounds.top;\n\t\tbounds.xDir = (x < 0? 1: x > 0? -1: 0);\n\t\tbounds.yDir = (y < 0? 1: y > 0? -1: 0);\n\t\t// we update our current bounds properties so we don't have to unnecessarily\n\t\t// call getScrollTop/getScrollLeft because we already have the current data\n\t\tthis.scrollLeft = bounds.left;\n\t\tthis.scrollTop  = bounds.top;\n\t},\n\n\t/** \n\t* Normalizes scroll {@glossary event} to `onScroll`.\n\t*\n\t* @fires module:enyo/Scroller~Scroller#onScroll\n\t* @private\n\t*/\n\tdomScroll: function (sender, e) {\n\t\t// if a scroll event originated here, pass it to our strategy to handle\n\t\tif (this.$.strategy.domScroll && e.originator == this) {\n\t\t\tthis.$.strategy.domScroll(sender, e);\n\t\t}\n\t\tthis.decorateScrollEvent(e);\n\t\tthis.doScroll(e);\n\t\treturn true;\n\t},\n\n\t/**\n\t* @returns {Boolean} `true` if the current scroll {@glossary event} should\n\t* be stopped; `false` if it should be allowed to propagate.\n\t* @private\n\t*/\n\tshouldStopScrollEvent: function (e) {\n\t\treturn (this.preventScrollPropagation &&\n\t\t\te.originator.owner != this.$.strategy);\n\t},\n\n\t/**\n\t* Calls [shouldStopScrollEvent()]{@link module:enyo/Scroller~Scroller#shouldStopScrollEvent} to\n\t* determine whether current scroll {@glossary event} should be stopped.\n\t*\n\t* @private\n\t*/\n\tscrollStart: function (sender, e) {\n\t\tif (!this.shouldStopScrollEvent(e)) {\n\t\t\tthis.decorateScrollEvent(e);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t/** \n\t* Either propagates or stops the current scroll {@glossary event}.\n\t*\n\t* @private\n\t*/\n\tscroll: function (sender, e) {\n\t\t// note: scroll event can be native dom or generated.\n\t\tvar stop;\n\t\tif (e.dispatchTarget) {\n\t\t\t// allow a dom event if it orignated with this scroller or its strategy\n\t\t\tstop = this.preventScrollPropagation && !(e.originator == this ||\n\t\t\t\te.originator.owner == this.$.strategy);\n\t\t} else {\n\t\t\tstop = this.shouldStopScrollEvent(e);\n\t\t}\n\t\tif (!stop) {\n\t\t\tthis.decorateScrollEvent(e);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t/**\n\t* Calls [shouldStopScrollEvent()]{@link module:enyo/Scroller~Scroller#shouldStopScrollEvent} to\n\t* determine whether current scroll {@glossary event} should be stopped.\n\t*\n\t* @private\n\t*/\n\tscrollStop: function (sender, e) {\n\t\tif (!this.shouldStopScrollEvent(e)) {\n\t\t\tthis.decorateScrollEvent(e);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t/**\n\t* Scrolls to the top of the scrolling region.\n\t*\n\t* @public\n\t*/\n\tscrollToTop: function () {\n\t\tthis.setScrollTop(0);\n\t},\n\n\t/**\n\t* Scrolls to the bottom of the scrolling region.\n\t*\n\t* @public\n\t*/\n\tscrollToBottom: function () {\n\t\tthis.setScrollTop(this.getScrollBounds().maxTop);\n\t},\n\n\t/**\n\t* Scrolls to the right edge of the scrolling region.\n\t*\n\t* @public\n\t*/\n\tscrollToRight: function () {\n\t\tthis.setScrollLeft(this.getScrollBounds().maxLeft);\n\t},\n\n\t/**\n\t* Scrolls to the left edge of the scrolling region.\n\t*\n\t* @public\n\t*/\n\tscrollToLeft: function () {\n\t\tthis.setScrollLeft(0);\n\t},\n\n\t/**\n\t* Ensures scroll position is in bounds.\n\t*\n\t* @public\n\t*/\n\tstabilize: function () {\n\t\tvar s = this.getStrategy();\n\t\tif (s.stabilize) {\n\t\t\ts.stabilize();\n\t\t}\n\t},\n\n\t/**\n\t* Sends the [useMouseWheel]{@link module:enyo/Scroller~Scroller#useMouseWheel} property to the scroll \n\t* strategy.\n\t*\n\t* @private\n\t*/\n\tuseMouseWheelChanged: function () {\n\t\tthis.$.strategy.setUseMouseWheel(this.useMouseWheel);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tresize: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tif (this.getAbsoluteShowing(true)) {\n\t\t\t\tsup.apply(this, arguments);\n\t\t\t}\n\t\t};\n\t})\n});\n\n// provide a touch scrolling solution by default when the environment is mobile\nif (Scroller.hasTouchScrolling()) {\n\tScroller.prototype.strategyKind = Scroller.getTouchStrategy();\n}\n",
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relPath": "enyo/Scroller",
    "requires": [
      "enyo",
      "../kind",
      "../utils",
      "../platform",
      "../Control",
      "../ScrollStrategy",
      "../TouchScrollStrategy",
      "../TranslateScrollStrategy"
    ],
    "requests": [],
    "resolved": true,
    "styleEntries": [
      {
        "glob": "Scroller.css",
        "files": [
          "/Users/jason/Git/bootplate/lib/enyo/lib/Scroller/Scroller.css"
        ],
        "sources": {
          "/Users/jason/Git/bootplate/lib/enyo/lib/Scroller/Scroller.css": ".enyo-scroller {\n\tposition: relative;\n}\n\n.enyo-fit.enyo-scroller {\n\tposition: absolute;\n}\n\n.enyo-touch-scroller {\n\toverflow: hidden;\n}\n\n.enyo-touch-scroller-client::after,\n.enyo-touch-scroller-client::before {\n\tcontent: \"\";\n\tdisplay: table-cell;\n}\n\n.enyo-touch-strategy-container {\n\toverflow: hidden;\n}\n\n.enyo-scrollee-fit {\n\theight: 100%;\n}\n\n.enyo-flex-item.flex .enyo-scrollee-fit {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tbottom: 0;\n\tright: 0;\n}"
        },
        "source": ".enyo-scroller {\n\tposition: relative;\n}\n\n.enyo-fit.enyo-scroller {\n\tposition: absolute;\n}\n\n.enyo-touch-scroller {\n\toverflow: hidden;\n}\n\n.enyo-touch-scroller-client::after,\n.enyo-touch-scroller-client::before {\n\tcontent: \"\";\n\tdisplay: table-cell;\n}\n\n.enyo-touch-strategy-container {\n\toverflow: hidden;\n}\n\n.enyo-scrollee-fit {\n\theight: 100%;\n}\n\n.enyo-flex-item.flex .enyo-scrollee-fit {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tbottom: 0;\n\tright: 0;\n}"
      }
    ]
  },
  {
    "path": "../TranslateScrollStrategy",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib/Scroller",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/TranslateScrollStrategy",
    "name": "enyo/TranslateScrollStrategy",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/TranslateScrollStrategy.js",
    "contents": "require('enyo');\n\n/**\n * Contains the declaration for the {@link module:enyo/TranslateScrollStrategy~TranslateScrollStrategy} kind.\n * @module enyo/TranslateScrollStrategy\n */\n\nvar\n\tkind = require('./kind'),\n\tdispatcher = require('./dispatcher');\n\nvar\n\tTouchScrollStrategy = require('./TouchScrollStrategy'),\n\tDom = require('./dom');\n\n/**\n* {@link module:enyo/TranslateScrollStrategy~TranslateScrollStrategy} is a helper [kind]{@glossary kind} that extends\n* {@link module:enyo/TouchScrollStrategy~TouchScrollStrategy}, optimizing it for scrolling environments in which effecting\n* scroll changes with transforms using CSS translations is fastest.\n* \n* `TranslateScrollStrategy` is not typically created in application code. Instead, it is\n* specified as the value of the [strategyKind]{@link module:enyo/Scroller~Scroller#strategyKind} property of\n* an {@link module:enyo/Scroller~Scroller} or {@link module:layout/List#List}, or is used by the framework implicitly.\n*\n* @class TranslateScrollStrategy\n* @extends module:enyo/TouchScrollStrategy~TouchScrollStrategy\n* @protected\n*/\nmodule.exports = kind(\n\t/** @lends module:enyo/TranslateScrollStrategy~TranslateScrollStrategy.prototype */ {\n\n\tname: 'enyo.TranslateScrollStrategy',\n\n\t/**\n\t* @private\n\t*/\n\tkind: TouchScrollStrategy,\n\n\t/** \n\t* Set to `true` to optimize the strategy to only use translation to scroll; this increases\n\t* fluidity of scrolling animation. It should not be used when the\n\t* [scroller]{@link module:enyo/Scroller~Scroller} contains [controls]{@link module:enyo/Control~Control} that require\n\t* keyboard input. This is because when `translateOptimized` is `true`, it is possible to\n\t* position inputs such that they will not become visible when focused.\n\t*\n\t* @type {Boolean}\n\t* @default false\n\t* @public\n\t*/\n\ttranslateOptimized: false,\n\n\t/**\n\t* @private\n\t*/\n\tcomponents: [\n\t\t{name: 'clientContainer', classes: 'enyo-touch-scroller', components: [\n\t\t\t{name: 'client', classes: 'enyo-touch-scroller-client'}\n\t\t]}\n\t],\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\trendered: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tsup.apply(this, arguments);\n\t\t\tdispatcher.makeBubble(this.$.clientContainer, 'scroll');\n\t\t\tif (this.translateOptimized) {\n\t\t\t\tthis.setStartPosition();\n\t\t\t}\n\t\t};\n\t}),\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tsetStartPosition: function() {\n\t\tthis.startX = this.getScrollLeft();\n\t\tthis.startY = this.getScrollTop();\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tgetScrollSize: function () {\n\t\tvar n = this.$.client.hasNode();\n\t\treturn {width: n ? n.scrollWidth : 0, height: n ? n.scrollHeight : 0};\n\t},\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tcreate: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tsup.apply(this, arguments);\n\t\t\t// apply initial transform so we're always composited\n\t\t\tDom.transformValue(this.$.client, this.translation, '0,0,0');\n\t\t};\n\t}),\n\n\t/**\n\t* @private\n\t*/\n\tcalcScrollNode: function () {\n\t\treturn this.$.clientContainer.hasNode();\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tmaxHeightChanged: function () {\n\t\t// content should cover scroller at a minimum if there's no max-height.\n\t\tthis.$.client.applyStyle('min-height', this.maxHeight ? null : '100%');\n\t\tthis.$.client.applyStyle('max-height', this.maxHeight);\n\t\tthis.$.clientContainer.addRemoveClass('enyo-scrollee-fit', !this.maxHeight);\n\t},\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tshouldDrag: kind.inherit(function (sup) {\n\t\treturn function(inEvent) {\n\t\t\t// stop and update drag info before checking drag status\n\t\t\tthis.stop();\n\t\t\tthis.calcStartInfo();\n\t\t\treturn sup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tsyncScrollMath: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tif (!this._translated) {\n\t\t\t\tsup.apply(this, arguments);\n\t\t\t}\n\t\t};\n\t}),\n\n\t/**\n\t* Sets the horizontal scroll position.\n\t*\n\t* @param {Number} left - The horizontal scroll position in pixels.\n\t* @method\n\t* @public\n\t*/\n\tsetScrollLeft: kind.inherit(function (sup) {\n\t\treturn function(inLeft) {\n\t\t\tvar m, p;\n\t\t\tif (this.translateOptimized) {\n\t\t\t\tp = this.scrollLeft;\n\t\t\t\tm = this.$.scrollMath;\n\t\t\t\tthis.stop(true);\n\t\t\t\tm.setScrollX(-inLeft);\n\t\t\t\tm.stabilize();\n\t\t\t\tif (p != -m.x) {\n\t\t\t\t\t// We won't get a native scroll event,\n\t\t\t\t\t// so need to make one ourselves\n\t\t\t\t\tm.doScroll();\n\t\t\t\t\tthis.delayHideThumbs(100);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsup.apply(this, arguments);\n\t\t\t}\n\t\t};\n\t}),\n\n\t/**\n\t* Sets the vertical scroll position.\n\t*\n\t* @param {Number} top - The vertical scroll position in pixels.\n\t* @method\n\t* @public\n\t*/\n\tsetScrollTop: kind.inherit(function (sup) {\n\t\treturn function(inTop) {\n\t\t\tvar m, p;\n\t\t\tif (this.translateOptimized) {\n\t\t\t\tp = this.scrollTop;\n\t\t\t\tm = this.$.scrollMath;\n\t\t\t\tthis.stop(true);\n\t\t\t\tm.setScrollY(-inTop);\n\t\t\t\tm.stabilize();\n\t\t\t\tif (p != -m.y) {\n\t\t\t\t\t// We won't get a native scroll event,\n\t\t\t\t\t// so need to make one ourselves\n\t\t\t\t\tm.doScroll();\n\t\t\t\t\tthis.delayHideThumbs(100);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsup.apply(this, arguments);\n\t\t\t}\n\t\t};\n\t}),\n\n\t/**\n\t* Retrieves the horizontal scroll position.\n\t*\n\t* @returns {Number} The horizontal scroll position in pixels.\n\t* @method\n\t* @public\n\t*/\n\tgetScrollLeft: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\treturn this._translated ? this.scrollLeft: sup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* Retrieves the vertical scroll position.\n\t*\n\t* @returns {Number} The vertical scroll position in pixels.\n\t* @method\n\t* @private\n\t*/\n\tgetScrollTop: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\treturn this._translated ? this.scrollTop : sup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tcalcBoundaries: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tsup.apply(this, arguments);\n\t\t\tif (this.translateOptimized && !this.isScrolling()) this.stabilize();\n\t\t};\n\t}),\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\thandleResize: function() {\n\t\tif (this.translateOptimized) {\n\t\t\tthis.stabilize();\n\t\t}\n\t},\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tscrollMathStart: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tsup.apply(this, arguments);\n\t\t\tif (!this._translated) {\n\t\t\t\tthis.setStartPosition();\n\t\t\t}\n\t\t};\n\t}),\n\n\t/**\n\t* @private\n\t*/\n\tscrollMathScroll: function (sender) {\n\t\tif(!this.overscroll) { //don't overscroll past edges\n\t\t\tthis.scrollLeft = -Math.min(sender.leftBoundary, Math.max(sender.rightBoundary, sender.x));\n\t\t\tthis.scrollTop = -Math.min(sender.topBoundary, Math.max(sender.bottomBoundary, sender.y));\n\t\t} else {\n\t\t\tthis.scrollLeft = -sender.x;\n\t\t\tthis.scrollTop = -sender.y;\n\t\t}\n\t\tthis.effectScroll(this.scrollLeft, this.scrollTop);\n\t\tif (this.thumb) {\n\t\t\tthis.showThumbs();\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tscrollMathStabilize: kind.inherit(function (sup) {\n\t\treturn function (sender) {\n\t\t\tif (this._translated) {\n\t\t\t\tthis.scrollLeft = -sender.x;\n\t\t\t\tthis.scrollTop = -sender.y;\n\t\t\t\tthis.effectScroll(-sender.x, -sender.y);\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn sup.apply(this, arguments);\n\t\t\t}\n\t\t};\n\t}),\n\n\t/**\n\t* While moving, scroller uses translate.\n\t*\n\t* @private\n\t*/\n\teffectScroll: kind.inherit(function (sup) {\n\t\treturn function (x, y) {\n\t\t\tvar o;\n\t\t\tif (this.translateOptimized || this.isScrolling()) {\n\t\t\t\tx = this.startX - x;\n\t\t\t\ty = this.startY - y;\n\t\t\t\to = x + 'px, ' + y + 'px' + (this.accel ? ',0' : '');\n\t\t\t\tDom.transformValue(this.$.client, this.translation, o);\n\t\t\t\tthis._translated = true;\n\t\t\t} else {\n\t\t\t\tsup.apply(this, arguments);\n\t\t\t}\n\t\t};\n\t}),\n\n\t/**\n\t* When stopped, we use `scrollLeft/scrollTop` (makes cursor positioning automagic).\n\t*\n\t* @private\n\t*/\n\teffectScrollStop: function () {\n\t\tif (!this.translateOptimized) {\n\t\t\tvar t = '0,0' + (this.accel ? ',0' : '');\n\t\t\t// FIXME: normally translate3d changes not effect scrollHeight; however\n\t\t\t// there appear to be some dom changes (e.g. showing a node inside the scroller,\n\t\t\t// which do cause the scrollHeight to be changed from the translate3d.\n\t\t\t// In this case setting the translate3d back to 0 does not restore scrollHeight.\n\t\t\t// This causes a problem because setting scrollTop can produced an unexpected result if\n\t\t\t// scrollHeight is less than expected.\n\t\t\t// We detect this fault by validating scroll bounds and (1) un-apply the translate3d,\n\t\t\t// (2) update scrollTop/Left, and (3) re-apply a 0,0,0 translate3d to ensure compositing.\n\t\t\t// Luckily this corrects the problem (which appears to be a webkit bug). Note that\n\t\t\t// it's important to maintain a composited state (translate3d 0,0,0) or Android 4 is\n\t\t\t// slow to start scrolling.\n\t\t\tvar m = this.$.scrollMath, sb = this._getScrollBounds();\n\t\t\tvar needsBoundsFix = Boolean((sb.maxTop + m.bottomBoundary) || (sb.maxLeft + m.rightBoundary));\n\t\t\tDom.transformValue(this.$.client, this.translation, needsBoundsFix ? null : t);\n\t\t\t// note: this asynchronously triggers dom scroll event\n\t\t\tthis.setScrollLeft(this.scrollLeft);\n\t\t\tthis.setScrollTop(this.scrollTop);\n\t\t\tif (needsBoundsFix) {\n\t\t\t\tDom.transformValue(this.$.client, this.translation, t);\n\t\t\t}\n\t\t\tthis._translated = false;\n\t\t}\n\t},\n\n\t/**\n\t* FIXME: we can fix scrolling artifacts BUGS on Android 4.04 with this heinous incantation.\n\t*\n\t* @private\n\t*/\n\ttwiddle: function () {\n\t\tif (this.translateOptimized && this.scrollNode) { // this.scrollNode is not always defined and makes Motorola XOOM crash\n\t\t\tthis.scrollNode.scrollTop = 1;\n\t\t\tthis.scrollNode.scrollTop = 0;\n\t\t}\n\t}\n});\n",
    "mtime": 1434758950000,
    "relPath": "enyo/TranslateScrollStrategy",
    "requires": [
      "enyo",
      "./kind",
      "./dispatcher",
      "./TouchScrollStrategy",
      "./dom"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "enyo/Button",
    "base": "/Users/jason/Git/bootplate/lib/onyx/lib/Button",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/Button",
    "name": "enyo/Button",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/Button",
    "isPackage": true,
    "packageFile": "/Users/jason/Git/bootplate/lib/enyo/lib/Button/package.json",
    "mtime": {
      "/Users/jason/Git/bootplate/lib/enyo/lib/Button/package.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo/lib/Button/Button.js": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo/lib/Button/Button.css": 1434758950000
    },
    "json": {
      "main": "Button.js",
      "styles": [
        "Button.css"
      ]
    },
    "main": "/Users/jason/Git/bootplate/lib/enyo/lib/Button/Button.js",
    "contents": "require('enyo');\n\n/**\n* Contains the declaration for the {@link module:enyo/Button~Button} kind.\n* @module enyo/Button\n*/\n\nvar\n\tkind = require('../kind'),\n\toptions = require('../options');\nvar\n\tToolDecorator = require('../ToolDecorator'),\n\tButtonAccessibilitySupport = require('./ButtonAccessibilitySupport');\n\n/**\n* {@link module:enyo/Button~Button} implements an HTML [button]{@glossary button}, with support\n* for grouping using {@link module:enyo/Group~Group}.\n*\n* For more information, see the documentation on\n* [Buttons]{@linkplain $dev-guide/building-apps/controls/buttons.html} in the\n* Enyo Developer Guide.\n*\n* @class Button\n* @extends module:enyo/ToolDecorator~ToolDecorator\n* @ui\n* @public\n*/\nmodule.exports = kind(\n\t/** @lends module:enyo/Button~Button.prototype */ {\n\n\t/**\n\t* @private\n\t*/\n\tname: 'enyo.Button',\n\t\n\t/**\n\t* @private\n\t*/\n\tkind: ToolDecorator,\n\n\t/**\n\t* @private\n\t*/\n\tmixins: options.accessibility ? [ButtonAccessibilitySupport] : null,\n\n\t/**\n\t* @private\n\t*/\n\ttag: 'button',\n\n\t/**\n\t* @private\n\t*/\n\tattributes: {\n\t\t/**\n\t\t * Set to `'button'`; otherwise, the default value would be `'submit'`, which\n\t\t * can cause unexpected problems when [controls]{@link module:enyo/Control~Control} are used\n\t\t * inside of a [form]{@glossary form}.\n\t\t * \n\t\t * @type {String}\n\t\t * @private\n\t\t */\n\t\ttype: 'button'\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tpublished: \n\t\t/** @lends module:enyo/Button~Button.prototype */ {\n\t\t\n\t\t/**\n\t\t * When `true`, the [button]{@glossary button} is shown as disabled and does not \n\t\t * generate tap [events]{@glossary event}.\n\t\t * \n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t * @public\n\t\t */\n\t\tdisabled: false\n\t},\n\t\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tcreate: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tsup.apply(this, arguments);\n\t\t\tthis.disabledChanged();\n\t\t};\n\t}),\n\n\t/**\n\t* @private\n\t*/\n\tdisabledChanged: function () {\n\t\tthis.setAttribute('disabled', this.disabled);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\ttap: function () {\n\t\tif (this.disabled) {\n\t\t\t// work around for platforms like Chrome on Android or Opera that send\n\t\t\t// mouseup to disabled form controls\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthis.setActive(true);\n\t\t}\n\t}\n});\n",
    "relPath": "enyo/Button",
    "requires": [
      "enyo",
      "../kind",
      "../options",
      "../ToolDecorator",
      "./ButtonAccessibilitySupport"
    ],
    "requests": [],
    "resolved": true,
    "styleEntries": [
      {
        "glob": "Button.css",
        "files": [
          "/Users/jason/Git/bootplate/lib/enyo/lib/Button/Button.css"
        ],
        "sources": {
          "/Users/jason/Git/bootplate/lib/enyo/lib/Button/Button.css": "/* reset */\n\nbutton {\n\tfont-size: inherit;\n\tfont-family: inherit;\n}\nbutton::-moz-focus-inner {\n    border: 0;\n    padding: 0;\n}"
        },
        "source": "/* reset */\n\nbutton {\n\tfont-size: inherit;\n\tfont-family: inherit;\n}\nbutton::-moz-focus-inner {\n    border: 0;\n    padding: 0;\n}"
      }
    ]
  },
  {
    "path": "../TouchScrollStrategy",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib/Scroller",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/TouchScrollStrategy",
    "name": "enyo/TouchScrollStrategy",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/TouchScrollStrategy.js",
    "contents": "require('enyo');\n\n/**\n* Contains the declaration for the {@link module:enyo/TouchScrollStrategy~TouchScrollStrategy} kind.\n* @module enyo/TouchScrollStrategy\n*/\n\nvar\n\tkind = require('./kind'),\n\tutils = require('./utils'),\n\tdispatcher = require('./dispatcher'),\n\tplatform = require('./platform');\n\nvar\n\tScrollMath = require('./ScrollMath'),\n\tScrollStrategy = require('./ScrollStrategy'),\n\tScrollThumb = require('./ScrollThumb'),\n\tDom = require('./dom');\n\n/**\n* Fires when dragging has started, allowing drags to propagate to parent\n* [scrollers]{@link module:enyo/Scroller~Scroller}.\n*\n* @event module:enyo/TouchScrollStrategy~TouchScrollStrategy#onShouldDrag\n* @type {Object}\n* @property {Object} sender - The [component]{@link module:enyo/Component~Component} that most recently\n*\tpropagated the {@glossary event}.\n* @property {module:enyo/Scroller~ScrollEvent} event - An [object]{@glossary Object} containing\n*\tevent information.\n* @private\n*/\n\n/**\n* {@link module:enyo/TouchScrollStrategy~TouchScrollStrategy} is a helper [kind]{@glossary kind} for implementing a\n* touch-based [scroller]{@link module:enyo/Scroller~Scroller}. It integrates the scrolling simulation provided\n* by {@link module:enyo/ScrollMath~ScrollMath} into an `enyo.Scroller`.\n*\n* `enyo.TouchScrollStrategy` is not typically created in application code. Instead, it is\n* specified as the value of the [strategyKind]{@link module:enyo/Scroller~Scroller#strategyKind} property\n* of an `enyo.Scroller` or {@link module:layout/List#List}, or is used by the framework implicitly.\n*\n* @class TouchScrollStrategy\n* @extends module:enyo/ScrollStrategy~ScrollStrategy\n* @protected\n*/\nmodule.exports = kind(\n\t/** @lends module:enyo/TouchScrollStrategy~TouchScrollStrategy.prototype */ {\n\n\tname: 'enyo.TouchScrollStrategy',\n\n\t/**\n\t* @private\n\t*/\n\tkind: ScrollStrategy,\n\n\t/**\n\t\tIf `true` (the default), the scroller will overscroll and bounce back at the edges.\n\t*/\n\toverscroll: true,\n\n\t/**\n\t\tIf `true` (the default), the scroller will not propagate `dragstart`\n\t\tevents that cause it to start scrolling.\n\t*/\n\tpreventDragPropagation: true,\n\n\t/**\n\t* @private\n\t*/\n\tpublished:\n\t\t/** @lends module:enyo/TouchScrollStrategy~TouchScrollStrategy.prototype */ {\n\n\t\t/**\n\t\t* Specifies how to vertically scroll.  Acceptable values are `'scroll'`, `'auto'`,\n\t\t* `'hidden'`, and `'default'`. The precise effect of the setting is determined by the\n\t\t* scroll strategy.\n\t\t*\n\t\t* @type {String}\n\t\t* @default 'default'\n\t\t* @public\n\t\t*/\n\t\tvertical: 'default',\n\n\t\t/**\n\t\t* Specifies how to horizontally scroll.  Acceptable values are `'scroll'`, `'auto'`,\n\t\t* `'hidden'`, and `'default'`. The precise effect of the setting is determined by the\n\t\t* scroll strategy.\n\t\t*\n\t\t* @type {String}\n\t\t* @default 'default'\n\t\t* @public\n\t\t*/\n\t\thorizontal: 'default',\n\n\t\t/**\n\t\t* Set to `true` to display a scroll thumb.\n\t\t*\n\t\t* @type {Boolean}\n\t\t* @default true\n\t\t* @public\n\t\t*/\n\t\tthumb: true,\n\n\t\t/**\n\t\t* Set to `true` to display a transparent overlay while scrolling. This can help improve\n\t\t* performance of complex, large scroll regions on some platforms (e.g., Android).\n\t\t*\n\t\t* @type {Boolean}\n\t\t* @default false\n\t\t* @public\n\t\t*/\n\t\tscrim: false,\n\n\t\t/**\n\t\t* Indicates whether to allow drag [events]{@glossary event} to be sent while gesture\n\t\t* events are happening simultaneously.\n\t\t*\n\t\t* @type {Boolean}\n\t\t* @default true\n\t\t* @public\n\t\t*/\n\t\tdragDuringGesture: true,\n\n\t\t/**\n\t\t* Facades animation time step from [ScrollMath]{@link module:enyo/ScrollMath~ScrollMath}.\n\t\t*\n\t\t* @type {Number}\n\t\t* @default 20\n\t\t* @public\n\t\t*/\n\t\tinterval: 20,\n\n\t\t/**\n\t\t* Facades animation interval type from [ScrollMath]{@link module:enyo/ScrollMath~ScrollMath}.\n\t\t*\n\t\t* @type {Boolean}\n\t\t* @default true\n\t\t* @public\n\t\t*/\n\t\tfixedTime: true,\n\n\t\t/**\n\t\t* Facades one unit of time for simulation from [ScrollMath]{@link module:enyo/ScrollMath~ScrollMath}.\n\t\t*\n\t\t* @type {Number}\n\t\t* @default 10\n\t\t* @public\n\t\t*/\n\t\tframe: 10,\n\n\t\t/**\n\t\t* Indicates whether default [events]{@glossary event} (e.g., native scrolling\n\t\t* events) should be suppressed.\n\t\t*\n\t\t* @type {Boolean}\n\t\t* @default true\n\t\t* @public\n\t\t*/\n\t\tpreventDefault: true\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tevents: {\n\t\tonShouldDrag: ''\n\t},\n\n\t/**\n\t* @private\n\t*/\n\thandlers: {\n\t\tonflick: 'flick',\n\t\tonShouldDrag: 'shouldDrag',\n\t\tondrag: 'drag'\n\t},\n\n\t/**\n\t* @private\n\t*/\n\ttools: [\n\t\t{kind: ScrollMath, onScrollStart: 'scrollMathStart', onScroll: 'scrollMathScroll', onScrollStop: 'scrollMathStop', onStabilize: 'scrollMathStabilize'},\n\t\t{name: 'vthumb', kind: ScrollThumb, axis: 'v', showing: false},\n\t\t{name: 'hthumb', kind: ScrollThumb, axis: 'h', showing: false}\n\t],\n\n\t/**\n\t* @private\n\t*/\n\tscrimTools: [{name: 'scrim', classes: 'enyo-fit', style: 'z-index: 1;', showing: false}],\n\n\t/**\n\t* @private\n\t*/\n\tcomponents: [\n\t\t{name: 'client', classes: 'enyo-touch-scroller enyo-touch-scroller-client'}\n\t],\n\n\t/**\n\t* Flag indicating whether the list is currently reordering.\n\t*\n\t* @readonly\n\t* @public\n\t*/\n\tlistReordering: false,\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tcreate: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tsup.apply(this, arguments);\n\t\t\tthis.transform = Dom.canTransform();\n\t\t\tif(!this.transform) {\n\t\t\t\tif(this.overscroll) {\n\t\t\t\t\t//so we can adjust top/left if browser can't handle translations\n\t\t\t\t\tthis.$.client.applyStyle('position', 'relative');\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.accel = Dom.canAccelerate();\n\t\t\tvar containerClasses = 'enyo-touch-strategy-container';\n\t\t\t// note: needed for ios to avoid incorrect clipping of thumb\n\t\t\t// and need to avoid on Android as it causes problems hiding the thumb\n\t\t\tif (platform.ios && this.accel) {\n\t\t\t\tcontainerClasses += ' enyo-composite';\n\t\t\t}\n\t\t\tthis.scrimChanged();\n\t\t\tthis.intervalChanged();\n\t\t\tthis.fixedTimeChanged();\n\t\t\tthis.frameChanged();\n\t\t\tthis.container.addClass(containerClasses);\n\t\t\tthis.translation = this.accel ? 'translate3d' : 'translate';\n\t\t};\n\t}),\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tinitComponents: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tthis.createChrome(this.tools);\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tdestroy: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tthis.container.removeClass('enyo-touch-strategy-container');\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\trendered: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tsup.apply(this, arguments);\n\t\t\tdispatcher.makeBubble(this.$.client, 'scroll');\n\t\t\tthis.calcBoundaries();\n\t\t\tthis.syncScrollMath();\n\t\t\tif (this.thumb) {\n\t\t\t\tthis.alertThumbs();\n\t\t\t}\n\t\t};\n\t}),\n\n\t/**\n\t* @private\n\t*/\n\tscrimChanged: function () {\n\t\tif (this.scrim && !this.$.scrim) {\n\t\t\tthis.makeScrim();\n\t\t}\n\t\tif (!this.scrim && this.$.scrim) {\n\t\t\tthis.$.scrim.destroy();\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tmakeScrim: function () {\n\t\t// reset control parent so scrim doesn't go into client.\n\t\tvar cp = this.controlParent;\n\t\tthis.controlParent = null;\n\t\tthis.createChrome(this.scrimTools);\n\t\tthis.controlParent = cp;\n\t\tvar cn = this.container.hasNode();\n\t\t// render scrim in container, strategy has no dom.\n\t\tif (cn) {\n\t\t\tthis.$.scrim.parentNode = cn;\n\t\t\tthis.$.scrim.render();\n\t\t}\n\t},\n\n\t/**\n\t* Determines whether or not the scroller is actively moving.\n\t*\n\t* @return {Boolean} `true` if actively moving; otherwise, `false`.\n\t* @public\n\t*/\n\tisScrolling: function () {\n\t\tvar m = this.$.scrollMath;\n\t\treturn m ? m.isScrolling() : this.scrolling;\n\t},\n\n\t/**\n\t* Determines whether or not the scroller is in overscroll.\n\t*\n\t* @return {Boolean} `true` if in overscroll; otherwise, `false`.\n\t* @public\n\t*/\n\tisOverscrolling: function () {\n\t\tvar m = this.$.scrollMath || this;\n\t\treturn (this.overscroll) ? Boolean(m.isInOverScroll()) : false;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tdomScroll: function () {\n\t\tif (!this.isScrolling()) {\n\t\t\tthis.calcBoundaries();\n\t\t\tthis.syncScrollMath();\n\t\t\tif (this.thumb) {\n\t\t\t\tthis.alertThumbs();\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\thorizontalChanged: function () {\n\t\tthis.$.scrollMath.horizontal = (this.horizontal != 'hidden');\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tverticalChanged: function () {\n\t\tthis.$.scrollMath.vertical = (this.vertical != 'hidden');\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tmaxHeightChanged: function () {\n\t\tthis.$.client.applyStyle('max-height', this.maxHeight);\n\t\t// note: previously used enyo-fit here but IE would reset scroll position when the scroll thumb\n\t\t// was hidden; in general IE resets scrollTop when there are 2 abs position siblings, one has\n\t\t// scrollTop and the other is hidden.\n\t\tthis.$.client.addRemoveClass('enyo-scrollee-fit', !this.maxHeight);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tthumbChanged: function () {\n\t\tthis.hideThumbs();\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tintervalChanged: function () {\n\t\tif (this.$.scrollMath) {\n\t\t\tthis.$.scrollMath.interval = this.interval;\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tfixedTimeChanged: function () {\n\t\tif (this.$.scrollMath) {\n\t\t\tthis.$.scrollMath.fixedTime = this.fixedTime;\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tframeChanged: function () {\n\t\tif (this.$.scrollMath) {\n\t\t\tthis.$.scrollMath.frame = this.frame;\n\t\t}\n\t},\n\n\t/**\n\t* Stops any active scroll movement.\n\t*\n\t* @todo Doc update made while merging, need official documentation update!\n\t*\n\t* @param {Boolean} emit - Whether or not to fire the `onScrollStop` event.\n\t* @public\n\t*/\n\tstop: function (emit) {\n\t\tif (this.isScrolling()) {\n\t\t\tthis.$.scrollMath.stop(emit);\n\t\t}\n\t},\n\n\t/**\n\t* Adjusts the scroll position to be valid, if necessary (e.g., after the scroll contents\n\t* have changed).\n\t*\n\t* @public\n\t*/\n\tstabilize: function () {\n\t\tif(this.$.scrollMath) {\n\t\t\tthis.$.scrollMath.stabilize();\n\t\t}\n\t},\n\n\t/**\n\t* Scrolls to a specific position within the scroll area.\n\t*\n\t* @param {Number} x - The `x` position in pixels.\n\t* @param {Number} y - The `y` position in pixels.\n\t* @public\n\t*/\n\tscrollTo: function (x, y) {\n\t\tthis.stop(true);\n\t\tthis.$.scrollMath.scrollTo(x, y || y === 0 ? y : null);\n\t},\n\n\t/**\n\t* Scrolls the given [control]{@link module:enyo/Control~Control} into view.\n\t*\n\t* @param {module:enyo/Control~Control} ctl - The [control]{@link module:enyo/Control~Control} to make visible in the\n\t*\t[scroller's]{@link module:enyo/Scroller~Scroller} viewport.\n\t* @param {Boolean} alignWithTop - If `true`, the node is aligned with the top of the\n\t*\tscroller.\n\t* @method\n\t* @public\n\t*/\n\tscrollIntoView: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tthis.stop(true);\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* Sets the horizontal scroll position.\n\t*\n\t* @param {Number} left - The horizontal scroll position in pixels.\n\t* @method\n\t* @public\n\t*/\n\tsetScrollLeft: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tthis.stop(true);\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* Sets the vertical scroll position.\n\t*\n\t* @param {Number} top - The vertical scroll position in pixels.\n\t* @method\n\t* @public\n\t*/\n\tsetScrollTop: kind.inherit(function (sup) {\n\t\treturn function(top) {\n\t\t\tthis.stop(true);\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* Retrieves the horizontal scroll position.\n\t*\n\t* @returns {Number} The horizontal scroll position in pixels.\n\t* @method\n\t* @public\n\t*/\n\tgetScrollLeft: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\treturn this.isScrolling() ? this.scrollLeft : sup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* Retrieves the vertical scroll position.\n\t*\n\t* @returns {Number} The vertical scroll position in pixels.\n\t* @method\n\t* @private\n\t*/\n\tgetScrollTop: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\treturn this.isScrolling() ? this.scrollTop : sup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* @private\n\t*/\n\tcalcScrollNode: function () {\n\t\treturn this.$.client.hasNode();\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tcalcAutoScrolling: function () {\n\t\tvar v = (this.vertical == 'auto');\n\t\tvar h = (this.horizontal == 'auto') || (this.horizontal == 'default');\n\t\tif ((v || h) && this.scrollNode) {\n\t\t\tvar b = this.getScrollBounds();\n\t\t\tif (v) {\n\t\t\t\tthis.$.scrollMath.vertical = b.height > b.clientHeight;\n\t\t\t}\n\t\t\tif (h) {\n\t\t\t\tthis.$.scrollMath.horizontal = b.width > b.clientWidth;\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tshouldDrag: function (sender, e) {\n\t\tthis.calcAutoScrolling();\n\t\tvar requestV = e.vertical;\n\t\tvar canH = this.$.scrollMath.horizontal && !requestV;\n\t\tvar canV = this.$.scrollMath.vertical && requestV;\n\t\tvar down = e.dy < 0, right = e.dx < 0;\n\t\tvar oobV = (!down && this.startEdges.top || down && this.startEdges.bottom);\n\t\tvar oobH = (!right && this.startEdges.left || right && this.startEdges.right);\n\t\t// we would scroll if not at a boundary\n\t\tif (!e.boundaryDragger && (canH || canV)) {\n\t\t\te.boundaryDragger = this;\n\t\t}\n\t\t// include boundary exclusion\n\t\tif ((!oobV && canV) || (!oobH && canH)) {\n\t\t\te.dragger = this;\n\t\t\treturn true;\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tflick: function (sender, e) {\n\t\tvar onAxis = Math.abs(e.xVelocity) > Math.abs(e.yVelocity) ? this.$.scrollMath.horizontal : this.$.scrollMath.vertical;\n\t\tif (onAxis && this.dragging) {\n\t\t\tthis.$.scrollMath.flick(e);\n\t\t\treturn this.preventDragPropagation;\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tdown: kind.inherit(function (sup) {\n\t\treturn function (sender, e) {\n\t\t\tif (!this.isOverscrolling()) {\n\t\t\t\tsup.apply(this, arguments);\n\t\t\t}\n\t\t};\n\t}),\n\n\t/**\n\t* @private\n\t*/\n\tmove: function (sender, e) {\n\t},\n\n\t// Special synthetic DOM events served up by the Gesture system\n\n\t/**\n\t* @fires module:enyo/TouchScrollStrategy~TouchScrollStrategy#onShouldDrag\n\t* @private\n\t*/\n\tdragstart: function (sender, e) {\n\t\t// Ignore drags sent from multi-touch events\n\t\tif(!this.dragDuringGesture && e.srcEvent.touches && e.srcEvent.touches.length > 1) {\n\t\t\treturn true;\n\t\t}\n\t\t// note: allow drags to propagate to parent scrollers via data returned in the shouldDrag event.\n\t\tthis.doShouldDrag(e);\n\t\tthis.dragging = (e.dragger == this || (!e.dragger && e.boundaryDragger == this));\n\t\tif (this.dragging) {\n\t\t\tif(this.preventDefault){\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t\t// note: needed because show/hide changes\n\t\t\t// the position so sync'ing is required when\n\t\t\t// dragging begins (needed because show/hide does not trigger onscroll)\n\t\t\tthis.syncScrollMath();\n\t\t\tthis.$.scrollMath.startDrag(e);\n\t\t\tif (this.preventDragPropagation) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tdrag: function (sender, e) {\n\t\t// if the list is doing a reorder, don't scroll\n\t\tif(this.listReordering) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.dragging) {\n\t\t\tif(this.preventDefault){\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t\tthis.$.scrollMath.drag(e);\n\t\t\tif (this.scrim) {\n\t\t\t\tthis.$.scrim.show();\n\t\t\t}\n\t\t}\n\t},\n\tdragfinish: function (sender, e) {\n\t\tif (this.dragging) {\n\t\t\te.preventTap();\n\t\t\tthis.$.scrollMath.dragFinish();\n\t\t\tthis.dragging = false;\n\t\t\tif (this.scrim) {\n\t\t\t\tthis.$.scrim.hide();\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tmousewheel: function (sender, e) {\n\t\tif (!this.dragging && this.useMouseWheel) {\n\t\t\tthis.calcBoundaries();\n\t\t\tthis.syncScrollMath();\n\t\t\tthis.stabilize();\n\t\t\tif (this.$.scrollMath.mousewheel(e)) {\n\t\t\t\te.preventDefault();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tscrollMathStart: function () {\n\t\tif (this.scrollNode && !this.isScrolling()) {\n\t\t\tthis.scrolling = true;\n\t\t\tif (!this.isOverscrolling()) {\n\t\t\t\tthis.calcBoundaries();\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tscrollMathScroll: function (sender) {\n\t\tif(!this.overscroll) {\n\t\t\t//don't overscroll past edges\n\t\t\tthis.effectScroll(-Math.min(sender.leftBoundary, Math.max(sender.rightBoundary, sender.x)),\n\t\t\t\t\t-Math.min(sender.topBoundary, Math.max(sender.bottomBoundary, sender.y)));\n\t\t} else {\n\t\t\tthis.effectScroll(-sender.x, -sender.y);\n\t\t}\n\t\tif (this.thumb) {\n\t\t\tthis.showThumbs();\n\t\t\tthis.delayHideThumbs(100);\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tscrollMathStop: function () {\n\t\tthis.scrolling = false;\n\t\tthis.effectScrollStop();\n\t\tif (this.thumb) {\n\t\t\tthis.delayHideThumbs(100);\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tscrollMathStabilize: function (sender) {\n\t\tthis.effectScroll(-sender.x, -sender.y);\n\t\tif (this.thumb) {\n\t\t\tthis.showThumbs();\n\t\t\tthis.delayHideThumbs(100);\n\t\t}\n\t\treturn true;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tcalcBoundaries: function () {\n\t\tvar s = this.$.scrollMath || this, b = this._getScrollBounds();\n\t\ts.bottomBoundary = b.clientHeight - b.height;\n\t\ts.rightBoundary = b.clientWidth - b.width;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tsyncScrollMath: function () {\n\t\tvar m = this.$.scrollMath;\n\t\tif(m) {\n\t\t\tm.setScrollX(-this.getScrollLeft());\n\t\t\tm.setScrollY(-this.getScrollTop());\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\teffectScroll: function (x, y) {\n\t\tif (this.scrollNode) {\n\t\t\tthis.scrollLeft = this.scrollNode.scrollLeft = x;\n\t\t\tthis.scrollTop = this.scrollNode.scrollTop = y;\n\t\t\tthis.effectOverscroll(x !== null? Math.round(x): x, y !== null? Math.round(y): y);\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\teffectScrollStop: function () {\n\t\tthis.effectOverscroll(null, null);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\teffectOverscroll: function (x, y) {\n\t\tvar n = this.scrollNode;\n\t\tvar xt = '0', yt = '0', zt = this.accel ? ',0' : '';\n\t\tif (y !== null && Math.abs(y - n.scrollTop) > 1) {\n\t\t\tyt = (n.scrollTop - y);\n\t\t}\n\t\tif (x !== null && Math.abs(x - n.scrollLeft) > 1) {\n\t\t\txt = (n.scrollLeft - x);\n\t\t}\n\t\tif(!this.transform) {\n\t\t\t//adjust top/left if browser can't handle translations\n\t\t\tthis.$.client.setBounds({left:xt + 'px', top:yt + 'px'});\n\t\t} else {\n\t\t\tDom.transformValue(this.$.client, this.translation, xt + 'px, ' + yt + 'px' + zt);\n\t\t}\n\t},\n\n\t/**\n\t* Retrieves the overscroll boundaries of the [scroller]{@link module:enyo/Scroller~Scroller}.\n\t*\n\t* @returns {module:enyo/Scroller~OverscrollBoundaryObject} An [object]{@glossary Object}\n\t*\tdescribing the overscroll boundaries.\n\t* @public\n\t*/\n\tgetOverScrollBounds: function () {\n\t\tvar m = this.$.scrollMath || this;\n\t\treturn {\n\t\t\toverleft: Math.min(m.leftBoundary - m.x, 0) || Math.max(m.rightBoundary - m.x, 0),\n\t\t\tovertop: Math.min(m.topBoundary - m.y, 0) || Math.max(m.bottomBoundary - m.y, 0)\n\t\t};\n\t},\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\t_getScrollBounds: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tvar r = sup.apply(this, arguments);\n\t\t\tutils.mixin(r, this.getOverScrollBounds());\n\t\t\treturn r;\n\t\t};\n\t}),\n\n\t/**\n\t* Retrieves the scroll boundaries of the [scroller]{@link module:enyo/Scroller~Scroller}.\n\t*\n\t* @returns {module:enyo/Scroller~BoundaryObject} An [object]{@glossary Object} describing the\n\t*\tscroll boundaries.\n\t* @method\n\t* @public\n\t*/\n\tgetScrollBounds: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tthis.stop(true);\n\t\t\treturn sup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* This method exists primarily to support an internal use case for\n\t* [enyo.DataList]{@link module:enyo/DataList~DataList}. It is intended to be called by the\n\t* [scroller]{@link module:enyo/Scroller~Scroller} that owns this strategy.\n\t*\n\t* Triggers a remeasurement of the scroller's metrics (specifically, the\n\t* size of its viewport, the size of its contents and the difference between\n\t* the two, which determines the extent to which the scroller may scroll).\n\t*\n\t* @public\n\t*/\n\tremeasure: function () {\n\t\tthis.calcBoundaries();\n\t\tif (this.thumb) {\n\t\t\tthis.syncThumbs();\n\t\t}\n\t\tthis.stabilize();\n\t},\n\n\t/**\n\t* Displays the scroll indicators and sets the auto-hide timeout.\n\t*\n\t* @public\n\t*/\n\talertThumbs: function () {\n\t\tthis.showThumbs();\n\t\tthis.delayHideThumbs(500);\n\t},\n\n\t/**\n\t* Syncs the vertical and horizontal scroll indicators.\n\t*\n\t* @public\n\t*/\n\tsyncThumbs: function () {\n\t\tthis.$.vthumb.sync(this);\n\t\tthis.$.hthumb.sync(this);\n\t},\n\tupdateThumbs: function () {\n\t\tthis.$.vthumb.update(this);\n\t\tthis.$.hthumb.update(this);\n\t},\n\n\t/**\n\t* Syncs and shows both the vertical and horizontal scroll indicators. We only sync after we\n\t* have checked if the vertical and/or horizontal scroll indicators are to be shown, so that\n\t* {@link module:enyo/ScrollThumb~ScrollThumb#update} accurately makes calculations when the indicators are\n\t* visible.\n\t*\n\t* @public\n\t*/\n\tshowThumbs: function () {\n\t\tif (this.horizontal != 'hidden') {\n\t\t\tthis.$.hthumb.show();\n\t\t}\n\t\tif (this.vertical != 'hidden') {\n\t\t\tthis.$.vthumb.show();\n\t\t}\n\t\tthis.syncThumbs();\n\t},\n\n\t/**\n\t* Hides the vertical and horizontal scroll indicators.\n\t*\n\t* @public\n\t*/\n\thideThumbs: function () {\n\t\tthis.$.vthumb.hide();\n\t\tthis.$.hthumb.hide();\n\t},\n\n\t/**\n\t* Hides the vertical and horizontal scroll indicators asynchronously.\n\t*\n\t* @public\n\t*/\n\tdelayHideThumbs: function (delay) {\n\t\tthis.$.vthumb.delayHide(delay);\n\t\tthis.$.hthumb.delayHide(delay);\n\t}\n});\n",
    "mtime": 1434758950000,
    "relPath": "enyo/TouchScrollStrategy",
    "requires": [
      "enyo",
      "./kind",
      "./utils",
      "./dispatcher",
      "./platform",
      "./ScrollMath",
      "./ScrollStrategy",
      "./ScrollThumb",
      "./dom"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "../ToolDecorator",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib/Button",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/ToolDecorator",
    "name": "enyo/ToolDecorator",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/ToolDecorator",
    "isPackage": true,
    "packageFile": "/Users/jason/Git/bootplate/lib/enyo/lib/ToolDecorator/package.json",
    "mtime": {
      "/Users/jason/Git/bootplate/lib/enyo/lib/ToolDecorator/package.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo/lib/ToolDecorator/ToolDecorator.js": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo/lib/ToolDecorator/ToolDecorator.css": 1434758950000
    },
    "json": {
      "main": "ToolDecorator.js",
      "styles": [
        "ToolDecorator.css"
      ]
    },
    "main": "/Users/jason/Git/bootplate/lib/enyo/lib/ToolDecorator/ToolDecorator.js",
    "contents": "require('enyo');\n\n/**\n* Contains the declaration for the {@link module:enyo/ToolDecorator~ToolDecorator} kind.\n* @module enyo/ToolDecorator\n*/\n\n\n\nvar\n\tkind = require('../kind');\nvar\n\tGroupItem = require('../GroupItem');\n\n/**\n* {@link module:enyo/ToolDecorator~ToolDecorator} lines up [components]{@link module:enyo/Component~Component} in a row,\n* centered vertically.\n*\n* @class ToolDecorator\n* @extends module:enyo/GroupItem~GroupItem\n* @ui\n* @public\n*/\nmodule.exports = kind(\n\t/** @lends module:enyo/ToolDecorator~ToolDecorator.prototype */ {\n\n\t/**\n\t* @private\n\t*/\n\tname: 'enyo.ToolDecorator',\n\n\t/**\n\t* @private\n\t*/\n\tkind: GroupItem,\n\n\t/**\n\t* @private\n\t*/\n\tclasses: 'enyo-tool-decorator'\n});\n",
    "relPath": "enyo/ToolDecorator",
    "requires": [
      "enyo",
      "../kind",
      "../GroupItem"
    ],
    "requests": [],
    "resolved": true,
    "styleEntries": [
      {
        "glob": "ToolDecorator.css",
        "files": [
          "/Users/jason/Git/bootplate/lib/enyo/lib/ToolDecorator/ToolDecorator.css"
        ],
        "sources": {
          "/Users/jason/Git/bootplate/lib/enyo/lib/ToolDecorator/ToolDecorator.css": ".enyo-tool-decorator {\n\tdisplay: inline-block;\n}\n\n.enyo-tool-decorator > * {\n\tdisplay: inline-block;\n\tvertical-align: middle;\n}"
        },
        "source": ".enyo-tool-decorator {\n\tdisplay: inline-block;\n}\n\n.enyo-tool-decorator > * {\n\tdisplay: inline-block;\n\tvertical-align: middle;\n}"
      }
    ]
  },
  {
    "path": "../ScrollStrategy",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib/Scroller",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/ScrollStrategy",
    "name": "enyo/ScrollStrategy",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/ScrollStrategy.js",
    "contents": "require('enyo');\n\n/**\n* Contains the declaration for the {@link module:enyo/ScrollStrategy~ScrollStrategy} kind.\n* @module enyo/ScrollStrategy\n*/\n\nvar\n\tkind = require('./kind'),\n\tdispatcher = require('./dispatcher');\n\nvar\n\tControl = require('./Control');\n\n/**\n* {@link module:enyo/ScrollStrategy~ScrollStrategy} is a helper [kind]{@glossary kind} that implements a default \n* scrolling strategy for an {@link module:enyo/Scroller~Scroller}.\n* \n* `enyo.ScrollStrategy` is not typically created in application code. Instead, it is specified \n* as the value of the [strategyKind]{@link module:enyo/Scroller~Scroller#strategyKind} property of an\n* `enyo.Scroller` or {@link module:layout/List#List}, or is used by the framework implicitly.\n*\n* @class ScrollStrategy\n* @protected\n*/\nmodule.exports = kind(\n\t/** @lends module:enyo/ScrollStrategy~ScrollStrategy.prototype */ {\n\n\tname: 'enyo.ScrollStrategy',\n\n\tkind: Control,\n\n\t/**\n\t* @private\n\t*/\n\ttag: null,\n\n\t/**\n\t* @private\n\t*/\n\tpublished: \n\t\t/** @lends module:enyo/ScrollStrategy~ScrollStrategy.prototype */ {\n\t\t\n\t\t/**\n\t\t* Specifies how to vertically scroll.  Acceptable values are `'scroll'`, `'auto'`,\n\t\t* `'hidden'`, and `'default'`. The precise effect of the setting is determined by the\n\t\t* scroll strategy.\n\t\t* \n\t\t* @type {String}\n\t\t* @default 'default'\n\t\t* @public\n\t\t*/\n\t\tvertical: 'default',\n\t\t\n\t\t/**\n\t\t* Specifies how to horizontally scroll.  Acceptable values are `'scroll'`, `'auto'`,\n\t\t* `'hidden'`, and `'default'`. The precise effect of the setting is determined by the\n\t\t* scroll strategy.\n\t\t* \n\t\t* @type {String}\n\t\t* @default 'default'\n\t\t* @public\n\t\t*/\n\t\thorizontal: 'default',\n\t\t\n\t\t/**\n\t\t* The horizontal scroll position.\n\t\t* \n\t\t* @type {Number}\n\t\t* @default 0\n\t\t* @public\n\t\t*/\n\t\tscrollLeft: 0,\n\t\t\n\t\t/**\n\t\t* The vertical scroll position.\n\t\t* \n\t\t* @type {Number}\n\t\t* @default 0\n\t\t* @public\n\t\t*/\n\t\tscrollTop: 0,\n\t\t\n\t\t/**\n\t\t* Maximum height of the scroll content.\n\t\t* \n\t\t* @type {Number}\n\t\t* @default null\n\t\t* @public\n\t\t*/\n\t\tmaxHeight: null,\n\t\t\n\t\t/**\n\t\t* Indicates whether mouse wheel may be used to move the [scroller]{@link module:enyo/Scroller~Scroller}.\n\t\t* \n\t\t* @type {Boolean}\n\t\t* @default true\n\t\t* @public\n\t\t*/\n\t\tuseMouseWheel: true\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tevents: {\n\t\tonScrollStart: '',\n\t\tonScrollStop: ''\n\t},\n\n\t/**\n\t* @private\n\t*/\n\thandlers: {\n\t\tondragstart: 'dragstart',\n\t\tondragfinish: 'dragfinish',\n\t\tondown: 'down',\n\t\tonmove: 'move',\n\t\tonmousewheel: 'mousewheel',\n\t\tonscroll: 'domScroll'\n\t},\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tcreate: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tsup.apply(this, arguments);\n\t\t\tthis.horizontalChanged();\n\t\t\tthis.verticalChanged();\n\t\t\tthis.maxHeightChanged();\n\t\t};\n\t}),\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\trendered: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tsup.apply(this, arguments);\n\t\t\tdispatcher.makeBubble(this.container, 'scroll');\n\t\t\tthis.scrollNode = this.calcScrollNode();\n\t\t};\n\t}),\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tteardownRender: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tsup.apply(this, arguments);\n\t\t\tthis.scrollNode = null;\n\t\t};\n\t}),\n\n\t/**\n\t* @private\n\t*/\n\tcalcScrollNode: function () {\n\t\treturn this.container.hasNode();\n\t},\n\n\t/**\n\t* @private\n\t*/\n\thorizontalChanged: function () {\n\t\tthis.container.applyStyle('overflow-x', this.horizontal == 'default' ? 'auto' : this.horizontal);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tverticalChanged: function () {\n\t\tthis.container.applyStyle('overflow-y', this.vertical == 'default' ? 'auto' : this.vertical);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tmaxHeightChanged: function () {\n\t\tthis.container.applyStyle('max-height', this.maxHeight);\n\t},\n\n\t/** \n\t* Scrolls to the specified position.\n\t*\n\t* @param {Number} x - The `x` position in pixels.\n\t* @param {Number} y - The `y` position in pixels.\n\t* @public\n\t*/\n\tscrollTo: function (x, y) {\n\t\tif (this.scrollNode) {\n\t\t\tthis.setScrollLeft(x);\n\t\t\tthis.setScrollTop(y);\n\t\t}\n\t},\n\n\t/** \n\t* Ensures that the given node is visible in the [scroller's]{@link module:enyo/Scroller~Scroller} viewport.\n\t*\n\t* @param {Node} node - The node to make visible in the [scroller's]{@link module:enyo/Scroller~Scroller}\n\t*\tviewport.\n\t* @param {Boolean} alignWithTop - If `true`, the node is aligned with the top of the\n\t*\tscroller.\n\t* @public\n\t*/\n\tscrollToNode: function (node, alignWithTop) {\n\t\tif (this.scrollNode) {\n\t\t\tvar sb = this.getScrollBounds();\n\t\t\tvar n = node;\n\t\t\tvar b = {height: n.offsetHeight, width: n.offsetWidth, top: 0, left: 0};\n\t\t\twhile (n && n.parentNode && n.id != this.scrollNode.id) {\n\t\t\t\tb.top += n.offsetTop;\n\t\t\t\tb.left += n.offsetLeft;\n\t\t\t\tn = n.parentNode;\n\t\t\t}\n\t\t\t// By default, the element is scrolled to align with the top of the scroll area.\n\t\t\tthis.setScrollTop(Math.min(sb.maxTop, alignWithTop === false ? b.top - sb.clientHeight + b.height : b.top));\n\t\t\tthis.setScrollLeft(Math.min(sb.maxLeft, alignWithTop === false ? b.left - sb.clientWidth + b.width : b.left));\n\t\t}\n\t},\n\n\t/**\n\t* Scrolls the given [control]{@link module:enyo/Control~Control} into view.\n\t*\n\t* @param {module:enyo/Control~Control} ctl - The [control]{@link module:enyo/Control~Control} to make visible in the\n\t*\t[scroller's]{@link module:enyo/Scroller~Scroller} viewport.\n\t* @param {Boolean} alignWithTop - If `true`, the node is aligned with the top of the\n\t*\tscroller.\n\t* @public\n\t*/\n\tscrollIntoView: function (ctl, alignWithTop) {\n\t\tif (ctl.hasNode()) {\n\t\t\tctl.node.scrollIntoView(alignWithTop);\n\t\t}\n\t},\n\tisInView: function(inNode) {\n\t\tvar sb = this.getScrollBounds();\n\t\tvar ot = inNode.offsetTop;\n\t\tvar oh = inNode.offsetHeight;\n\t\tvar ol = inNode.offsetLeft;\n\t\tvar ow = inNode.offsetWidth;\n\t\treturn (ot >= sb.top && ot + oh <= sb.top + sb.clientHeight) && (ol >= sb.left && ol + ow <= sb.left + sb.clientWidth);\n\t},\n\n\t/**\n\t* Sets the vertical scroll position.\n\t*\n\t* @param {Number} top - The vertical scroll position in pixels.\n\t* @public\n\t*/\n\tsetScrollTop: function (top) {\n\t\tthis.scrollTop = top;\n\t\tif (this.scrollNode) {\n\t\t\tthis.scrollNode.scrollTop = this.scrollTop;\n\t\t}\n\t},\n\n\t/**\n\t* Sets the horizontal scroll position.\n\t*\n\t* @param {Number} left - The horizontal scroll position in pixels.\n\t* @public\n\t*/\n\tsetScrollLeft: function (left) {\n\t\tthis.scrollLeft = left;\n\t\tif (this.scrollNode) {\n\t\t\tthis.scrollNode.scrollLeft = this.scrollLeft;\n\t\t}\n\t},\n\n\t/**\n\t* Retrieves the horizontal scroll position.\n\t*\n\t* @returns {Number} The horizontal scroll position in pixels.\n\t* @public\n\t*/\n\tgetScrollLeft: function () {\n\t\treturn this.scrollNode ? this.scrollNode.scrollLeft : this.scrollLeft;\n\t},\n\n\t/**\n\t* Retrieves the vertical scroll position.\n\t*\n\t* @returns {Number} The vertical scroll position in pixels.\n\t* @private\n\t*/\n\tgetScrollTop: function () {\n\t\treturn this.scrollNode ? this.scrollNode.scrollTop : this.scrollTop;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\t_getScrollBounds: function () {\n\t\tvar s = this.getScrollSize(), cn = this.container.hasNode();\n\t\tvar b = {\n\t\t\tleft: this.getScrollLeft(),\n\t\t\ttop: this.getScrollTop(),\n\t\t\tclientHeight: cn ? cn.clientHeight : 0,\n\t\t\tclientWidth: cn ? cn.clientWidth : 0,\n\t\t\theight: s.height,\n\t\t\twidth: s.width\n\t\t};\n\t\tb.maxLeft = Math.max(0, b.width - b.clientWidth);\n\t\tb.maxTop = Math.max(0, b.height - b.clientHeight);\n\t\treturn b;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tgetScrollSize: function () {\n\t\tvar n = this.scrollNode;\n\t\treturn {width: n ? n.scrollWidth : 0, height: n ? n.scrollHeight : 0};\n\t},\n\n\t/**\n\t* Retrieves the scroll boundaries of the [scroller]{@link module:enyo/Scroller~Scroller}.\n\t* \n\t* @returns {module:enyo/Scroller~Scroller~BoundaryObject} An [object]{@glossary Object} describing the\n\t*\tscroll boundaries.\n\t* @public\n\t*/\n\tgetScrollBounds: function () {\n\t\treturn this._getScrollBounds();\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tcalcStartInfo: function () {\n\t\tvar sb = this.getScrollBounds();\n\t\tvar y = this.getScrollTop(), x = this.getScrollLeft();\n\t\tthis.canVertical = sb.maxTop > 0 && this.vertical != 'hidden';\n\t\tthis.canHorizontal = sb.maxLeft > 0 && this.horizontal != 'hidden';\n\t\tthis.startEdges = {\n\t\t\ttop: y === 0,\n\t\t\tbottom: y === sb.maxTop,\n\t\t\tleft: x === 0,\n\t\t\tright: x === sb.maxLeft\n\t\t};\n\t},\n\n\t// NOTE: down, move, and drag handlers are needed only for native touch scrollers\n\n\t/**\n\t* @private\n\t*/\n\tshouldDrag: function (e) {\n\t\tvar requestV = e.vertical;\n\t\treturn (requestV && this.canVertical  || !requestV && this.canHorizontal) /*&& !this.isOobVerticalScroll(event)*/;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tdragstart: function (sender, e) {\n\t\tthis.dragging = this.shouldDrag(e);\n\t\tif (this.dragging) {\n\t\t\treturn this.preventDragPropagation;\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tdragfinish: function (sender, e) {\n\t\tif (this.dragging) {\n\t\t\tthis.dragging = false;\n\t\t\te.preventTap();\n\t\t}\n\t},\n\n\t/**\n\t* Avoid allowing scroll when starting at a vertical boundary to prevent iOS from window \n\t* scrolling.\n\t* \n\t* @private\n\t*/\n\tdown: function (sender, e) {\n\t\tif (this.isScrolling()) {\n\t\t\te.preventTap();\n\t\t}\n\t\tthis.calcStartInfo();\n\t},\n\n\t/**\n\t* NOTE: Mobile native [scrollers]{@link module:enyo/Scroller~Scroller} need `touchmove`. Indicate this by \n\t* setting the `requireTouchmove` property to `true`.\n\t* \n\t* @private\n\t*/\n\tmove: function (sender, e) {\n\t\tif (e.which && (this.canVertical && e.vertical || this.canHorizontal && e.horizontal)) {\n\t\t\te.disablePrevention();\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tmousewheel: function (sender, e) {\n\t\t//* We disable mouse wheel scrolling by preventing the default\n\t\tif (!this.useMouseWheel) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tdomScroll: function(sender, e) {\n\t\tif (!this._scrolling) {\n\t\t\tthis.doScrollStart();\n\t\t}\n\t\tthis._scrolling = true;\n\t\tthis.startJob('stopScrolling', function() {\n\t\t\tthis._scrolling = false;\n\t\t\tthis.doScrollStop();\n\t\t}, 100);\n\t},\n\n\t/**\n\t* @public\n\t*/\n\tisScrolling: function() {\n\t\treturn this._scrolling;\n\t}\n});\n",
    "mtime": 1434758950000,
    "relPath": "enyo/ScrollStrategy",
    "requires": [
      "enyo",
      "./kind",
      "./dispatcher",
      "./Control"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./ScrollThumb",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/ScrollThumb",
    "name": "enyo/ScrollThumb",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/ScrollThumb",
    "isPackage": true,
    "packageFile": "/Users/jason/Git/bootplate/lib/enyo/lib/ScrollThumb/package.json",
    "mtime": {
      "/Users/jason/Git/bootplate/lib/enyo/lib/ScrollThumb/package.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo/lib/ScrollThumb/ScrollThumb.js": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo/lib/ScrollThumb/ScrollThumb.css": 1434758950000
    },
    "json": {
      "main": "ScrollThumb.js",
      "styles": [
        "ScrollThumb.css"
      ]
    },
    "main": "/Users/jason/Git/bootplate/lib/enyo/lib/ScrollThumb/ScrollThumb.js",
    "contents": "require('enyo');\n\n/**\n* Contains the declaration for the {@link module:enyo/ScrollThumb~ScrollThumb} kind.\n* @module enyo/ScrollThumb\n*/\n\nvar\n\tkind = require('../kind');\n\nvar\n\tControl = require('../Control'),\n\tDom = require('../dom');\n\n/**\n* {@link module:enyo/ScrollThumb~ScrollThumb} is a helper [kind]{@glossary kind} used by \n* {@link module:enyo/TouchScrollStrategy~TouchScrollStrategy} and {@link module:enyo/TranslateScrollStrategy~TranslateScrollStrategy} to\n* display a small visual scroll indicator.\n* \n* `enyo.ScrollThumb` is not typically created in application code.\n*\n* @class ScrollThumb\n* @protected\n*/\nmodule.exports = kind(\n\t/** @lends module:enyo/ScrollThumb~ScrollThumb.prototype */ {\n\t\n\tname: 'enyo.ScrollThumb',\n\t\n\tkind: Control,\n\n\t/**\n\t* The orientation of the scroll indicator bar; 'v' for vertical or 'h' for horizontal.\n\t* \n\t* @type {String}\n\t* @default 'v'\n\t* @public\n\t*/\n\taxis: 'v',\n\n\t/**\n\t* Minimum size of the indicator.\n\t* \n\t* @private\n\t*/\n\tminSize: 4,\n\n\t/**\n\t* Size of the indicator's corners.\n\t* \n\t* @private\n\t*/\n\tcornerSize: 6,\n\n\t/**\n\t* @private\n\t*/\n\tclasses: 'enyo-thumb',\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tcreate: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tsup.apply(this, arguments);\n\t\t\tvar v = this.axis == 'v';\n\t\t\tthis.dimension = v ? 'height' : 'width';\n\t\t\tthis.offset = v ? 'top' : 'left';\n\t\t\tthis.translation = v ? 'translateY' : 'translateX';\n\t\t\tthis.positionMethod = v ? 'getScrollTop' : 'getScrollLeft';\n\t\t\tthis.sizeDimension = v ? 'clientHeight' : 'clientWidth';\n\t\t\tthis.addClass('enyo-' + this.axis + 'thumb');\n\t\t\tthis.transform = Dom.canTransform();\n\t\t\tif (Dom.canAccelerate()) {\n\t\t\t\tDom.transformValue(this, 'translateZ', 0);\n\t\t\t}\n\t\t};\n\t}),\n\n\t/** \n\t* Syncs the scroll indicator bar to the [scroller]{@link module:enyo/Scroller~Scroller} size and position,\n\t* as determined by the passed-in scroll strategy.\n\t*\n\t* @param {module:enyo/ScrollStrategy~ScrollStrategy} strategy - The scroll strategy to be synced with.\n\t* @public\n\t*/\n\tsync: function (strategy) {\n\t\tthis.scrollBounds = strategy._getScrollBounds();\n\t\tthis.update(strategy);\n\t},\n\n\t/**\n\t* Updates the scroll indicator bar based on the scroll bounds of the strategy, the available\n\t* scroll area, and whether there is overscrolling. If the scroll indicator bar is not\n\t* needed, it will be not be displayed.\n\t* \n\t* @param {module:enyo/ScrollStrategy~ScrollStrategy} strategy - The scroll strategy to update from.\n\t* @public\n\t*/\n\tupdate: function (strategy) {\n\t\tif (this.showing) {\n\t\t\tvar d = this.dimension, o = this.offset;\n\t\t\tvar bd = this.scrollBounds[this.sizeDimension], sbd = this.scrollBounds[d];\n\t\t\tvar overs = 0, overp = 0, over = 0;\n\t\t\tif (bd >= sbd) {\n\t\t\t\tthis.hide();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (strategy.isOverscrolling()) {\n\t\t\t\tover = strategy.getOverScrollBounds()['over' + o];\n\t\t\t\tovers = Math.abs(over);\n\t\t\t\toverp = Math.max(over, 0);\n\t\t\t}\n\t\t\tvar sbo = strategy[this.positionMethod]() - over;\n\t\t\t// calc size & position\n\t\t\tvar bdc = bd - this.cornerSize;\n\t\t\tvar s = Math.floor((bd * bd / sbd) - overs);\n\t\t\ts = Math.max(this.minSize, s);\n\t\t\tvar p = Math.floor((bdc * sbo / sbd) + overp);\n\t\t\tp = Math.max(0, Math.min(bdc - this.minSize, p));\n\t\t\t// apply thumb styling\n\t\t\tthis.needed = s < bd;\n\t\t\tif (this.needed && this.hasNode()) {\n\t\t\t\tif (this._pos !== p) {\n\t\t\t\t\tthis._pos = p;\n\t\t\t\t\tif(!this.transform) {\n\t\t\t\t\t\t//adjust top/left for browsers that don't support translations\n\t\t\t\t\t\tif(this.axis=='v') {\n\t\t\t\t\t\t\tthis.setBounds({top:p + 'px'});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.setBounds({left:p + 'px'});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tDom.transformValue(this, this.translation, p + 'px');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this._size !== s) {\n\t\t\t\t\tthis._size = s;\n\t\t\t\t\tthis.applyStyle(d, s + 'px');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.hide();\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* We implement `setShowing()` and cancel the [delayHide()]{@link module:enyo/ScrollThumb~ScrollThumb#delayHide} \n\t* because [showing]{@link module:enyo/Control~Control#showing} is not changed while we execute\n\t* `delayHide()`.\n\t*\n\t* @param {Boolean} showing - If `true`, displays the {@link module:enyo/ScrollThumb~ScrollThumb} if appropriate;\n\t*\totherwise, hides the ScrollThumb.\n\t* @public\n\t*/\n\tsetShowing: function (showing) {\n\t\tif (showing && showing != this.showing) {\n\t\t\tif (this.scrollBounds[this.sizeDimension] >= this.scrollBounds[this.dimension]) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (this.hasNode()) {\n\t\t\tthis.cancelDelayHide();\n\t\t}\n\t\tif (showing != this.showing) {\n\t\t\tvar last = this.showing;\n\t\t\tthis.showing = showing;\n\t\t\tthis.showingChanged(last);\n\t\t}\n\t},\n\n\t/**\n\t* Delays automatic hiding of the {@link module:enyo/ScrollThumb~ScrollThumb}.\n\t*\n\t* @param {Number} delay - The number of milliseconds to delay hiding of the\n\t*\t{@link module:enyo/ScrollThumb~ScrollThumb}.\n\t* @public\n\t*/\n\tdelayHide: function (delay) {\n\t\tif (this.showing) {\n\t\t\tthis.startJob('hide', this.hide, delay || 0);\n\t\t}\n\t},\n\n\t/**\n\t* Cancels any pending [delayHide()]{@link module:enyo/ScrollThumb~ScrollThumb#delayHide} jobs.\n\t* \n\t* @public\n\t*/\n\tcancelDelayHide: function () {\n\t\tthis.stopJob('hide');\n\t}\n});\n",
    "relPath": "enyo/ScrollThumb",
    "requires": [
      "enyo",
      "../kind",
      "../Control",
      "../dom"
    ],
    "requests": [],
    "resolved": true,
    "styleEntries": [
      {
        "glob": "ScrollThumb.css",
        "files": [
          "/Users/jason/Git/bootplate/lib/enyo/lib/ScrollThumb/ScrollThumb.css"
        ],
        "sources": {
          "/Users/jason/Git/bootplate/lib/enyo/lib/ScrollThumb/ScrollThumb.css": ".enyo-thumb {\n\tposition: absolute;\n\t-moz-box-sizing: border-box;\n\tbox-sizing: border-box;\n\tborder-radius: 4px;\n\tbackground: #333;\n\tborder: 1px solid #666;\n\topacity: 0.75;\n\tz-index: 1;\n}\n\n.enyo-vthumb {\n\ttop: 0;\n\tright: 2px;\n\twidth: 4px;\n}\n\n.enyo-hthumb {\n\tleft: 0;\n\tbottom: 2px;\n\theight: 4px;\n}\n"
        },
        "source": ".enyo-thumb {\n\tposition: absolute;\n\t-moz-box-sizing: border-box;\n\tbox-sizing: border-box;\n\tborder-radius: 4px;\n\tbackground: #333;\n\tborder: 1px solid #666;\n\topacity: 0.75;\n\tz-index: 1;\n}\n\n.enyo-vthumb {\n\ttop: 0;\n\tright: 2px;\n\twidth: 4px;\n}\n\n.enyo-hthumb {\n\tleft: 0;\n\tbottom: 2px;\n\theight: 4px;\n}\n"
      }
    ]
  },
  {
    "path": "../GroupItem",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib/ToolDecorator",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/GroupItem",
    "name": "enyo/GroupItem",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/GroupItem.js",
    "contents": "require('enyo');\n\n/**\n* Contains the declaration for the {@link module:enyo/GroupItem~GroupItem} kind.\n* @module enyo/GroupItem\n*/\n\nvar\n\tkind = require('./kind');\nvar\n\tControl = require('./Control');\n\n/**\n* Fires when the [active state]{@link module:enyo/GroupItem~GroupItem#active} has changed.\n*\n* @event module:enyo/GroupItem~GroupItem#onActivate\n* @type {Object}\n* @property {Object} sender - The [component]{@link module:enyo/Component~Component} that most recently\n*\tpropagated the {@glossary event}.\n* @property {Object} event - An [object]{@glossary Object} containing event information.\n* @public\n*/\n\n/**\n* {@link module:enyo/GroupItem~GroupItem} is the base [kind]{@glossary kind} for the\n* [Grouping]{@link module:enyo/Group~Group} API. It manages the\n* [active state]{@link module:enyo/GroupItem~GroupItem#active} of the [component]{@link module:enyo/Component~Component}\n* (or the [inheriting]{@glossary subkind} component). A subkind may call `setActive()` \n* to set the [active]{@link module:enyo/GroupItem~GroupItem#active} property to the desired state; this\n* will additionally [bubble]{@link module:enyo/Component~Component#bubble} an \n* [onActivate]{@link module:enyo/GroupItem~GroupItem#onActivate} {@glossary event}, which may\n* be handled as needed by the containing components. This is useful for creating\n* groups of items whose state should be managed collectively.\n*\n* For an example of how this works, see the {@link module:enyo/Group~Group} kind, which enables the\n* creation of radio groups from arbitrary components that\tsupport the Grouping API.\n*\n* @class GroupItem\n* @extends module:enyo/Control~Control\n* @ui\n* @public\n*/\nmodule.exports = kind(\n\t/** @lends module:enyo/Groupitem~Groupitem.prototype */ {\n\n\t/**\n\t* @private\n\t*/\n\tname: 'enyo.GroupItem',\n\n\t/**\n\t* @private\n\t*/\n\tkind: Control,\n\n\t/**\n\t* @private\n\t*/\n\tpublished: \n\t\t/** @lends module:enyo/Groupitem~Groupitem.prototype */ {\n\n\t\t/**\n\t\t* Will be `true` if the item is currently selected.\n\t\t* \n\t\t* @type {Boolean}\n\t\t* @default false\n\t\t* @public\n\t\t*/\n\t\tactive: false\n\t},\n\t\n\t/**\n\t* @method\n\t* @private\n\t*/\n\trendered: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tsup.apply(this, arguments);\n\t\t\tthis.activeChanged();\n\t\t};\n\t}),\n\n\t/**\n\t* @fires module:enyo/GroupItem~GroupItem#onActivate\n\t* @private\n\t*/\n\tactiveChanged: function () {\n\t\tthis.bubble('onActivate');\n\t}\n});\n",
    "mtime": 1434758950000,
    "relPath": "enyo/GroupItem",
    "requires": [
      "enyo",
      "./kind",
      "./Control"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "enyo/Control",
    "base": "/Users/jason/Git/bootplate/lib/layout/lib/FittableLayout",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/Control",
    "name": "enyo/Control",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/Control.js",
    "contents": "require('enyo');\n\n/**\n* Contains the declaration for the {@link module:enyo/Control~Control} kind.\n* @module enyo/Control\n*/\n\nvar\n\tkind = require('./kind'),\n\tutils = require('./utils'),\n\tplatform = require('./platform'),\n\tdispatcher = require('./dispatcher'),\n\tfullscreen = require('./fullscreen'),\n\toptions = require('./options'),\n\troots = require('./roots');\n\nvar\n\tAccessibilitySupport = require('./AccessibilitySupport'),\n\tUiComponent = require('./UiComponent'),\n\tHTMLStringDelegate = require('./HTMLStringDelegate'),\n\tDom = require('./dom'),\n\tFloatingLayer = require('./floatingLayer');\n\n// While the namespace isn't needed here, gesture is required for ontap events for which Control\n// has a handler. Bringing them all in now for the time being.\nrequire('./gesture');\n\nvar nodePurgatory;\n\n/**\n* Called by `Control.teardownRender()`. In certain circumstances,\n* we need to temporarily keep a DOM node around after tearing down\n* because we're still acting on a stream of touch events emanating\n* from the node. See `Control.retainNode()` for more information.\n*\n* @private\n*/\nfunction storeRetainedNode (control) {\n\tvar p = getNodePurgatory(),\n\t\tn = control._retainedNode;\n\tif (n) {\n\t\tp.appendChild(n);\n\t}\n\tcontrol._retainedNode = null;\n}\n\n/**\n* Called (via a callback) when it's time to release a DOM node\n* that we've retained.\n*\n* @private\n*/\nfunction releaseRetainedNode (retainedNode) {\n\tvar p = getNodePurgatory();\n\tif (retainedNode) {\n\t\tp.removeChild(retainedNode);\n\t}\n}\n\n/**\n* Lazily add a hidden `<div>` to `document.body` to serve as a\n* container for retained DOM nodes.\n*\n* @private\n*/\nfunction getNodePurgatory () {\n\tvar p = nodePurgatory;\n\tif (!p) {\n\t\tp = nodePurgatory = document.createElement(\"div\");\n\t\tp.id = \"node_purgatory\";\n\t\tp.style.display = \"none\";\n\t\tdocument.body.appendChild(p);\n\t}\n\treturn p;\n}\n\n/**\n* {@link module:enyo/Control~Control} is a [component]{@link module:enyo/UiComponent~UiComponent} that controls\n* a [DOM]{@glossary DOM} [node]{@glossary Node} (i.e., an element in the user\n* interface). Controls are generally visible and the user often interacts with\n* them directly. While things like buttons and input boxes are obviously\n* controls, in Enyo, a control may be as simple as a text item or as complex\n* as an entire application. Both inherit the same basic core capabilities from\n* this kind.\n*\n* For more information, see the documentation on\n* [Controls]{@linkplain $dev-guide/key-concepts/controls.html} in the\n* Enyo Developer Guide.\n*\n* **If you make changes to `enyo.Control`, be sure to add or update the\n* appropriate unit tests.**\n*\n* @class Control\n* @extends module:enyo/UiComponent~UiComponent\n* @ui\n* @public\n*/\nvar Control = module.exports = kind(\n\t/** @lends module:enyo/Control~Control.prototype */ {\n\n\tname: 'enyo.Control',\n\n\t/**\n\t* @private\n\t*/\n\tkind: UiComponent,\n\n\t/**\n\t* @private\n\t*/\n\tmixins: options.accessibility ? [AccessibilitySupport] : null,\n\n\t/**\n\t* @type {String}\n\t* @default 'module:enyo/Control~Control'\n\t* @public\n\t*/\n\tdefaultKind: null, // set after the fact\n\n\t/**\n\t* The [DOM node]{@glossary DOM} tag name that should be created.\n\t*\n\t* @type {String}\n\t* @default 'div'\n\t* @public\n\t*/\n\ttag: 'div',\n\n\t/**\n\t* A [hash]{@glossary Object} of attributes to be applied to the created\n\t* [DOM]{@glossary DOM} node.\n\t*\n\t* @type {Object}\n\t* @default null\n\t* @public\n\t*/\n\tattributes: null,\n\n\t/**\n\t* [Boolean]{@glossary Boolean} flag indicating whether this element should\n\t* \"fit\", or fill its container's size.\n\t*\n\t* @type {Boolean}\n\t* @default null\n\t* @public\n\t*/\n\tfit: null,\n\n\t/**\n\t* [Boolean]{@glossary Boolean} flag indicating whether HTML is allowed in\n\t* this control's [content]{@link module:enyo/Control~Control#content} property. If `false`\n\t* (the default), HTML will be encoded into [HTML entities]{@glossary entity}\n\t* (e.g., `&lt;` and `&gt;`) for literal visual representation.\n\t*\n\t* @type {Boolean}\n\t* @default null\n\t* @public\n\t*/\n\tallowHtml: false,\n\n\t/**\n\t* Mimics the HTML `style` attribute.\n\t*\n\t* @type {String}\n\t* @default ''\n\t* @public\n\t*/\n\tstyle: '',\n\n\t/**\n\t* @private\n\t*/\n\tkindStyle: '',\n\n\t/**\n\t* Mimics the HTML `class` attribute.\n\t*\n\t* @type {String}\n\t* @default ''\n\t* @public\n\t*/\n\tclasses: '',\n\n\t/**\n\t* @private\n\t*/\n\tkindClasses: '',\n\n\t/**\n\t* [Classes]{@link module:enyo/Control~Control#classes} that are applied to all controls.\n\t*\n\t* @type {String}\n\t* @default ''\n\t* @public\n\t*/\n\tcontrolClasses: '',\n\n\t/**\n\t* The text-based content of the Control. If the [allowHtml]{@link module:enyo/Control~Control#allowHtml}\n\t* flag is set to `true`, you may set this property to an HTML string.\n\t* @public\n\t*/\n\tcontent: '',\n\n\t/**\n\t* If true or 'inherit' and enyo/gesture#doubleTabEnabled == true, will fire a doubletap\n\t* event, and will temporarily suppress a single tap while waiting for a double tap.\n\t*\n\t* @type {String|Boolean}\n\t* @default 'inherit'\n\t* @public\n\t*/\n\tdoubleTapEnabled: 'inherit',\n\n\t/**\n\t* Time in milliseconds to wait to detect a double tap\n\t*\n\t* @type {Number}\n\t* @default 300\n\t* @public\n\t*/\n\tdoubleTapInterval: 300,\n\n\t/**\n\t* If set to `true`, the [control]{@link module:enyo/Control~Control} will not be rendered until its\n\t* [showing]{@link module:enyo/Control~Control#showing} property has been set to `true`. This can be used\n\t* directly or is used by some widgets to control when children are rendered.\n\t*\n\t* It is important to note that setting this to `true` will _force_\n\t* [canGenerate]{@link module:enyo/Control~Control#canGenerate} and [showing]{@link module:enyo/Control~Control#showing}\n\t* to be `false`. Arbitrarily modifying the values of these properties prior to its initial\n\t* render may have unexpected results.\n\t*\n\t* Once a control has been shown/rendered with `renderOnShow` `true` the behavior will not\n\t* be used again.\n\t*\n\t* @type {Boolean}\n\t* @default false\n\t* @public\n\t*/\n\trenderOnShow: false,\n\t\n\t/**\n\t* @todo Find out how to document \"handlers\".\n\t* @public\n\t*/\n\thandlers: {\n\t\tontap: 'tap',\n\t\tonShowingChanged: 'showingChangedHandler'\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tstrictlyInternalEvents: {onenter: 1, onleave: 1},\n\n\t/**\n\t* @private\n\t*/\n\tisInternalEvent: function (event) {\n\t\tvar rdt = dispatcher.findDispatchTarget(event.relatedTarget);\n\t\treturn rdt && rdt.isDescendantOf(this);\n\t},\n\n\t// .................................\n\t// DOM NODE MANIPULATION API\n\n\t/**\n\t* Gets the bounds for this control. The `top` and `left` properties returned\n\t* by this method represent the control's positional distance in pixels from\n\t* either A) the first parent of this control that is absolutely or relatively\n\t* positioned, or B) the `document.body`.\n\t*\n\t* This is a shortcut convenience method for {@link module:enyo/dom#getBounds}.\n\t*\n\t* @returns {Object} An [object]{@glossary Object} containing `top`, `left`,\n\t* `width`, and `height` properties.\n\t* @public\n\t*/\n\tgetBounds: function () {\n\t\tvar node = this.hasNode(),\n\t\t\tbounds = node && Dom.getBounds(node);\n\n\t\treturn bounds || {left: undefined, top: undefined, width: undefined, height: undefined};\n\t},\n\n\t/**\n\t* Sets the absolute/relative position and/or size for this control. Values\n\t* of `null` or `undefined` for the `bounds` properties will be ignored. You\n\t* may optionally specify a `unit` (i.e., a valid CSS measurement unit) as a\n\t* [string]{@glossary String} to be applied to each of the position/size\n\t* assignments.\n\t*\n\t* @param {Object} bounds - An [object]{@glossary Object}, optionally\n\t* containing one or more of the following properties: `width`, `height`,\n\t* `top`, `right`, `bottom`, and `left`.\n\t* @param {String} [unit='px']\n\t* @public\n\t*/\n\tsetBounds: function (bounds, unit) {\n\t\tvar newStyle = '',\n\t\t\textents = ['width', 'height', 'left', 'top', 'right', 'bottom'],\n\t\t\ti = 0,\n\t\t\tval,\n\t\t\text;\n\n\t\t// if no unit is supplied, we default to pixels\n\t\tunit = unit || 'px';\n\n\t\tfor (; (ext = extents[i]); ++i) {\n\t\t\tval = bounds[ext];\n\t\t\tif (val || val === 0) {\n\t\t\t\tnewStyle += (ext + ':' + val + (typeof val == 'string' ? '' : unit) + ';');\n\t\t\t}\n\t\t}\n\n\t\tthis.set('style', this.style + newStyle);\n\t},\n\n\t/**\n\t* Gets the bounds for this control. The `top` and `left` properties returned\n\t* by this method represent the control's positional distance in pixels from\n\t* `document.body`. To get the bounds relative to this control's parent(s),\n\t* use [getBounds()]{@link module:enyo/Control~Control#getBounds}.\n\t*\n\t* This is a shortcut convenience method for {@link module:enyo/dom#getAbsoluteBounds}.\n\t*\n\t* @returns {Object} An [object]{@glossary Object} containing `top`, `left`,\n\t* `width`, and `height` properties.\n\t* @public\n\t*/\n\tgetAbsoluteBounds: function () {\n\t\tvar node = this.hasNode(),\n\t\t\tbounds = node && Dom.getAbsoluteBounds(node);\n\n\t\treturn bounds || {\n\t\t\tleft: undefined,\n\t\t\ttop: undefined,\n\t\t\twidth: undefined,\n\t\t\theight: undefined,\n\t\t\tbottom: undefined,\n\t\t\tright: undefined\n\t\t};\n\t},\n\n\t/**\n\t* Shortcut method to set [showing]{@link module:enyo/Control~Control#showing} to `true`.\n\t*\n\t* @public\n\t*/\n\tshow: function () {\n\t\tthis.set('showing', true);\n\t},\n\n\t/**\n\t* Shortcut method to set [showing]{@link module:enyo/Control~Control#showing} to `false`.\n\t*\n\t* @public\n\t*/\n\thide: function () {\n\t\tthis.set('showing', false);\n\t},\n\n\t/**\n\t* Sets this control to be [focused]{@glossary focus}.\n\t*\n\t* @public\n\t*/\n\tfocus: function () {\n\t\tif (this.hasNode()) this.node.focus();\n\t},\n\n\t/**\n\t* [Blurs]{@glossary blur} this control. (The opposite of\n\t* [focus()]{@link module:enyo/Control~Control#focus}.)\n\t*\n\t* @public\n\t*/\n\tblur: function () {\n\t\tif (this.hasNode()) this.node.blur();\n\t},\n\n\t/**\n\t* Determines whether this control currently has the [focus]{@glossary focus}.\n\t*\n\t* @returns {Boolean} Whether this control has focus. `true` if the control\n\t* has focus; otherwise, `false`.\n\t* @public\n\t*/\n\thasFocus: function () {\n\t\tif (this.hasNode()) return document.activeElement === this.node;\n\t},\n\n\t/**\n\t* Determines whether this control's [DOM node]{@glossary Node} has been created.\n\t*\n\t* @returns {Boolean} Whether this control's [DOM node]{@glossary Node} has\n\t* been created. `true` if it has been created; otherwise, `false`.\n\t* @public\n\t*/\n\thasNode: function () {\n\t\treturn this.generated && (this.node || this.findNodeById());\n\t},\n\n\t/**\n\t* Gets the requested property (`name`) from the control's attributes\n\t* [hash]{@glossary Object}, from its cache of node attributes, or, if it has\n\t* yet to be cached, from the [node]{@glossary Node} itself.\n\t*\n\t* @param {String} name - The attribute name to get.\n\t* @returns {(String|Null)} The value of the requested attribute, or `null`\n\t* if there isn't a [DOM node]{@glossary Node} yet.\n\t* @public\n\t*/\n\tgetAttribute: function (name) {\n\t\tvar node;\n\n\t\t// TODO: This is a fixed API assuming that no changes will happen to the DOM that\n\t\t// do not use it...original implementation of this method used the node's own\n\t\t// getAttribute method every time it could but we really only need to do that if we\n\t\t// weren't the ones that set the value to begin with -- in slow DOM situations this\n\t\t// could still be faster but it needs to be verified\n\t\tif (this.attributes.hasOwnProperty(name)) return this.attributes[name];\n\t\telse {\n\t\t\tnode = this.hasNode();\n\n\t\t\t// we store the value so that next time we'll know what it is\n\t\t\t/*jshint -W093 */\n\t\t\treturn (this.attributes[name] = (node ? node.getAttribute(name) : null));\n\t\t\t/*jshint +W093 */\n\t\t}\n\t},\n\n\t/**\n\t* Assigns an attribute to a control's [node]{@glossary Node}. Assigning\n\t* `name` a value of `null`, `false`, or the empty string `(\"\")` will remove\n\t* the attribute from the node altogether.\n\t*\n\t* @param {String} name - Attribute name to assign/remove.\n\t* @param {(String|Number|null)} value - The value to assign to `name`\n\t* @returns {this} Callee for chaining.\n\t* @public\n\t*/\n\tsetAttribute: function (name, value) {\n\t\tvar attrs = this.attributes,\n\t\t\tnode = this.hasNode(),\n\t\t\tdelegate = this.renderDelegate || Control.renderDelegate;\n\n\t\tif (name) {\n\t\t\tattrs[name] = value;\n\n\t\t\tif (node) {\n\t\t\t\tif (value == null || value === false || value === '') {\n\t\t\t\t\tnode.removeAttribute(name);\n\t\t\t\t} else node.setAttribute(name, value);\n\t\t\t} else delegate.invalidate(this, 'attributes');\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t/**\n\t* Reads the `name` property directly from the [node]{@glossary Node}. You\n\t* may provide a default (`def`) to use if there is no node yet.\n\t*\n\t* @param {String} name - The [node]{@glossary Node} property name to get.\n\t* @param {*} def - The default value to apply if there is no node.\n\t* @returns {String} The value of the `name` property, or `def` if the node\n\t* was not available.\n\t* @public\n\t*/\n\tgetNodeProperty: function (name, def) {\n\t\treturn this.hasNode() ? this.node[name] : def;\n\t},\n\n\t/**\n\t* Sets the value of a property (`name`) directly on the [node]{@glossary Node}.\n\t*\n\t* @param {String} name - The [node]{@glossary Node} property name to set.\n\t* @param {*} value - The value to assign to the property.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\tsetNodeProperty: function (name, value) {\n\t\tif (this.hasNode()) this.node[name] = value;\n\t\treturn this;\n\t},\n\n\t/**\n\t* Appends additional content to this control.\n\t*\n\t* @param {String} content - The new string to add to the end of the `content`\n\t* property.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\taddContent: function (content) {\n\t\treturn this.set('content', this.get('content') + content);\n\t},\n\n\t// .................................\n\n\t// .................................\n\t// STYLE/CLASS API\n\n\t/**\n\t* Determines whether this control has the class `name`.\n\t*\n\t* @param {String} name - The name of the class (or classes) to check for.\n\t* @returns {Boolean} Whether the control has the class `name`.\n\t* @public\n\t*/\n\thasClass: function (name) {\n\t\treturn name && (' ' + this.classes + ' ').indexOf(' ' + name + ' ') > -1;\n\t},\n\n\t/**\n\t* Adds the specified class to this control's list of classes.\n\t*\n\t* @param {String} name - The name of the class to add.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\taddClass: function (name) {\n\t\tvar classes = this.classes || '';\n\n\t\t// NOTE: Because this method accepts a string and for efficiency does not wish to\n\t\t// parse it to determine if it is actually multiple classes we later pull a trick\n\t\t// to keep it normalized and synchronized with our attributes hash and the node's\n\t\tif (!this.hasClass(name)) {\n\n\t\t\t// this is hooked\n\t\t\tthis.set('classes', classes + (classes ? (' ' + name) : name));\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t/**\n\t* Removes the specified class from this control's list of classes.\n\t*\n\t* **Note: It is not advisable to pass a string of multiple, space-delimited\n\t* class names into this method. Instead, call the method once for each class\n\t* name that you want to remove.**\n\t*\n\t* @param {String} name - The name of the class to remove.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\tremoveClass: function (name) {\n\t\tvar classes = this.classes;\n\n\t\tif (name) {\n\t\t\tthis.set('classes', (' ' + classes + ' ').replace(' ' + name + ' ', ' ').trim());\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t/**\n\t* Adds or removes the specified class conditionally, based on the state\n\t* of the `add` argument.\n\t*\n\t* @param {String} name - The name of the class to add or remove.\n\t* @param {Boolean} add - If `true`, `name` will be added as a class; if\n\t* `false`, it will be removed.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\taddRemoveClass: function (name, add) {\n\t\treturn name ? this[add ? 'addClass' : 'removeClass'](name) : this;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tclassesChanged: function () {\n\t\tvar classes = this.classes,\n\t\t\tnode = this.hasNode(),\n\t\t\tattrs = this.attributes,\n\t\t\tdelegate = this.renderDelegate || Control.renderDelegate;\n\n\t\tif (node) {\n\t\t\tif (classes || this.kindClasses) {\n\t\t\t\tnode.setAttribute('class', classes || this.kindClasses);\n\t\t\t} else node.removeAttribute('class');\n\n\t\t\tthis.classes = classes = node.getAttribute('class');\n\t\t}\n\n\t\t// we need to update our attributes.class value and flag ourselves to be\n\t\t// updated\n\t\tattrs['class'] = classes;\n\n\t\t// we want to notify the delegate that the attributes have changed in case it wants\n\t\t// to handle this is some special way\n\t\tdelegate.invalidate(this, 'attributes');\n\t},\n\n\t/**\n\t* Applies a CSS style directly to the control. Use the `prop` argument to\n\t* specify the CSS property name you'd like to set, and `value` to specify\n\t* the desired value. Setting `value` to `null` will remove the CSS property\n\t* `prop` altogether.\n\t*\n\t* @param {String} prop - The CSS property to assign.\n\t* @param {(String|Number|null|undefined)} value - The value to assign to\n\t* `prop`. Setting a value of `null`, `undefined`, or the empty string `(\"\")`\n\t* will remove the property `prop` from the control.\n\t* @returns {this} Callee for chaining.\n\t* @public\n\t*/\n\tapplyStyle: function (prop, value) {\n\n\t\t// NOTE: This method deliberately avoids calling set('style', ...) for performance\n\t\t// as it will have already been parsed by the browser so we pass it on via the\n\t\t// notification system which is the same\n\n\t\t// TODO: Wish we could delay this potentially...\n\t\t// if we have a node we render the value immediately and update our style string\n\t\t// in the process to keep them synchronized\n\t\tvar node = this.hasNode(),\n\t\t\tstyle = this.style,\n\t\t\tdelegate = this.renderDelegate || Control.renderDelegate;\n\n\t\t// FIXME: This is put in place for a Firefox bug where setting a style value of a node\n\t\t// via its CSSStyleDeclaration object (by accessing its node.style property) does\n\t\t// not work when using a CSS property name that contains one or more dash, and requires\n\t\t// setting the property via the JavaScript-style property name. This fix should be\n\t\t// removed once this issue has been resolved in the Firefox mainline and its variants\n\t\t// (it is currently resolved in the 36.0a1 nightly):\n\t\t// https://bugzilla.mozilla.org/show_bug.cgi?id=1083457\n\t\tif (node && (platform.firefox < 35 || platform.firefoxOS || platform.androidFirefox)) {\n\t\t\tprop = prop.replace(/-([a-z])/gi, function(match, submatch) {\n\t\t\t\treturn submatch.toUpperCase();\n\t\t\t});\n\t\t}\n\n\t\tif (value !== null && value !== '' && value !== undefined) {\n\t\t\t// update our current cached value\n\t\t\tif (node) {\n\t\t\t\tnode.style[prop] = value;\n\n\t\t\t\t// cssText is an internal property used to help know when to sync and not\n\t\t\t\t// sync with the node in styleChanged\n\t\t\t\tthis.style = this.cssText = node.style.cssText;\n\n\t\t\t\t// we need to invalidate the style for the delegate\n\t\t\t\tdelegate.invalidate(this, 'style');\n\n\t\t\t\t// otherwise we have to try and prepare it for the next time it is rendered we\n\t\t\t\t// will need to update it because it will not be synchronized\n\t\t\t} else this.set('style', style + (' ' + prop + ':' + value + ';'));\n\t\t} else {\n\n\t\t\t// in this case we are trying to clear the style property so if we have the node\n\t\t\t// we let the browser handle whatever the value should be now and otherwise\n\t\t\t// we have to parse it out of the style string and wait to be rendered\n\n\t\t\tif (node) {\n\t\t\t\tnode.style[prop] = '';\n\t\t\t\tthis.style = this.cssText = node.style.cssText;\n\n\t\t\t\t// we need to invalidate the style for the delegate\n\t\t\t\tdelegate.invalidate(this, 'style');\n\t\t\t} else {\n\n\t\t\t\t// this is a rare case to nullify the style of a control that is not\n\t\t\t\t// rendered or does not have a node\n\t\t\t\tstyle = style.replace(new RegExp(\n\t\t\t\t\t// This looks a lot worse than it is. The complexity stems from needing to\n\t\t\t\t\t// match a url container that can have other characters including semi-\n\t\t\t\t\t// colon and also that the last property may/may-not end with one\n\t\t\t\t\t'\\\\s*' + prop + '\\\\s*:\\\\s*[a-zA-Z0-9\\\\ ()_\\\\-\\'\"%,]*(?:url\\\\(.*\\\\)\\\\s*[a-zA-Z0-9\\\\ ()_\\\\-\\'\"%,]*)?\\\\s*(?:;|;?$)',\n\t\t\t\t\t'gi'\n\t\t\t\t),'');\n\t\t\t\tthis.set('style', style);\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t/**\n\t* Allows the addition of several CSS properties and values at once, via a\n\t* single string, similar to how the HTML `style` attribute works.\n\t*\n\t* @param {String} css - A string containing one or more valid CSS styles.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\taddStyles: function (css) {\n\t\tvar key,\n\t\t\tnewStyle = '';\n\n\t\tif (typeof css == 'object') {\n\t\t\tfor (key in css) newStyle += (key + ':' + css[key] + ';');\n\t\t} else newStyle = css || '';\n\n\t\tthis.set('style', this.style + newStyle);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tstyleChanged: function () {\n\t\tvar delegate = this.renderDelegate || Control.renderDelegate;\n\n\t\t// if the cssText internal string doesn't match then we know style was set directly\n\t\tif (this.cssText !== this.style) {\n\n\t\t\t// we need to render the changes and synchronize - this means that the style\n\t\t\t// property was set directly so we will reset it prepending it with the original\n\t\t\t// style (if any) for the kind and keeping whatever the browser is keeping\n\t\t\tif (this.hasNode()) {\n\t\t\t\tthis.node.style.cssText = this.kindStyle + (this.style || '');\n\t\t\t\t// now we store the parsed version\n\t\t\t\tthis.cssText = this.style = this.node.style.cssText;\n\t\t\t}\n\n\t\t\t// we need to ensure that the delegate has an opportunity to handle this change\n\t\t\t// separately if it needs to\n\t\t\tdelegate.invalidate(this, 'style');\n\t\t}\n\t},\n\n\t/**\n\t* Retrieves a control's CSS property value. This doesn't just pull the\n\t* assigned value of `prop`; it returns the browser's understanding of `prop`,\n\t* the \"computed\" value. If the control isn't been rendered yet, and you need\n\t* a default value (such as `0`), include it in the arguments as `def`.\n\t*\n\t* @param {String} prop - The property name to get.\n\t* @param {*} [def] - An optional default value, in case the control isn't\n\t* rendered yet.\n\t* @returns {(String|Number)} The computed value of `prop`, as the browser\n\t* sees it.\n\t* @public\n\t*/\n\tgetComputedStyleValue: function (prop, def) {\n\t\treturn this.hasNode() ? Dom.getComputedStyleValue(this.node, prop) : def;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tfindNodeById: function () {\n\t\treturn this.id && (this.node = Dom.byId(this.id));\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tidChanged: function (was) {\n\t\tif (was) Control.unregisterDomEvents(was);\n\t\tif (this.id) {\n\t\t\tControl.registerDomEvents(this.id, this);\n\t\t\tthis.setAttribute('id', this.id);\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tcontentChanged: function () {\n\t\tvar delegate = this.renderDelegate || Control.renderDelegate;\n\t\tdelegate.invalidate(this, 'content');\n\t},\n\n\t/**\n\t* If the control has been generated, re-flows the control.\n\t*\n\t* @public\n\t*/\n\tbeforeChildRender: function () {\n\t\t// if we are generated, we should flow before rendering a child;\n\t\t// if not, the render context isn't ready anyway\n\t\tif (this.generated) this.flow();\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tshowingChanged: function (was) {\n\t\tvar nextControl;\n\t\t// if we are changing from not showing to showing we attempt to find whatever\n\t\t// our last known value for display was or use the default\n\t\tif (!was && this.showing) {\n\t\t\tthis.applyStyle('display', this._display || '');\n\t\t\t\n\t\t\t// note the check for generated and canGenerate as changes to canGenerate will force\n\t\t\t// us to ignore the renderOnShow value so we don't undo whatever the developer was\n\t\t\t// intending\n\t\t\tif (!this.generated && !this.canGenerate && this.renderOnShow) {\n\t\t\t\tnextControl = this.getNextControl();\n\t\t\t\tif (nextControl && !this.addBefore) this.addBefore = nextControl;\n\t\t\t\tthis.set('canGenerate', true);\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t\t\n\t\t\tthis.sendShowingChangedEvent(was);\n\t\t}\n\n\t\t// if we are supposed to be hiding the control then we need to cache our current\n\t\t// display state\n\t\telse if (was && !this.showing) {\n\t\t\tthis.sendShowingChangedEvent(was);\n\t\t\t// we can't truly cache this because it _could_ potentially be set to multiple\n\t\t\t// values throughout its lifecycle although that seems highly unlikely...\n\t\t\tthis._display = this.hasNode() ? this.node.style.display : '';\n\t\t\tthis.applyStyle('display', 'none');\n\t\t}\n\n\t},\n\n\t/**\n\t* @private\n\t*/\n\trenderOnShowChanged: function () {\n\t\t// ensure that the default value assigned to showing is actually a boolean\n\t\t// and that it is only true if the renderOnShow is also false\n\t\tthis.showing = ((!!this.showing) && !this.renderOnShow);\n\t\t// we want to check and make sure that the canGenerate value is correct given\n\t\t// the state of renderOnShow\n\t\tthis.canGenerate = (this.canGenerate && !this.renderOnShow);\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tsendShowingChangedEvent: function (was) {\n\t\tvar waterfall = (was === true || was === false),\n\t\t\tparent = this.parent;\n\n\t\t// make sure that we don't trigger the waterfall when this method\n\t\t// is arbitrarily called during _create_ and it should only matter\n\t\t// that it changed if our parent's are all showing as well\n\t\tif (waterfall && (parent ? parent.getAbsoluteShowing(true) : true)) {\n\t\t\tthis.waterfall('onShowingChanged', {originator: this, showing: this.showing});\n\t\t}\n\t},\n\n\t/**\n\t* Returns `true` if this control and all parents are showing.\n\t*\n\t* @param {Boolean} ignoreBounds - If `true`, it will not force a layout by retrieving\n\t*\tcomputed bounds and rely on the return from [showing]{@link module:enyo/Control~Control#showing}\n\t* exclusively.\n\t* @returns {Boolean} Whether the control is showing (visible).\n\t* @public\n\t*/\n\tgetAbsoluteShowing: function (ignoreBounds) {\n\t\tvar bounds = !ignoreBounds ? this.getBounds() : null,\n\t\t\tparent = this.parent;\n\n\t\tif (!this.generated || this.destroyed || !this.showing || (bounds &&\n\t\t\tbounds.height === 0 && bounds.width === 0)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (parent && parent.getAbsoluteShowing) {\n\n\t\t\t// we actually don't care what the parent says if it is the floating layer\n\t\t\tif (!this.parentNode || (this.parentNode !== Control.floatingLayer.hasNode())) {\n\t\t\t\treturn parent.getAbsoluteShowing(ignoreBounds);\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t/**\n\t* Handles the `onShowingChanged` event that is waterfalled by controls when\n\t* their `showing` value is modified. If the control is not showing itself\n\t* already, it will not continue the waterfall. Overload this method to\n\t* provide additional handling for this event.\n\t*\n\t* @private\n\t*/\n\tshowingChangedHandler: function (sender, event) {\n\t\treturn sender === this ? false : !this.showing;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tfitChanged: function () {\n\t\tthis.parent.reflow();\n\t},\n\n\t/**\n\t* Determines whether we are in fullscreen mode or not.\n\t*\n\t* @returns {Boolean} Whether we are currently in fullscreen mode.\n\t* @public\n\t*/\n\tisFullscreen: function () {\n\t\treturn (this.hasNode() && this.node === fullscreen.getFullscreenElement());\n\t},\n\n\t/**\n\t* Requests that this control be displayed fullscreen (like a video\n\t* container). If the request is granted, the control fills the screen and\n\t* `true` is returned; if the request is denied, the control is not resized\n\t* and `false` is returned.\n\t*\n\t* @returns {Boolean} `true` on success; otherwise, `false`.\n\t* @public\n\t*/\n\trequestFullscreen: function () {\n\t\tif (!this.hasNode()) return false;\n\n\t\tif (fullscreen.requestFullscreen(this)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t},\n\n\t/**\n\t* Ends fullscreen mode for this control.\n\t*\n\t* @returns {Boolean} If the control was in fullscreen mode before this\n\t* method was called, it is taken out of that mode and `true` is returned;\n\t* otherwise, `false` is returned.\n\t* @public\n\t*/\n\tcancelFullscreen: function() {\n\t\tif (this.isFullscreen()) {\n\t\t\tfullscreen.cancelFullscreen();\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t},\n\n\t// .................................\n\n\t// .................................\n\t// RENDER-SCHEME API\n\n\t/**\n\t* Indicates whether the control is allowed to be generated, i.e., rendered\n\t* into the [DOM]{@glossary DOM} tree.\n\t*\n\t* @type {Boolean}\n\t* @default true\n\t* @public\n\t*/\n\tcanGenerate: true,\n\n\t/**\n\t* Indicates whether the control is visible.\n\t*\n\t* @type {Boolean}\n\t* @default true\n\t* @public\n\t*/\n\tshowing: true,\n\n\t/**\n\t* The [node]{@glossary Node} that this control will be rendered into.\n\t*\n\t* @type {module:enyo/Control~Control}\n\t* @default null\n\t* @public\n\t*/\n\trenderDelegate: null,\n\n\t/**\n\t* Indicates whether the control has been generated yet.\n\t*\n\t* @type {Boolean}\n\t* @default false\n\t* @private\n\t*/\n\tgenerated: false,\n\n\t/**\n\t* Forces the control to be rendered. You should use this sparingly, as it\n\t* can be costly, but it may be necessary in cases where a control or its\n\t* contents have been updated surreptitiously.\n\t*\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\trender: function () {\n\n\t\t// prioritize the delegate set for this control otherwise use the default\n\t\tvar delegate = this.renderDelegate || Control.renderDelegate;\n\n\t\t// the render delegate acts on the control\n\t\tdelegate.render(this);\n\n\t\treturn this;\n\t},\n\n\t/**\n\t* Takes this control and drops it into a (new/different)\n\t* [DOM node]{@glossary Node}. This will replace any existing nodes in the\n\t* target `parentNode`.\n\t*\n\t* @param {Node} parentNode - The new parent of this control.\n\t* @param {Boolean} preventRooting - If `true`, this control will not be treated as a root\n\t*\tview and will not be added to the set of roots.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\trenderInto: function (parentNode, preventRooting) {\n\t\tvar delegate = this.renderDelegate || Control.renderDelegate,\n\t\t\tnoFit = this.fit === false;\n\n\t\t// attempt to retrieve the parentNode\n\t\tparentNode = Dom.byId(parentNode);\n\n\t\t// teardown in case of previous render\n\t\tdelegate.teardownRender(this);\n\n\t\tif (parentNode == document.body && !noFit) this.setupBodyFitting();\n\t\telse if (this.fit) this.addClass('enyo-fit enyo-clip');\n\n\t\t// for IE10 support, we want full support over touch actions in enyo-rendered areas\n\t\tthis.addClass('enyo-no-touch-action');\n\n\t\t// add css to enable hw-accelerated scrolling on non-android platforms\n\t\t// ENYO-900, ENYO-901\n\t\tthis.setupOverflowScrolling();\n\n\t\t// if there are unflushed body classes we flush them now...\n\t\tDom.flushBodyClasses();\n\n\t\t// we inject this as a root view because, well, apparently that is just an assumption\n\t\t// we've been making...\n\t\tif (!preventRooting) {\n\t\t\troots.addToRoots(this);\n\t\t}\n\n\t\t// now let the delegate render it the way it needs to\n\t\tdelegate.renderInto(this, parentNode);\n\n\t\tDom.updateScaleFactor();\n\n\t\treturn this;\n\t},\n\n\t/**\n\t* A function that fires after the control has rendered. This performs a\n\t* reflow.\n\t*\n\t* @public\n\t*/\n\trendered: function () {\n\t\tvar child,\n\t\t\ti = 0;\n\n\t\t// CAVEAT: Currently we use one entry point ('reflow') for\n\t\t// post-render layout work *and* post-resize layout work.\n\t\tthis.reflow();\n\n\t\tfor (; (child = this.children[i]); ++i) {\n\t\t\tif (child.generated) child.rendered();\n\t\t}\n\t},\n\n\t/**\n\t* You should generally not need to call this method in your app code.\n\t* It is used internally by some Enyo UI libraries to handle a rare\n\t* issue that sometimes arises when using a virtualized list or repeater\n\t* on a touch device.\n\t*\n\t* This issue occurs when a gesture (e.g. a drag) originates with a DOM\n\t* node that ends up being destroyed in mid-gesture as the list updates.\n\t* When the node is destroyed, the stream of DOM events representing the\n\t* gesture stops, causing the associated action to stop or otherwise\n\t* fail.\n\t*\n\t* You can prevent this problem from occurring by calling `retainNode`\n\t* on the {@link module:enyo/Control~Control} from which the gesture originates. Doing\n\t* so will cause Enyo to keep the DOM node around (hidden from view)\n\t* until you explicitly release it. You should call `retainNode` in the\n\t* event handler for the event that starts the gesture.\n\t*\n\t* `retainNode` returns a function that you must call when the gesture\n\t* ends to release the node. Make sure you call this function to avoid\n\t* \"leaking\" the DOM node (failing to remove it from the DOM).\n\t*\n\t* @param {Node} node - Optional. Defaults to the node associated with\n\t* the Control (`Control.node`). You can generally omit this parameter\n\t* when working with {@link module:enyo/DataList~DataList} or {@link module:enyo/DataGridList~DataGridList},\n\t* but should generally pass in the event's target node (`event.target`)\n\t* when working with {@link module:layout/List~List}. (Because {@link module:layout/List~List} is\n\t* based on the Flyweight pattern, the event's target node is often not\n\t* the node currently associated with the Control at the time the event\n\t* occurs.)\n\t* @returns {Function} Keep a reference to this function and call it\n\t* to release the node when the gesture has ended.\n\t* @public\n\t*/\n\tretainNode: function(node) {\n\t\tvar control = this,\n\t\t\tretainedNode = this._retainedNode = (node || this.hasNode());\n\t\treturn function() {\n\t\t\tif (control && (control._retainedNode == retainedNode)) {\n\t\t\t\tcontrol._retainedNode = null;\n\t\t\t} else {\n\t\t\t\treleaseRetainedNode(retainedNode);\n\t\t\t}\n\t\t};\n\t},\n\n\t/**\n\t* @param {Boolean} [cache] - Whether or not we are tearing down as part of a destroy\n\t*\toperation, or if we are just caching. If `true`, the `showing` and `canGenerate`\n\t*\tproperties of the control will not be reset.\n\t* @private\n\t*/\n\tteardownRender: function (cache) {\n\t\tvar delegate = this.renderDelegate || Control.renderDelegate;\n\n\t\tif (this._retainedNode) {\n\t\t\tstoreRetainedNode(this);\n\t\t}\n\n\t\tdelegate.teardownRender(this, cache);\n\n\t\t// if the original state was set with renderOnShow true then we need to reset these\n\t\t// values as well to coordinate the original intent\n\t\tif (this.renderOnShow && !cache) {\n\t\t\tthis.set('showing', false);\n\t\t\tthis.set('canGenerate', false);\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tteardownChildren: function () {\n\t\tvar delegate = this.renderDelegate || Control.renderDelegate;\n\n\t\tdelegate.teardownChildren(this);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\taddNodeToParent: function () {\n\t\tvar pn;\n\n\t\tif (this.node) {\n\t\t\tpn = this.getParentNode();\n\t\t\tif (pn) {\n\t\t\t\tif (this.addBefore !== undefined) {\n\t\t\t\t\tthis.insertNodeInParent(pn, this.addBefore && this.addBefore.hasNode());\n\t\t\t\t} else this.appendNodeToParent(pn);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tappendNodeToParent: function(parentNode) {\n\t\tparentNode.appendChild(this.node);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tinsertNodeInParent: function(parentNode, beforeNode) {\n\t\tparentNode.insertBefore(this.node, beforeNode || parentNode.firstChild);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tremoveNodeFromDom: function() {\n\t\tif (this.hasNode() && this.node.parentNode) {\n\t\t\tthis.node.parentNode.removeChild(this.node);\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tgetParentNode: function () {\n\t\treturn this.parentNode || (this.parent && (\n\t\t\tthis.parent.hasNode() || this.parent.getParentNode())\n\t\t);\n\t},\n\n\t// .................................\n\n\t/**\n\t* @private\n\t*/\n\tconstructor: kind.inherit(function (sup) {\n\t\treturn function (props) {\n\t\t\tvar attrs = props && props.attributes;\n\n\t\t\t// ensure that we both keep an instance copy of defined attributes but also\n\t\t\t// update the hash with any additional instance definitions at runtime\n\t\t\tthis.attributes = this.attributes ? utils.clone(this.attributes) : {};\n\t\t\tif (attrs) {\n\t\t\t\tutils.mixin(this.attributes, attrs);\n\t\t\t\tdelete  props.attributes;\n\t\t\t}\n\n\t\t\treturn sup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* @private\n\t*/\n\tcreate: kind.inherit(function (sup) {\n\t\treturn function (props) {\n\t\t\tvar classes;\n\n\t\t\t// initialize the styles for this instance\n\t\t\tthis.style = this.kindStyle + this.style;\n\n\t\t\t// set initial values based on renderOnShow\n\t\t\tthis.renderOnShowChanged();\n\n\t\t\t// super initialization\n\t\t\tsup.apply(this, arguments);\n\n\t\t\t// ensure that if we aren't showing -> true then the correct style\n\t\t\t// is applied - note that there might be issues with this because we are\n\t\t\t// trying not to have to parse out any other explicit display value during\n\t\t\t// initialization and we can't check because we haven't rendered yet\n\t\t\tif (!this.showing) this.style += ' display: none;';\n\n\t\t\t// try and make it so we only need to call the method once during\n\t\t\t// initialization and only then when we have something to add\n\t\t\tclasses = this.kindClasses;\n\t\t\tif (classes && this.classes) classes += (' ' + this.classes);\n\t\t\telse if (this.classes) classes = this.classes;\n\n\t\t\t// if there are known classes needed to be applied from the kind\n\t\t\t// definition and the instance definition (such as a component block)\n\t\t\tthis.classes = this.attributes['class'] = classes ? classes.trim() : classes;\n\n\t\t\t// setup the id for this control if we have one\n\t\t\tthis.idChanged();\n\t\t\tthis.contentChanged();\n\t\t};\n\t}),\n\n\t/**\n\t* Destroys the control and removes it from the [DOM]{@glossary DOM}. Also\n\t* removes the control's ability to receive bubbled events.\n\t*\n\t* @public\n\t*/\n\tdestroy: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\t// if the control has been rendered we ensure it is removed from the DOM\n\t\t\tthis.removeNodeFromDom();\n\n\t\t\t// ensure no other bubbled events can be dispatched to this control\n\t\t\tdispatcher.$[this.id] = null;\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* @private\n\t*/\n\tdispatchEvent: kind.inherit(function (sup) {\n\t\treturn function (name, event, sender) {\n\t\t\t// prevent dispatch and bubble of events that are strictly internal (e.g.\n\t\t\t// enter/leave)\n\t\t\tif (this.strictlyInternalEvents[name] && this.isInternalEvent(event)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn sup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* @private\n\t*/\n\taddChild: kind.inherit(function (sup) {\n\t\treturn function (control) {\n\t\t\tcontrol.addClass(this.controlClasses);\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* @private\n\t*/\n\tremoveChild: kind.inherit(function (sup) {\n\t\treturn function (control) {\n\t\t\tsup.apply(this, arguments);\n\t\t\tcontrol.removeClass(this.controlClasses);\n\t\t};\n\t}),\n\n\t/**\n\t* @private\n\t*/\n\tset: kind.inherit(function (sup) {\n\t\treturn function (path, value, opts) {\n\t\t\t// this should be updated if a better api for hooking becomes available but for\n\t\t\t// now we just do this directly to ensure that the showing value is actually\n\t\t\t// a boolean\n\t\t\tif (path == 'showing') {\n\t\t\t\treturn sup.call(this, path, !! value, opts);\n\t\t\t} else return sup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t// .................................\n\t// BACKWARDS COMPATIBLE API, LEGACY METHODS AND PUBLIC PROPERTY\n\t// METHODS OR PROPERTIES THAT PROBABLY SHOULD NOT BE HERE BUT ARE ANYWAY\n\n\t/**\n\t* Apparently used by Ares 2 still but we have the property embedded in the kind...\n\t*\n\t* @deprecated\n\t* @private\n\t*/\n\tisContainer: false,\n\n\t/**\n\t* @private\n\t*/\n\trtl: false,\n\n\t/**\n\t* @private\n\t*/\n\tsetupBodyFitting: function () {\n\t\tDom.applyBodyFit();\n\t\tthis.addClass('enyo-fit enyo-clip');\n\t},\n\n\t/*\n\t* If the platform is Android or Android-Chrome, don't include the css rule\n\t* `-webkit-overflow-scrolling: touch`, as it is not supported in Android and leads to\n\t* overflow issues (ENYO-900 and ENYO-901). Similarly, BB10 has issues repainting\n\t* out-of-viewport content when `-webkit-overflow-scrolling` is used (ENYO-1396).\n\t*\n\t* @private\n\t*/\n\tsetupOverflowScrolling: function () {\n\t\tif(platform.android || platform.androidChrome || platform.blackberry) {\n\t\t\treturn;\n\t\t}\n\t\tDom.addBodyClass('webkitOverflowScrolling');\n\t},\n\n\t/**\n\t* Sets the control's directionality based on its content, or an optional `stringInstead`.\n\t*\n\t* @param {String} [stringInstead] An alternate string for consideration may be sent instead,\n\t*\tin-case the string to test the directionality of the control is stored in `this.value`,\n\t*\tor some other property, for example.\n\t* @private\n\t*/\n\tdetectTextDirectionality: function (stringInstead) {\n\t\t// If an argument was supplied at all, use it, even if it's undefined.\n\t\t// Values that are null or undefined, or are numbers, arrays, and some objects are safe\n\t\t// to be tested.\n\t\tvar str = (arguments.length) ? stringInstead : this.content;\n\t\tif (str || str === 0) {\n\t\t\tthis.rtl = utils.isRtl(str);\n\t\t\tthis.applyStyle('direction', this.rtl ? 'rtl' : 'ltr');\n\t\t} else {\n\t\t\tthis.applyStyle('direction', null);\n\t\t}\n\n\t},\n\n\t// .................................\n\n\t// .................................\n\t// DEPRECATED\n\n\t/**\n\t* @deprecated\n\t* @public\n\t*/\n\tgetTag: function () {\n\t\treturn this.tag;\n\t},\n\n\t/**\n\t* @deprecated\n\t* @public\n\t*/\n\tsetTag: function (tag) {\n\t\tvar was = this.tag;\n\n\t\tif (tag && typeof tag == 'string') {\n\t\t\tthis.tag = tag;\n\t\t\tif (was !== tag) this.notify('tag', was, tag);\n\t\t}\n\t\treturn this;\n\t},\n\n\t/**\n\t* @deprecated\n\t* @public\n\t*/\n\tgetAttributes: function () {\n\t\treturn this.attributes;\n\t},\n\n\t/**\n\t* @deprecated\n\t* @public\n\t*/\n\tsetAttributes: function (attrs) {\n\t\tvar was = this.attributes;\n\n\t\tif (typeof attrs == 'object') {\n\t\t\tthis.attributes = attrs;\n\t\t\tif (attrs !== was) this.notify('attributes', was, attrs);\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t/**\n\t* @deprecated\n\t* @public\n\t*/\n\tgetClasses: function () {\n\t\treturn this.classes;\n\t},\n\n\t/**\n\t* @deprecated\n\t* @public\n\t*/\n\tsetClasses: function (classes) {\n\t\tvar was = this.classes;\n\n\t\tthis.classes = classes;\n\t\tif (was != classes) this.notify('classes', was, classes);\n\n\t\treturn this;\n\t},\n\n\t/**\n\t* @deprecated\n\t* @public\n\t*/\n\tgetStyle: function () {\n\t\treturn this.style;\n\t},\n\n\t/**\n\t* @deprecated\n\t* @public\n\t*/\n\tsetStyle: function (style) {\n\t\tvar was = this.style;\n\n\t\tthis.style = style;\n\t\tif (was != style) this.notify('style', was, style);\n\n\t\treturn this;\n\t},\n\n\t/**\n\t* @deprecated\n\t* @public\n\t*/\n\tgetContent: function () {\n\t\treturn this.content;\n\t},\n\n\t/**\n\t* @deprecated\n\t* @public\n\t*/\n\tsetContent: function (content) {\n\t\tvar was = this.content;\n\t\tthis.content = content;\n\n\t\tif (was != content) this.notify('content', was, content);\n\n\t\treturn this;\n\t},\n\n\t/**\n\t* @deprecated\n\t* @public\n\t*/\n\tgetShowing: function () {\n\t\treturn this.showing;\n\t},\n\n\t/**\n\t* @deprecated\n\t* @public\n\t*/\n\tsetShowing: function (showing) {\n\t\tvar was = this.showing;\n\n\t\t// force the showing property to always be a boolean value\n\t\tthis.showing = !! showing;\n\n\t\tif (was != showing) this.notify('showing', was, showing);\n\n\t\treturn this;\n\t},\n\n\t/**\n\t* @deprecated\n\t* @public\n\t*/\n\tgetAllowHtml: function () {\n\t\treturn this.allowHtml;\n\t},\n\n\t/**\n\t* @deprecated\n\t* @public\n\t*/\n\tsetAllowHtml: function (allow) {\n\t\tvar was = this.allowHtml;\n\t\tthis.allowHtml = !! allow;\n\n\t\tif (was !== allow) this.notify('allowHtml', was, allow);\n\n\t\treturn this;\n\t},\n\n\t/**\n\t* @deprecated\n\t* @public\n\t*/\n\tgetCanGenerate: function () {\n\t\treturn this.canGenerate;\n\t},\n\n\t/**\n\t* @deprecated\n\t* @public\n\t*/\n\tsetCanGenerate: function (can) {\n\t\tvar was = this.canGenerate;\n\t\tthis.canGenerate = !! can;\n\n\t\tif (was !== can) this.notify('canGenerate', was, can);\n\n\t\treturn this;\n\t},\n\n\t/**\n\t* @deprecated\n\t* @public\n\t*/\n\tgetFit: function () {\n\t\treturn this.fit;\n\t},\n\n\t/**\n\t* @deprecated\n\t* @public\n\t*/\n\tsetFit: function (fit) {\n\t\tvar was = this.fit;\n\t\tthis.fit = !! fit;\n\n\t\tif (was !== fit) this.notify('fit', was, fit);\n\n\t\treturn this;\n\t},\n\n\t/**\n\t* @ares\n\t* @deprecated\n\t* @public\n\t*/\n\tgetIsContainer: function () {\n\t\treturn this.isContainer;\n\t},\n\n\t/**\n\t* @ares\n\t* @deprecated\n\t* @public\n\t*/\n\tsetIsContainer: function (isContainer) {\n\t\tvar was = this.isContainer;\n\t\tthis.isContainer = !! isContainer;\n\n\t\tif (was !== isContainer) this.notify('isContainer', was, isContainer);\n\n\t\treturn this;\n\t}\n\n\t// .................................\n\n});\n\n/**\n* @static\n* @public\n*/\nkind.setDefaultCtor(Control);\n\n/**\n* @static\n* @public\n*/\nControl.renderDelegate = HTMLStringDelegate;\n\n/**\n* @private\n*/\nControl.registerDomEvents = function (id, control) {\n\tdispatcher.$[id] = control;\n};\n\n/**\n* @private\n*/\nControl.unregisterDomEvents = function (id) {\n\tdispatcher.$[id] = null;\n};\n\n/**\n* @private\n*/\nControl.normalizeCssStyleString = function (style) {\n\treturn style ? (\n\t\t(\";\" + style)\n\t\t// add a semi-colon if it's not the last character (also trim possible unnecessary whitespace)\n\t\t.replace(/([^;])\\s*$/, \"$1;\")\n\t\t// ensure we have one space after each colon or semi-colon\n\t\t.replace(/\\s*;\\s*([\\w-]+)\\s*:\\s*/g, \"; $1: \")\n\t\t// remove first semi-colon and space\n\t\t.substr(2).trim()\n\t) : \"\";\n};\n\n/**\n* @private\n*/\nControl.concat = function (ctor, props, instance) {\n\tvar proto = ctor.prototype || ctor,\n\t\tattrs,\n\t\tstr;\n\n\tif (props.classes) {\n\t\tif (instance) {\n\t\t\tstr = (proto.classes ? (proto.classes + ' ') : '') + props.classes;\n\t\t\tproto.classes = str;\n\t\t} else {\n\t\t\tstr = (proto.kindClasses || '') + (proto.classes ? (' ' + proto.classes) : '');\n\t\t\tproto.kindClasses = str;\n\t\t\tproto.classes = props.classes;\n\t\t}\n\t\tdelete props.classes;\n\t}\n\n\tif (props.style) {\n\t\tif (instance) {\n\t\t\tstr = (proto.style ? (proto.style + ';') : '') + (props.style + ';');\n\t\t\tproto.style = Control.normalizeCssStyleString(str);\n\t\t} else {\n\t\t\tstr = proto.kindStyle ? proto.kindStyle : '';\n\t\t\tstr += proto.style ? (';' + proto.style) : '';\n\t\t\tstr += props.style;\n\n\t\t\t// moved it all to kindStyle so that it will be available whenever instanced\n\t\t\tproto.kindStyle = Control.normalizeCssStyleString(str);\n\t\t}\n\t\tdelete props.style;\n\t}\n\n\tif (props.attributes) {\n\t\tattrs = proto.attributes;\n\t\tproto.attributes = attrs ? utils.mixin({}, [attrs, props.attributes]) : props.attributes;\n\t\tdelete props.attributes;\n\t}\n};\n\nControl.prototype.defaultKind = Control;\n\n// Control has to be *completely* set up before creating the floating layer otherwise things will\n// error out during construction.\n\n/**\n* @static\n* @public\n*/\nControl.FloatingLayer = FloatingLayer(Control);\n\n/**\n* @static\n* @public\n*/\nControl.floatingLayer = new Control.FloatingLayer({id: 'floatingLayer'});\n",
    "mtime": 1434758950000,
    "relPath": "enyo/Control",
    "requires": [
      "enyo",
      "./kind",
      "./utils",
      "./platform",
      "./dispatcher",
      "./fullscreen",
      "./options",
      "./roots",
      "./AccessibilitySupport",
      "./UiComponent",
      "./HTMLStringDelegate",
      "./dom",
      "./floatingLayer",
      "./gesture"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "enyo/Application",
    "base": "/Users/jason/Git/bootplate/src",
    "external": true,
    "relName": "enyo/Application",
    "name": "enyo/Application",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/Application.js",
    "contents": "require('enyo');\n\n/**\n* Contains the declaration for the {@link module:enyo/Application~Application} kind.\n* @module enyo/Application\n*/\n\nvar\n\tkind = require('./kind'),\n\tutils = require('./utils'),\n\tmaster = require('./master');\n\nvar \n\tViewController = require('./ViewController'),\n\tController = require('./Controller');\n\nvar \n\tapplications = {};\n\n/**\n* {@link module:enyo/Application~Application} is a type of {@link module:enyo/ViewController~ViewController} that\n* encapsulates a collection of [controllers]{@link module:enyo/Controller~Controller} and a\n* hierarchy of [controls]{@link module:enyo/Control~Control}. There may be multiple instances\n* of an [application]{@link module:enyo/Application~Application} at a given time, with unique\n* names and target [DOM nodes]{@glossary Node}. Within a given application, a\n* reference to the application is available on all [components]{@link module:enyo/Component~Component}\n* via the [app]{@link module:enyo/ApplicationSupport#app} property.\n*\n* @class Application\n* @extends module:enyo/ViewController~ViewController\n* @public\n*/\nexports = module.exports = kind(\n\t/** @lends module:enyo/Application~Application.prototype */ {\n\t\n\tname: 'enyo.Application',\n\t\n\t/**\n\t* @private\n\t*/\n\tkind: ViewController,\n\t\n\t/**\n\t* If set to `true` (the default), the [application's]{@link module:enyo/Application~Application}\n\t* [start()]{@link module:enyo/Application~Application#start} method will automatically be called\n\t* once its [create()]{@link module:enyo/Application~Application#create} method has completed\n\t* execution. Set this to `false` if additional setup (or an asynchronous\n\t* {@glossary event}) is required before starting.\n\t*\n\t* @type {Boolean}\n\t* @default true\n\t* @public\n\t*/\n\tautoStart: true,\n\t\n\t/**\n\t* If set to `true` (the default), the [application]{@link module:enyo/Application~Application} will immediately\n\t* [render]{@link module:enyo/Application~Application#render} its [view]{@link module:enyo/ViewController~ViewController#view} when\n\t* the [start()]{@link module:enyo/Application~Application#start} method has completed execution. Set this to\n\t* `false` to delay rendering if additional setup (or an asynchronous {@glossary event}) is\n\t* required before rendering.\n\t*\n\t* @type {Boolean}\n\t* @default true\n\t* @public\n\t*/\n\trenderOnStart: true,\n\t\n\t/**\n\t* The `defaultKind` for {@link module:enyo/Application~Application} is {@link module:enyo/Controller~Controller}.\n\t*\n\t* @type {Object}\n\t* @default module:enyo/Controller~Controller\n\t* @public\n\t*/\n\tdefaultKind: Controller,\n\n\t/**\n\t* A [bindable]{@link module:enyo/BindingSupport~BindingSupport}, read-only property that indicates whether the\n\t* [view]{@link module:enyo/ViewController~ViewController#view} has been rendered.\n\t*\n\t* @readonly\n\t* @type {Boolean}\n\t* @default false\n\t* @public\n\t*/\n\tviewReady: false,\n\t\n\t/**\n\t* An abstract method to allow for additional setup to take place after the application has\n\t* completed its initialization and is ready to be rendered. Overload this method to suit\n\t* your app's specific requirements.\n\t*\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\tstart: function () {\n\t\tif (this.renderOnStart) this.render();\n\t\treturn this;\n\t},\n\t\n\t/**\n\t* @method\n\t* @private\n\t*/\n\trender: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\t// call the super method render() from ViewController\n\t\t\tsup.apply(this, arguments);\n\t\t\tif (this.view && this.view.generated) this.set('viewReady', true);\n\t\t};\n\t}),\n\t\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tconstructor: kind.inherit(function (sup) {\n\t\treturn function (props) {\n\t\t\tif (props && typeof props.name == 'string') {\n\t\t\t\tutils.setPath(props.name, this);\n\t\t\t\t// since applications are stored by their id's we set it\n\t\t\t\t// to the name if it exists\n\t\t\t\tthis.id = (props && props.name);\n\t\t\t}\n\t\t\tsup.apply(this, arguments);\n\t\t\t// we alias the `controllers` property to the `$` property to preserve\n\t\t\t// backwards compatibility for the deprecated API for now\n\t\t\tthis.controllers = this.$;\n\t\t\tapplications[this.id || this.makeId()] = this;\n\t\t};\n\t}),\n\t\n\t/**\n\t* Allows normal creation flow and then executes the application's \n\t* [start()]{@link module:enyo/Application~Application#start} method if the\n\t* [autoStart]{@link module:enyo/Application~Application#autoStart} property is `true`.\n\t*\n\t* @method\n\t* @private\n\t*/\n\tcreate: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\t// ensure that we create() all of the components before continuing\n\t\t\tsup.apply(this, arguments);\n\t\t\tif (this.autoStart) this.start();\n\t\t\t\n\t\t};\n\t}),\n\t\n\t/**\n\t* Ensures that all [components]{@link module:enyo/Component~Component} created by this application have \n\t* their [app]{@link module:enyo/ApplicationSupport#app} property set correctly.\n\t*\n\t* @method\n\t* @private\n\t*/\n\tadjustComponentProps: kind.inherit(function (sup) {\n\t\treturn function (props) {\n\t\t\tprops.app = this;\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\t\n\t/**\n\t* Cleans up the registration for the application.\n\t*\n\t* @method\n\t* @private\n\t*/\n\tdestroy: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tdelete applications[this.id];\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\t\n\t/**\n\t* Ensures that [events]{@glossary event} bubbling from the views will reach \n\t* {@link module:enyo/master} as expected.\n\t*\n\t* @private\n\t*/\n\towner: master\n});\n\n/**\n* Any {@link module:enyo/Application~Application} instances will be available by name from this \n* [object]{@glossary Object}. If no name is provided for an \n* [application]{@link module:enyo/Application~Application}, a name will be generated for it.\n*\n* @public\n* @type {Object}\n* @default {}\n*/\nexports.applications = applications;\n",
    "mtime": 1434758950000,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relPath": "enyo/Application",
    "requires": [
      "enyo",
      "./kind",
      "./utils",
      "./master",
      "./ViewController",
      "./Controller"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./gesture",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/gesture",
    "name": "enyo/gesture",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/gesture",
    "isPackage": true,
    "packageFile": "/Users/jason/Git/bootplate/lib/enyo/lib/gesture/package.json",
    "mtime": {
      "/Users/jason/Git/bootplate/lib/enyo/lib/gesture/package.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo/lib/gesture/gesture.js": 1434758950000
    },
    "json": {
      "main": "gesture.js"
    },
    "main": "/Users/jason/Git/bootplate/lib/enyo/lib/gesture/gesture.js",
    "contents": "require('enyo');\n/**\n * @module enyo/gesture\n */\n\n\nvar\n\tdispatcher = require('../dispatcher'),\n\tdom = require('../dom'),\n\tplatform = require('../platform'),\n\tutils = require('../utils');\n\nvar\n\tdrag = require('./drag'),\n\ttouchGestures = require('./touchGestures'),\n\tgestureUtil = require('./util');\n\n\n/**\n* Enyo supports a set of normalized events that work similarly across all supported platforms.\n* These events are provided so that users can write a single set of event handlers for\n* applications that run on both mobile and desktop platforms. They are needed because desktop\n* and mobile platforms handle basic input differently.\n*\n* For more information on normalized input events and their associated properties, see the\n* documentation on [Event Handling]{@linkplain $dev-guide/key-concepts/event-handling.html}\n* in the Enyo Developer Guide.\n*\n* @module enyo/gesture\n* @public\n*/\nvar gesture = module.exports = {\n\t/**\n\t* Handles \"down\" [events]{@glossary event}, including `mousedown` and `keydown`. This is\n\t* responsible for the press-and-hold key repeater.\n\t*\n\t* @param {Event} evt - The standard {@glossary event} [object]{glossary Object}.\n\t* @public\n\t*/\n\tdown: function(evt) {\n\t\tvar e = gestureUtil.makeEvent('down', evt);\n\n\t\t// prepare for hold\n\t\tdrag.prepareHold(e);\n\n\t\t// enable prevention of tap event\n\t\te.preventTap = function() {\n\t\t\te._tapPrevented = true;\n\t\t};\n\n\t\tdispatcher.dispatch(e);\n\t\tthis.downEvent = e;\n\n\t\t// start hold, now that control has had a chance\n\t\t// to override the holdPulse configuration\n\t\tdrag.beginHold(e);\n\t},\n\n\t/**\n\t* Handles `mousemove` [events]{@glossary event}.\n\t*\n\t* @param {Event} evt - The standard {@glossary event} [object]{glossary Object}.\n\t* @public\n\t*/\n\tmove: function(evt) {\n\t\tvar e = gestureUtil.makeEvent('move', evt);\n\t\t// include delta and direction v. down info in move event\n\t\te.dx = e.dy = e.horizontal = e.vertical = 0;\n\t\tif (e.which && this.downEvent) {\n\t\t\te.dx = evt.clientX - this.downEvent.clientX;\n\t\t\te.dy = evt.clientY - this.downEvent.clientY;\n\t\t\te.horizontal = Math.abs(e.dx) > Math.abs(e.dy);\n\t\t\te.vertical = !e.horizontal;\n\t\t}\n\t\tdispatcher.dispatch(e);\n\t},\n\n\t/**\n\t* Handles \"up\" [events]{@glossary event}, including `mouseup` and `keyup`.\n\t*\n\t* @param {Event} evt - The standard {@glossary event} [object]{glossary Object}.\n\t* @public\n\t*/\n\tup: function(evt) {\n\t\tvar e = gestureUtil.makeEvent('up', evt);\n\n\t\t// We have added some logic to synchronize up and down events in certain scenarios (i.e.\n\t\t// clicking multiple buttons with a mouse) and to generally guard against any potential\n\t\t// asymmetry, but a full solution would be to maintain a map of up/down events as an \n\t\t// ideal solution, for future work.\n\t\te._tapPrevented = this.downEvent && this.downEvent._tapPrevented && this.downEvent.which == e.which;\n\t\te.preventTap = function() {\n\t\t\te._tapPrevented = true;\n\t\t};\n\n\t\tdispatcher.dispatch(e);\n\t\tif (!e._tapPrevented && this.downEvent && this.downEvent.which == 1) {\n\t\t\tvar target = this.findCommonAncestor(this.downEvent.target, evt.target);\n\n\t\t\t// the common ancestor of the down/up events is the target of the tap\n\t\t\tif(target) {\n\t\t\t\tif(this.supportsDoubleTap(target)) {\n\t\t\t\t\tthis.doubleTap(e, target);\n\t\t\t\t} else {\n\t\t\t\t\tthis.sendTap(e, target);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (this.downEvent && this.downEvent.which == e.which) {\n\t\t\tthis.downEvent = null;\n\t\t}\n\t},\n\n\t/**\n\t* Handles `mouseover` [events]{@glossary event}.\n\t*\n\t* @param {Event} evt - The standard {@glossary event} [object]{glossary Object}.\n\t* @public\n\t*/\n\tover: function(evt) {\n\t\tvar e = gestureUtil.makeEvent('enter', evt);\n\t\tdispatcher.dispatch(e);\n\t},\n\n\t/**\n\t* Handles `mouseout` [events]{@glossary event}.\n\t*\n\t* @param {Event} evt - The standard {@glossary event} [object]{glossary Object}.\n\t* @public\n\t*/\n\tout: function(evt) {\n\t\tvar e = gestureUtil.makeEvent('leave', evt);\n\t\tdispatcher.dispatch(e);\n\t},\n\n\t/**\n\t* Generates `tap` [events]{@glossary event}.\n\t*\n\t* @param {Event} evt - The standard {@glossary event} [object]{glossary Object}.\n\t* @public\n\t*/\n\tsendTap: function(evt, target) {\n\t\tvar e = gestureUtil.makeEvent('tap', evt);\n\t\te.target = target;\n\t\tdispatcher.dispatch(e);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\ttapData: {\n\t\tid: null,\n\t\ttimer: null,\n\t\tstart: 0\n\t},\n\n\t/**\n\t* Global configuration for double tap support. If this is true, all tap events for Controls\n\t* that do not have {@link module:enyo/Control~Control#doubleTapEnabled} explicitly set to false will be\n\t* delayed by the {@link module:enyo/Control~Control#doubleTapInterval}.\n\t*\n\t* @type {Boolean}\n\t* @default  false\n\t* @public\n\t*/\n\tdoubleTapEnabled: false,\n\n\t/**\n\t* Determines if the provided target node supports double tap events\n\t*\n\t* @param {Node} target\n\t* @return {Boolean}\n\t* @private\n\t*/\n\tsupportsDoubleTap: function(target) {\n\t\tvar obj = dispatcher.findDispatchTarget(target);\n\n\t\tif(obj) {\n\t\t\t// Control.doubleTapEnabled is a tri-value property. The default is 'inherit'\n\t\t\t// which takes its cue from gesture's doubleTapEnabled. Values of true or false\n\t\t\t// override the default. So, if the global is true, any truthy value on Control\n\t\t\t// results in true. If the global is false, only an explicit true on Control\n\t\t\t// results in true.\n\t\t\treturn this.doubleTapEnabled? !!obj.doubleTapEnabled : obj.doubleTapEnabled === true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tdoubleTap: function(evt, t) {\n\t\tvar obj = dispatcher.findDispatchTarget(t);\n\n\t\tif(this.tapData.id !== obj.id) {\t// this is the first tap\n\t\t\tthis.resetTapData(true);\n\n\t\t\tthis.tapData.id = obj.id;\n\t\t\tthis.tapData.event = evt;\n\t\t\tthis.tapData.target = t;\n\t\t\tthis.tapData.timer = setTimeout(utils.bind(this, \"resetTapData\", true), obj.doubleTapInterval);\n\t\t\tthis.tapData.start = utils.perfNow();\n\t\t} else {\t\t\t\t\t\t\t// this is the double tap\n\t\t\tvar e2 = gestureUtil.makeEvent('doubletap', evt);\n\t\t\te2.target = t;\n\t\t\te2.tapInterval = utils.perfNow() - this.tapData.start;\n\t\t\tthis.resetTapData(false);\n\t\t\tdispatcher.dispatch(e2);\n\t\t}\n\t},\n\n\tresetTapData: function(sendTap) {\n\t\tvar data = this.tapData;\n\n\t\tif(sendTap && data.id) {\n\t\t\tthis.sendTap(data.event, data.target);\n\t\t}\n\n\t\tclearTimeout(data.timer);\n\t\tdata.id = data.start = data.event = data.target = data.timer = null;\n\t},\n\n\t/**\n\t* Given two [DOM nodes]{@glossary Node}, searches for a shared ancestor (looks up\n\t* the hierarchic [DOM]{@glossary DOM} tree of [nodes]{@glossary Node}). The shared\n\t* ancestor node is returned.\n\t*\n\t* @param {Node} controlA - Control one.\n\t* @param {Node} controlB - Control two.\n\t* @returns {(Node|undefined)} The shared ancestor.\n\t* @public\n\t*/\n\tfindCommonAncestor: function(controlA, controlB) {\n\t\tvar p = controlB;\n\t\twhile (p) {\n\t\t\tif (this.isTargetDescendantOf(controlA, p)) {\n\t\t\t\treturn p;\n\t\t\t}\n\t\t\tp = p.parentNode;\n\t\t}\n\t},\n\n\t/**\n\t* Given two controls, returns `true` if the `child` is inside the `parent`.\n\t*\n\t* @param {Node} child - The child to search for.\n\t* @param {Node} parent - The expected parent.\n\t* @returns {(Boolean|undefined)} `true` if the `child` is actually a child of `parent`.\n\t*/\n\tisTargetDescendantOf: function(child, parent) {\n\t\tvar c = child;\n\t\twhile(c) {\n\t\t\tif (c == parent) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tc = c.parentNode;\n\t\t}\n\t},\n\n\t/**\n\t* @todo I'd rather refine the public API of gesture rather than simply forwarding the internal\n\t*   drag module but this will work in the interim. - ryanjduffy\n\t* \n\t* Known Consumers:\n\t*  - Spotlight.onAcceleratedKey - (prepare|begin|end)Hold()\n\t*  - Moonstone - configureHoldPulse()\n\t*/\n\tdrag: drag\n};\n\n/**\n* Contains various methods for gesture events.\n*\n* @type {object}\n* @public\n*/\nmodule.exports.events = {\n\t/**\n\t* Shortcut to [gesture.down()]{@link module:enyo/gesture#down}.\n\t*\n\t* @memberof! module:enyo/gesture#\n\t* @method events.mousedown\n\t* @public\n\t*/\n\tmousedown: function(e) {\n\t\tgesture.down(e);\n\t},\n\n\t/**\n\t* Shortcut to [gesture.up()]{@link module:enyo/gesture#up}.\n\t*\n\t* @memberof! module:enyo/gesture#\n\t* @method events.mouseup\n\t* @public\n\t*/\n\tmouseup: function(e) {\n\t\tgesture.up(e);\n\t},\n\n\t/**\n\t* Shortcut to [gesture.move()]{@link module:enyo/gesture#move}.\n\t*\n\t* @memberof! module:enyo/gesture#\n\t* @method events.mousemove\n\t* @public\n\t*/\n\tmousemove:  function(e) {\n\t\tgesture.move(e);\n\t},\n\n\t/**\n\t* Shortcut to [gesture.over()]{@link module:enyo/gesture#over}.\n\t*\n\t* @memberof! module:enyo/gesture#\n\t* @method events.mouseover\n\t* @public\n\t*/\n\tmouseover:  function(e) {\n\t\tgesture.over(e);\n\t},\n\n\t/**\n\t* Shortcut to [gesture.out()]{@link module:enyo/gesture#out}.\n\t*\n\t* @memberof! module:enyo/gesture#\n\t* @method events.mouseout\n\t* @public\n\t*/\n\tmouseout:  function(e) {\n\t\tgesture.out(e);\n\t}\n};\n\n// Firefox mousewheel handling\ndom.requiresWindow(function() {\n\tif (document.addEventListener) {\n\t\tdocument.addEventListener('DOMMouseScroll', function(inEvent) {\n\t\t\tvar e = utils.clone(inEvent);\n\t\t\te.preventDefault = function() {\n\t\t\t\tinEvent.preventDefault();\n\t\t\t};\n\t\t\te.type = 'mousewheel';\n\t\t\tvar p = e.VERTICAL_AXIS == e.axis ? 'wheelDeltaY' : 'wheelDeltaX';\n\t\t\te[p] =  e.detail * -40;\n\t\t\tdispatcher.dispatch(e);\n\t\t}, false);\n\t}\n});\n\n/**\n* @private\n*/\nvar handlers = {\n\ttouchstart: true,\n\ttouchmove: true,\n\ttouchend: true\n};\n\n/**\n* @private\n*/\ndispatcher.features.push(function (e) {\n\tvar type = e.type;\n\n\t// NOTE: beware of properties in gesture.events and drag inadvertently mapped to event types\n\tif (gesture.events[type]) {\n\t\tgesture.events[type](e);\n\t}\n\tif (!platform.gesture && platform.touch && handlers[type]) {\n\t\ttouchGestures[type](e);\n\t}\n\tif (drag[type]) {\n\t\tdrag[type](e);\n\t}\n});\n",
    "relPath": "enyo/gesture",
    "requires": [
      "enyo",
      "../dispatcher",
      "../dom",
      "../platform",
      "../utils",
      "./drag",
      "./touchGestures",
      "./util"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./ViewController",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/ViewController",
    "name": "enyo/ViewController",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/ViewController.js",
    "contents": "require('enyo');\n\n/**\n* Contains the declaration for the {@link module:enyo/ViewController~ViewController} kind.\n* @module enyo/ViewController\n*/\n\nvar\n\tkind = require('./kind'),\n\tutils = require('./utils');\n\nvar\n\tController = require('./Controller'),\n\tUiComponent = require('./UiComponent');\n\nvar\n\tDom = require('./dom');\n\n/**\n* {@link module:enyo/ViewController~ViewController} is designed to manage the lifecycle of a particular view\n* ({@link module:enyo/Control~Control}) that it owns. It is capable of controlling when a view is inserted into\n* the DOM and where, managing [events]{@glossary event} bubbled from the view, and isolating (or\n* encapsulating) the entire view hierarchy below it. Alternatively, it may be implemented as a\n* [component]{@link module:enyo/Component~Component} in a larger hierarchy, in which case it will inject its view\n* into its parent rather than directly into the DOM. And, of course, a ViewController may be\n* used as the `controller` property of another view, although this usage will (by default)\n* result in the removal of its own view from the {@link module:enyo/Component~Component} bubbling hierarchy.\n*\n* Note that `enyo.ViewController` may have components defined in its\n* `components` [array]{@glossary Array}, but these components should\n* not be `enyo.Controls`.\n*\n* @class ViewController\n* @extends module:enyo/Controller~Controller\n* @public\n*/\nmodule.exports = kind(\n\t/** @lends module:enyo/ViewController~ViewController.prototype */ {\n\n\tname: 'enyo.ViewController',\n\n\t/**\n\t* @private\n\t*/\n\tkind: Controller,\n\n\t/**\n\t* The `view` property may either be a [constructor]{@glossary constructor}, an\n\t* instance of {@link module:enyo/Control~Control}, an [object]{@glossary Object}\n\t* description of the view ([object literal/hash]), or `null` if it will be\n\t* set later. Setting this property to a constructor or string naming a kind\n\t* will automatically create an instance of that kind according to this\n\t* controller's settings. If the `view` is set to an instance, it will be\n\t* rendered according to the properties of the controller. If this property\n\t* is a constructor, it will be preserved in the\n\t* [viewKind]{@link module:enyo/ViewController~ViewController#viewKind} property. Once\n\t* initialization is complete, the instance of this controller's view will be\n\t* available via this property.\n\t*\n\t* @type {Control|Function|Object}\n\t* @default null\n\t* @public\n\t*/\n\tview: null,\n\n\t/**\n\t* The preserved [kind]{@glossary kind} for this controller's view. You may\n\t* set this to a [constructor]{@glossary constructor} (or the\n\t* [view]{@link module:enyo/ViewController~ViewController#view} property). In either case, if a\n\t* view is set explicitly or this property is used, the constructor will be\n\t* available via this property.\n\t*\n\t* @type {Function}\n\t* @default null\n\t* @public\n\t*/\n\tviewKind: null,\n\n\t/**\n\t* Designates where the controller's view will render. This should be a\n\t* string consisting of either `'document.body'` (the default) or the DOM id\n\t* of a node (either inserted by an {@link module:enyo/Control~Control} or static HTML\n\t* already in the `document.body`). If the controller has a parent (because\n\t* it was instantiated as a component in an `enyo.Control`, this property\n\t* will be ignored and the view will instead be rendered in the parent. This\n\t* will not happen if the controller is a component of {@link module:enyo/Component~Component}\n\t* or is set as the `controller` property of an `enyo.Control`.\n\t*\n\t* @type {String}\n\t* @default 'document.body'\n\t* @public\n\t*/\n\trenderTarget: 'document.body',\n\n\t/**\n\t* When the view of the controller has its [destroy()]{@link module:enyo/Control~Control#destroy}\n\t* method called, it automatically triggers its own removal from the controller's\n\t* [view]{@link module:enyo/ViewController~ViewController#view} property. By default, the controller\n\t* will not create a new view (from [viewKind]{@link module:enyo/ViewController~ViewController#viewKind})\n\t* automatically unless this flag is set to `true`.\n\t*\n\t* @type {Boolean}\n\t* @default false\n\t* @public\n\t*/\n\tresetView: false,\n\n\t/**\n\t* Renders the controller's view, if possible. If the controller is a\n\t* component of a [UiComponent]{@link module:enyo/UiComponent~UiComponent}, the view will be\n\t* rendered into its container; otherwise, the view will be rendered into the\n\t* controller's [renderTarget]{@link module:enyo/ViewController~ViewController#renderTarget}. If\n\t* the view is already rendered, this method will do nothing.\n\t*\n\t* @param {String} [target] - When specified, this value will be used instead of\n\t*\t[renderTarget]{@link module:enyo/ViewController~ViewController#renderTarget}.\n\t* @public\n\t*/\n\trender: function (target) {\n\t\tvar v = this.view,\n\t\t\tt = target || this.renderTarget;\n\t\tif (v) {\n\t\t\tif (v.hasNode() && v.generated) { return; }\n\t\t\t// here we test to see if we need to render it into our target node or the container\n\t\t\tif (this.container) {\n\t\t\t\tv.render();\n\t\t\t} else {\n\t\t\t\tv.renderInto(Dom.byId(t) || utils.getPath.call(window, t));\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* Renders the view into the specified `target` and sets the\n\t* [renderTarget]{@link module:enyo/ViewController~ViewController#renderTarget} property to\n\t* `target`.\n\t*\n\t* @param {String} target - Where the view will be rendered into.\n\t* @public\n\t*/\n\trenderInto: function (target) {\n\t\tthis.render((this.renderTarget=target));\n\t},\n\n\t/**\n\t* Responds to changes in the controller's [view]{@link module:enyo/ViewController~ViewController#view}\n\t* property during initialization or whenever `set('view', ...)` is called.\n\t* If a [constructor]{@glossary constructor} is found, it will be instanced\n\t* or resolved from a [string]{@glossary String}. If a previous view exists\n\t* and the controller is its [owner]{@link module:enyo/Component~Component#owner}, it will be\n\t* destroyed; otherwise, it will simply be removed.\n\t*\n\t* @private\n\t*/\n\tviewChanged: function (previous) {\n\t\tif (previous) {\n\t\t\tprevious.set('bubbleTarget', null);\n\t\t\tif (previous.owner === this && !previous.destroyed) {\n\t\t\t\tprevious.destroy();\n\t\t\t}\n\t\t\tif (previous.destroyed && !this.resetView) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tvar v = this.view;\n\n\t\t// if it is a function we need to instance it\n\t\tif (typeof v == 'function') {\n\t\t\t// save the constructor for later\n\t\t\tthis.viewKind = v;\n\t\t\tv = null;\n\t\t}\n\n\t\tif ((!v && this.viewKind) || (v && typeof v == 'object' && !(v instanceof UiComponent))) {\n\t\t\tvar d = (typeof v == 'object' && v !== null && !v.destroyed && v) || {kind: this.viewKind},\n\t\t\t\ts = this;\n\t\t\t// in case it isn't set...\n\t\t\td.kind = d.kind || this.viewKind || kind.getDefaultCtor();\n\t\t\tv = this.createComponent(d, {\n\t\t\t\towner: this,\n\t\t\t\t// if this controller is a component of a UiComponent kind then it\n\t\t\t\t// will have assigned a container that we can add to the child\n\t\t\t\t// so it will register as a child and control to be rendered in the\n\t\t\t\t// correct location\n\t\t\t\tcontainer: this.container || null,\n\t\t\t\tbubbleTarget: this\n\t\t\t});\n\t\t\tv.extend({\n\t\t\t\tdestroy: kind.inherit(function (sup) {\n\t\t\t\t\treturn function () {\n\t\t\t\t\t\tsup.apply(this, arguments);\n\t\t\t\t\t\t// if the bubble target is the view contorller then we need to\n\t\t\t\t\t\t// let it know we've been destroyed\n\t\t\t\t\t\tif (this.bubbleTarget === s) {\n\t\t\t\t\t\t\tthis.bubbleTarget.set('view', null);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t});\n\t\t} else if (v && v instanceof UiComponent) {\n\t\t\t// make sure we grab the constructor from an instance so we know what kind\n\t\t\t// it was to recreate later if necessary\n\t\t\tif (!this.viewKind) {\n\t\t\t\tthis.viewKind = v.ctor;\n\t\t\t}\n\t\t\tv.set('bubbleTarget', this);\n\t\t}\n\t\tthis.view = v;\n\t},\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tcreate: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tsup.apply(this, arguments);\n\t\t\tthis.viewChanged();\n\t\t};\n\t}),\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tdestroy: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tthis.view = null;\n\t\t\tthis.viewKind = null;\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\t/**\n\t\tThe `controller` can't be the instance owner of its child view for event\n\t\tpropagation reasons. When this flag is `true`, it ensures that events will\n\t\tnot be handled multiple times (by the `controller` and its `view`\n\t\tseparately).\n\t*/\n\tnotInstanceOwner: true\n});\n",
    "mtime": 1434758950000,
    "relPath": "enyo/ViewController",
    "requires": [
      "enyo",
      "./kind",
      "./utils",
      "./Controller",
      "./UiComponent",
      "./dom"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "enyo/i18n",
    "base": "/Users/jason/Git/bootplate/lib/moonstone/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/i18n",
    "name": "enyo/i18n",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/i18n.js",
    "contents": "/**\n* A set of extensible methods to enable internationalization of enyo applications\n*\n* @module enyo/i18n\n*/\nrequire('enyo');\n\nvar\n\tdispatcher = require('./dispatcher'),\n\tutils = require('./utils'),\n\tSignals = require('./Signals');\n\n/**\n* Provides a stub function for i18n string translation. This allows strings to be wrapped in\n* preparation for localization. If a i18n library is not loaded, this function will return the\n* string as is.\n* \n* `$L('Welcome')`\n* \n* If a compatible i18n library is loaded, this function will be replaced by the i18n library's\n* version, which translates wrapped strings to strings from a developer-provided resource file\n* corresponding to the current user locale.\n*\n* @param {String} str - The {@glossary String} to translate.\n* @returns {String} The translated {@glossary String}.\n* @public\n*/\nexports.$L = new utils.Extensible(function (str) {\n\treturn str;\n});\n\n/**\n* Enyo controls may register for an `onlocalechange` signal to dynamically update their\n* presentation based on changes to the user's locale. This feature is currently used in webOS,\n* where Cordova for webOS listens for changes to the system locales and fires a `localechange`\n* event on the `document` object. Similar functionality could be implemented on other platforms\n* via a Cordova plugin or by other means.\n* \n* Enyo registers an event listener for the `localechange` event and broadcasts the\n* `onlocalechange` signal when the locale has changed. Before broadcasting, Enyo calls\n* `enyo.updateLocale()`. The default implementation of `enyo.updateLocale()` is a stub, but a\n* i18n library may override it to update its internal state before the `onlocalechange` signal\n* is broadcast.\n* \n* This feature is not supported on IE8, which doesn't support `addEventListener()`.\n*\n* @private\n*/\nexports.updateLocale = new utils.Extensible(function () {\n\t// This is a stub, to be implemented by a i18n library as needed\n\tSignals.send('onlocalechange');\n});\n\ndispatcher.listen(document, 'localechange', function (e) {\n\texports.updateLocale();\n});",
    "mtime": 1434758950000,
    "relPath": "enyo/i18n",
    "requires": [
      "enyo",
      "./dispatcher",
      "./utils",
      "./Signals"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./fullscreen",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/fullscreen",
    "name": "enyo/fullscreen",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/fullscreen",
    "isPackage": true,
    "packageFile": "/Users/jason/Git/bootplate/lib/enyo/lib/fullscreen/package.json",
    "mtime": {
      "/Users/jason/Git/bootplate/lib/enyo/lib/fullscreen/package.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo/lib/fullscreen/fullscreen.js": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo/lib/fullscreen/fullscreen.css": 1434758950000
    },
    "json": {
      "main": "fullscreen.js",
      "styles": [
        "fullscreen.css"
      ]
    },
    "main": "/Users/jason/Git/bootplate/lib/enyo/lib/fullscreen/fullscreen.js",
    "contents": "require('enyo');\n\nvar\n\tdispatcher = require('../dispatcher'),\n\tutils = require('../utils');\nvar\n\tSignals = require('../Signals'),\n\tready = require('../ready');\n\n/**\n* Normalizes and provides fullscreen support for [controls]{@link module:enyo/Control~Control},\n* based on the [fullscreen]{@glossary fullscreen} API.\n*\n* @module enyo/fullscreen\n* @public\n*/\nvar fullscreen = module.exports = {\n\t\n\t/**\n\t* Reference to the current fullscreen [control]{@link module:enyo/Control~Control}.\n\t*\n\t* @private\n\t*/\n\tfullscreenControl: null,\n\n\t/**\n\t* Reference to the current fullscreen element (fallback for platforms\n\t* without native support).\n\t*\n\t* @private\n\t*/\n\tfullscreenElement: null,\n\n\t/** \n\t* Reference to that [control]{@link module:enyo/Control~Control} that requested fullscreen.\n\t* \n\t* @private\n\t*/\n\trequestor: null,\n\n\t/** \n\t* Native accessor used to get reference to the current fullscreen element.\n\t*\n\t* @private\n\t*/\n\telementAccessor:\n\t\t('fullscreenElement' in document) ? 'fullscreenElement' :\n\t\t('mozFullScreenElement' in document) ? 'mozFullScreenElement' :\n\t\t('webkitFullscreenElement' in document) ? 'webkitFullscreenElement' :\n\t\tnull,\n\n\t/** \n\t* Native accessor used to request fullscreen.\n\t*\n\t* @private\n\t*/\n\trequestAccessor:\n\t\t('requestFullscreen' in document.documentElement) ? 'requestFullscreen' :\n\t\t('mozRequestFullScreen' in document.documentElement) ? 'mozRequestFullScreen' :\n\t\t('webkitRequestFullscreen' in document.documentElement) ? 'webkitRequestFullscreen' :\n\t\tnull,\n\n\t/** \n\t* Native accessor used to cancel fullscreen.\n\t*\n\t* @private\n\t*/\n\tcancelAccessor:\n\t\t('cancelFullScreen' in document) ? 'cancelFullScreen' :\n\t\t('mozCancelFullScreen' in document) ? 'mozCancelFullScreen' :\n\t\t('webkitCancelFullScreen' in document) ? 'webkitCancelFullScreen' :\n\t\tnull,\n\n\t/**\n\t* Determines whether the platform supports the [fullscreen]{@glossary fullscreen} API.\n\t* \n\t* @returns {Boolean} Returns `true` if platform supports all of the \n\t*\t[fullscreen]{@glossary fullscreen} API, `false` otherwise.\n\t* @public\n\t*/\n\tnativeSupport: function() {\n\t\treturn (this.elementAccessor !== null && this.requestAccessor !== null && this.cancelAccessor !== null);\n\t},\n\n\t/** \n\t* Normalizes `getFullscreenElement()`.\n\t*\n\t* @public\n\t*/\n\tgetFullscreenElement: function() {\n\t\treturn (this.nativeSupport()) ? document[this.elementAccessor] : this.fullscreenElement;\n\t},\n\n\t/** \n\t* Returns current fullscreen [control]{@link module:enyo/Control~Control}.\n\t*\n\t* @public\n\t*/\n\tgetFullscreenControl: function() {\n\t\treturn this.fullscreenControl;\n\t},\n\n\t/**\n\t* Normalizes `requestFullscreen()`.\n\t*\n\t* @public\n\t*/\n\trequestFullscreen: function(ctl) {\n\t\tif (this.getFullscreenControl() || !(ctl.hasNode())) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.requestor = ctl;\n\n\t\t// Only use native request if platform supports all of the API\n\t\tif (this.nativeSupport()) {\n\t\t\tctl.hasNode()[this.requestAccessor]();\n\t\t} else {\n\t\t\tthis.fallbackRequestFullscreen();\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t/** \n\t* Normalizes `cancelFullscreen()`.\n\t*\n\t* @public\n\t*/\n\tcancelFullscreen: function() {\n\t\tif (this.nativeSupport()) {\n\t\t\tdocument[this.cancelAccessor]();\n\t\t} else {\n\t\t\tthis.fallbackCancelFullscreen();\n\t\t}\n\t},\n\n\t/** \n\t* Fallback support for setting fullscreen element (done by browser on platforms with\n\t* native support).\n\t*\n\t* @private\n\t*/\n\tsetFullscreenElement: function(node) {\n\t\tthis.fullscreenElement = node;\n\t},\n\n\t/** \n\t* Sets current fullscreen [control]{@link module:enyo/Control~Control}.\n\t*\n\t* @private\n\t*/\n\tsetFullscreenControl: function(ctl) {\n\t\tthis.fullscreenControl = ctl;\n\t},\n\n\t/** \n\t* Fallback fullscreen request for platforms without fullscreen support.\n\t*\n\t* @private\n\t*/\n\tfallbackRequestFullscreen: function() {\n\t\tvar control = this.requestor;\n\n\t\tif (!control) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get before node to allow us to exit floating layer to the proper position\n\t\tcontrol.prevAddBefore = control.parent.controlAtIndex(control.indexInContainer() + 1);\n\t\t\n\t\tvar floatingLayer = Control.floatingLayer;\n\t\t\n\t\t// Render floating layer if we need to\n\t\tif (!floatingLayer.hasNode()) {\n\t\t\tfloatingLayer.render();\n\t\t}\n\n\t\tcontrol.addClass('enyo-fullscreen');\n\t\tcontrol.appendNodeToParent(floatingLayer.hasNode());\n\t\tcontrol.resize();\n\n\t\tthis.setFullscreenControl(control);\n\t\tthis.setFullscreenElement(control.hasNode());\n\t},\n\n\t/** \n\t* Fallback cancel fullscreen for platforms without fullscreen support.\n\t*\n\t* @private\n\t*/\n\tfallbackCancelFullscreen: function() {\n\t\tvar control = this.fullscreenControl,\n\t\t\tbeforeNode,\n\t\t\tparentNode\n\t\t;\n\n\t\tif (!control) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Find beforeNode based on _this.addBefore_ and _this.prevAddBefore_\n\t\tbeforeNode = (control.prevAddBefore) ? control.prevAddBefore.hasNode() : null;\n\t\tparentNode = control.parent.hasNode();\n\t\tcontrol.prevAddBefore = null;\n\n\t\tcontrol.removeClass('enyo-fullscreen');\n\n\t\tif (!beforeNode) {\n\t\t\tcontrol.appendNodeToParent(parentNode);\n\t\t} else {\n\t\t\tcontrol.insertNodeInParent(parentNode, beforeNode);\n\t\t}\n\n\t\tcontrol.resize();\n\n\t\tthis.setFullscreenControl(null);\n\t\tthis.setFullscreenElement(null);\n\t},\n\n\t/** \n\t* Listens for fullscreen change {@glossary event} and broadcasts it as a\n\t* normalized event.\n\t*\n\t* @private\n\t*/\n\tdetectFullscreenChangeEvent: function() {\n\t\tthis.setFullscreenControl(this.requestor);\n\t\tthis.requestor = null;\n\n\t\t// Broadcast change\n\t\tSignals.send('onFullscreenChange');\n\t}\n};\n\n/**\n* Normalizes platform-specific fullscreen change [events]{@glossary event}.\n*\n* @private\n*/\nready(function() {\n\t// no need for IE8 fallback, since it won't ever send this event\n\tif (document.addEventListener) {\n\t\tdocument.addEventListener('webkitfullscreenchange', utils.bind(fullscreen, 'detectFullscreenChangeEvent'), false);\n\t\tdocument.addEventListener('mozfullscreenchange',    utils.bind(fullscreen, 'detectFullscreenChangeEvent'), false);\n\t\tdocument.addEventListener('fullscreenchange',       utils.bind(fullscreen, 'detectFullscreenChangeEvent'), false);\n\t}\n});\n\n/**\n* If this platform doesn't have native support for fullscreen, add an escape handler to mimic \n* native behavior.\n*/\nif(!fullscreen.nativeSupport()) {\n\tdispatcher.features.push(\n\t\tfunction(e) {\n\t\t\tif (e.type === 'keydown' && e.keyCode === 27) {\n\t\t\t\tfullscreen.cancelFullscreen();\n\t\t\t}\n\t\t}\n\t);\n}\n",
    "relPath": "enyo/fullscreen",
    "requires": [
      "enyo",
      "../dispatcher",
      "../utils",
      "../Signals",
      "../ready"
    ],
    "requests": [],
    "resolved": true,
    "styleEntries": [
      {
        "glob": "fullscreen.css",
        "files": [
          "/Users/jason/Git/bootplate/lib/enyo/lib/fullscreen/fullscreen.css"
        ],
        "sources": {
          "/Users/jason/Git/bootplate/lib/enyo/lib/fullscreen/fullscreen.css": "\n/* Fullscreen CSS */\n:-webkit-full-screen {\n\twidth: 100% !important;\n\theight: 100% !important;\n}\n:-moz-full-screen {\n\twidth: 100% !important;\n\theight: 100% !important;\n}\n:-ms-full-screen {\n\twidth: 100% !important;\n\theight: 100% !important;\n}\n:-o-full-screen {\n\twidth: 100% !important;\n\theight: 100% !important;\n}\n:full-screen {\n\twidth: 100% !important;\n\theight: 100% !important;\n}\n/* Fallback Fullscreen CSS */\nbody .enyo-fullscreen {\n\tposition: absolute !important;\n\tleft: 0 !important;\n\ttop: 0 !important;\n\tright: 0 !important;\n\tbottom: 0 !important;\n\twidth: 100% !important;\n\theight: 100% !important;\n\tbox-sizing: border-box !important;\n}"
        },
        "source": "\n/* Fullscreen CSS */\n:-webkit-full-screen {\n\twidth: 100% !important;\n\theight: 100% !important;\n}\n:-moz-full-screen {\n\twidth: 100% !important;\n\theight: 100% !important;\n}\n:-ms-full-screen {\n\twidth: 100% !important;\n\theight: 100% !important;\n}\n:-o-full-screen {\n\twidth: 100% !important;\n\theight: 100% !important;\n}\n:full-screen {\n\twidth: 100% !important;\n\theight: 100% !important;\n}\n/* Fallback Fullscreen CSS */\nbody .enyo-fullscreen {\n\tposition: absolute !important;\n\tleft: 0 !important;\n\ttop: 0 !important;\n\tright: 0 !important;\n\tbottom: 0 !important;\n\twidth: 100% !important;\n\theight: 100% !important;\n\tbox-sizing: border-box !important;\n}"
      }
    ]
  },
  {
    "path": "./drag",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib/gesture",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/gesture/drag",
    "name": "enyo/gesture/drag",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/gesture/drag.js",
    "contents": "var\n\tdispatcher = require('../dispatcher'),\n\tplatform = require('../platform'),\n\tutils = require('../utils');\n\nvar\n\tgestureUtil = require('./util');\n\n/**\n* Enyo supports a cross-platform set of drag [events]{@glossary event}. These\n* events allow users to write a single set of event handlers for applications\n* that run on both mobile and desktop platforms.\n*\n* The following events are provided:\n*\n* * 'dragstart'\n* * 'dragfinish'\n* * 'drag'\n* * 'drop'\n* * 'dragover'\n* * 'dragout'\n* * 'hold'\n* * 'release'\n* * 'holdpulse'\n* * 'flick'\n*\n* For more information on these events, see the documentation on\n* [Event Handling]{@linkplain $dev-guide/key-concepts/event-handling.html} in\n* the Enyo Developer Guide.\n*\n* Used internally by {@link module:enyo/gesture}\n*\n* @module enyo/gesture/drag\n* @public\n*/\nvar drag = module.exports = {\n\n\t/**\n\t* @private\n\t*/\n\tholdPulseDefaultConfig: {\n\t\tfrequency: 200,\n\t\tevents: [{name: 'hold', time: 200}],\n\t\tresume: false,\n\t\tmoveTolerance: 16,\n\t\tendHold: 'onMove'\n\t},\n\n\t/**\n\t* Call this method to specify the framework's 'holdPulse' behavior, which\n\t* determines the nature of the events generated when a user presses and holds\n\t* on a user interface element.\n\t*\n\t* By default, an `onhold` event fires after 200 ms. After that, an `onholdpulse`\n\t* event fires every 200 ms until the user stops holding, at which point a\n\t* `onrelease` event fires.\n\t*\n\t* To change the default behavior, call this method and pass it a holdPulse\n\t* configuration object. The holdPulse configuration object has a number of\n\t* properties.\n\t*\n\t* You can specify a set of custom hold events by setting the `events` property\n\t* to an array containing one or more objects. Each object specifies a custom\n\t* hold event, in the form of a `name` / `time` pair. Notes:\n\t*\n\t*  * Your custom event names should not include the 'on' prefix; that will be\n\t*    added automatically by the framework.\n\t*\n\t*  * Times should be specified in milliseconds.\n\t*\n\t*  * Your `events` array overrides the framework defaults entirely, so if you\n\t*    want the standard `hold` event to fire at 200 ms (in addition to whatever\n\t*    custom events you define), you'll need to redefine it yourself as part of\n\t*    your `events` array.\n\t*\n\t* Regardless of how many custom hold events you define, `onholdpulse` events\n\t* will start firing after the first custom hold event fires, and continue until\n\t* the user stops holding. Likewise, only one `onrelease` event will fire,\n\t* regardless of how many custom hold events you define.\n\t*\n\t* The`frequency` parameter determines not only how often `holdpulse` events are\n\t* sent, but the frequency with which the hold duration is measured. This means\n\t* that the value you set for `frequency` should always be a common factor of the\n\t* times you set for your custom hold events, to ensure accurate event timing.\n\t*\n\t* You can use the `endHold` property to specify the circumstances under which a\n\t* hold is considered to end. Set `endHold` to `onMove` (the default) if you want\n\t* the hold to end as soon as the user's finger or pointer moves. Set `endHold`\n\t* to `onLeave` if you want the hold to end only when the finger or pointer\n\t* leaves the element altogether. When specifying `onMove`, you can also provide\n\t* a `moveTolerance` value (default: `16`) that determines how tolerant you want\n\t* to be of small movements when deciding whether a hold has ended. The higher\n\t* the value, the further a user's finger or pointer may move without causing\n\t* the hold to end.\n\t*\n\t* Finally, the `resume` parameter (default: `false`) specifies whether a hold\n\t* that has ended due to finger / pointer movement should be resumed if the\n\t* user's finger or pointer moves back inside the tolerance threshold (in the\n\t* case of `endHold: onMove`) or back over the element (in the case of\n\t* `endHold: onLeave`).\n\t*\n\t* Here is an example:\n\t*\n\t* ```\n\t* gesture.drag.configureHoldPulse({\n\t*     frequency: 100,\n\t*     events: [\n\t*         {name: 'hold', time: 200},\n\t*         {name: 'longpress', time: 500}\n\t*     ],\n\t*     endHold: 'onLeave',\n\t*     resume: true\n\t* });\n\t* ```\n\t* For comparison, here are the out-of-the-box defaults:\n\t*\n\t* ```\n\t* gesture.drag.configureHoldPulse({\n\t*     frequency: 200,\n\t*     events: [\n\t*         {name: 'hold', time: 200}\n\t*     ],\n\t*     endHold: 'onMove',\n\t*     moveTolerance: 16,\n\t*     resume: false\n\t* });\n\t* ```\n\t*\n\t* The settings you provide via this method will be applied globally, affecting\n\t* every Control. Note that you can also override the defaults on a case-by-case\n\t* basis by handling the `down` event for any Control and calling the\n\t* `configureHoldPulse` method exposed by the event itself. That method works\n\t* exactly like this one, except that the settings you provide will apply only to\n\t* holds on that particular Control.\n\t*\n\t* @public\n\t*/\n\tconfigureHoldPulse: function (config) {\n\t\t// TODO: Might be nice to do some validation, error handling\n\n\t\t// _holdPulseConfig represents the current, global `holdpulse` settings, if the default\n\t\t// settings have been overridden in some way.\n\t\tthis._holdPulseConfig = this._holdPulseConfig || utils.clone(this.holdPulseDefaultConfig, true);\n\t\tutils.mixin(this._holdPulseConfig, config);\n\t},\n\n\t/**\n\t* Resets the `holdPulse` behavior to the default settings.\n\t*\n\t* @public\n\t*/\n\tresetHoldPulseConfig: function () {\n\t\tthis._holdPulseConfig = null;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tholdPulseConfig: {},\n\n\t/**\n\t* @private\n\t*/\n\ttrackCount: 5,\n\n\t/**\n\t* @private\n\t*/\n\tminFlick: 0.1,\n\n\t/**\n\t* @private\n\t*/\n\tminTrack: 8,\n\n\t/**\n\t* @private\n\t*/\n\tdown: function(e) {\n\t\t// tracking if the mouse is down\n\t\t//enyo.log('tracking ON');\n\t\t// Note: 'tracking' flag indicates interest in mousemove, it's turned off\n\t\t// on mouseup\n\t\t// make sure to stop dragging in case the up event was not received.\n\t\tthis.stopDragging(e);\n\t\tthis.target = e.target;\n\t\tthis.startTracking(e);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tmove: function(e) {\n\t\tif (this.tracking) {\n\t\t\tthis.track(e);\n\t\t\t// If the mouse is not down and we're tracking a drag, abort.\n\t\t\t// this error condition can occur on IE/Webkit after interaction with a scrollbar.\n\t\t\tif (!e.which) {\n\t\t\t\tthis.stopDragging(e);\n\t\t\t\tthis.endHold();\n\t\t\t\tthis.tracking = false;\n\t\t\t\t//enyo.log('gesture.drag: mouse must be down to drag.');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.dragEvent) {\n\t\t\t\tthis.sendDrag(e);\n\t\t\t} else if (this.holdPulseConfig.endHold === 'onMove') {\n\t\t\t\tif (this.dy*this.dy + this.dx*this.dx >= this.holdPulseConfig.moveTolerance) { // outside of target\n\t\t\t\t\tif (this.holdJob) { // only stop/cancel hold job if it currently exists\n\t\t\t\t\t\tif (this.holdPulseConfig.resume) { // pause hold to potentially resume later\n\t\t\t\t\t\t\tthis.suspendHold();\n\t\t\t\t\t\t} else { // completely cancel hold\n\t\t\t\t\t\t\tthis.endHold();\n\t\t\t\t\t\t\tthis.sendDragStart(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (this.holdPulseConfig.resume && !this.holdJob) { // when moving inside target, only resume hold job if it was previously paused\n\t\t\t\t\tthis.resumeHold();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tup: function(e) {\n\t\tthis.endTracking(e);\n\t\tthis.stopDragging(e);\n\t\tthis.endHold();\n\t\tthis.target = null;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tenter: function(e) {\n\t\t// resume hold when re-entering original target when using 'onLeave' endHold value\n\t\tif (this.holdPulseConfig.resume && this.holdPulseConfig.endHold === 'onLeave' && this.target && e.target === this.target) {\n\t\t\tthis.resumeHold();\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tleave: function(e) {\n\t\tif (this.dragEvent) {\n\t\t\tthis.sendDragOut(e);\n\t\t} else if (this.holdPulseConfig.endHold === 'onLeave') {\n\t\t\tif (this.holdPulseConfig.resume) { // pause hold to potentially resume later\n\t\t\t\tthis.suspendHold();\n\t\t\t} else { // completely cancel hold\n\t\t\t\tthis.endHold();\n\t\t\t\tthis.sendDragStart(e);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tstopDragging: function(e) {\n\t\tif (this.dragEvent) {\n\t\t\tthis.sendDrop(e);\n\t\t\tvar handled = this.sendDragFinish(e);\n\t\t\tthis.dragEvent = null;\n\t\t\treturn handled;\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tmakeDragEvent: function(inType, inTarget, inEvent, inInfo) {\n\t\tvar adx = Math.abs(this.dx), ady = Math.abs(this.dy);\n\t\tvar h = adx > ady;\n\t\t// suggest locking if off-axis < 22.5 degrees\n\t\tvar l = (h ? ady/adx : adx/ady) < 0.414;\n\t\tvar e = {};\n\t\t// var e = {\n\t\te.type = inType;\n\t\te.dx = this.dx;\n\t\te.dy = this.dy;\n\t\te.ddx = this.dx - this.lastDx;\n\t\te.ddy = this.dy - this.lastDy;\n\t\te.xDirection = this.xDirection;\n\t\te.yDirection = this.yDirection;\n\t\te.pageX = inEvent.pageX;\n\t\te.pageY = inEvent.pageY;\n\t\te.clientX = inEvent.clientX;\n\t\te.clientY = inEvent.clientY;\n\t\te.horizontal = h;\n\t\te.vertical = !h;\n\t\te.lockable = l;\n\t\te.target = inTarget;\n\t\te.dragInfo = inInfo;\n\t\te.ctrlKey = inEvent.ctrlKey;\n\t\te.altKey = inEvent.altKey;\n\t\te.metaKey = inEvent.metaKey;\n\t\te.shiftKey = inEvent.shiftKey;\n\t\te.srcEvent = inEvent.srcEvent;\n\t\t// };\n\t\t//Fix for IE8, which doesn't include pageX and pageY properties\n\t\tif(platform.ie==8 && e.target) {\n\t\t\te.pageX = e.clientX + e.target.scrollLeft;\n\t\t\te.pageY = e.clientY + e.target.scrollTop;\n\t\t}\n\t\te.preventDefault = gestureUtil.preventDefault;\n\t\te.disablePrevention = gestureUtil.disablePrevention;\n\t\treturn e;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tsendDragStart: function(e) {\n\t\t//enyo.log('dragstart');\n\t\tthis.dragEvent = this.makeDragEvent('dragstart', this.target, e);\n\t\tdispatcher.dispatch(this.dragEvent);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tsendDrag: function(e) {\n\t\t//enyo.log('sendDrag to ' + this.dragEvent.target.id + ', over to ' + e.target.id);\n\t\t// send dragOver event to the standard event target\n\t\tvar synth = this.makeDragEvent('dragover', e.target, e, this.dragEvent.dragInfo);\n\t\tdispatcher.dispatch(synth);\n\t\t// send drag event to the drag source\n\t\tsynth.type = 'drag';\n\t\tsynth.target = this.dragEvent.target;\n\t\tdispatcher.dispatch(synth);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tsendDragFinish: function(e) {\n\t\t//enyo.log('dragfinish');\n\t\tvar synth = this.makeDragEvent('dragfinish', this.dragEvent.target, e, this.dragEvent.dragInfo);\n\t\tsynth.preventTap = function() {\n\t\t\tif (e.preventTap) {\n\t\t\t\te.preventTap();\n\t\t\t}\n\t\t};\n\t\tdispatcher.dispatch(synth);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tsendDragOut: function(e) {\n\t\tvar synth = this.makeDragEvent('dragout', e.target, e, this.dragEvent.dragInfo);\n\t\tdispatcher.dispatch(synth);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tsendDrop: function(e) {\n\t\tvar synth = this.makeDragEvent('drop', e.target, e, this.dragEvent.dragInfo);\n\t\tsynth.preventTap = function() {\n\t\t\tif (e.preventTap) {\n\t\t\t\te.preventTap();\n\t\t\t}\n\t\t};\n\t\tdispatcher.dispatch(synth);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tstartTracking: function(e) {\n\t\tthis.tracking = true;\n\t\t// note: use clientX/Y to be compatible with ie8\n\t\tthis.px0 = e.clientX;\n\t\tthis.py0 = e.clientY;\n\t\t// this.flickInfo = {startEvent: e, moves: []};\n\t\tthis.flickInfo = {};\n\t\tthis.flickInfo.startEvent = e;\n\t\t// FIXME: so we're trying to reuse objects where possible, should\n\t\t// do the same in scenarios like this for arrays\n\t\tthis.flickInfo.moves = [];\n\t\tthis.track(e);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\ttrack: function(e) {\n\t\tthis.lastDx = this.dx;\n\t\tthis.lastDy = this.dy;\n\t\tthis.dx = e.clientX - this.px0;\n\t\tthis.dy = e.clientY - this.py0;\n\t\tthis.xDirection = this.calcDirection(this.dx - this.lastDx, 0);\n\t\tthis.yDirection = this.calcDirection(this.dy - this.lastDy, 0);\n\t\t//\n\t\tvar ti = this.flickInfo;\n\t\tti.moves.push({\n\t\t\tx: e.clientX,\n\t\t\ty: e.clientY,\n\t\t\tt: utils.perfNow()\n\t\t});\n\t\t// track specified # of points\n\t\tif (ti.moves.length > this.trackCount) {\n\t\t\tti.moves.shift();\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tendTracking: function() {\n\t\tthis.tracking = false;\n\t\tvar ti = this.flickInfo;\n\t\tvar moves = ti && ti.moves;\n\t\tif (moves && moves.length > 1) {\n\t\t\t// note: important to use up time to reduce flick\n\t\t\t// velocity based on time between move and up.\n\t\t\tvar l = moves[moves.length-1];\n\t\t\tvar n = utils.perfNow();\n\t\t\t// take the greatest of flick between each tracked move and last move\n\t\t\tfor (var i=moves.length-2, dt=0, x1=0, y1=0, x=0, y=0, sx=0, sy=0, m; (m=moves[i]); i--) {\n\t\t\t\t// this flick (this move - last move) / (this time - last time)\n\t\t\t\tdt = n - m.t;\n\t\t\t\tx1 = (l.x - m.x) / dt;\n\t\t\t\ty1 = (l.y - m.y) / dt;\n\t\t\t\t// establish flick direction\n\t\t\t\tsx = sx || (x1 < 0 ? -1 : (x1 > 0 ? 1 : 0));\n\t\t\t\tsy = sy || (y1 < 0 ? -1 : (y1 > 0 ? 1 : 0));\n\t\t\t\t// if either axis is a greater flick than previously recorded use this one\n\t\t\t\tif ((x1 * sx > x * sx) || (y1 * sy > y * sy)) {\n\t\t\t\t\tx = x1;\n\t\t\t\t\ty = y1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar v = Math.sqrt(x*x + y*y);\n\t\t\tif (v > this.minFlick) {\n\t\t\t\t// generate the flick using the start event so it has those coordinates\n\t\t\t\tthis.sendFlick(ti.startEvent, x, y, v);\n\t\t\t}\n\t\t}\n\t\tthis.flickInfo = null;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tcalcDirection: function(inNum, inDefault) {\n\t\treturn inNum > 0 ? 1 : (inNum < 0 ? -1 : inDefault);\n\t},\n\n\t/**\n\t* Translate the old format for holdPulseConfig to the new one, to\n\t* preserve backward compatibility.\n\t*\n\t* @private\n\t*/\n\tnormalizeHoldPulseConfig: function (oldOpts) {\n\t\tvar nOpts = utils.clone(oldOpts);\n\t\tnOpts.frequency = nOpts.delay;\n\t\tnOpts.events = [{name: 'hold', time: nOpts.delay}];\n\t\treturn nOpts;\n\t},\n\n\t/**\n\t* Method to override holdPulseConfig for a given gesture. This method isn't\n\t* accessed directly from gesture.drag, but exposed by the `down` event.\n\t* See `prepareHold()`.\n\t*\n\t* @private\n\t*/\n\t_configureHoldPulse: function(opts) {\n\t\tvar nOpts = (opts.delay === undefined) ?\n\t\t\topts :\n\t\t\tthis.normalizeHoldPulseConfig(opts);\n\t\tutils.mixin(this.holdPulseConfig, nOpts);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tprepareHold: function(e) {\n\t\t// quick copy as the prototype of the new overridable config\n\t\tthis.holdPulseConfig = utils.clone(this._holdPulseConfig || this.holdPulseDefaultConfig, true);\n\n\t\t// expose method for configuring holdpulse options\n\t\te.configureHoldPulse = this._configureHoldPulse.bind(this);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tbeginHold: function(e) {\n\t\tvar ce;\n\t\t// cancel any existing hold since it's possible in corner cases to get a down without an up\n\t\tthis.endHold();\n\t\tthis.holdStart = utils.perfNow();\n\t\tthis._holdJobFunction = utils.bind(this, 'handleHoldPulse');\n\t\t// clone the event to ensure it stays alive on IE upon returning to event loop\n\t\tce = this._holdJobEvent = utils.clone(e);\n\t\tce.srcEvent = utils.clone(e.srcEvent);\n\t\tthis._pulsing = false;\n\t\tthis._unsent = utils.clone(this.holdPulseConfig.events);\n\t\tthis._unsent.sort(this.sortEvents);\n\t\tthis._next = this._unsent.shift();\n\t\tif (this._next) {\n\t\t\tthis.holdJob = setInterval(this._holdJobFunction, this.holdPulseConfig.frequency);\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tresumeHold: function() {\n\t\tthis.handleHoldPulse();\n\t\tthis.holdJob = setInterval(this._holdJobFunction, this.holdPulseConfig.frequency);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tsortEvents: function(a, b) {\n\t\t\tif (a.time < b.time) return -1;\n\t\t\tif (a.time > b.time) return 1;\n\t\t\treturn 0;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tendHold: function() {\n\t\tvar e = this._holdJobEvent;\n\t\tthis.suspendHold();\n\t\tif (e && this._pulsing) {\n\t\t\tthis.sendRelease(e);\n\t\t}\n\t\tthis._pulsing = false;\n\t\tthis._unsent = null;\n\t\tthis._holdJobFunction = null;\n\t\tthis._holdJobEvent = null;\n\t\tthis._next = null;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tsuspendHold: function() {\n\t\tclearInterval(this.holdJob);\n\t\tthis.holdJob = null;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\thandleHoldPulse: function() {\n\t\tvar holdTime = utils.perfNow() - this.holdStart,\n\t\t\thje = this._holdJobEvent,\n\t\t\te;\n\t\tthis.maybeSendHold(hje, holdTime);\n\t\tif (this._pulsing) {\n\t\t\te = gestureUtil.makeEvent('holdpulse', hje);\n\t\t\te.holdTime = holdTime;\n\t\t\tdispatcher.dispatch(e);\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tmaybeSendHold: function(inEvent, inHoldTime) {\n\t\tvar n = this._next;\n\t\twhile (n && n.time <= inHoldTime) {\n\t\t\tvar e = gestureUtil.makeEvent(n.name, inEvent);\n\t\t\tthis._pulsing = true;\n\t\t\tdispatcher.dispatch(e);\n\t\t\tn = this._next = this._unsent.shift();\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tsendRelease: function(inEvent) {\n\t\tvar e = gestureUtil.makeEvent('release', inEvent);\n\t\tdispatcher.dispatch(e);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tsendFlick: function(inEvent, inX, inY, inV) {\n\t\tvar e = gestureUtil.makeEvent('flick', inEvent);\n\t\te.xVelocity = inX;\n\t\te.yVelocity = inY;\n\t\te.velocity = inV;\n\t\tdispatcher.dispatch(e);\n\t}\n};\n",
    "mtime": 1434758950000,
    "relPath": "enyo/gesture/drag",
    "requires": [
      "../dispatcher",
      "../platform",
      "../utils",
      "./util"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./touchGestures",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib/gesture",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/gesture/touchGestures",
    "name": "enyo/gesture/touchGestures",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/gesture/touchGestures.js",
    "contents": "var\n\tdispatcher = require('../dispatcher'),\n\tplatform = require('../platform'),\n\tutils = require('../utils');\n\n/**\n* The extended {@glossary event} [object]{@glossary Object} that is provided when we\n* emulate iOS gesture events on non-iOS devices.\n*\n* @typedef {Object} module:enyo/gesture/touchGestures~EmulatedGestureEvent\n* @property {Number} pageX - The x-coordinate of the center point between fingers.\n* @property {Number} pageY - The y-coordinate of the center point between fingers.\n* @property {Number} rotation - The degrees of rotation from the beginning of the gesture.\n* @property {Number} scale - The percent change of distance between fingers.\n*/\n\n/**\n* @module enyo/gesture/touchGestures\n* @private\n*/\nvar touchGestures = module.exports = {\n\n\t/**\n\t* @private\n\t*/\n\torderedTouches: [],\n\n\t/**\n\t* @private\n\t*/\n\tgesture: null,\n\n\t/**\n\t* @private\n\t*/\n\ttouchstart: function (e) {\n\t\t// some devices can send multiple changed touches on start and end\n\t\tvar i,\n\t\t\tchangedTouches = e.changedTouches,\n\t\t\tlength = changedTouches.length;\n\n\t\tfor (i = 0; i < length; i++) {\n\t\t\tvar id = changedTouches[i].identifier;\n\n\t\t\t// some devices can send multiple touchstarts\n\t\t\tif (utils.indexOf(id, this.orderedTouches) < 0) {\n\t\t\t\tthis.orderedTouches.push(id);\n\t\t\t}\n\t\t}\n\n\t\tif (e.touches.length >= 2 && !this.gesture) {\n\t\t\tvar p = this.gesturePositions(e);\n\n\t\t\tthis.gesture = this.gestureVector(p);\n\t\t\tthis.gesture.angle = this.gestureAngle(p);\n\t\t\tthis.gesture.scale = 1;\n\t\t\tthis.gesture.rotation = 0;\n\t\t\tvar g = this.makeGesture('gesturestart', e, {vector: this.gesture, scale: 1, rotation: 0});\n\t\t\tdispatcher.dispatch(g);\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\ttouchend: function (e) {\n\t\t// some devices can send multiple changed touches on start and end\n\t\tvar i,\n\t\t\tchangedTouches = e.changedTouches,\n\t\t\tlength = changedTouches.length;\n\n\t\tfor (i = 0; i < length; i++) {\n\t\t\tutils.remove(changedTouches[i].identifier, this.orderedTouches);\n\t\t}\n\n\t\tif (e.touches.length <= 1 && this.gesture) {\n\t\t\tvar t = e.touches[0] || e.changedTouches[e.changedTouches.length - 1];\n\n\t\t\t// gesture end sends last rotation and scale, with the x/y of the last finger\n\t\t\tdispatcher.dispatch(this.makeGesture('gestureend', e, {vector: {xcenter: t.pageX, ycenter: t.pageY}, scale: this.gesture.scale, rotation: this.gesture.rotation}));\n\t\t\tthis.gesture = null;\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\ttouchmove: function (e) {\n\t\tif (this.gesture) {\n\t\t\tvar g = this.makeGesture('gesturechange', e);\n\t\t\tthis.gesture.scale = g.scale;\n\t\t\tthis.gesture.rotation = g.rotation;\n\t\t\tdispatcher.dispatch(g);\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tfindIdentifiedTouch: function (touches, id) {\n\t\tfor (var i = 0, t; (t = touches[i]); i++) {\n\t\t\tif (t.identifier === id) {\n\t\t\t\treturn t;\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tgesturePositions: function (e) {\n\t\tvar first = this.findIdentifiedTouch(e.touches, this.orderedTouches[0]);\n\t\tvar last = this.findIdentifiedTouch(e.touches, this.orderedTouches[this.orderedTouches.length - 1]);\n\t\tvar fx = first.pageX, lx = last.pageX, fy = first.pageY, ly = last.pageY;\n\t\t// center the first touch as 0,0\n\t\tvar x = lx - fx, y = ly - fy;\n\t\tvar h = Math.sqrt(x*x + y*y);\n\t\treturn {x: x, y: y, h: h, fx: fx, lx: lx, fy: fy, ly: ly};\n\t},\n\n\t/**\n\t* Finds rotation angle.\n\t* \n\t* @private\n\t*/\n\tgestureAngle: function (positions) {\n\t\tvar p = positions;\n\t\t// yay math!, rad -> deg\n\t\tvar a = Math.asin(p.y / p.h) * (180 / Math.PI);\n\t\t// fix for range limits of asin (-90 to 90)\n\t\t// Quadrants II and III\n\t\tif (p.x < 0) {\n\t\t\ta = 180 - a;\n\t\t}\n\t\t// Quadrant IV\n\t\tif (p.x > 0 && p.y < 0) {\n\t\t\ta += 360;\n\t\t}\n\t\treturn a;\n\t},\n\n\t/**\n\t* Finds bounding box.\n\t* \n\t* @private\n\t*/\n\tgestureVector: function (positions) {\n\t\t// the least recent touch and the most recent touch determine the bounding box of the gesture event\n\t\tvar p = positions;\n\t\t// center the first touch as 0,0\n\t\treturn {\n\t\t\tmagnitude: p.h,\n\t\t\txcenter: Math.abs(Math.round(p.fx + (p.x / 2))),\n\t\t\tycenter: Math.abs(Math.round(p.fy + (p.y / 2)))\n\t\t};\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tmakeGesture: function (type, e, cache) {\n\t\tvar vector, scale, rotation;\n\t\tif (cache) {\n\t\t\tvector = cache.vector;\n\t\t\tscale = cache.scale;\n\t\t\trotation = cache.rotation;\n\t\t} else {\n\t\t\tvar p = this.gesturePositions(e);\n\t\t\tvector = this.gestureVector(p);\n\t\t\tscale = vector.magnitude / this.gesture.magnitude;\n\t\t\t// gestureEvent.rotation is difference from the starting angle, clockwise\n\t\t\trotation = (360 + this.gestureAngle(p) - this.gesture.angle) % 360;\n\t\t}\n\t\tvar event = utils.clone(e);\n\t\treturn utils.mixin(event, {\n\t\t\ttype: type,\n\t\t\tscale: scale,\n\t\t\tpageX: vector.xcenter,\n\t\t\tpageY: vector.ycenter,\n\t\t\trotation: rotation\n\t\t});\n\t}\n};\n",
    "mtime": 1434758950000,
    "relPath": "enyo/gesture/touchGestures",
    "requires": [
      "../dispatcher",
      "../platform",
      "../utils"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./UiComponent",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/UiComponent",
    "name": "enyo/UiComponent",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/UiComponent.js",
    "contents": "require('enyo');\n\n/**\n* Contains the declaration for the {@link module:enyo/UiComponent~UiComponent} kind.\n* @module enyo/UiComponent\n*/\n\nvar\n\tkind = require('./kind'),\n\tutils = require('./utils'),\n\tmaster = require('./master');\n\nvar\n\tComponent = require('./Component');\n\n/**\n* {@link module:enyo/UiComponent~UiComponent} implements a container strategy suitable for presentation layers.\n* \n* `UiComponent` itself is abstract. Concrete [subkinds]{@glossary subkind} include\n* {@link module:enyo/Control~Control} (for HTML/DOM) and\n* {@link module:enyo/canvas~canvas.Control} (for Canvas contexts).\n*\n* @class UiComponent\n* @extends module:enyo/Component~Component\n* @public\n*/\nvar UiComponent = module.exports = kind(\n\t/** @lends module:enyo/UiComponent~UiComponent.prototype */ {\n\n\tname: 'enyo.UiComponent',\n\n\t/**\n\t* @private\n\t*/\n\tkind: Component,\n\n\t/**\n\t* @private\n\t*/\n\tpublished: \n\t\t/** @lends module:enyo/UiComponent~UiComponent.prototype */ {\n\n\t\t/** \n\t\t* The [UiComponent]{@link module:enyo/UiComponent~UiComponent} that physically contains this \n\t\t* [component]{@link module:enyo/Component~Component} in the DOM.\n\t\t*\n\t\t* @type {module:enyo/UiComponent~UiComponent}\n\t\t* @default null\n\t\t* @public\n\t\t*/\n\t\tcontainer: null,\n\n\t\t/**\n\t\t* The [UiComponent]{@link module:enyo/UiComponent~UiComponent} that owns this\n\t\t* [component]{@link module:enyo/Component~Component} for purposes of {@glossary event}\n\t\t* propagation.\n\t\t*\n\t\t* @type {module:enyo/UiComponent~UiComponent}\n\t\t* @default null\n\t\t* @public\n\t\t*/\n\t\tparent: null,\n\n\t\t/**\n\t\t* The [UiComponent]{@link module:enyo/UiComponent~UiComponent} that will physically contain new items added\n\t\t* by calls to [createComponent()]{@link module:enyo/UiComponent~UiComponent#createComponent}.\n\t\t*\n\t\t* @type {String}\n\t\t* @default 'client'\n\t\t* @public\n\t\t*/\n\t\tcontrolParentName: 'client',\n\t\t\n\t\t/** \n\t\t* A {@glossary kind} used to manage the size and placement of child \n\t\t* [components]{@link module:enyo/Component~Component}.\n\t\t*\n\t\t* @type {String}\n\t\t* @default ''\n\t\t* @public\n\t\t*/\n\t\tlayoutKind: ''\n\t},\n\n\t/**\n\t* @private\n\t*/\n\thandlers: {\n\t\tonresize: 'handleResize'\n\t},\n\n\t/**\n\t* When set, provides a [control]{@link module:enyo/Control~Control} reference used to indicate where a\n\t* newly-created [component]{@link module:enyo/Component~Component} should be added in the\n\t* [UiComponent's]{@link module:enyo/UiComponent~UiComponent} [array]{@glossary Array} of children. This is\n\t* typically used when creating children dynamically (rather than at design time). If set\n\t* to `null`, the new control will be added at the beginning of the array; if set to a\n\t* specific existing control, the new control will be added before the specified\n\t* control. If left as `undefined`, the default behavior is to add the new control\n\t* at the end of the array.\n\t*\n\t* @type {module:enyo/Control~Control}\n\t* @default undefined\n\t* @public\n\t*/\n\taddBefore: undefined,\n\t\n\t/**\n\t* @private\n\t*/\n\tprotectedStatics: {\n\t\t_resizeFlags: {showingOnly: true} // don't waterfall these events into hidden controls\n\t},\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tcreate: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tthis.controls = this.controls || [];\n\t\t\tthis.children = this.children || [];\n\t\t\tthis.containerChanged();\n\t\t\tsup.apply(this, arguments);\n\t\t\tthis.layoutKindChanged();\n\t\t};\n\t}),\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tdestroy: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\t// Destroys all non-chrome controls (regardless of owner).\n\t\t\tthis.destroyClientControls();\n\t\t\t// Removes us from our container.\n\t\t\tthis.setContainer(null);\n\t\t\t// Destroys chrome controls owned by this.\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\timportProps: kind.inherit(function (sup) {\n\t\treturn function(inProps) {\n\t\t\tsup.apply(this, arguments);\n\t\t\tif (!this.owner) {\n\t\t\t\tthis.owner = master;\n\t\t\t}\n\t\t};\n\t}),\n\n\t/**\n\t* Creates [components]{@link module:enyo/Component~Component} as defined by the [arrays]{@glossary Array}\n\t* of base and additional property [hashes]{@glossary Object}. The standard and \n\t* additional property hashes are combined as described in\n\t* {@link module:enyo/Component~Component#createComponent}.\n\t* \n\t* ```\n\t* // ask foo to create components 'bar' and 'zot', but set the owner of\n\t* // both components to 'this'.\n\t* this.$.foo.createComponents([\n\t*\t{name: 'bar'},\n\t*\t{name: 'zot'}\n\t* ], {owner: this});\n\t* ```\n\t*\n\t* As implemented, [controlParentName]{@link module:enyo/UiComponent~UiComponent#controlParentName} only works\n\t* to identify an owned control created via `createComponents()`\n\t* (i.e., usually in our `components` block). To attach a `controlParent` via other means, \n\t* one must call [discoverControlParent()]{@link module:enyo/UiComponent~UiComponent#discoverControlParent} or \n\t* set `controlParent` directly.\n\t* \n\t* We could call `discoverControlParent()` in\n\t* [addComponent()]{@link module:enyo/Component~Component#addComponent}, but that would\n\t* cause a lot of useless checking.\n\t* \n\t* @param {Object[]} props The array of {@link module:enyo/Component~Component} definitions to be created.\n\t* @param {Object} ext - Additional properties to be supplied as defaults for each.\n\t* @returns {module:enyo/Component~Component[]} The array of components that were created.\n\t* @method\n\t* @public\n\t*/\n\t// \n\tcreateComponents: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tvar results = sup.apply(this, arguments);\n\t\t\tthis.discoverControlParent();\n\t\t\treturn results;\n\t\t};\n\t}),\n\n\t/**\n\t* Determines and sets the current [control's]{@link module:enyo/Control~Control} parent.\n\t*\n\t* @protected\n\t*/\n\tdiscoverControlParent: function () {\n\t\tthis.controlParent = this.$[this.controlParentName] || this.controlParent;\n\t},\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tadjustComponentProps: kind.inherit(function (sup) {\n\t\treturn function(inProps) {\n\t\t\t// Components we create have us as a container by default.\n\t\t\tinProps.container = inProps.container || this;\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* Containment\n\t* \n\t* @method\n\t* @private\n\t*/\n\tcontainerChanged: function (container) {\n\t\tif (container) {\n\t\t\tcontainer.removeControl(this);\n\t\t}\n\t\tif (this.container) {\n\t\t\tthis.container.addControl(this, this.addBefore);\n\t\t}\n\t},\n\n\t/**\n\t* Parentage\n\t* \n\t* @method\n\t* @private\n\t*/\n\tparentChanged: function (oldParent) {\n\t\tif (oldParent && oldParent != this.parent) {\n\t\t\toldParent.removeChild(this);\n\t\t}\n\t},\n\n\t/**\n\t* Determines whether the [control]{@link module:enyo/Control~Control} is a descendant of\n\t* another control.\n\t* \n\t* Note: Oddly, a control is considered to be a descendant of itself.\n\t*\n\t* @method\n\t* @param {module:enyo/Control~Control} ancestor - The [control]{@link module:enyo/Control~Control} whose lineage\n\t*\twill be checked to determine whether the current control is a descendant.\n\t* @public\n\t*/\n\tisDescendantOf: function (ancestor) {\n\t\tvar p = this;\n\t\twhile (p && p!=ancestor) {\n\t\t\tp = p.parent;\n\t\t}\n\t\treturn ancestor && (p === ancestor);\n\t},\n\n\t/**\n\t* Returns all controls.\n\t*\n\t* @method\n\t* @returns {module:enyo/Control~Control[]} An [array]{@glossary Array} of [controls]{@link module:enyo/Control~Control}.\n\t* @public\n\t*/\n\tgetControls: function () {\n\t\treturn this.controls;\n\t},\n\n\t/**\n\t* Returns all non-chrome controls.\n\t*\n\t* @method\n\t* @returns {module:enyo/Control~Control[]} An [array]{@glossary Array} of [controls]{@link module:enyo/Control~Control}.\n\t* @public\n\t*/\n\tgetClientControls: function () {\n\t\tvar results = [];\n\t\tfor (var i=0, cs=this.controls, c; (c=cs[i]); i++) {\n\t\t\tif (!c.isChrome) {\n\t\t\t\tresults.push(c);\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t},\n\n\t/**\n\t* Destroys \"client controls\", the same set of [controls]{@link module:enyo/Control~Control} returned by \n\t* [getClientControls()]{@link module:enyo/UiComponent~UiComponent#getClientControls}.\n\t*\n\t* @method\n\t* @public\n\t*/\n\tdestroyClientControls: function () {\n\t\tvar c$ = this.getClientControls();\n\t\tfor (var i=0, c; (c=c$[i]); i++) {\n\t\t\tc.destroy();\n\t\t}\n\t},\n\t\n\t/**\n\t* @method\n\t* @private\n\t*/\n\taddControl: function (ctl, before) {\n\t\t// Called to add an already created control to the object's control list. It is\n\t\t// not used to create controls and should likely not be called directly.\n\t\t// It can be overridden to detect when controls are added.\n\t\tif (before !== undefined) {\n\t\t\tvar idx = (before === null) ? 0 : this.indexOfControl(before);\n\t\t\tthis.controls.splice(idx, 0, ctl);\n\t\t} else {\n\t\t\tthis.controls.push(ctl);\n\t\t}\n\t\t// When we add a Control, we also establish a parent.\n\t\tthis.addChild(ctl, before);\n\t},\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tremoveControl: function (ctl) {\n\t\t// Called to remove a control from the object's control list. As with addControl it\n\t\t// can be overridden to detect when controls are removed.\n\t\t// When we remove a Control, we also remove it from its parent.\n\t\tctl.setParent(null);\n\t\treturn utils.remove(ctl, this.controls);\n\t},\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tindexOfControl: function (ctl) {\n\t\treturn utils.indexOf(ctl, this.controls);\n\t},\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tindexOfClientControl: function (ctl) {\n\t\treturn utils.indexOf(ctl, this.getClientControls());\n\t},\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tindexInContainer: function () {\n\t\treturn this.container.indexOfControl(this);\n\t},\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tclientIndexInContainer: function () {\n\t\treturn this.container.indexOfClientControl(this);\n\t},\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tcontrolAtIndex: function (idx) {\n\t\treturn this.controls[idx];\n\t},\n\t\n\t/**\n\t* Determines what the following sibling [control]{@link module:enyo/Control~Control} is for the current\n\t* [control]{@link module:enyo/Control~Control}.\n\t*\n\t* @method\n\t* @returns {module:enyo/Control~Control | null} The [control]{@link module:enyo/Control~Control} that is the] following\n\t*\tsibling. If no following sibling exists, we return `null`.\n\t* @public\n\t*/\n\tgetNextControl: function () {\n\t\tvar comps = this.getParent().children,\n\t\t\tcomp,\n\t\t\tsibling,\n\t\t\ti;\n\t\n\t\tfor (i = comps.length - 1; i >= 0; i--) {\n\t\t\tcomp = comps[i];\n\t\t\tif (comp === this) return sibling ? sibling : null;\n\t\t\tif (comp.generated) sibling = comp;\n\t\t}\n\t\n\t\treturn null;\n\t},\n\t\n\t/**\n\t* Children\n\t* \n\t* @method\n\t* @private\n\t*/\n\taddChild: function (child, before) {\n\t\t// if before is undefined, add to the end of the child list.\n\t\t// If it's null, add to front of list, otherwise add before the\n\t\t// specified control.\n\t\t//\n\t\t// allow delegating the child to a different container\n\t\tif (this.controlParent /*&& !child.isChrome*/) {\n\t\t\t// this.controlParent might have a controlParent, and so on; seek the ultimate parent\n\t\t\tthis.controlParent.addChild(child, before);\n\t\t} else {\n\t\t\t// NOTE: addChild drives setParent.\n\t\t\t// It's the opposite for setContainer, where containerChanged (in Containable)\n\t\t\t// drives addControl.\n\t\t\t// Because of the way 'parent' is derived from 'container', this difference is\n\t\t\t// helpful for implementing controlParent.\n\t\t\t// By the same token, since 'parent' is derived from 'container', setParent is\n\t\t\t// not intended to be called by client code. Therefore, the lack of parallelism\n\t\t\t// should be private to this implementation.\n\t\t\t// Set the child's parent property to this\n\t\t\tchild.setParent(this);\n\t\t\t// track in children array\n\t\t\tif (before !== undefined) {\n\t\t\t\tvar idx = (before === null) ? 0 : this.indexOfChild(before);\n\t\t\t\tthis.children.splice(idx, 0, child);\n\t\t\t} else {\n\t\t\t\tthis.children.push(child);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tremoveChild: function (child) {\n\t\treturn utils.remove(child, this.children);\n\t},\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tindexOfChild: function (child) {\n\t\treturn utils.indexOf(child, this.children);\n\t},\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tlayoutKindChanged: function () {\n\t\tif (this.layout) {\n\t\t\tthis.layout.destroy();\n\t\t}\n\t\tthis.layout = kind.createFromKind(this.layoutKind, this);\n\t\tif (this.generated) {\n\t\t\tthis.render();\n\t\t}\n\t},\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tflow: function () {\n\t\tif (this.layout) {\n\t\t\tthis.layout.flow();\n\t\t}\n\t},\n\n\t/**\n\t* CAVEAT: currently we use the entry point for both post-render layout work *and* \n\t* post-resize layout work.\n\t* @method\n\t* @private\n\t*/\n\treflow: function () {\n\t\tif (this.layout) {\n\t\t\tthis.layout.reflow();\n\t\t}\n\t},\n\n\t/**\n\t* Call after this [control]{@link module:enyo/Control~Control} has been resized to allow it to process the \n\t* size change. To respond to a resize, override `handleResize()` instead. Acts as syntactic \n\t* sugar for `waterfall('onresize')`.\n\t* \n\t* @method\n\t* @public\n\t*/\n\tresize: function () {\n\t\tthis.waterfall('onresize', UiComponent._resizeFlags);\n\t\tthis.waterfall('onpostresize', UiComponent._resizeFlags);\n\t},\n\t\n\t/**\n\t* @method\n\t* @private\n\t*/\n\thandleResize: function () {\n\t\t// FIXME: once we are in the business of reflowing layouts on resize, then we have an\n\t\t// inside/outside problem: some scenarios will need to reflow before child\n\t\t// controls reflow, and some will need to reflow after. Even more complex scenarios\n\t\t// have circular dependencies, and can require multiple passes or other resolution.\n\t\t// When we can rely on CSS to manage reflows we do not have these problems.\n\t\tthis.reflow();\n\t},\n\n\t/**\n\t* Sends a message to all of my descendants, but not myself. You can stop a\n\t* [waterfall]{@link module:enyo/Component~Component#waterfall} into [components]{@link module:enyo/Component~Component}\n\t* owned by a receiving [object]{@glossary Object} by returning a truthy value from the\n\t* {@glossary event} [handler]{@link module:enyo/Component~Component~EventHandler}.\n\t* \n\t* @method\n\t* @param {String} nom - The name of the {@glossary event}.\n\t* @param {Object} [event] - The event object to pass along.\n\t* @param {module:enyo/Component~Component} [sender=this] - The event's originator.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\twaterfallDown: function (nom, event, sender) {\n\t\tevent = event || {};\n\t\t// Note: Controls will generally be both in a $ hash and a child list somewhere.\n\t\t// Attempt to avoid duplicated messages by sending only to components that are not\n\t\t// UiComponent, as those components are guaranteed not to be in a child list.\n\t\t// May cause a problem if there is a scenario where a UiComponent owns a pure\n\t\t// Component that in turn owns Controls.\n\t\t//\n\t\t// waterfall to all pure components\n\t\tfor (var n in this.$) {\n\t\t\tif (!(this.$[n] instanceof UiComponent)) {\n\t\t\t\tthis.$[n].waterfall(nom, event, sender);\n\t\t\t}\n\t\t}\n\t\t// waterfall to my children\n\t\tfor (var i=0, cs=this.children, c; (c=cs[i]); i++) {\n\t\t\t// Do not send {showingOnly: true} events to hidden controls. This flag is set for resize events\n\t\t\t// which are broadcast from within the framework. This saves a *lot* of unnecessary layout.\n\t\t\t// TODO: Maybe remember that we did this, and re-send those messages on setShowing(true)?\n\t\t\t// No obvious problems with it as-is, though\n\t\t\tif (c.showing || !(event && event.showingOnly)) {\n\t\t\t\tc.waterfall(nom, event, sender);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tgetBubbleTarget: function (nom, event) {\n\t\tif (event.delegate) return this.owner;\n\t\telse {\n\t\t\treturn (\n\t\t\t\tthis.bubbleTarget\n\t\t\t\t|| (this.cachedBubble && this.cachedBubbleTarget[nom])\n\t\t\t\t|| this.parent\n\t\t\t\t|| this.owner\n\t\t\t);\n\t\t}\n\t}\n});\n",
    "mtime": 1434758950000,
    "relPath": "enyo/UiComponent",
    "requires": [
      "enyo",
      "./kind",
      "./utils",
      "./master",
      "./Component"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./dispatcher",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/dispatcher",
    "name": "enyo/dispatcher",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/dispatcher.js",
    "contents": "/**\n* Contains dispatcher methods\n* @module enyo/dispatcher\n* @private\n*/\nrequire('enyo');\n\nvar\n\tlogger = require('./logger'),\n\tmaster = require('./master'),\n\tutils = require('./utils'),\n\tplatform = require('./platform');\n\nvar\n\tDom = require('./dom');\n\n/**\n * An [object]{@glossary Object} describing the the last known coordinates of the cursor or\n * user-interaction point in touch environments.\n *\n * @typedef {Object} module:enyo/dispatcher~CursorCoordinates\n * @property {Number} clientX - The horizontal coordinate within the application's client area.\n * @property {Number} clientY - The vertical coordinate within the application's client area.\n * @property {Number} pageX - The X coordinate of the cursor relative to the viewport, including any\n *   scroll offset.\n * @property {Number} pageY - The Y coordinate of the cursor relative to the viewport, including any\n *   scroll offset.\n * @property {Number} screenX - The X coordinate of the cursor relative to the screen, not including\n *   any scroll offset.\n * @property {Number} screenY - The Y coordinate of the cursor relative to the screen, not including\n *   any scroll offset.\n */\n\n/**\n* @private\n*/\n\n/**\n* @private\n*/\nvar dispatcher = module.exports = dispatcher = {\n\n\t$: {},\n\n\t/**\n\t* These events come from document\n\t*\n\t* @private\n\t*/\n\tevents: [\"mousedown\", \"mouseup\", \"mouseover\", \"mouseout\", \"mousemove\", \"mousewheel\",\n\t\t\"click\", \"dblclick\", \"change\", \"keydown\", \"keyup\", \"keypress\", \"input\",\n\t\t\"paste\", \"copy\", \"cut\", \"webkitTransitionEnd\", \"transitionend\", \"webkitAnimationEnd\", \"animationend\",\n\t\t\"webkitAnimationStart\", \"animationstart\", \"webkitAnimationIteration\", \"animationiteration\"],\n\n\t/**\n\t* These events come from window\n\t*\n\t* @private\n\t*/\n\twindowEvents: [\"resize\", \"load\", \"unload\", \"message\", \"hashchange\", \"popstate\", \"focus\", \"blur\"],\n\n\t/**\n\t* Feature plugins (aka filters)\n\t*\n\t* @private\n\t*/\n\tfeatures: [],\n\n\t/**\n\t* @private\n\t*/\n\tconnect: function() {\n\t\tvar d = dispatcher, i, n;\n\t\tfor (i=0; (n=d.events[i]); i++) {\n\t\t\td.listen(document, n);\n\t\t}\n\t\tfor (i=0; (n=d.windowEvents[i]); i++) {\n\t\t\t// Chrome Packaged Apps don't like \"unload\"\n\t\t\tif(n === \"unload\" &&\n\t\t\t\t(typeof global.chrome === \"object\") &&\n\t\t\t\tglobal.chrome.app) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\td.listen(window, n);\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tlisten: function(inListener, inEventName, inHandler) {\n\t\tif (inListener.addEventListener) {\n\t\t\tthis.listen = function(inListener, inEventName, inHandler) {\n\t\t\t\tinListener.addEventListener(inEventName, inHandler || dispatch, false);\n\t\t\t};\n\t\t} else {\n\t\t\t//enyo.log(\"IE8 COMPAT: using 'attachEvent'\");\n\t\t\tthis.listen = function(inListener, inEvent, inHandler) {\n\t\t\t\tinListener.attachEvent(\"on\" + inEvent, function(e) {\n\t\t\t\t\te.target = e.srcElement;\n\t\t\t\t\tif (!e.preventDefault) {\n\t\t\t\t\t\te.preventDefault = this.iePreventDefault;\n\t\t\t\t\t}\n\t\t\t\t\treturn (inHandler || dispatch)(e);\n\t\t\t\t});\n\t\t\t};\n\t\t}\n\t\tthis.listen(inListener, inEventName, inHandler);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tstopListening: function(inListener, inEventName, inHandler) {\n\t\tif (inListener.addEventListener) {\n\t\t\tthis.stopListening = function(inListener, inEventName, inHandler) {\n\t\t\t\tinListener.removeEventListener(inEventName, inHandler || dispatch, false);\n\t\t\t};\n\t\t} else {\n\t\t\t//enyo.log(\"IE8 COMPAT: using 'detachEvent'\");\n\t\t\tthis.stopListening = function(inListener, inEvent, inHandler) {\n\t\t\t\tinListener.detachEvent(\"on\" + inEvent, inHandler || dispatch);\n\t\t\t};\n\t\t}\n\t\tthis.stopListening(inListener, inEventName, inHandler);\n\t},\n\n\t/**\n\t* Fires an event for Enyo to listen for.\n\t*\n\t* @private\n\t*/\n\tdispatch: function(e) {\n\t\t// Find the control who maps to e.target, or the first control that maps to an ancestor of e.target.\n\t\tvar c = this.findDispatchTarget(e.target) || this.findDefaultTarget();\n\t\t// Cache the original target\n\t\te.dispatchTarget = c;\n\t\t// support pluggable features return true to abort immediately or set e.preventDispatch to avoid processing.\n\t\tfor (var i=0, fn; (fn=this.features[i]); i++) {\n\t\t\tif (fn.call(this, e) === true) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (c && !e.preventDispatch) {\n\t\t\treturn this.dispatchBubble(e, c);\n\t\t}\n\t},\n\n\t/**\n\t* Takes an event target and finds the corresponding Enyo control.\n\t*\n\t* @private\n\t*/\n\tfindDispatchTarget: function(inNode) {\n\t\tvar t, n = inNode;\n\t\t// FIXME: Mozilla: try/catch is here to squelch \"Permission denied to access property xxx from a non-chrome context\"\n\t\t// which appears to happen for scrollbar nodes in particular. It's unclear why those nodes are valid targets if\n\t\t// it is illegal to interrogate them. Would like to trap the bad nodes explicitly rather than using an exception block.\n\t\ttry {\n\t\t\twhile (n) {\n\t\t\t\tif ((t = this.$[n.id])) {\n\t\t\t\t\t// there could be multiple nodes with this id, the relevant node for this event is n\n\t\t\t\t\t// we don't push this directly to t.node because sometimes we are just asking what\n\t\t\t\t\t// the target 'would be' (aka, calling findDispatchTarget from handleMouseOverOut)\n\t\t\t\t\tt.eventNode = n;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tn = n.parentNode;\n\t\t\t}\n\t\t} catch(x) {\n\t\t\tlogger.log(x, n);\n\t\t}\n\t\treturn t;\n\t},\n\n\t/**\n\t* Returns the default Enyo control for events.\n\t*\n\t* @private\n\t*/\n\tfindDefaultTarget: function() {\n\t\treturn master;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tdispatchBubble: function(e, c) {\n\t\tvar type = e.type;\n\t\ttype = e.customEvent ? type : \"on\" + type;\n\t\treturn c.bubble(type, e, c);\n\t}\n};\n\n/**\n* Called in the context of an event.\n*\n* @private\n*/\ndispatcher.iePreventDefault = function() {\n\ttry {\n\t\tthis.returnValue = false;\n\t}\n\tcatch(e) {\n\t\t// do nothing\n\t}\n};\n\n/**\n* @private\n*/\nfunction dispatch (inEvent) {\n\treturn dispatcher.dispatch(inEvent);\n}\n\n/**\n* @private\n*/\ndispatcher.bubble = function(inEvent) {\n\t// '|| window.event' clause needed for IE8\n\tvar e = inEvent || global.event;\n\tif (e) {\n\t\t// We depend on e.target existing for event tracking and dispatching.\n\t\tif (!e.target) {\n\t\t\te.target = e.srcElement;\n\t\t}\n\t\tdispatcher.dispatch(e);\n\t}\n};\n\n// This string is set on event handlers attributes for DOM elements that\n// don't normally bubble (like onscroll) so that they can participate in the\n// Enyo event system.\ndispatcher.bubbler = \"enyo.bubble(arguments[0])\";\n\n// The code below helps make Enyo compatible with Google Packaged Apps\n// Content Security Policy(http://developer.chrome.com/extensions/contentSecurityPolicy.html),\n// which, among other things, forbids the use of inline scripts.\n// We replace online scripting with equivalent means, leaving enyo.bubbler\n// for backward compatibility.\n(function() {\n\tvar bubbleUp = function() {\n\t\tdispatcher.bubble(arguments[0]);\n\t};\n\n\t/**\n\t* Makes given events bubble on a specified Enyo control.\n\t*\n\t* @private\n\t*/\n\tdispatcher.makeBubble = function() {\n\t\tvar args = Array.prototype.slice.call(arguments, 0),\n\t\t\tcontrol = args.shift();\n\n\t\tif((typeof control === \"object\") && (typeof control.hasNode === \"function\")) {\n\t\t\tutils.forEach(args, function(event) {\n\t\t\t\tif(this.hasNode()) {\n\t\t\t\t\tdispatcher.listen(this.node, event, bubbleUp);\n\t\t\t\t}\n\t\t\t}, control);\n\t\t}\n\t};\n\n\t/**\n\t* Removes the event listening and bubbling initiated by\n\t* [enyo.makeBubble()]{@link enyo.makeBubble} on a specific control.\n\t*\n\t* @private\n\t*/\n\tdispatcher.unmakeBubble = function() {\n\t\tvar args = Array.prototype.slice.call(arguments, 0),\n\t\t\tcontrol = args.shift();\n\n\t\tif((typeof control === \"object\") && (typeof control.hasNode === \"function\")) {\n\t\t\tutils.forEach(args, function(event) {\n\t\t\t\tif(this.hasNode()) {\n\t\t\t\t\tdispatcher.stopListening(this.node, event, bubbleUp);\n\t\t\t\t}\n\t\t\t}, control);\n\t\t}\n\t};\n})();\n\n/**\n* @private\n*/\n// FIXME: we need to create and initialize dispatcher someplace else to allow overrides\nDom.requiresWindow(dispatcher.connect);\n\n/**\n* Generates a tapped event for a raw-click event.\n*\n* @private\n*/\ndispatcher.features.push(\n\tfunction (e) {\n\t\tif (\"click\" === e.type) {\n\t\t\tif (e.clientX === 0 && e.clientY === 0 && !e.detail) {\n\t\t\t\t// this allows the click to dispatch as well\n\t\t\t\t// but note the tap event will fire first\n\t\t\t\tvar cp = utils.clone(e);\n\t\t\t\tcp.type = \"tap\";\n\t\t\t\tcp.preventDefault = utils.nop;\n\t\t\t\tdispatcher.dispatch(cp);\n\t\t\t}\n\t\t}\n\t}\n);\n\n/**\n* Instead of having multiple `features` pushed and handled in separate methods\n* for these events, we handle them uniformly here to expose the last known\n* interaction coordinates as accurately as possible.\n*\n* @private\n*/\nvar _xy = {};\ndispatcher.features.push(\n\tfunction (e) {\n\t\tif (\n\t\t\t(e.type == \"mousemove\")  ||\n\t\t\t(e.type == \"tap\")        ||\n\t\t\t(e.type == \"click\")      ||\n\t\t\t(e.type == \"touchmove\")\n\t\t) {\n\t\t\t_xy.clientX = e.clientX;\n\t\t\t_xy.clientY = e.clientY;\n\t\t\t// note only ie8 does not support pageX/pageY\n\t\t\t_xy.pageX   = e.pageX;\n\t\t\t_xy.pageY   = e.pageY;\n\t\t\t// note ie8 and opera report these values incorrectly\n\t\t\t_xy.screenX = e.screenX;\n\t\t\t_xy.screenY = e.screenY;\n\t\t}\n\t}\n);\n\n/**\n* Retrieves the last known coordinates of the cursor or user-interaction point\n* in touch environments. Returns an immutable object with the `clientX`,\n* `clientY`, `pageX`, `pageY`, `screenX`, and `screenY` properties. It is\n* important to note that IE8 and Opera have improper reporting for the\n* `screenX` and `screenY` properties (they both use CSS pixels as opposed to\n* device pixels) and IE8 has no support for the `pageX` and `pageY` properties,\n* so they are facaded.\n*\n* @returns {module:enyo/dispatcher~CursorCoordinates} An [object]{@glossary Object} describing the\n*\tthe last known coordinates of the cursor or user-interaction point in touch environments.\n* @public\n*/\ndispatcher.getPosition = function () {\n\tvar p = utils.clone(_xy);\n\t// if we are in ie8 we facade the _pageX, pageY_ properties\n\tif (platform.ie < 9) {\n\t\tvar d = (document.documentElement || document.body.parentNode || document.body);\n\t\tp.pageX = (p.clientX + d.scrollLeft);\n\t\tp.pageY = (p.clientY + d.scrollTop);\n\t}\n\treturn p;\n};\n\n\n/**\n* Key mapping feature: Adds a `keySymbol` property to key [events]{@glossary event},\n* based on a global key mapping. Use\n* [enyo.dispatcher.registerKeyMap()]{@link enyo.dispatcher.registerKeyMap} to add\n* keyCode-to-keySymbol mappings via a simple hash. This method may be called\n* multiple times from different libraries to mix different maps into the global\n* mapping table; if conflicts arise, the last-in wins.\n*\n* ```\n* enyo.dispatcher.registerKeyMap({\n* \t415 : 'play',\n* \t413 : 'stop',\n* \t19  : 'pause',\n* \t412 : 'rewind',\n* \t417 : 'fastforward'\n* });\n* ```\n* \n* @private\n*/\ndispatcher.features.push(function(e) {\n\tif ((e.type === 'keydown') || (e.type === 'keyup') || (e.type === 'keypress')) {\n\t\te.keySymbol = this.keyMap[e.keyCode];\n\t\t// Dispatch key events to be sent via Signals\n\t\tvar c = this.findDefaultTarget();\n\t\tif (e.dispatchTarget !== c) {\n\t\t\tthis.dispatchBubble(e, c);\n\t\t}\n\t}\n});\n\nutils.mixin(dispatcher, {\n\tkeyMap: {},\n\tregisterKeyMap: function(map) {\n\t\tutils.mixin(this.keyMap, map);\n\t}\n});\n\n\n/**\n* Event modal capture feature. Capture events to a specific control via\n* [enyo.dispatcher.capture(inControl, inShouldForward)]{@linkcode enyo.dispatcher.capture};\n* release events via [enyo.dispatcher.release()]{@link enyo.dispatcher.release}.\n*\n* @private\n*/\ndispatcher.features.push(function(e) {\n\tif (this.captureTarget) {\n\t\tvar c = e.dispatchTarget;\n\t\tvar eventName = (e.customEvent ? '' : 'on') + e.type;\n\t\tvar handlerName = this.captureEvents[eventName];\n\t\tvar handlerScope = this.captureHandlerScope || this.captureTarget;\n\t\tvar handler = handlerName && handlerScope[handlerName];\n\t\tvar shouldCapture = handler && !(c && c.isDescendantOf && c.isDescendantOf(this.captureTarget));\n\t\tif (shouldCapture) {\n\t\t\tvar c1 = e.captureTarget = this.captureTarget;\n\t\t\t// NOTE: We do not want releasing capture while an event is being processed to alter\n\t\t\t// the way the event propagates. Therefore decide if the event should forward\n\t\t\t// before the capture target receives the event (since it may release capture).\n\t\t\te.preventDispatch = handler && handler.apply(handlerScope, [c1, e]) && !this.autoForwardEvents[e.type];\n\t\t}\n\t}\n});\n\n//\n//        NOTE: This object is a plug-in; these methods should\n//        be called on `enyo.dispatcher`, and not on the plug-in itself.\n//\nutils.mixin(dispatcher, {\n\n\t/**\n\t* @private\n\t*/\n\tautoForwardEvents: {leave: 1, resize: 1},\n\n\t/**\n\t* @private\n\t*/\n\tcaptures: [],\n\n\t/** \n\t* Captures [events]{@glossary event} for `inTarget`, where `inEvents` is specified as a\n\t* hash of event names mapped to callback handler names to be called on `inTarget` (or,\n\t* optionally, `inScope`). The callback is called when any of the captured events are\n\t* dispatched outside of the capturing control. Returning `true` from the callback stops\n\t* dispatch of the event to the original `dispatchTarget`.\n\t*\n\t* @private\n\t*/\n\tcapture: function(inTarget, inEvents, inScope) {\n\t\tvar info = {target: inTarget, events: inEvents, scope: inScope};\n\t\tthis.captures.push(info);\n\t\tthis.setCaptureInfo(info);\n\t},\n\n\t/**\n\t* Removes the specified target from the capture list.\n\t* \n\t* @private\n\t*/\n\trelease: function(inTarget) {\n\t\tfor (var i = this.captures.length - 1; i >= 0; i--) {\n\t\t\tif (this.captures[i].target === inTarget) {\n\t\t\t\tthis.captures.splice(i,1);\n\t\t\t\tthis.setCaptureInfo(this.captures[this.captures.length-1]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* Sets the information for a captured {@glossary event}.\n\t* \n\t* @private\n\t*/\n\tsetCaptureInfo: function(inInfo) {\n\t\tthis.captureTarget = inInfo && inInfo.target;\n\t\tthis.captureEvents = inInfo && inInfo.events;\n\t\tthis.captureHandlerScope = inInfo && inInfo.scope;\n\t}\n});\n\n\n(function () {\n\t/**\n\t* Dispatcher preview feature\n\t* \n\t* Allows {@link module:enyo/Control~Control} ancestors of the {@glossary event} target\n\t* a chance (eldest first) to react by implementing `previewDomEvent`.\n\t*\n\t* @private\n\t*/\n\tvar fn = 'previewDomEvent';\n\tvar preview = \n\t\t/** @lends enyo.dispatcher.features */ {\n\n\t\t/**\n\t\t* @private\n\t\t*/\n\t\tfeature: function(e) {\n\t\t\tpreview.dispatch(e, e.dispatchTarget);\n\t\t},\n\n\t\t/**\n\t\t* @returns {(Boolean|undefined)} Handlers return `true` to abort preview and prevent default\n\t\t*\tevent processing.\n\t\t*\n\t\t* @private\n\t\t*/\n\t\tdispatch: function(evt, control) {\n\t\t\tvar i, l,\n\t\t\tlineage = this.buildLineage(control);\n\t\t\tfor (i=0; (l=lineage[i]); i++) {\n\t\t\t\tif (l[fn] && l[fn](evt) === true) {\n\t\t\t\t\tevt.preventDispatch = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t* We ascend, making a list of Enyo [controls]{@link module:enyo/Control~Control}.\n\t\t*\n\t\t* Note that a control is considered to be its own ancestor.\n\t\t*\n\t\t* @private\n\t\t*/\n\t\tbuildLineage: function(control) {\n\t\t\tvar lineage = [],\n\t\t\t\tc = control;\n\t\t\twhile (c) {\n\t\t\t\tlineage.unshift(c);\n\t\t\t\tc = c.parent;\n\t\t\t}\n\t\t\treturn lineage;\n\t\t}\n\t};\n\n\tdispatcher.features.push(preview.feature);\n})();\n",
    "mtime": 1434758950000,
    "relPath": "enyo/dispatcher",
    "requires": [
      "enyo",
      "./logger",
      "./master",
      "./utils",
      "./platform",
      "./dom"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./master",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/master",
    "name": "enyo/master",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/master.js",
    "contents": "require('enyo');\n\nvar\n\tutils = require('./utils');\nvar\n\tComponent = require('./Component'),\n\tSignals = require('./Signals');\n\n/**\n* Default owner assigned to ownerless [UiComponents]{@link module:enyo/UiComponent~UiComponent},\n* to allow such UiComponents to be notified of important system events like window resize.\n*\n* NOTE: Ownerless [UiComponents]{@link module:enyo/UiComponent~UiComponent} will not be garbage collected unless \n* explicitly destroyed, as they will be referenced by `master`.\n*\n* @module enyo/master\n* @private\n*/\nvar master = module.exports = new Component({\n\tname: 'master',\n\tnotInstanceOwner: true,\n\teventFlags: {showingOnly: true}, // don't waterfall these events into hidden controls\n\tgetId: function () {\n\t\treturn '';\n\t},\n\tisDescendantOf: utils.nop,\n\tbubble: function (nom, event) {\n\t\t//enyo.log('master event: ' + nom);\n\t\tif (nom == 'onresize') {\n\t\t\t// Resize is special; waterfall this message.\n\t\t\t// This works because master is a Component, so it waterfalls\n\t\t\t// to its owned Components (i.e., master has no children).\n\t\t\tmaster.waterfallDown('onresize', this.eventFlags);\n\t\t\tmaster.waterfallDown('onpostresize', this.eventFlags);\n\t\t} else {\n\t\t\t// All other top-level events are sent only to interested Signal\n\t\t\t// receivers.\n\t\t\tSignals.send(nom, event);\n\t\t}\n\t}\n});\n",
    "mtime": 1434758950000,
    "relPath": "enyo/master",
    "requires": [
      "enyo",
      "./utils",
      "./Component",
      "./Signals"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./Controller",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/Controller",
    "name": "enyo/Controller",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/Controller.js",
    "contents": "require('enyo');\n\n/**\n* Contains the declaration for the {@link module:enyo/Controller~Controller} kind.\n* @module enyo/Controller\n*/\n\nvar\n\tkind = require('./kind'),\n\tutils = require('./utils');\n\nvar\n\tMultipleDispatchComponent = require('./MultipleDispatchComponent');\n\n/**\n* {@link module:enyo/Controller~Controller} is the base [kind]{@glossary kind} for all\n* controllers in Enyo. An abstract kind, `enyo.Controller` is a\n* [delegate]{@glossary delegate}/[component]{@link module:enyo/Component~Component} that\n* is designed to be a proxy for information.\n*\n* @class Controller\n* @extends module:enyo/MultipleDispatchComponent~MultipleDispatchComponent\n* @public\n*/\nmodule.exports = kind(\n\t/** @lends module:enyo/Controller~Controller.prototype */ {\n\n\tname: 'enyo.Controller',\n\n\t/**\n\t* @private\n\t*/\n\tkind: MultipleDispatchComponent,\n\n\t/**\n\t* Set this flag to `true` to make this [controller]{@link module:enyo/Controller~Controller}\n\t* available globally, when instanced. When set to `true`, even the\n\t* [owner]{@link module:enyo/Component~Component#owner} (if any) cannot\n\t* [destroy]{@link module:enyo/Component~Component#destroy} it.\n\t*\n\t* @type {Boolean}\n\t* @default false\n\t* @public\n\t*/\n\tglobal: false,\n\n\t/**\n\t* The default source of information for all instances of {@link module:enyo/Controller~Controller}\n\t* and its [subkinds]{@glossary subkind}. In some cases, this will be a\n\t* [computed property]{@link module:enyo/ComputedSupport} to facilitate overloading.\n\t* It may contain any type of data.\n\t*\n\t* @type {*}\n\t* @default null\n\t* @public\n\t*/\n\tdata: null,\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tconstructor: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tsup.apply(this, arguments);\n\t\t\tif (this.global) {\n\t\t\t\tutils.setPath(this.name, this);\n\t\t\t}\n\t\t};\n\t}),\n\t_isController: true\n});\n",
    "mtime": 1434758950000,
    "relPath": "enyo/Controller",
    "requires": [
      "enyo",
      "./kind",
      "./utils",
      "./MultipleDispatchComponent"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./Signals",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/Signals",
    "name": "enyo/Signals",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/Signals.js",
    "contents": "require('enyo');\n\n/**\n* Contains the declaration for the {@link module:enyo/Signals~Signals} kind.\n* @module enyo/Signals\n*/\n\nvar\n\tkind = require('./kind'),\n\tutils = require('./utils');\n\nvar\n\tComponent = require('./Component');\n\n/**\n* {@link module:enyo/Signals~Signals} is a [component]{@link module:enyo/Component~Component} used to listen\n* to global messages.\n* \n* An object with a Signals component can listen to messages sent from anywhere\n* by declaring handlers for them.\n* \n* DOM [events]{@glossary event} that have no node targets are broadcast as\n* signals. These events include Window events, such as `onload` and\n* `onbeforeunload`, as well as events that occur directly on `document`, such\n* as `onkeypress` if `document` has the focus.\n* \n* For more information, see the documentation on [Event\n* Handling]{@linkplain $dev-guide/key-concepts/event-handling.html} in the\n* Enyo Developer Guide.\n*\n* @class Signals\n* @extends module:enyo/Component~Component\n* @public\n*/\nvar Signals = module.exports = kind(\n\t/** @lends module:enyo/Signals~Signals.prototype */ {\n\n\tname: 'enyo.Signals',\n\n\t/**\n\t* @private\n\t*/\n\tkind: Component,\n\n\t/**\n\t* Needed because of early calls to bind DOM {@glossary event} listeners\n\t* to the [enyo.Signals.send()]{@link module:enyo/Signals~Signals#send} call.\n\t* \n\t* @private\n\t*/\n\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tcreate: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tsup.apply(this, arguments);\n\t\t\tSignals.addListener(this);\n\t\t};\n\t}),\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tdestroy: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tSignals.removeListener(this);\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* @private\n\t*/\n\tnotify: function (msg, load) {\n\t\tthis.dispatchEvent(msg, load);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tprotectedStatics: {\n\t\tlisteners: [],\n\t\taddListener: function(listener) {\n\t\t\tthis.listeners.push(listener);\n\t\t},\n\t\tremoveListener: function(listener) {\n\t\t\tutils.remove(listener, this.listeners);\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tstatics: \n\t\t/** @lends module:enyo/Signals~Signals.prototype */ {\n\n\t\t/**\n\t\t* Broadcasts a global message to be consumed by subscribers.\n\t\t* \n\t\t* @param {String} msg - The message to send; usually the name of the\n\t\t*\t{@glossary event}.\n\t\t* @param {Object} load - An [object]{@glossary Object} containing any\n\t\t*\tassociated event properties to be accessed by subscribers.\n\t\t* @public\n\t\t*/\n\t\tsend: function (msg, load) {\n\t\t\tutils.forEach(this.listeners, function(l) {\n\t\t\t\tl.notify(msg, load);\n\t\t\t});\n\t\t}\n\t}\n});\n",
    "mtime": 1434758950000,
    "relPath": "enyo/Signals",
    "requires": [
      "enyo",
      "./kind",
      "./utils",
      "./Component"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./MultipleDispatchComponent",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/MultipleDispatchComponent",
    "name": "enyo/MultipleDispatchComponent",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/MultipleDispatchComponent.js",
    "contents": "require('enyo');\n\n/**\n* Contains the declaration for the {@link module:enyo/MultipleDispatchComponent~MultipleDispatchComponent} kind.\n* @module enyo/MultipleDispatchComponent\n*/\n\nvar\n\tkind = require('./kind');\n\nvar\n\tComponent = require('./Component'),\n\tMultipleDispatchSupport = require('./MultipleDispatchSupport');\n\n/**\n* {@link module:enyo/MultipleDispatchComponent~MultipleDispatchComponent} is a purely abstract [kind]\n* {@glossary kind} that simply provides a common ancestor for\n* {@link module:enyo/Component~Component} [objects]{@glossary Object} that need \n* the [MultipleDispatchSupport]{@link module:enyo/MultipleDispatchSupport~MultipleDispatchSupport}\n* [mixin]{@glossary mixin}.\n*\n* @class MultipleDispatchComponent\n* @extends module:enyo/Component~Component\n* @mixes module:enyo/MultipleDispatchSupport~MultipleDispatchSupport\n* @public\n*/\nmodule.exports = kind(\n\t/** @lends module:enyo/MultipleDispatchComponent~MultipleDispatchComponent */ {\n\n\t/**\n\t* @private\n\t*/\n\tkind: Component,\n\n\t/**\n\t* @private\n\t*/\n\tmixins: [MultipleDispatchSupport]\n});\n",
    "mtime": 1434758950000,
    "relPath": "enyo/MultipleDispatchComponent",
    "requires": [
      "enyo",
      "./kind",
      "./Component",
      "./MultipleDispatchSupport"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./ScrollMath",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/ScrollMath",
    "name": "enyo/ScrollMath",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/ScrollMath.js",
    "contents": "require('enyo');\n\n/**\n* Contains the declaration for the {@link module:enyo/ScrollMath~ScrollMath} kind.\n* @module enyo/ScrollMath\n*/\n\nvar\n\tkind = require('./kind'),\n\tutils = require('./utils'),\n\tplatform = require('./platform'),\n\tanimation = require('./animation');\n\nvar\n\tComponent = require('./Component');\n\n/**\n* Fires when a scrolling action starts.\n*\n* @event module:enyo/ScrollMath~ScrollMath#onScrollStart\n* @type {Object}\n* @property {Object} sender - The [component]{@link module:enyo/Component~Component} that most recently \n*\tpropagated the {@glossary event}.\n* @property {module:enyo/Scroller~Scroller~ScrollEvent} event - An [object]{@glossary Object} containing\n*\tevent information.\n* @private\n*/\n\n/**\n* Fires while a scrolling action is in progress.\n*\n* @event module:enyo/ScrollMath~ScrollMath#onScroll\n* @type {Object}\n* @property {Object} sender - The [component]{@link module:enyo/Component~Component} that most recently \n*\tpropagated the {@glossary event}.\n* @property {module:enyo/Scroller~Scroller~ScrollEvent} event - An [object]{@glossary Object} containing\n*\tevent information.\n* @private\n*/\n\n/**\n* Fires when a scrolling action stops.\n*\n* @event module:enyo/ScrollMath~ScrollMath#onScrollStop\n* @type {Object}\n* @property {Object} sender - The [component]{@link module:enyo/Component~Component} that most recently \n*\tpropagated the {@glossary event}.\n* @property {module:enyo/Scroller~Scroller~ScrollEvent} event - An [object]{@glossary Object} containing\n*\tevent information.\n* @private\n*/\n\n/**\n* {@link module:enyo/ScrollMath~ScrollMath} implements a scrolling dynamics simulation. It is a\n* helper [kind]{@glossary kind} used by other [scroller]{@link module:enyo/Scroller~Scroller}\n* kinds, such as {@link module:enyo/TouchScrollStrategy~TouchScrollStrategy}.\n* \n* `enyo.ScrollMath` is not typically created in application code.\n*\n* @class ScrollMath\n* @protected\n*/\nmodule.exports = kind(\n\t/** @lends module:enyo/ScrollMath~ScrollMath.prototype */ {\n\n\tname: 'enyo.ScrollMath',\n\n\t/**\n\t* @private\n\t*/\n\tkind: Component,\n\n\t/**\n\t* @private\n\t*/\n\tpublished: \n\t\t/** @lends module:enyo/ScrollMath~ScrollMath.prototype */ {\n\n\t\t/** \n\t\t* Set to `true` to enable vertical scrolling.\n\t\t*\n\t\t* @type {Boolean}\n\t\t* @default true\n\t\t* @private\n\t\t*/\n\t\tvertical: true,\n\n\t\t/** \n\t\t* Set to `true` to enable horizontal scrolling.\n\t\t*\n\t\t* @type {Boolean}\n\t\t* @default true\n\t\t* @private\n\t\t*/\n\t\thorizontal: true\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tevents: {\n\t\tonScrollStart: '',\n\t\tonScroll: '',\n\t\tonScrollStop: '',\n\t\tonStabilize: ''\n\t},\n\n\t/**\n\t* \"Spring\" damping returns the scroll position to a value inside the boundaries. Lower \n\t* values provide faster snapback.\n\t*\n\t* @private\n\t*/\n\tkSpringDamping: 0.93,\n\n\t/** \n\t* \"Drag\" damping resists dragging the scroll position beyond the boundaries. Lower values \n\t* provide more resistance.\n\t*\n\t* @private\n\t*/\n\tkDragDamping: 0.5,\n\t\n\t/** \n\t* \"Friction\" damping reduces momentum over time. Lower values provide more friction.\n\t*\n\t* @private\n\t*/\n\tkFrictionDamping: 0.97,\n\n\t/** \n\t* Additional \"friction\" damping applied when momentum carries the viewport into overscroll. \n\t* Lower values provide more friction.\n\t*\n\t* @private\n\t*/\n\tkSnapFriction: 0.9,\n\t\n\t/** \n\t* Scalar applied to `flick` event velocity.\n\t*\n\t* @private\n\t*/\n\tkFlickScalar: 15,\n\n\t/** \n\t* Limits the maximum allowable flick. On Android > 2, we limit this to prevent compositing \n\t* artifacts.\n\t*\n\t* @private\n\t*/\n\tkMaxFlick: platform.android > 2 ? 2 : 1e9,\n\t\n\t/** \n\t* The value used in [friction()]{@link module:enyo/ScrollMath~ScrollMath#friction} to determine if the delta \n\t* (e.g., y - y0) is close enough to zero to consider as zero.\n\t*\n\t* @private\n\t*/\n\tkFrictionEpsilon: platform.webos >= 4 ? 1e-1 : 1e-2,\n\t\n\t/** \n\t* Top snap boundary, generally `0`.\n\t*\n\t* @private\n\t*/\n\ttopBoundary: 0,\n\t\n\t/** \n\t* Right snap boundary, generally `(viewport width - content width)`.\n\t*\n\t* @private\n\t*/\n\trightBoundary: 0,\n\t\n\t/** \n\t* Bottom snap boundary, generally `(viewport height - content height)`.\n\t*\n\t* @private\n\t*/\n\tbottomBoundary: 0,\n\t\n\t/** \n\t* Left snap boundary, generally `0`.\n\t*\n\t* @private\n\t*/\n\tleftBoundary: 0,\n\t\n\t/** \n\t* Animation time step.\n\t*\n\t* @private\n\t*/\n\tinterval: 20,\n\t\n\t/** \n\t* Flag to enable frame-based animation; if `false`, time-based animation is used.\n\t*\n\t* @private\n\t*/\n\tfixedTime: true,\n\n\t/**\n\t* Simulation state.\n\t*\n\t* @private\n\t*/\n\tx0: 0,\n\n\t/**\n\t* Simulation state.\n\t*\n\t* @private\n\t*/\n\tx: 0,\n\n\t/**\n\t* Simulation state.\n\t*\n\t* @private\n\t*/\n\ty0: 0,\n\n\t/**\n\t* Simulation state.\n\t*\n\t* @private\n\t*/\n\ty: 0,\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tdestroy: kind.inherit(function (sup) {\n\t\treturn function() {\n\t\t\tthis.stop();\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* Simple Verlet integrator for simulating Newtonian motion.\n\t*\n\t* @private\n\t*/\n\tverlet: function () {\n\t\tvar x = this.x;\n\t\tthis.x += x - this.x0;\n\t\tthis.x0 = x;\n\t\t//\n\t\tvar y = this.y;\n\t\tthis.y += y - this.y0;\n\t\tthis.y0 = y;\n\t},\n\n\t/**\n\t* Boundary damping function. Returns damped `value` based on `coeff` on one side of \n\t* `origin`.\n\t*\n\t* @private\n\t*/\n\tdamping: function (val, origin, coeff, sign) {\n\t\tvar kEpsilon = 0.5;\n\t\t//\n\t\t// this is basically just value *= coeff (generally, coeff < 1)\n\t\t//\n\t\t// 'sign' and the conditional is to force the damping to only occur\n\t\t// on one side of the origin.\n\t\t//\n\t\tvar dv = val - origin;\n\t\t// Force close-to-zero to zero\n\t\tif (Math.abs(dv) < kEpsilon) {\n\t\t\treturn origin;\n\t\t}\n\t\treturn val*sign > origin*sign ? coeff * dv + origin : val;\n\t},\n\n\t/**\n\t* Dual-boundary damping function. Returns damped `value` based on `coeff` when exceeding \n\t* either boundary.\n\t*\n\t* @private\n\t*/\n\tboundaryDamping: function (val, aBoundary, bBoundary, coeff) {\n\t\treturn this.damping(this.damping(val, aBoundary, coeff, 1), bBoundary, coeff, -1);\n\t},\n\n\t/**\n\t* Simulation constraints (spring damping occurs here).\n\t*\n\t* @private\n\t*/\n\tconstrain: function () {\n\t\tvar y = this.boundaryDamping(this.y, this.topBoundary, this.bottomBoundary, this.kSpringDamping);\n\t\tif (y != this.y) {\n\t\t\t// ensure snapping introduces no velocity, add additional friction\n\t\t\tthis.y0 = y - (this.y - this.y0) * this.kSnapFriction;\n\t\t\tthis.y = y;\n\t\t}\n\t\tvar x = this.boundaryDamping(this.x, this.leftBoundary, this.rightBoundary, this.kSpringDamping);\n\t\tif (x != this.x) {\n\t\t\tthis.x0 = x - (this.x - this.x0) * this.kSnapFriction;\n\t\t\tthis.x = x;\n\t\t}\n\t},\n\n\t/**\n\t* The friction function.\n\t*\n\t* @private\n\t*/\n\tfriction: function (ex, ex0, coeff) {\n\t\t// implicit velocity\n\t\tvar dp = this[ex] - this[ex0];\n\t\t// let close-to-zero collapse to zero (i.e. smaller than epsilon is considered zero)\n\t\tvar c = Math.abs(dp) > this.kFrictionEpsilon ? coeff : 0;\n\t\t// reposition using damped velocity\n\t\tthis[ex] = this[ex0] + c * dp;\n\t},\n\n\t/** \n\t* One unit of time for simulation.\n\t*\n\t* @private\n\t*/\n\tframe: 10,\n\t// piece-wise constraint simulation\n\tsimulate: function (t) {\n\t\twhile (t >= this.frame) {\n\t\t\tt -= this.frame;\n\t\t\tif (!this.dragging) {\n\t\t\t\tthis.constrain();\n\t\t\t}\n\t\t\tthis.verlet();\n\t\t\tthis.friction('y', 'y0', this.kFrictionDamping);\n\t\t\tthis.friction('x', 'x0', this.kFrictionDamping);\n\t\t}\n\t\treturn t;\n\t},\n\n\t/**\n\t* @fires module:enyo/ScrollMath~ScrollMath#onScrollStop\n\t* @private\n\t*/\n\tanimate: function () {\n\t\tthis.stop();\n\t\t// time tracking\n\t\tvar t0 = utils.perfNow(), t = 0;\n\t\t// delta tracking\n\t\tvar x0, y0;\n\t\t// animation handler\n\t\tvar fn = this.bindSafely(function() {\n\t\t\t// wall-clock time\n\t\t\tvar t1 = utils.perfNow();\n\t\t\t// schedule next frame\n\t\t\tthis.job = animation.requestAnimationFrame(fn);\n\t\t\t// delta from last wall clock time\n\t\t\tvar dt = t1 - t0;\n\t\t\t// record the time for next delta\n\t\t\tt0 = t1;\n\t\t\t// user drags override animation\n\t\t\tif (this.dragging) {\n\t\t\t\tthis.y0 = this.y = this.uy;\n\t\t\t\tthis.x0 = this.x = this.ux;\n\t\t\t\tthis.endX = this.endY = null;\n\t\t\t}\n\t\t\t// frame-time accumulator\n\t\t\t// min acceptable time is 16ms (60fps)\n\t\t\tt += Math.max(16, dt);\n\t\t\t// prevent snapping to originally desired scroll position if we are in overscroll\n\t\t\tif (this.isInOverScroll()) {\n\t\t\t\tthis.endX = null;\n\t\t\t\tthis.endY = null;\n\t\t\t}\n\t\t\t// alternate fixed-time step strategy:\n\t\t\telse if (this.fixedTime) {\n\t\t\t\tt = this.interval;\n\t\t\t}\n\t\t\t// consume some t in simulation\n\t\t\tt = this.simulate(t);\n\t\t\t// scroll if we have moved, otherwise the animation is stalled and we can stop\n\t\t\tif (y0 != this.y || x0 != this.x) {\n\t\t\t\tthis.scroll();\n\t\t\t} else if (!this.dragging) {\n\t\t\t\t// set final values\n\t\t\t\tif (this.endX != null) {\n\t\t\t\t\tthis.x = this.x0 = this.endX;\n\t\t\t\t}\n\t\t\t\tif (this.endY != null) {\n\t\t\t\t\tthis.y = this.y0 = this.endY;\n\t\t\t\t}\n\n\t\t\t\tthis.stop();\n\t\t\t\tthis.scroll();\n\t\t\t\tthis.doScrollStop();\n\n\t\t\t\tthis.endX = null;\n\t\t\t\tthis.endY = null;\n\t\t\t}\n\t\t\ty0 = this.y;\n\t\t\tx0 = this.x;\n\t\t});\n\t\tthis.job = animation.requestAnimationFrame(fn);\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tstart: function () {\n\t\tif (!this.job) {\n\t\t\tthis.doScrollStart();\n\t\t\tthis.animate();\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tstop: function (fire) {\n\t\tvar job = this.job;\n\t\tif (job) {\n\t\t\tthis.job = animation.cancelRequestAnimationFrame(job);\n\t\t}\n\t\tif (fire) {\n\t\t\tthis.doScrollStop();\n\n\t\t\tthis.endX = undefined;\n\t\t\tthis.endY = undefined;\n\t\t}\n\t},\n\n\t/**\n\t* Adjusts the scroll position to be valid, if necessary (e.g., after the scroll contents\n\t* have changed).\n\t*\n\t* @private\n\t*/\n\tstabilize: function (opts) {\n\t\tvar fire = !opts || opts.fire === undefined || opts.fire;\n\t\tvar y = Math.min(this.topBoundary, Math.max(this.bottomBoundary, this.y));\n\t\tvar x = Math.min(this.leftBoundary, Math.max(this.rightBoundary, this.x));\n\t\tif (y != this.y || x != this.x) {\n\t\t\tthis.y = this.y0 = y;\n\t\t\tthis.x = this.x0 = x;\n\t\t\tif (fire) {\n\t\t\t\tthis.doStabilize();\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tstartDrag: function (e) {\n\t\tthis.dragging = true;\n\t\t//\n\t\tthis.my = e.pageY;\n\t\tthis.py = this.uy = this.y;\n\t\t//\n\t\tthis.mx = e.pageX;\n\t\tthis.px = this.ux = this.x;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tdrag: function (e) {\n\t\tvar dy, dx, v, h;\n\t\tif (this.dragging) {\n\t\t\tv = this.canScrollY();\n\t\t\th = this.canScrollX();\n\t\t\n\t\t\tdy = v ? e.pageY - this.my : 0;\n\t\t\tthis.uy = dy + this.py;\n\t\t\t// provides resistance against dragging into overscroll\n\t\t\tthis.uy = this.boundaryDamping(this.uy, this.topBoundary, this.bottomBoundary, this.kDragDamping);\n\t\t\t//\n\t\t\tdx = h ? e.pageX - this.mx : 0;\n\t\t\tthis.ux = dx + this.px;\n\t\t\t// provides resistance against dragging into overscroll\n\t\t\tthis.ux = this.boundaryDamping(this.ux, this.leftBoundary, this.rightBoundary, this.kDragDamping);\n\t\t\t//\n\t\t\tthis.start();\n\t\t\treturn true;\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tdragDrop: function () {\n\t\tif (this.dragging && !window.PalmSystem) {\n\t\t\tvar kSimulatedFlickScalar = 0.5;\n\t\t\tthis.y = this.uy;\n\t\t\tthis.y0 = this.y - (this.y - this.y0) * kSimulatedFlickScalar;\n\t\t\tthis.x = this.ux;\n\t\t\tthis.x0 = this.x - (this.x - this.x0) * kSimulatedFlickScalar;\n\t\t}\n\t\tthis.dragFinish();\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tdragFinish: function () {\n\t\tthis.dragging = false;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tflick: function (e) {\n\t\tvar v;\n\t\tif (this.canScrollY()) {\n\t\t\tv = e.yVelocity > 0 ? Math.min(this.kMaxFlick, e.yVelocity) : Math.max(-this.kMaxFlick, e.yVelocity);\n\t\t\tthis.y = this.y0 + v * this.kFlickScalar;\n\t\t}\n\t\tif (this.canScrollX()) {\n\t\t\tv = e.xVelocity > 0 ? Math.min(this.kMaxFlick, e.xVelocity) : Math.max(-this.kMaxFlick, e.xVelocity);\n\t\t\tthis.x = this.x0 + v * this.kFlickScalar;\n\t\t}\n\t\tthis.start();\n\t},\n\n\t/**\n\t* TODO: Refine and test newMousewheel, remove this\n\t* @private\n\t*/\n\tmousewheel: function (e) {\n\t\tvar dy = this.vertical ? e.wheelDeltaY || (!e.wheelDeltaX ? e.wheelDelta : 0) : 0,\n\t\t\tdx = this.horizontal ? e.wheelDeltaX : 0,\n\t\t\tshouldScroll = false;\n\t\tif ((dy > 0 && this.y < this.topBoundary) || (dy < 0 && this.y > this.bottomBoundary)) {\n\t\t\tthis.y = this.y0 = this.y0 + dy;\n\t\t\tshouldScroll = true;\n\t\t}\n\t\tif ((dx > 0 && this.x < this.leftBoundary) || (dx < 0 && this.x > this.rightBoundary)) {\n\t\t\tthis.x = this.x0 = this.x0 + dx;\n\t\t\tshouldScroll = true;\n\t\t}\n\t\tthis.stop(!shouldScroll);\n\t\tif (shouldScroll) {\n\t\t\tthis.start();\n\t\t\treturn true;\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tnewMousewheel: function (e) {\n\t\tvar wdY = (e.wheelDeltaY === undefined) ? e.wheelDelta : e.wheelDeltaY,\n\t\t\tdY = wdY,\n\t\t\tdX = e.wheelDeltaX,\n\t\t\tcanY = this.canScrollY(),\n\t\t\tcanX = this.canScrollX(),\n\t\t\tshouldScroll = false,\n\t\t\tm = 2,\n\t\t\t// TODO: Figure out whether we need to port the configurable\n\t\t\t// max / multiplier feature from Moonstone's implementation,\n\t\t\t// and (if so) how\n\t\t\t// max = 100,\n\t\t\tscr = this.isScrolling(),\n\t\t\tovr = this.isInOverScroll(),\n\t\t\trefY = (scr && this.endY !== null) ? this.endY : this.y,\n\t\t\trefX = (scr && this.endX !== null) ? this.endX : this.x,\n\t\t\ttY = refY,\n\t\t\ttX = refX;\n\n\t\tif (ovr) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// If we're getting strictly vertical mousewheel events over a scroller that\n\t\t// can only move horizontally, the user is probably using a one-dimensional\n\t\t// mousewheel and would like us to scroll horizontally instead\n\t\tif (dY && !dX && canX && !canY) {\n\t\t\tdX = dY;\n\t\t\tdY = 0;\n\t\t}\n\t\t\n\t\tif (dY && canY) {\n\t\t\ttY = -(refY + (dY * m));\n\t\t\tshouldScroll = true;\n\t\t}\n\t\tif (dX && canX) {\n\t\t\ttX = -(refX + (dX * m));\n\t\t\tshouldScroll = true;\n\t\t}\n\n\t\tif (shouldScroll) {\n\t\t\tthis.scrollTo(tX, tY, {allowOverScroll: true});\n\t\t\treturn true;\n\t\t}\n\t},\n\n\t/**\n\t* @fires module:enyo/ScrollMath~ScrollMath#onScroll\n\t* @private\n\t*/\n\tscroll: function () {\n\t\tthis.doScroll();\n\t},\n\n\t// NOTE: Yip/Orvell method for determining scroller instantaneous velocity\n\t// FIXME: incorrect if called when scroller is in overscroll region\n\t// because does not account for additional overscroll damping.\n\t\n\t/**\n\t* Scrolls to the specified position.\n\t*\n\t* @param {Number} x - The `x` position in pixels.\n\t* @param {Number} y - The `y` position in pixels.\n\t* @param {Object} opts - TODO: Document. When behavior == 'instant', we skip animation.\n\t* @private\n\t*/\n\tscrollTo: function (x, y, opts) {\n\t\tvar animate = !opts || opts.behavior !== 'instant',\n\t\t\txSnap = this.xSnapIncrement,\n\t\t\tySnap = this.ySnapIncrement,\n\t\t\tallowOverScroll = opts && opts.allowOverScroll,\n\t\t\tmaxX = Math.abs(Math.min(0, this.rightBoundary)),\n\t\t\tmaxY = Math.abs(Math.min(0, this.bottomBoundary));\n\n\t\tif (typeof xSnap === 'number') {\n\t\t\tx = xSnap * Math.round(x / xSnap);\n\t\t}\n\n\t\tif (typeof ySnap === 'number') {\n\t\t\ty = ySnap * Math.round(y / ySnap);\n\t\t}\n\n\t\tif (!animate || !allowOverScroll) {\n\t\t\tx = Math.max(0, Math.min(x, maxX));\n\t\t\ty = Math.max(0, Math.min(y, maxY));\n\t\t}\n\n\t\tif (-x == this.x && -y == this.y) return;\n\n\t\tif (!animate) {\n\t\t\tthis.doScrollStart();\n\t\t\tthis.setScrollX(-x);\n\t\t\tthis.setScrollY(-y);\n\t\t\tthis.doScroll();\n\t\t\tthis.doScrollStop();\n\t\t}\n\t\telse {\n\t\t\tif (y !== null) {\n\t\t\t\tthis.endY = -y;\n\t\t\t\tthis.y = this.y0 - (y + this.y0) * (1 - this.kFrictionDamping);\n\t\t\t}\n\t\t\tif (x !== null) {\n\t\t\t\tthis.endX = -x;\n\t\t\t\tthis.x = this.x0 - (x + this.x0) * (1 - this.kFrictionDamping);\n\t\t\t}\n\t\t\tthis.start();\n\t\t}\n\t},\n\n\t/**\n\t* Sets the scroll position along the x-axis.\n\t*\n\t* @param {Number} x - The x-axis scroll position in pixels.\n\t* @method\n\t* @private\n\t*/\n\tsetScrollX: function (x) {\n\t\tthis.x = this.x0 = x;\n\t},\n\n\t/**\n\t* Sets the scroll position along the y-axis.\n\t*\n\t* @param {Number} y - The y-axis scroll position in pixels.\n\t* @method\n\t* @private\n\t*/\n\tsetScrollY: function (y) {\n\t\tthis.y = this.y0 = y;\n\t},\n\n\t/**\n\t* Sets the scroll position; defaults to setting this position along the y-axis.\n\t*\n\t* @param {Number} pos - The scroll position in pixels.\n\t* @method\n\t* @private\n\t*/\n\tsetScrollPosition: function (pos) {\n\t\tthis.setScrollY(pos);\n\t},\n\t\n\tcanScrollX: function() {\n\t\treturn this.horizontal && this.rightBoundary < 0;\n\t},\n\n\tcanScrollY: function() {\n\t\treturn this.vertical && this.bottomBoundary < 0;\n\t},\n\n\n\t/** \n\t* Determines whether or not the [scroller]{@link module:enyo/Scroller~Scroller} is actively moving.\n\t* \n\t* @return {Boolean} `true` if actively moving; otherwise, `false`.\n\t* @private\n\t*/\n\tisScrolling: function () {\n\t\treturn Boolean(this.job);\n\t},\n\n\t/** \n\t* Determines whether or not the [scroller]{@link module:enyo/Scroller~Scroller} is in overscroll.\n\t* \n\t* @return {Boolean} `true` if in overscroll; otherwise, `false`.\n\t* @private\n\t*/\n\tisInOverScroll: function () {\n\t\treturn this.job && (this.x > this.leftBoundary || this.x < this.rightBoundary ||\n\t\t\tthis.y > this.topBoundary || this.y < this.bottomBoundary);\n\t}\n});\n",
    "mtime": 1434758950000,
    "relPath": "enyo/ScrollMath",
    "requires": [
      "enyo",
      "./kind",
      "./utils",
      "./platform",
      "./animation",
      "./Component"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "enyo/Ajax",
    "base": "/Users/jason/Git/bootplate/lib/enyo-ilib/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/Ajax",
    "name": "enyo/Ajax",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/Ajax.js",
    "contents": "require('enyo');\n\n/**\n* Contains the declaration for the {@link module:enyo/Ajax~Ajax} kind.\n* @module enyo/Ajax\n*/\n\nvar\n\tkind = require('./kind'),\n\tutils = require('./utils'),\n\tjson = require('./json'),\n\tlogger = require('./logger');\n\nvar\n\tAjaxProperties = require('./AjaxProperties'),\n\tAsync = require('./Async'),\n\t/*jshint -W079*/\n\t// this defaults to providing the native FormData if it exists\n\tFormData = require('./FormData'),\n\t/*jshint +W079*/\n\tXhr = require('./xhr');\n\t\n\n/**\n* A cache of response properties set on the {@link module:enyo/Ajax~Ajax} instance once it has completed\n* its request.\n*\n* @typedef {Object} module:enyo/Ajax~Ajax~xhrResponseType\n* @property {Number} status - The response status.\n* @property {Object} headers - The headers used for the request.\n* @property {String} body - The request body.\n* @public\n*/\n\n/**\n* A [kind]{@glossary kind} designed to expose the native\n* [XMLHttpRequest]{@glossary XMLHttpRequest} API. Available configuration options\n* are exposed by [enyo/AjaxProperties]{@link module:enyo/AjaxProperties}.\n*\n* This kind does not extend {@link module:enyo/Component~Component} and cannot be used\n* in the [components block]{@link module:enyo/Component~Component#components}.\n*\n* For more information, see the documentation on [Consuming Web\n* Services]{@linkplain $dev-guide/building-apps/managing-data/consuming-web-services.html}\n* in the Enyo Developer Guide.\n*\n* @class Ajax\n* @extends module:enyo/Async~Async\n* @public\n*/\nvar Ajax = module.exports = kind(\n\t/** @lends module:enyo/Ajax~Ajax.prototype */ {\n\t\n\tname: 'enyo.Ajax',\n\t\n\t/**\n\t* @private\n\t*/\n\tkind: Async,\n\t\n\t/**\n\t* @private\n\t*/\n\tpublished: AjaxProperties,\n\t\n\t/**\n\t* @private\n\t*/\n\tconstructor: kind.inherit(function (sup) {\n\t\treturn function (inParams) {\n\t\t\tutils.mixin(this, inParams);\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\t\n\t/**\n\t* @private\n\t*/\n\tdestroy: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\t// explicilty release any XHR refs\n\t\t\tthis.xhr = null;\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\t\n\t/**\n\t* This will be set once a request has completed (successfully or unsuccessfully).\n\t* It is a cache of the response values.\n\t*\n\t* @type module:enyo/Ajax~Ajax~xhrResponseType\n\t* @default null\n\t* @public\n\t*/\n\txhrResponse: null,\n\t\n\t/**\n\t* Executes the request with the given options. The parameter may be a\n\t* [hash]{@glossary Object} of properties or a [string]{@glossary String}. Both\n\t* represent the query string, with the hash being serialized and the string\n\t* being used directly.\n\t*\n\t* ```javascript\n\t* var query = {q: 'searchTerm'}; // -> \"?q=searchTerm\"\n\t* ```\n\t*\n\t* To provide a `POST` body, see {@link module:enyo/AjaxProperties#postBody}.\n\t*\n\t* When the request is completed, it will set the\n\t* [xhrResponse]{@link module:enyo/Ajax~Ajax#xhrResponse} property.\n\t*\n\t* @see module:enyo/AjaxProperties\n\t* @see module:enyo/Ajax~Ajax~xhrResponse\n\t* @param {(Object|String)} [params] - A [string]{@glossary String} or\n\t*\t[hash]{@glossary Object} to be used as the query string.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\tgo: function (params) {\n\t\tthis.failed = false;\n\t\tthis.startTimer();\n\t\tthis.request(params);\n\t\treturn this;\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\trequest: function (params) {\n\t\tvar parts = this.url.split('?');\n\t\tvar uri = parts.shift() || '';\n\t\tvar args = parts.length ? (parts.join('?').split('&')) : [];\n\t\t//\n\t\tvar query = null;\n\t\t//\n\t\tif(utils.isString(params)){\n\t\t\t//If params parameter is a string, use it as request body\n\t\t\tquery = params;\n\t\t}\n\t\telse{\n\t\t\t//If params parameter is not a string, build a query from it\n\t\t\tif(params){\n\t\t\t\tquery = Ajax.objectToQuery(params);\n\t\t\t}\n\t\t}\n\t\t//\n\t\tif (query) {\n\t\t\targs.push(query);\n\t\t\tquery = null;\n\t\t}\n\t\tif (this.cacheBust) {\n\t\t\targs.push(Math.random());\n\t\t}\n\t\t//\n\t\tvar url = args.length ? [uri, args.join('&')].join('?') : uri;\n\t\t//\n\t\tvar xhr_headers = {};\n\t\tvar body;\n\t\tif (this.method != 'GET') {\n\t\t\tbody = this.postBody;\n\t\t\tif (this.method === 'POST' && body instanceof FormData) {\n\t\t\t\tif (body.fake) {\n\t\t\t\t\txhr_headers['Content-Type'] = body.getContentType();\n\t\t\t\t\tbody = body.toString();\n\t\t\t\t} else {\n\t\t\t\t\t// Nothing to do as the\n\t\t\t\t\t// content-type will be\n\t\t\t\t\t// automagically set according\n\t\t\t\t\t// to the FormData\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\txhr_headers['Content-Type'] = this.contentType;\n\t\t\t\tif (body instanceof Object) {\n\t\t\t\t\tif (this.contentType.match(/^application\\/json(;.*)?$/) !== null) {\n\t\t\t\t\t\tbody = JSON.stringify(body);\n\t\t\t\t\t} else if (this.contentType === 'application/x-www-form-urlencoded') {\n\t\t\t\t\t\tbody = Ajax.objectToQuery(body);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tbody = body.toString();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tutils.mixin(xhr_headers, this.headers);\n\t\t// don't pass in headers structure if there are no headers defined as this messes\n\t\t// up CORS code for IE8-9\n\t\tif (utils.keys(xhr_headers).length === 0) {\n\t\t\txhr_headers = undefined;\n\t\t}\n\t\t//\n\t\ttry {\n\t\t\tthis.xhr = Xhr.request({\n\t\t\t\turl: url,\n\t\t\t\tmethod: this.method,\n\t\t\t\tcallback: this.bindSafely('receive'),\n\t\t\t\tbody: body,\n\t\t\t\theaders: xhr_headers,\n\t\t\t\tsync: this.sync,\n\t\t\t\tusername: this.username,\n\t\t\t\tpassword: this.password,\n\t\t\t\txhrFields: utils.mixin({onprogress: this.bindSafely(this.updateProgress)}, this.xhrFields),\n\t\t\t\tmimeType: this.mimeType\n\t\t\t});\n\t\t}\n\t\tcatch (e) {\n\t\t\t// IE can throw errors here if the XHR would fail CORS checks,\n\t\t\t// so catch and turn into a failure.\n\t\t\tthis.fail(e);\n\t\t}\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\treceive: function (inText, inXhr) {\n\t\tif (!this.failed && !this.destroyed) {\n\t\t\tvar body;\n\t\t\tif (inXhr.responseType === 'arraybuffer') {\n\t\t\t\tbody = inXhr.response;\n\t\t\t} else if (typeof inXhr.responseText === 'string') {\n\t\t\t\tbody = inXhr.responseText;\n\t\t\t} else {\n\t\t\t\t// IE carrying a binary\n\t\t\t\tbody = inXhr.responseBody;\n\t\t\t}\n\t\t\tthis.xhrResponse = {\n\t\t\t\tstatus: inXhr.status,\n\t\t\t\theaders: Ajax.parseResponseHeaders(inXhr),\n\t\t\t\tbody: body\n\t\t\t};\n\t\t\tif (this.isFailure(inXhr)) {\n\t\t\t\tthis.fail(inXhr.status);\n\t\t\t} else {\n\t\t\t\tthis.respond(this.xhrToResponse(inXhr));\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tfail: kind.inherit(function (sup) {\n\t\treturn function (inError) {\n\t\t\t// on failure, explicitly cancel the XHR to prevent\n\t\t\t// further responses.  cancellation also resets the\n\t\t\t// response headers & body,\n\t\t\tif (this.xhr) {\n\t\t\t\tXhr.cancel(this.xhr);\n\t\t\t\tthis.xhr = null;\n\t\t\t}\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\t\n\t/**\n\t* @private\n\t*/\n\txhrToResponse: function (inXhr) {\n\t\tif (inXhr) {\n\t\t\treturn this[(this.handleAs || 'text') + 'Handler'](inXhr);\n\t\t}\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tisFailure: function (inXhr) {\n\t\t// if any exceptions are thrown while checking fields in the xhr,\n\t\t// assume a failure.\n\t\ttry {\n\t\t\tif (inXhr.responseType === 'arraybuffer') {\n\t\t\t\t// if we are loading binary data, don't try to access inXhr.responseText\n\t\t\t\t// because that throws an exception on webkit. Instead, just look for\n\t\t\t\t// the response.\n\t\t\t\tif (inXhr.status === 0 && !inXhr.response) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar text = '';\n\t\t\t\t// work around IE8-9 bug where accessing responseText will thrown error\n\t\t\t\t// for binary requests.\n\t\t\t\tif (typeof inXhr.responseText === 'string') {\n\t\t\t\t\ttext = inXhr.responseText;\n\t\t\t\t}\n\t\t\t\t// Follow same failure policy as jQuery's Ajax code\n\t\t\t\t// CORS failures on FireFox will have status 0 and no responseText,\n\t\t\t\t// so treat that as failure.\n\t\t\t\tif (inXhr.status === 0 && text === '') {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Otherwise, status 0 may be good for local file access.  We treat the range\n\t\t\t// 1-199 and 300+ as failure (only 200-series code are OK).\n\t\t\treturn (inXhr.status !== 0) && (inXhr.status < 200 || inXhr.status >= 300);\n\t\t}\n\t\tcatch (e) {\n\t\t\treturn true;\n\t\t}\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\txmlHandler: function (inXhr) {\n\t\treturn inXhr.responseXML;\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\ttextHandler: function (inXhr) {\n\t\treturn inXhr.responseText;\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tjsonHandler: function (inXhr) {\n\t\tvar r = inXhr.responseText;\n\t\ttry {\n\t\t\treturn r && json.parse(r);\n\t\t} catch (x) {\n\t\t\tlogger.warn('Ajax request set to handleAs JSON but data was not in JSON format');\n\t\t\treturn r;\n\t\t}\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tbinaryHandler: function (inXhr) {\n\t\treturn inXhr.response;\n\t}, \n\t\n\t/**\n\t* @private\n\t*/\n\tupdateProgress: function (event) {\n\t\t// IE8 doesn't properly support progress events and doesn't pass an object to the\n\t\t// handlers so we'll check that before continuing.\n\t\tif (event) {\n\t\t\t// filter out 'input' as it causes exceptions on some Firefox versions\n\t\t\t// due to unimplemented internal APIs\n\t\t\tvar ev = {};\n\t\t\tfor (var k in event) {\n\t\t\t\tif (k !== 'input') {\n\t\t\t\t\tev[k] = event[k];\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.sendProgress(event.loaded, 0, event.total, ev);\n\t\t}\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tstatics: {\n\t\tobjectToQuery: function (/*Object*/ map) {\n\t\t\tvar enc = encodeURIComponent;\n\t\t\tvar pairs = [];\n\t\t\tvar backstop = {};\n\t\t\tfor (var name in map){\n\t\t\t\tvar value = map[name];\n\t\t\t\tif (value != backstop[name]) {\n\t\t\t\t\tvar assign = enc(name) + '=';\n\t\t\t\t\tif (utils.isArray(value)) {\n\t\t\t\t\t\tfor (var i=0; i < value.length; i++) {\n\t\t\t\t\t\t\tpairs.push(assign + enc(value[i]));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpairs.push(assign + enc(value));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn pairs.join('&');\n\t\t}\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tprotectedStatics: {\n\t\tparseResponseHeaders: function (xhr) {\n\t\t\tvar headers = {};\n\t\t\tvar headersStr = [];\n\t\t\tif (xhr.getAllResponseHeaders) {\n\t\t\t\theadersStr = xhr.getAllResponseHeaders().split(/\\r?\\n/);\n\t\t\t}\n\t\t\tfor (var i = 0; i < headersStr.length; i++) {\n\t\t\t\tvar headerStr = headersStr[i];\n\t\t\t\tvar index = headerStr.indexOf(': ');\n\t\t\t\tif (index > 0) {\n\t\t\t\t\tvar key = headerStr.substring(0, index).toLowerCase();\n\t\t\t\t\tvar val = headerStr.substring(index + 2);\n\t\t\t\t\theaders[key] = val;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn headers;\n\t\t}\n\t}\n});\n",
    "mtime": 1434758950000,
    "relPath": "enyo/Ajax",
    "requires": [
      "enyo",
      "./kind",
      "./utils",
      "./json",
      "./logger",
      "./AjaxProperties",
      "./Async",
      "./FormData",
      "./xhr"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./Component",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/Component",
    "name": "enyo/Component",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/Component.js",
    "contents": "require('enyo');\n\n/**\n* Contains the declaration for the {@link module:enyo/Component~Component} kind.\n* @module enyo/Component\n*/\n\nvar\n\tkind = require('./kind'),\n\tutils = require('./utils'),\n\tlogger = require('./logger');\n\nvar\n\tCoreObject = require('./CoreObject'),\n\tApplicationSupport = require('./ApplicationSupport'),\n\tComponentBindingSupport = require('./ComponentBindingSupport'),\n\tJobs = require('./jobs');\n\nvar\n\tkindPrefix = {},\n\tunnamedCounter = 0;\n\t\n/**\n* @callback module:enyo/Component~Component~EventHandler\n* @param {module:enyo/Component~Component} sender - The [component]{@link module:enyo/Component~Component} that most recently\n*\tpropagated the {@glossary event}.\n* @param {Object} event - An [object]{@glossary Object} containing\n*\tevent information.\n* @returns {Boolean} A value indicating whether the event has been\n*\thandled or not. If `true`, then bubbling is stopped.\n*/\n\n/**\n* A [hash]{@glossary Object} of references to all the [components]{@link module:enyo/Component~Component}\n* owned by this component. This property is updated whenever a new\n* component is added; the new component may be accessed via its\n* [name]{@link module:enyo/Component~Component#name} property. We may also observe changes on\n* properties of components referenced by the `$` property.\n*\n* Component access via the `$` hash:\n* ```javascript\n* var Component = require('enyo/Component');\n* var c = new Component({\n*\tname: 'me',\n*\tcomponents: [\n*\t\t{kind: 'Component', name: 'other'}\n*\t]\n* });\n*\n* // We can now access 'other' on the $ hash of 'c', via c.$.other\n* ```\n*\n* Observing changes on a component referenced by the `$` property:\n* ```javascript\n* var c = new Component({\n*\tname: 'me',\n*\tcomponents: [\n*\t\t{kind: 'Component', name: 'other'}\n*\t]\n* });\n*\n* c.addObserver('$.other.active', function() {\n*\t// do something to respond to the \"active\" property of \"other\" changing\n* })\n*\n* c.$.other.set('active', true); // this will trigger the observer to run its callback\n* ```\n*\n* @name $\n* @type {Object}\n* @default null\n* @memberof module:enyo/Component~Component.prototype\n* @readonly\n* @public\n*/\n\n/**\n* If `true`, this [component's]{@link module:enyo/Component~Component} [owner]{@link module:enyo/Component~Component#owner} will\n* have a direct name reference to the owned component.\n*\n* @example\n* var Component = require('enyo/Component');\n* var c = new Component({\n*\tname: 'me',\n*\tcomponents: [\n*\t\t{kind: 'Component', name: 'other', publish: true}\n*\t]\n* });\n*\n* // We can now access 'other' directly, via c.other\n*\n* @name publish\n* @type {Boolean}\n* @default undefined\n* @memberOf module:enyo/Component~Component.prototype\n* @public\n*/\n\n/**\n* If `true`, the [layout]{@glossary layout} strategy will adjust the size of this\n* [component]{@link module:enyo/Component~Component} to occupy the remaining available space.\n*\n* @name fit\n* @type {Boolean}\n* @default undefined\n* @memberOf module:enyo/Component~Component.prototype\n* @public\n*/\n\n/**\n* {@link module:enyo/Component~Component} is the fundamental building block for Enyo applications.\n* Components are designed to fit together, allowing complex behaviors to\n* be fashioned from smaller bits of functionality.\n*\n* Component [constructors]{@glossary constructor} take a single\n* argument (sometimes called a [component configuration]{@glossary configurationBlock}),\n* a JavaScript [object]{@glossary Object} that defines various properties to be initialized on the\n* component.  For example:\n*\n* ```javascript\n* // create a new component, initialize its name property to 'me'\n* var Component = require('enyo/Component');\n* var c = new Component({\n*\tname: 'me'\n* });\n* ```\n*\n* When a component is instantiated, items configured in its\n* `components` property are instantiated, too:\n*\n* ```javascript\n* // create a new component, which itself has a component\n* var c = new Component({\n*\tname: 'me',\n*\tcomponents: [\n*\t\t{kind: Component, name: 'other'}\n*\t]\n* });\n* ```\n*\n* In this case, when `me` is created, `other` is also created, and we say that `me` owns `other`.\n* In other words, the [owner]{@link module:enyo/Component~Component#owner} property of `other` equals `me`.\n* Notice that you can specify the [kind]{@glossary kind} of `other` explicitly in its\n* configuration block, to tell `me` what constructor to use to create `other`.\n*\n* To move a component, use the `setOwner()` method to change the\n* component's owner. If you want a component to be unowned, use `setOwner(null)`.\n*\n* If you make changes to `Component`, be sure to add or update the appropriate\n* {@linkplain https://github.com/enyojs/enyo/tree/master/tools/test/core/tests unit tests}.\n*\n* For more information, see the documentation on\n* [Components]{@linkplain $dev-guide/key-concepts/components.html} in the\n* Enyo Developer Guide.\n*\n* @class Component\n* @extends module:enyo/CoreObject~Object\n* @mixes module:enyo/ApplicationSupport~ApplicationSupport\n* @mixes module:enyo/ComponentBindingSupport~ComponentBindingSupport\n* @public\n*/\nvar Component = module.exports = kind(\n\t/** @lends module:enyo/Component~Component.prototype */ {\n\n\tname: 'enyo.Component',\n\n\t/**\n\t* @private\n\t*/\n\tkind: CoreObject,\n\n\t/**\n\t* @private\n\t*/\n\n\n\t/**\n\t* @private\n\t*/\n\tcachedBubble: true,\n\n\t/**\n\t* @private\n\t*/\n\tcachePoint: false,\n\n\t/**\n\t* @private\n\t*/\n\tpublished:\n\t\t/** @lends module:enyo/Component~Component.prototype */ {\n\n\t\t/**\n\t\t* A unique name for the [component]{@link module:enyo/Component~Component} within its\n\t\t* [owner]{@link module:enyo/Component~Component#owner}. This is used to set the access name in the\n\t\t* owner's [$ hash]{@link module:enyo/Component~Component#$}. If not\n\t\t* specified, a default name will be provided based on the name of the\n\t\t* [object's]{@link module:enyo/CoreObject~Object} [kind]{@glossary kind}, with a numeric\n\t\t* suffix appended if more than one instance exists in the owner.\n\t\t*\n\t\t* @type {String}\n\t\t* @default ''\n\t\t* @public\n\t\t*/\n\t\tname: '',\n\n\t\t/**\n\t\t* A unique id for the [component]{@link module:enyo/Component~Component}, usually automatically generated\n\t\t* based on its position within the component hierarchy, although\n\t\t* it may also be directly specified. {@link module:enyo/Control~Control} uses this `id` value for the\n\t\t* DOM [id]{@link module:enyo/Control~Control#id} attribute.\n\t\t*\n\t\t* @type {String}\n\t\t* @default ''\n\t\t* @public\n\t\t*/\n\t\tid: '',\n\n\t\t/**\n\t\t* The [component]{@link module:enyo/Component~Component} that owns this component.\n\t\t* It is usually defined implicitly at creation time based on the\n\t\t* [createComponent()]{@link module:enyo/Component~Component#createComponent} call or\n\t\t* the `components` hash.\n\t\t*\n\t\t* @type {module:enyo/Component~Component}\n\t\t* @default null\n\t\t* @public\n\t\t*/\n\t\towner: null,\n\n\t\t/**\n\t\t* This can be a [hash]{@glossary Object} of features to apply to\n\t\t* [chrome]{@glossary chrome} [components]{@link module:enyo/Component~Component} of the base\n\t\t* [kind]{@glossary kind}. They are matched by [name]{@link module:enyo/Component~Component#name}\n\t\t* (if the component you wish to modify does not have a name, this will not work).\n\t\t* You can modify any properties of the component except for methods. Setting a\n\t\t* value for `componentOverrides` at runtime will have no effect.\n\t\t*\n\t\t* @type {Object}\n\t\t* @default null\n\t\t* @public\n\t\t*/\n\t\tcomponentOverrides: null\n\t},\n\n\t/**\n\t* @private\n\t*/\n\thandlers: {},\n\n\t/**\n\t* @private\n\t*/\n\tmixins: [ApplicationSupport, ComponentBindingSupport],\n\n\t/**\n\t* @private\n\t*/\n\ttoString: function () {\n\t\treturn this.id + ' [' + this.kindName + ']';\n\t},\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tconstructor: kind.inherit(function (sup) {\n\t\treturn function (props) {\n\t\t\t// initialize instance objects\n\t\t\tthis._componentNameMap = {};\n\t\t\tthis.$ = {};\n\t\t\tthis.cachedBubbleTarget = {};\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tconstructed: kind.inherit(function (sup) {\n\t\treturn function (props) {\n\t\t\t// perform initialization\n\t\t\tthis.create(props);\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* @private\n\t*/\n\tcreate: function () {\n\t\t// stop and queue all of the notifications happening synchronously to allow\n\t\t// responders to only do single passes on work traversing the tree\n\t\tthis.stopNotifications();\n\t\tthis.ownerChanged();\n\t\tthis.initComponents();\n\t\t// release the kraken!\n\t\tthis.startNotifications();\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tinitComponents: function () {\n\t\t// The _components_ property in kind declarations is renamed to\n\t\t// _kindComponents_ by the Component subclass mechanism.  This makes it\n\t\t// easy for the developer to distinguish kindComponents from the components\n\t\t// in _this.components_, without having to worry about the actual difference.\n\t\t//\n\t\t// Specifically, the difference is that kindComponents are constructed as\n\t\t// owned by this control (whereas components in _this.components_ are not).\n\t\t// In addition, kindComponents are marked with the _isChrome: true_ flag.\n\t\tthis.createChrome(this.kindComponents);\n\t\tthis.createClientComponents(this.components);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tcreateChrome: function (comps) {\n\t\tthis.createComponents(comps, {isChrome: true});\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tcreateClientComponents: function (comps) {\n\t\tthis.createComponents(comps, {owner: this.getInstanceOwner()});\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tgetInstanceOwner: function () {\n\t\treturn (!this.owner || this.owner.notInstanceOwner) ? this : this.owner;\n\t},\n\n\t/**\n\t* Removes this [component]{@link module:enyo/Component~Component} from its\n\t* [owner]{@link module:enyo/Component~Component#owner} (setting `owner` to `null`)\n\t* and does any necessary cleanup. The component is flagged with\n\t* `destroyed: true`. Usually, the component will be suitable for garbage\n\t* collection after being destroyed, unless user code keeps a reference\n\t* to it.\n\t*\n\t* @returns {this} The callee for chaining.\n\t* @method\n\t* @public\n\t*/\n\tdestroy: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tthis.destroyComponents();\n\t\t\tthis.setOwner(null);\n\t\t\tsup.apply(this, arguments);\n\t\t\tthis.stopAllJobs();\n\t\t\treturn this;\n\t\t};\n\t}),\n\n\t/**\n\t* Destroys all owned [components]{@link module:enyo/Component~Component}.\n\t*\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\tdestroyComponents: function () {\n\t\tvar comps = this.getComponents(),\n\t\t\tcomp,\n\t\t\ti;\n\n\t\tfor (i = 0; i < comps.length; ++i) {\n\t\t\tcomp = comps[i];\n\t\t\t// @todo: previous comment said list might be stale and ownership may have caused\n\t\t\t// components to be destroyed as a result of some inner-container...look into this\n\t\t\t// because that seems incorrect or avoidable\n\t\t\tif (!comp.destroyed) comp.destroy();\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tmakeId: function() {\n\t\tvar delim = '_', pre = this.owner && this.owner.getId(),\n\t\t\tbaseName = this.name || ('@@' + (++unnamedCounter));\n\t\treturn (pre ? pre + delim : '') + baseName;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\townerChanged: function (was) {\n\t\tif (was && was.removeComponent) was.removeComponent(this);\n\t\tif (this.owner && this.owner.addComponent) this.owner.addComponent(this);\n\t\tif (!this.id) this.id = this.makeId();\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tnameComponent: function (comp) {\n\t\tvar pre = prefixFromKindName(comp.kindName),\n\t\t\tlast = this._componentNameMap[pre] || 0,\n\t\t\tnom;\n\n\t\tdo {\n\t\t\tnom = pre + (++last > 1 ? String(last) : '');\n\t\t} while (this.$[nom]);\n\n\t\tthis._componentNameMap[pre] = Number(last);\n\t\t/*jshint -W093 */\n\t\treturn (comp.name = nom);\n\t},\n\n\t/**\n\t* Adds a [component]{@link module:enyo/Component~Component} to the list of components\n\t* owned by the current component (i.e., [this.$]{@link module:enyo/Component~Component#$}).\n\t*\n\t* @param {module:enyo/Component~Component} comp - The [component]{@link module:enyo/Component~Component} to add.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\taddComponent: function (comp) {\n\t\tvar nom = comp.get('name');\n\n\t\t// if there is no name we have to come up with a generic name\n\t\tif (!nom) nom = this.nameComponent(comp);\n\n\t\t// if there already was a component by that name we issue a warning\n\t\t// @todo: if we're going to name rules being violated we need to normalize this approach\n\t\t// and ensure we have one for every warning/error we throw\n\t\tif (this.$[nom]) this.warn(\n\t\t\t'Duplicate component name ' + nom + ' in owner ' + this.id + ' violates ' +\n\t\t\t'unique-name-under-owner rule, replacing existing component in the hash and ' +\n\t\t\t'continuing, but this is an error condition and should be fixed.'\n\t\t);\n\n\t\tthis.$[nom] = comp;\n\t\tthis.notify('$.' + nom, null, comp);\n\n\t\t// if the component has the `publish` true property then we also create a reference to\n\t\t// it directly on the owner (this)\n\t\tif (comp.publish) {\n\t\t\tthis[nom] = comp;\n\n\t\t\t// and to ensure that bindings are aware we have to notify them as well\n\t\t\tthis.notify(nom, null, comp);\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t/**\n\t* Removes the passed-in [component]{@link module:enyo/Component~Component} from those known\n\t* to be owned by this component. The component will be removed from the\n\t* [$ hash]{@link module:enyo/Component~Component#$}, and from the [owner]{@link module:enyo/Component~Component#owner}\n\t* directly if [publish]{@link module:enyo/Component~Component#publish} is set to `true`.\n\t*\n\t* @param {module:enyo/Component~Component} comp - The component to remove.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\tremoveComponent: function (comp) {\n\t\tvar nom = comp.get('name');\n\n\t\t// remove it from the hash if it existed\n\t\tdelete this.$[nom];\n\n\t\t// if it was published remove it from the component proper\n\t\tif (comp.publish) delete this[nom];\n\n\t\treturn this;\n\t},\n\n\t/**\n\t* Returns an [array]{@glossary Array} of owned [components]{@link module:enyo/Component~Component}; in\n\t* other words, converts the [$ hash]{@link module:enyo/Component~Component#$} into an array\n\t* and returns the array.\n\t*\n\t* @returns {module:enyo/Component~Component[]} The [components]{@link module:enyo/Component~Component} found in the\n\t*\t[$ hash]{@link module:enyo/Component~Component#$}.\n\t* @public\n\t*/\n\tgetComponents: function () {\n\t\treturn utils.values(this.$);\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tadjustComponentProps: function (props) {\n\t\tif (this.defaultProps) utils.mixin(props, this.defaultProps, {ignore: true});\n\t\tprops.kind = props.kind || props.isa || this.defaultKind;\n\t\tprops.owner = props.owner || this;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\t_createComponent: function (props, ext) {\n\t\tvar def = ext ? utils.mixin({}, [ext, props]) : utils.clone(props);\n\n\t\t// always adjust the properties according to the needs of the kind and parent kinds\n\t\tthis.adjustComponentProps(def);\n\n\t\t// pass along for the final stage\n\t\treturn Component.create(def);\n\t},\n\n\t/**\n\t* Creates and returns a [component]{@link module:enyo/Component~Component} as defined by the combination of\n\t* a base and an additional property [hash]{@glossary Object}. The properties provided\n\t* in the standard property hash override those provided in the\n\t* additional property hash.\n\t*\n\t* The created component passes through initialization machinery\n\t* provided by the creating component, which may supply special\n\t* handling. Unless the [owner]{@link module:enyo/Component~Component#owner} is explicitly specified, the new\n\t* component will be owned by the instance on which this method is called.\n\t*\n\t* @example\n\t* // Create a new component named 'dynamic', owned by 'this'\n\t* // (will be available as this.$.dynamic).\n\t* this.createComponent({name: 'dynamic'});\n\t*\n\t* @example\n\t* // Create a new component named 'another' owned by 'other'\n\t* // (will be available as other.$.another).\n\t* this.createComponent({name: 'another'}, {owner: other});\n\t*\n\t* @param {Object} props - The declarative [kind]{@glossary kind} definition.\n\t* @param {Object} ext - Additional properties to be applied (defaults).\n\t* @returns {module:enyo/Component~Component} The instance created with the given parameters.\n\t* @public\n\t*/\n\tcreateComponent: function (props, ext) {\n\t\t// createComponent and createComponents both delegate to the protected method\n\t\t// (_createComponent), allowing overrides to customize createComponent and\n\t\t// createComponents separately.\n\t\treturn this._createComponent(props, ext);\n\t},\n\n\t/**\n\t* Creates [components]{@link module:enyo/Component~Component} as defined by the [arrays]{@glossary Array}\n\t* of base and additional property [hashes]{@glossary Object}. The standard and\n\t* additional property hashes are combined as described in\n\t* [createComponent()]{@link module:enyo/Component~Component#createComponent}.\n\t*\n\t* @example\n\t* // ask foo to create components 'bar' and 'zot', but set the owner of\n\t* // both components to 'this'.\n\t* this.$.foo.createComponents([\n\t*\t{name: 'bar'},\n\t*\t{name: 'zot'}\n\t* ], {owner: this});\n\t*\n\t* @param {Object[]} props The array of {@link module:enyo/Component~Component} definitions to be created.\n\t* @param {Object} ext - Additional properties to be supplied as defaults for each.\n\t* @returns {module:enyo/Component~Component[]} The array of [components]{@link module:enyo/Component~Component} that were\n\t*\tcreated.\n\t* @public\n\t*/\n\tcreateComponents: function (props, ext) {\n\t\tvar comps = [],\n\t\t\tcomp,\n\t\t\ti;\n\n\t\tif (props) {\n\t\t\tfor (i = 0; i < props.length; ++i) {\n\t\t\t\tcomp = props[i];\n\t\t\t\tcomps.push(this._createComponent(comp, ext));\n\t\t\t}\n\t\t}\n\n\t\treturn comps;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tgetBubbleTarget: function (nom, event) {\n\t\tif (event.delegate) return this.owner;\n\t\telse {\n\t\t\treturn (\n\t\t\t\tthis.bubbleTarget\n\t\t\t\t|| (this.cachedBubble && this.cachedBubbleTarget[nom])\n\t\t\t\t|| this.owner\n\t\t\t);\n\t\t}\n\t},\n\n\t/**\n\t* Bubbles an {@glossary event} up an [object]{@glossary Object} chain,\n\t* starting with `this`.\n\t*\n\t* A handler for an event may be specified. See {@link module:enyo/Component~Component~EventHandler}\n\t* for complete details.\n\t*\n\t* @param {String} nom - The name of the {@glossary event} to bubble.\n\t* @param {Object} [event] - The event [object]{@glossary Object} to be passed along\n\t* while bubbling.\n\t* @param {module:enyo/Component~Component} [sender=this] - The {@link module:enyo/Component~Component} responsible for\n\t*\tbubbling the event.\n\t* @returns {Boolean} `false` if unhandled or uninterrupted; otherwise, `true`.\n\t* @public\n\t*/\n\tbubble: function (nom, event, sender) {\n\t\tif (!this._silenced) {\n\t\t\tevent = event || {};\n\t\t\tevent.lastHandledComponent = null;\n\t\t\tevent.bubbling = true;\n\t\t\t// deliberately done this way\n\t\t\tif (event.originator == null) event.originator = sender || this;\n\t\t\treturn this.dispatchBubble(nom, event, sender || this);\n\t\t}\n\t\treturn false;\n\t},\n\n\t/**\n\t* Bubbles an {@glossary event} up an [object]{@glossary Object} chain,\n\t* starting **above** `this`.\n\t*\n\t* A handler for an event may be specified. See {@link module:enyo/Component~Component~EventHandler}\n\t* for complete details.\n\t*\n\t* @param {String} nom - The name of the {@glossary event}.\n\t* @param {Object} [event] - The event properties to pass along while bubbling.\n\t* @returns {Boolean} `false` if unhandled or uninterrupted; otherwise, `true`.\n\t* @public\n\t*/\n\tbubbleUp: function (nom, event) {\n\t\tvar next;\n\n\t\tif (!this._silenced) {\n\t\t\tevent = event || {};\n\t\t\tevent.bubbling = true;\n\t\t\tnext = this.getBubbleTarget(nom, event);\n\t\t\tif (next) {\n\t\t\t\t// use delegate as sender if it exists to preserve illusion\n\t\t\t\t// that event is dispatched directly from that, but we still\n\t\t\t\t// have to bubble to get decorations\n\t\t\t\treturn next.dispatchBubble(nom, event, event.delegate || this);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t},\n\n\t/**\n\t* Sends an {@glossary event} to a named [delegate]{@glossary delegate}.\n\t* This [object]{@glossary Object} may dispatch an event to\n\t* itself via a [handler]{@link module:enyo/Component~Component~EventHandler}, or to its\n\t* [owner]{@link module:enyo/Component~Component#owner} via an event property, e.g.:\n\t*\n\t*\thandlers {\n\t*\t\t// 'tap' events dispatched to this.tapHandler\n\t*\t\tontap: 'tapHandler'\n\t*\t}\n\t*\n\t*\t// 'tap' events dispatched to 'tapHandler' delegate in this.owner\n\t*\tontap: 'tapHandler'\n\t*\n\t* @private\n\t*/\n\tdispatchEvent: function (nom, event, sender) {\n\t\tvar delegate,\n\t\t\tret;\n\n\t\tif (!this._silenced) {\n\t\t\t// if the event has a delegate associated with it we grab that\n\t\t\t// for reference\n\t\t\t// NOTE: This is unfortunate but we can't use a pooled object here because\n\t\t\t// we don't know where to release it\n\t\t\tdelegate = (event || (event = {})).delegate;\n\n\t\t\t// bottleneck event decoration w/ optimization to avoid call to empty function\n\t\t\tif (this.decorateEvent !== Component.prototype.decorateEvent) {\n\t\t\t\tthis.decorateEvent(nom, event, sender);\n\t\t\t}\n\n\t\t\t// first, handle any delegated events intended for this object\n\t\t\tif (delegate && delegate.owner === this) {\n\t\t\t\t// the most likely case is that we have a method to handle this\n\t\t\t\tif (this[nom] && 'function' === typeof this[nom]) {\n\t\t\t\t\treturn this.dispatch(nom, event, sender);\n\t\t\t\t}\n\t\t\t\t// but if we don't, just stop the event from going further\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// for non-delgated events, try the handlers block if possible\n\t\t\tif (!delegate) {\n\t\t\t\tvar bHandler = this.handlers && this.handlers[nom];\n\t\t\t\tvar bDelegatedFunction = this[nom] && utils.isString(this[nom]);\n\t\t\t\tvar cachePoint = this.cachePoint || bHandler || bDelegatedFunction || this.id === \"master\" ;\n\n\t\t\t\tif (event.bubbling) {\n\t\t\t\t\tif (event.lastHandledComponent && cachePoint) {\n\t\t\t\t\t\tevent.lastHandledComponent.cachedBubbleTarget[nom] = this;\n\t\t\t\t\t\tevent.lastHandledComponent = null;\n\t\t\t\t\t}\n\t\t\t\t\tif (!event.lastHandledComponent && this.id !== \"master\") {\n\t\t\t\t\t\tevent.lastHandledComponent = this;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (bHandler && this.dispatch(bHandler, event, sender)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (bDelegatedFunction) {\n\t\t\t\t\t// we dispatch it up as a special delegate event with the\n\t\t\t\t\t// component that had the delegation string property stored in\n\t\t\t\t\t// the 'delegate' property\n\t\t\t\t\tevent.delegate = this;\n\t\t\t\t\tret = this.bubbleUp(this[nom], event, sender);\n\t\t\t\t\tdelete event.delegate;\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t},\n\n\t/**\n\t* Internal - try dispatching {@glossary event} to self; if that fails,\n\t* [bubble it up]{@link module:enyo/Component~Component#bubbleUp} the tree.\n\t*\n\t* @private\n\t*/\n\tdispatchBubble: function (nom, event, sender) {\n\t\tif (!this._silenced) {\n\t\t\t// Try to dispatch from here, stop bubbling on truthy return value\n\t\t\tif (this.dispatchEvent(nom, event, sender)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t// Bubble to next target\n\t\t\treturn this.bubbleUp(nom, event, sender);\n\t\t}\n\t\treturn false;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tdecorateEvent: function (nom, event, sender) {\n\t\t// an event may float by us as part of a dispatchEvent chain\n\t\t// both call this method so intermediaries can decorate inEvent\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tstopAllJobs: function () {\n\t\tvar job;\n\n\t\tif (this.__jobs) for (job in this.__jobs) this.stopJob(job);\n\t},\n\n\t/**\n\t* Dispatches the {@glossary event} to named [delegate]{@glossary delegate} `nom`,\n\t* if it exists. [Subkinds]{@glossary subkind} may re-route dispatches. Note that\n\t* both 'handlers' events and events delegated from owned controls arrive here.\n\t* If you need to handle these types of events differently, you may also need to\n\t* override [dispatchEvent()]{@link module:enyo/Component~Component#dispatchEvent}.\n\t*\n\t* @param {String} nom - The method name to dispatch the {@glossary event}.\n\t* @param {Object} [event] - The event [object]{@glossary Object} to pass along.\n\t* @param {module:enyo/Component~Component} [sender=this] - The originator of the event.\n\t* @public\n\t*/\n\tdispatch: function (nom, event, sender) {\n\t\tvar fn;\n\n\t\tif (!this._silenced) {\n\t\t\tfn = nom && this[nom];\n\t\t\tif (fn && typeof fn == 'function') {\n\t\t\t\t// @todo: deprecate sender\n\t\t\t\treturn fn.call(this, sender || this, event);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t},\n\n\t/**\n\t* Triggers the [handler]{@link module:enyo/Component~Component~EventHandler} for a given\n\t* {@glossary event} type.\n\t*\n\t* @example\n\t* myControl.triggerHandler('ontap');\n\t*\n\t* @param {String} nom - The name of the {@glossary event} to trigger.\n\t* @param {Object} [event] - The event object to pass along.\n\t* @param {module:enyo/Component~Component} [sender=this] - The originator of the event.\n\t* @returns {Boolean} `false` if unhandled or uninterrupted, `true` otherwise.\n\t* @public\n\t*/\n\ttriggerHandler: function () {\n\t\treturn this.dispatchEvent.apply(this, arguments);\n\t},\n\n\t/**\n\t* Sends a message to myself and all of my [components]{@link module:enyo/Component~Component}.\n\t* You can stop a waterfall into components owned by a receiving object\n\t* by returning a truthy value from the {@glossary event}\n\t* [handler]{@link module:enyo/Component~Component~EventHandler}.\n\t*\n\t* @param {String} nom - The name of the {@glossary event} to waterfall.\n\t* @param {Object} [event] - The event [object]{@glossary Object} to pass along.\n\t* @param {module:enyo/Component~Component} [sender=this] - The originator of the event.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\twaterfall: function(nom, event, sender) {\n\t\tif (!this._silenced) {\n\t\t\tevent = event || {};\n\t\t\tevent.bubbling = false;\n\n\t\t\t// give the locals an opportunity to interrupt the event\n\t\t\tif (this.dispatchEvent(nom, event, sender)) return true;\n\n\t\t\t// otherwise carry on\n\t\t\tthis.waterfallDown(nom, event, sender || this);\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t/**\n\t* Sends a message to all of my [components]{@link module:enyo/Component~Component}, but not myself. You can\n\t* stop a [waterfall]{@link module:enyo/Component~Component#waterfall} into [components]{@link module:enyo/Component~Component}\n\t* owned by a receiving [object]{@glossary Object} by returning a truthy value from the\n\t* {@glossary event} [handler]{@link module:enyo/Component~Component~EventHandler}.\n\t*\n\t* @param {String} nom - The name of the {@glossary event}.\n\t* @param {Object} [event] - The event [object]{@glossary Object} to pass along.\n\t* @param {module:enyo/Component~Component} [sender=this] - The event originator.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\twaterfallDown: function(nom, event, sender) {\n\t\tvar comp;\n\t\tevent = event || {};\n\t\tevent.bubbling = false;\n\n\t\tif (!this._silenced) {\n\t\t\tfor (comp in this.$) this.$[comp].waterfall(nom, event, sender || this);\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\t_silenced: false,\n\n\t/**\n\t* @private\n\t*/\n\t_silenceCount: 0,\n\n\t/**\n\t* Sets a flag that disables {@glossary event} propagation for this\n\t* [component]{@link module:enyo/Component~Component}. Also increments an internal counter that tracks\n\t* the number of times the [unsilence()]{@link module:enyo/Component~Component#unsilence} method must\n\t* be called before event propagation will continue.\n\t*\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\tsilence: function () {\n\t\tthis._silenced = true;\n\t\tthis._silenceCount += 1;\n\n\t\treturn this;\n\t},\n\n\t/**\n\t* Determines if the [object]{@glossary Object} is currently\n\t* [silenced]{@link module:enyo/Component~Component#_silenced}, which will prevent propagation of\n\t* [events]{@glossary event} (of any kind).\n\t*\n\t* @returns {Boolean} `true` if silenced; otherwise, `false`.\n\t* @public\n\t*/\n\tisSilenced: function () {\n\t\treturn this._silenced;\n\t},\n\n\t/**\n\t* Allows {@glossary event} propagation for this [component]{@link module:enyo/Component~Component}\n\t* if the internal silence counter is `0`; otherwise, decrements the counter by one.\n\t* For event propagation to resume, this method must be called one time each call to\n\t* [silence()]{@link module:enyo/Component~Component#silence}.\n\t*\n\t* @returns {Boolean} `true` if the {@link module:enyo/Component~Component} is now unsilenced completely;\n\t*\t`false` if it remains silenced.\n\t* @public\n\t*/\n\tunsilence: function () {\n\t\tif (0 !== this._silenceCount) --this._silenceCount;\n\t\tif (0 === this._silenceCount) this._silenced = false;\n\t\treturn !this._silenced;\n\t},\n\n\t/**\n\t* Creates a new [job]{@link module:enyo/job} tied to this instance of the\n\t* [component]{@link module:enyo/Component~Component}. If the component is\n\t* [destroyed]{@link module:enyo/Component~Component#destroy}, any jobs associated with it\n\t* will be stopped.\n\t*\n\t* If you start a job with the same name as a pending job,\n\t* the original job will be stopped; this can be useful for resetting\n\t* timeouts.\n\t*\n\t* You may supply a priority level (1-10) at which the job should be\n\t* executed. The default level is `5`. Setting the priority lower than `5` (or setting it to\n\t* the string `\"low\"`) will defer the job if an animation is in progress,\n\t* which can help to avoid stuttering.\n\t*\n\t* @param {String} nom - The name of the [job]{@link module:enyo/job} to start.\n\t* @param {(Function|String)} job - Either the name of a method or a\n\t*\t[function]{@glossary Function} to execute as the requested job.\n\t* @param {Number} wait - The number of milliseconds to wait before starting\n\t*\tthe job.\n\t* @param {Number} [priority=5] The priority value to be associated with this\n\t*\tjob.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\tstartJob: function (nom, job, wait, priority) {\n\t\tvar jobs = (this.__jobs = this.__jobs || {});\n\t\tpriority = priority || 5;\n\t\t// allow strings as job names, they map to local method names\n\t\tif (typeof job == 'string') job = this[job];\n\t\t// stop any existing jobs with same name\n\t\tthis.stopJob(nom);\n\t\tjobs[nom] = setTimeout(this.bindSafely(function() {\n\t\t\tJobs.add(this.bindSafely(job), priority, nom);\n\t\t}), wait);\n\n\t\treturn this;\n\t},\n\n\t/**\n\t* Stops a [component]{@link module:enyo/Component~Component}-specific [job]{@link module:enyo/job} before it has\n\t* been activated.\n\t*\n\t* @param {String} nom - The name of the [job]{@link module:enyo/job} to be stopped.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\tstopJob: function (nom) {\n\t\tvar jobs = (this.__jobs = this.__jobs || {});\n\t\tif (jobs[nom]) {\n\t\t\tclearTimeout(jobs[nom]);\n\t\t\tdelete jobs[nom];\n\t\t}\n\t\tJobs.remove(nom);\n\t},\n\n\t/**\n\t* Executes the specified [job]{@link module:enyo/job} immediately, then prevents\n\t* any other calls to `throttleJob()` with the same job name from running for\n\t* the specified amount of time.\n\t*\n\t* @param {String} nom - The name of the [job]{@link module:enyo/job} to throttle.\n\t* @param {(Function|String)} job - Either the name of a method or a\n\t*\t[function]{@glossary Function} to execute as the requested job.\n\t* @param {Number} wait - The number of milliseconds to wait before executing the\n\t*\tjob again.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\tthrottleJob: function (nom, job, wait) {\n\t\tvar jobs = (this.__jobs = this.__jobs || {});\n\t\t// if we still have a job with this name pending, return immediately\n\t\tif (!jobs[nom]) {\n\t\t\t// allow strings as job names, they map to local method names\n\t\t\tif (typeof job == 'string') job = this[job];\n\t\t\tjob.call(this);\n\t\t\tjobs[nom] = setTimeout(this.bindSafely(function() {\n\t\t\t\tthis.stopJob(nom);\n\t\t\t}), wait);\n\t\t}\n\t\treturn this;\n\t}\n});\n\nComponent.prototype.defaultKind = Component;\n\n/**\n* @private\n*/\nkind.setDefaultCtor(Component);\n\n/**\n* Creates new instances from [config]{@glossary configurationBlock}\n* [objects]{@glossary Object}. This method looks up the proper\n* [constructor]{@glossary constructor} based on the provided [kind]{@glossary kind}\n* attribute.\n*\n* @name module:enyo/Compoment~Component.create\n* @param {Object} props - The properties that define the [kind]{@glossary kind}.\n* @returns {*} An instance of the requested [kind]{@glossary kind}.\n* @public\n*/\nComponent.create = function (props) {\n\tvar theKind,\n\t\tCtor;\n\n\tif (!props.kind && props.hasOwnProperty('kind')) throw new Error(\n\t\t'enyo.create: Attempt to create a null kind. Check dependencies for [' + props.name + ']'\n\t);\n\n\ttheKind = props.kind || props.isa || kind.getDefaultCtor();\n\tCtor = kind.constructorForKind(theKind);\n\n\tif (!Ctor) {\n\t\tlogger.error('No constructor found for kind ' + theKind);\n\t\tCtor = Component;\n\t}\n\n\treturn new Ctor(props);\n};\n\n/**\n* @name module:enyo/Component~Component.subclass\n* @static\n* @private\n*/\nComponent.subclass = function (ctor, props) {\n\t// Note: To reduce API surface area, sub-components are declared only as\n\t// 'components' in both kind and instance declarations.\n\t//\n\t// However, 'components' from kind declarations must be handled separately\n\t// at creation time.\n\t//\n\t// We rename the property here to avoid having\n\t// to interrogate the prototype at creation time.\n\t//\n\tvar proto = ctor.prototype;\n\t//\n\tif (props.components) {\n\t\tproto.kindComponents = props.components;\n\t\tdelete proto.components;\n\t} else {\n\t\t// Feature to mixin overrides of super-kind component properties from named hash\n\t\t// (only applied when the sub-kind doesn't supply its own components block)\n\t\tif (props.componentOverrides) {\n\t\t\tproto.kindComponents = Component.overrideComponents(\n\t\t\t\tproto.kindComponents,\n\t\t\t\tprops.componentOverrides,\n\t\t\t\tproto.defaultKind\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n* @name module:enyo/Component~Component.concat\n* @static\n* @private\n*/\nComponent.concat = function (ctor, props) {\n\tvar proto = ctor.prototype || ctor,\n\t\thandlers;\n\tif (props.handlers) {\n\t\thandlers = proto.handlers ? utils.clone(proto.handlers) : {};\n\t\tproto.handlers = utils.mixin(handlers, props.handlers);\n\t\tdelete props.handlers;\n\t}\n\tif (props.events) Component.publishEvents(proto, props);\n};\n\n/**\n* @name module:enyo/Component~Component.overrideComponents\n* @static\n* @private\n*/\nComponent.overrideComponents = function (components, overrides, defaultKind) {\n\tvar omitMethods = function (k, v) {\n\t\tvar isMethod = \n\t\t\t// If it's a function, then it's a method (unless it's\n\t\t\t// a constructor passed as value for 'kind')\n\t\t\t(utils.isFunction(v) && (k !== 'kind')) ||\n\t\t\t// If it isInherited(), then it's also a method (since\n\t\t\t// Inherited is an object wrapper for a function)\n\t\t\tkind.isInherited(v);\n\n\t\treturn !isMethod;\n\t};\n\tcomponents = utils.clone(components);\n\tfor (var i=0; i<components.length; i++) {\n\t\tvar c = utils.clone(components[i]);\n\t\tvar o = overrides[c.name];\n\t\tvar ctor = kind.constructorForKind(c.kind || defaultKind);\n\t\tif (o) {\n\n\t\t\t// NOTE: You cannot overload mixins, observers or computed properties from\n\t\t\t// component overrides\n\t\t\tkind.concatHandler(c, o);\n\t\t\tvar b = (c.kind && ((typeof c.kind == 'string' && utils.getPath(c.kind)) || (typeof c.kind == 'function' && c.kind))) || kind.getDefaultCtor();\n\t\t\twhile (b) {\n\t\t\t\tif (b.concat) { b.concat(c, o, true); }\n\t\t\t\tb = b.prototype.base;\n\t\t\t}\n\t\t\t// All others just mix in\n\t\t\tutils.mixin(c, o, {filter: omitMethods});\n\t\t}\n\t\tif (c.components) {\n\t\t\tc.components = Component.overrideComponents(c.components, overrides, ctor.prototype.defaultKind);\n\t\t}\n\t\tcomponents[i] = c;\n\t}\n\treturn components;\n};\n\n/**\n* @name module:enyo/Component~Component.publishEvents\n* @static\n* @private\n*/\nComponent.publishEvents = function (ctor, props) {\n\tvar events = props.events,\n\t\tevent,\n\t\tproto;\n\tif (events) {\n\t\tproto = ctor.prototype || ctor;\n\t\tfor (event in events) Component.addEvent(event, events[event], proto);\n\t}\n};\n\n/**\n* @name module:enyo/Component~Component.addEvent\n* @static\n* @private\n*/\nComponent.addEvent = function (nom, val, proto) {\n\tvar v, fn;\n\tif (!utils.isString(val)) {\n\t\tv = val.value;\n\t\tfn = val.caller;\n\t} else {\n\t\tif (nom.slice(0, 2) != 'on') {\n\t\t\tlogger.warn('enyo/Component.addEvent: event names must start with \"on\". ' + proto.kindName + ' ' +\n\t\t\t\t'event \"' + nom + '\" was auto-corrected to \"on' + nom + '\".');\n\t\t\tnom = 'on' + nom;\n\t\t}\n\t\tv = val;\n\t\tfn = 'do' + utils.cap(nom.slice(2));\n\t}\n\tproto[nom] = v;\n\tif (!proto[fn]) {\n\t\tproto[fn] = function(payload, other) {\n\t\t\t// bubble this event\n\n\t\t\t// if the second parameter exists then we use that - this is for a single case\n\t\t\t// where a named event delegates happent to point to an auto generated event\n\t\t\t// bubbler like this one - in that case the first parameter is actually the\n\t\t\t// sender\n\t\t\tvar e = other || payload;\n\t\t\tif (!e) {\n\t\t\t\te = {};\n\t\t\t}\n\t\t\tvar d = e.delegate;\n\t\t\t// delete payload.delegate;\n\t\t\te.delegate = undefined;\n\t\t\tif (!utils.exists(e.type)) {\n\t\t\t\te.type = nom;\n\t\t\t}\n\t\t\tthis.bubble(nom, e);\n\t\t\tif (d) {\n\t\t\t\te.delegate = d;\n\t\t\t}\n\t\t};\n\t}\n};\n\n/**\n* @private\n*/\nfunction prefixFromKindName (nom) {\n\tvar pre = kindPrefix[nom],\n\t\tlast;\n\n\tif (!pre) {\n\t\tlast = nom.lastIndexOf('.');\n\t\tpre = (last >= 0) ? nom.slice(last+1) : nom;\n\t\tpre = pre.charAt(0).toLowerCase() + pre.slice(1);\n\t\tkindPrefix[nom] = pre;\n\t}\n\n\treturn pre;\n}\n",
    "mtime": 1434758950000,
    "relPath": "enyo/Component",
    "requires": [
      "enyo",
      "./kind",
      "./utils",
      "./logger",
      "./CoreObject",
      "./ApplicationSupport",
      "./ComponentBindingSupport",
      "./jobs"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./Async",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/Async",
    "name": "enyo/Async",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/Async.js",
    "contents": "require('enyo');\n\n/**\n* Contains the declaration for the {@link module:enyo/Async~Async} kind.\n* @module enyo/Async\n*/\n\nvar\n\tkind = require('./kind'),\n\tutils = require('./utils');\n\nvar\n\tCoreObject = require('./CoreObject');\n\n/**\n* An abstract [kind]{@glossary kind} designed to aid in handling asynchronous operations.\n* It represents a task that has not yet completed. Callback functions may be registered to be\n* notified when the task is complete.\n*\n* For more information, see the documentation on [Consuming Web\n* Services]{@linkplain $dev-guide/building-apps/managing-data/consuming-web-services.html}\n* in the Enyo Developer Guide.\n*\n* @class Async\n* @extends module:enyo/CoreObject~Object\n* @public\n*/\nvar Async = module.exports = kind(\n\t/** @lends module:enyo/Async~Async.prototype */ {\n\t\n\tname: 'enyo.Async',\n\t\n\t/**\n\t* @private\n\t*/\n\tkind: CoreObject,\n\t\n\t/**\n\t* @private\n\t*/\n\tpublished: {\n\t\t\n\t\t/**\n\t\t* The number of milliseconds to wait after [execution]{@link module:enyo/Async~Async#go} begins\n\t\t* before failing with a timeout error. If set to `0` (the default), will not\n\t\t* automatically throw a timeout error.\n\t\t*\n\t\t* @type {Number}\n\t\t* @default 0\n\t\t* @memberof module:enyo/Aysnc~Async.prototype\n\t\t* @public\n\t\t*/\n\t\ttimeout: 0\n\t},\n\t\n\t/**\n\t* Will be `true` if an error has occurred and a handler calls the\n\t* [fail()]{@link module:enyo/Async~Async#fail} method. Can be cleared using\n\t* [recover()]{@link module:enyo/Async~Async#recover}.\n\t*\n\t* @readonly\n\t* @type {Boolean}\n\t* @default false\n\t* @public\n\t*/\n\tfailed: false,\n\t\n\t/**\n\t* @private\n\t*/\n\tcontext: null,\n\t\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tconstructor: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tsup.apply(this, arguments);\n\t\t\tthis.responders = [];\n\t\t\tthis.errorHandlers = [];\n\t\t\tthis.progressHandlers = [];\n\t\t};\n\t}),\n\t\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tdestroy: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tif (this.timeoutJob) {\n\t\t\t\tthis.clearTimeout();\n\t\t\t}\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\t\n\t/**\n\t* @private\n\t*/\n\taccumulate: function (array, fn, ctx) {\n\t\tvar tmp;\n\t\t\n\t\t// to preserve backward compatibility we have to accept that the order of the arguments\n\t\t// might be different\n\t\tif (ctx && typeof ctx == 'function') {\n\t\t\ttmp = fn;\n\t\t\tfn = ctx;\n\t\t\tctx = tmp;\n\t\t}\n\t\t\n\t\t// we go ahead and bind the method to its context to preserve the original\n\t\t// implementation\n\t\tif (ctx) {\n\t\t\tif (typeof ctx == \"string\") {\n\t\t\t\tfn = utils.bind(fn, ctx);\n\t\t\t} else {\n\t\t\t\tfn = fn.bind(ctx);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// now store it for use later\n\t\tarray.push(fn);\n\t},\n\t\n\t/**\n\t* Registers a [function]{@glossary Function} to be fired when\n\t* [execution]{@link module:enyo/Async~Async#go} is completed successfully. Parameters may be\n\t* in any order, to preserve backward compatibility.\n\t*\n\t* @param {Function} fn - The callback to register.\n\t* @param {Object} [ctx] - The optional context under which to execute the callback.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\tresponse: function (fn, ctx) {\n\t\tthis.accumulate(this.responders, fn, ctx);\n\t\treturn this;\n\t},\n\t\n\t/**\n\t* Registers a [function]{@glossary Function} to be fired when\n\t* [execution]{@link module:enyo/Async~Async#go} completes with an error. Parameters may be\n\t* in any order, to preserve backward compatibility.\n\t*\n\t* @param {Function} fn - The callback to register.\n\t* @param {Object} [ctx] - The optional context under which to execute the callback.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\terror: function (fn, ctx) {\n\t\tthis.accumulate(this.errorHandlers, fn, ctx);\n\t\treturn this;\n\t},\n\t\n\t/**\n\t* Registers a [function]{@glossary Function} to be fired on progress events.\n\t* Parameters may be in any order, to preserve backward compatibility.\n\t*\n\t* @param {Function} fn - The callback to register.\n\t* @param {Object} [ctx] - The optional context under which to execute the callback.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\tprogress: function (fn, ctx) {\n\t\tthis.accumulate(this.progressHandlers, fn, ctx);\n\t\treturn this;\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\troute: function (async, value) {\n\t\tvar r = this.bindSafely('respond');\n\t\tasync.response(function (sender, value) {\n\t\t\tr(value);\n\t\t});\n\t\tvar f = this.bindSafely('fail');\n\t\tasync.error(function (sender, value) {\n\t\t\tf(value);\n\t\t});\n\t\tasync.go(value);\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\thandle: function (value, handlers) {\n\t\tvar r = handlers.shift();\n\t\tif (r) {\n\t\t\tif (r instanceof Async) {\n\t\t\t\tthis.route(r, value);\n\t\t\t} else {\n\t\t\t\t// handler can return a new 'value'\n\t\t\t\tvar v = utils.call(this.context || this, r, [this, value]);\n\t\t\t\t// ... but only if it returns something other than undefined\n\t\t\t\tv = (v !== undefined) ? v : value;\n\t\t\t\t// next handler\n\t\t\t\t(this.failed ? this.fail : this.respond).call(this, v);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tstartTimer: function () {\n\t\tthis.startTime = utils.perfNow();\n\t\tif (this.timeout) {\n\t\t\tthis.timeoutJob = setTimeout(this.bindSafely('timeoutComplete'), this.timeout);\n\t\t}\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tendTimer: function () {\n\t\tif (this.timeoutJob) {\n\t\t\tthis.endTime = utils.perfNow();\n\t\t\tclearTimeout(this.timeoutJob);\n\t\t\tthis.timeoutJob = null;\n\t\t\tthis.latency = this.endTime - this.startTime;\n\t\t}\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\ttimeoutComplete: function () {\n\t\tthis.timedout = true;\n\t\tthis.fail('timeout');\n\t},\n\t\n\t/**\n\t* Triggers the handler chain for valid outcomes.\n\t*\n\t* @private\n\t*/\n\trespond: function (value) {\n\t\tthis.failed = false;\n\t\tthis.endTimer();\n\t\tthis.handle(value, this.responders);\n\t},\n\n\t/**\n\t* Fails the [task]{@link module:enyo/Async~Async} and triggers the error chain. May be called from any\n\t* handler.\n\t* \n\t* @param {*} err - The error value to pass to error handlers.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\tfail: function (err) {\n\t\tthis.failed = true;\n\t\tthis.endTimer();\n\t\tthis.handle(err, this.errorHandlers);\n\t\t\n\t\treturn this;\n\t},\n\t\n\t/**\n\t* Clears the error condition ([failed]{@link module:enyo/Async~Async#failed}) by setting it to `false`.\n\t* If called while responding to handlers, it will continue.\n\t*\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\trecover: function () {\n\t\tthis.failed = false;\n\t\treturn this;\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tsendProgress: function(current, min, max, sourceEvent) {\n\t\tvar event = utils.mixin({}, sourceEvent);\n\t\tevent.type = 'progress';\n\t\tevent.current = current;\n\t\tevent.min = min;\n\t\tevent.max = max;\n\t\tfor (var i = 0; i < this.progressHandlers.length; i++) {\n\t\t\tutils.call(this.context || this, this.progressHandlers[i], [this, event]);\n\t\t}\n\t},\n\t\n\t/**\n\t* Initiates the asynchronous routine, supplying the given value if it completes\n\t* successfully. This method is usually overloaded in [subkinds]{@glossary subkind}.\n\t*\n\t* @virtual\n\t* @param {*} - value The value to pass to responders.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\tgo: function(value) {\n\t\tthis.sendProgress(0, 0, 1);\n\t\tutils.asyncMethod(this, function() {\n\t\t\tthis.sendProgress(1, 0, 1);\n\t\t\tthis.respond(value);\n\t\t});\n\t\treturn this;\n\t}\n});\n",
    "mtime": 1434758950000,
    "relPath": "enyo/Async",
    "requires": [
      "enyo",
      "./kind",
      "./utils",
      "./CoreObject"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./jobs",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/jobs",
    "name": "enyo/jobs",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/jobs.js",
    "contents": "require('enyo');\n\nvar\n\tutils = require('./utils'),\n\tkind = require('./kind');\n\t\nvar CoreObject = require('./CoreObject');\n\n/**\n* The {@link module:enyo/jobs} singleton provides a mechanism for queueing tasks\n* (i.e., functions) for execution in order of priority. The execution of the\n* current job stack may be blocked programmatically by setting a priority\n* level (run level) below which no jobs are executed.\n*\n* At the moment, only {@link module:enyo/Animator~Animator} uses this interface, setting a\n* priority of 4, which blocks all low priority tasks from executing during\n* animations. To maintain backward compatibility, jobs are assigned a priority\n* of 5 by default; thus they are not blocked by animations.\n*\n* Normally, application code will not use `enyo.jobs` directly, but will\n* instead use the [job()]{@link module:enyo/Component~Component#job} method of\n* {@link module:enyo/Component~Component}.\n*\n* @module enyo/jobs\n* @public\n*/\nmodule.exports = kind.singleton(\n\t/** @lends module:enyo/jobs */ {\n\t\n\tkind: CoreObject,\n\t\n\t/**\n\t* @private\n\t*/\n\tpublished: /** @lends module:enyo/jobs~jobs */ {\n\t\t\n\t\t/**\n\t\t* The current priority level.\n\t\t*\n\t\t* @type {Number}\n\t\t* @default 0\n\t\t* @public\n\t\t*/\n\t\tpriorityLevel: 0\n\t},\n\t\n\t/**\n\t* Prioritized by index.\n\t*\n\t* @private\n\t*/\n\t_jobs: [ [], [], [], [], [], [], [], [], [], [] ],\n\t\n\t/**\n\t* @private\n\t*/\n\t_priorities: {},\n\t\n\t/**\n\t* @private\n\t*/\n\t_namedJobs: {},\n\t\n\t/**\n\t* @private\n\t*/\n\t_magicWords: {\n\t\t'low': 3,\n\t\t'normal': 5,\n\t\t'high': 7\n\t},\n\t\n\t/**\n\t* Adds a [job]{@link module:enyo/job} to the job queue. If the current priority\n\t* level is higher than this job's priority, this job gets deferred until the\n\t* job level drops; if it is lower, this job is run immediately.\n\t*\n\t* @param {Function} job - The actual {@glossary Function} to execute as the\n\t* [job]{@link module:enyo/job}.\n\t* @param {Number} priority - The priority of the job.\n\t* @param {String} nom - The name of the job for later reference.\n\t* @public\n\t*/\n\tadd: function (job, priority, nom) {\n\t\tpriority = priority || 5;\n\n\t\t// magic words: low = 3, normal = 5, high = 7\n\t\tpriority = utils.isString(priority) ? this._magicWords[priority] : priority;\n\n\t\t// if a job of the same name exists, remove it first (replace it)\n\t\tif(nom){\n\t\t\tthis.remove(nom);\n\t\t\tthis._namedJobs[nom] = priority;\n\t\t}\n\n\t\t// if the job is of higher priority than the current priority level then\n\t\t// there's no point in queueing it\n\t\tif(priority >= this.priorityLevel){\n\t\t\tjob();\n\t\t} else {\n\t\t\tthis._jobs[priority - 1].push({fkt: job, name: nom});\n\t\t}\n\t},\n\t\n\t/**\n\t* Will remove the named [job]{@link module:enyo/job} from the queue.\n\t*\n\t* @param {String} nom - The name of the [job]{@link module:enyo/job} to remove.\n\t* @returns {Array} An {@glossary Array} that will contain the removed job if\n\t* it was found, or empty if it was not found.\n\t* @public\n\t*/\n\tremove: function (nom) {\n\t\tvar jobs = this._jobs[this._namedJobs[nom] - 1];\n\t\tif(jobs){\n\t\t\tfor(var j = jobs.length-1; j >= 0; j--){\n\t\t\t\tif(jobs[j].name === nom){\n\t\t\t\t\treturn jobs.splice(j, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t* Adds a new priority level at which jobs will be executed. If it is higher than the\n\t* highest current priority, the priority level rises. Newly added jobs below that priority\n\t* level are deferred until the priority is removed (i.e., unregistered).\n\t*\n\t* @param {Number} priority - The priority value to register.\n\t* @param {String} id - The name of the priority.\n\t* @public\n\t*/\n\tregisterPriority: function(priority, id) {\n\t\tthis._priorities[id] = priority;\n\t\tthis.setPriorityLevel( Math.max(priority, this.priorityLevel) );\n\t},\n\t\n\t/**\n\t* Removes a priority level. If the removed priority was previously the\n\t* highest priority, the priority level drops to the next highest priority\n\t* and queued jobs with a higher priority are executed.\n\t*\n\t* @param {String} id - The name of the priority level to remove.\n\t* @public\n\t*/\n\tunregisterPriority: function (id) {\n\t\tvar highestPriority = 0;\n\n\t\t// remove priority\n\t\tdelete this._priorities[id];\n\n\t\t// find new highest current priority\n\t\tfor( var i in this._priorities ){\n\t\t\thighestPriority = Math.max(highestPriority, this._priorities[i]);\n\t\t}\n\n\t\tthis.setPriorityLevel( highestPriority );\n\t},\n\t\n\t/**\n\t* Tries to run next job if priority level has dropped.\n\t*\n\t* @type {module:enyo/ObserverSupport~ObserverSupport~Observer}\n\t* @private\n\t*/\n\tpriorityLevelChanged: function (was) {\n\t\tif(was > this.priorityLevel){\n\t\t\tthis._doJob();\n\t\t}\n\t},\n\t\n\t/**\n\t* Finds and executes the job of highest priority; in this way, all jobs with priority\n\t* greater than or equal to the current level are run, in order of their priority (highest\n\t* to lowest).\n\t*\n\t* @private\n\t*/\n\t_doJob: function () {\n\t\tvar job;\n\t\t// find the job of highest priority above the current priority level\n\t\t// and remove from the job list\n\t\tfor (var i = 9; i >= this.priorityLevel; i--){\n\t\t\tif (this._jobs[i].length) {\n\t\t\t\tjob = this._jobs[i].shift();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// allow other events to pass through\n\t\tif (job) {\n\t\t\tjob.fkt();\n\t\t\tdelete this._namedJobs[job.name];\n\t\t\tsetTimeout(utils.bind(this, '_doJob'), 10);\n\t\t}\n\t}\n});\n",
    "mtime": 1434758950000,
    "relPath": "enyo/jobs",
    "requires": [
      "enyo",
      "./utils",
      "./kind",
      "./CoreObject"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./CoreObject",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/CoreObject",
    "name": "enyo/CoreObject",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/CoreObject.js",
    "contents": "require('enyo');\n\n/**\n* Contains the declaration for the {@link module:enyo/CoreObject~Object} kind.\n* @module enyo/CoreObject\n*/\n\nvar\n\tkind = require('./kind'),\n\tlogger = require('./logger'),\n\tutils = require('./utils');\n\nvar\n\tMixinSupport = require('./MixinSupport'),\n\tObserverSupport = require('./ObserverSupport'),\n\tBindingSupport = require('./BindingSupport');\n\n// ComputedSupport is applied to all kinds at creation time but must be require()'d somewhere to be\n// included in builds. This is that somewhere.\nrequire('./ComputedSupport');\n\n/**\n* Used by all [objects]{@link module:enyo/CoreObject~Object} and [subkinds]{@glossary subkind} when using the\n* {@link module:enyo/CoreObject~Object#log}, {@link module:enyo/CoreObject~Object#warn} and {@link module:enyo/CoreObject~Object#error} methods.\n*\n* @private\n*/\nfunction log (method, args) {\n\tif (logger.shouldLog(method)) {\n\t\ttry {\n\t\t\tthrow new Error();\n\t\t} catch(err) {\n\t\t\tlogger._log(method, [args.callee.caller.displayName + ': ']\n\t\t\t\t.concat(utils.cloneArray(args)));\n\t\t\tlogger.log(err.stack);\n\t\t}\n\t}\n}\n\n/**\n* {@link module:enyo/CoreObject~Object} lies at the heart of the Enyo framework's implementations of property\n* publishing, computed properties (via the [ComputedSupport]{@link module:enyo/ComputedSupport}\n* {@glossary mixin}), and data binding (via the {@link module:enyo/BindingSupport~BindingSupport} mixin and\n* {@link module:enyo/Binding~Binding} object). It also provides several utility [functions]{@glossary Function}\n* for its [subkinds]{@glossary subkind}.\n*\n* @class Object\n* @mixes module:enyo/MixinSupport\n* @mixes module:enyo/ObserverSupport\n* @mixes module:enyo/BindingSupport\n* @public\n*/\nvar CoreObject = module.exports = kind(\n\t/** @lends module:enyo/CoreObject~Object.prototype */ {\n\n\t/**\n\t* @private\n\t*/\n\tname: 'enyo.Object',\n\n\t/**\n\t* @private\n\t*/\n\tkind: null,\n\n\t/**\n\t* @private\n\t*/\n\n\n\t/**\n\t* Will be `true` if the [destroy()]{@link module:enyo/CoreObject~Object#destroy} method has been called;\n\t* otherwise, `false`.\n\t*\n\t* @readonly\n\t* @type {Boolean}\n\t* @default false\n\t* @public\n\t*/\n\tdestroyed: false,\n\n\t/**\n\t* @private\n\t*/\n\tmixins: [MixinSupport, ObserverSupport, BindingSupport],\n\n\t/**\n\t* @private\n\t*/\n\tconstructor: function (props) {\n\t\tthis.importProps(props);\n\t},\n\n\t/**\n\t* Imports the values from the given [object]{@glossary Object}. Automatically called\n\t* from the [constructor]{@link module:enyo/CoreObject~Object#constructor}.\n\t*\n\t* @param {Object} props - If provided, the [object]{@glossary Object} from which to\n\t*\tretrieve [keys/values]{@glossary Object.keys} to mix in.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\timportProps: function (props) {\n\t\tvar key;\n\n\t\tif (props) {\n\t\t\tkind.concatHandler(this, props, true);\n\t\t\t// if props is a default hash this is significantly faster than\n\t\t\t// requiring the hasOwnProperty check every time\n\t\t\tif (!props.kindName) {\n\t\t\t\tfor (key in props) {\n\t\t\t\t\tkind.concatenated.indexOf(key) === -1 && (this[key] = props[key]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (key in props) {\n\t\t\t\t\tif (kind.concatenated.indexOf(key) === -1 && props.hasOwnProperty(key)) {\n\t\t\t\t\t\tthis[key] = props[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn this;\n\t},\n\t\n\t/**\n\t* Calls the [destroy()]{@link module:enyo/CoreObject~Object#destroy} method for the named {@link module:enyo/CoreObject~Object} \n\t* property.\n\t*\n\t* @param {String} name - The name of the property to destroy, if possible.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\tdestroyObject: function (name) {\n\t\tif (this[name] && this[name].destroy) {\n\t\t\tthis[name].destroy();\n\t\t}\n\t\tthis[name] = null;\n\t\t\n\t\treturn this;\n\t},\n\t\n\t/**\n\t* Sends a log message to the [console]{@glossary console}, prepended with the name\n\t* of the {@glossary kind} and method from which `log()` was invoked. Multiple\n\t* {@glossary arguments} are coerced to {@glossary String} and\n\t* [joined with spaces]{@glossary Array.join}.\n\t*\n\t* ```javascript\n\t* var kind = require('enyo/kind'),\n\t*     Object = require('enyo/CoreObject');\n\t* kind({\n\t*\tname: 'MyObject',\n\t*\tkind: Object,\n\t*\thello: function() {\n\t*\t\tthis.log('says', 'hi');\n\t*\t\t// shows in the console: MyObject.hello: says hi\n\t*\t}\n\t* });\n\t* ```\n\t* @public\n\t*/\n\tlog: function () {\n\t\tvar acc = arguments.callee.caller,\n\t\t\tnom = ((acc ? acc.displayName : '') || '(instance method)') + ':',\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\targs.unshift(nom);\n\t\tlogger.log('log', args);\n\t},\n\t\n\t/**\n\t* Same as [log()]{@link module:enyo/CoreObject~Object#log}, except that it uses the \n\t* console's [warn()]{@glossary console.warn} method (if it exists).\n\t*\n\t* @public\n\t*/\n\twarn: function () {\n\t\tlog('warn', arguments);\n\t},\n\t\n\t/**\n\t* Same as [log()]{@link module:enyo/CoreObject~Object#log}, except that it uses the \n\t* console's [error()]{@glossary console.error} method (if it exists).\n\t*\n\t* @public\n\t*/\n\terror: function () {\n\t\tlog('error', arguments);\n\t},\n\n\t/**\n\t* Retrieves the value for the given path. The value may be retrieved as long as the given \n\t* path is resolvable relative to the given {@link module:enyo/CoreObject~Object}. See\n\t* [getPath()]{@link module:enyo/utils#getPath} for complete details.\n\t*\n\t* This method is backwards-compatible and will automatically call any existing getter\n\t* method that uses the \"getProperty\" naming convention. (Moving forward, however, Enyo code\n\t* should use [computed properties]{@link module:enyo/ComputedSupport} instead of relying on the\n\t* getter naming convention.)\n\t*\n\t* @param {String} path - The path from which to retrieve a value.\n\t* @returns {*} The value for the given path or [undefined]{@glossary undefined} if \n\t*\tthe path could not be completely resolved.\n\t* @public\n\t*/\n\tget: function () {\n\t\treturn utils.getPath.apply(this, arguments);\n\t},\n\t\n\t/**\n\t* Updates the value for the given path. The value may be set as long as the\n\t* given path is resolvable relative to the given {@link module:enyo/CoreObject~Object}. See\n\t* [setPath()]{@link module:enyo/utils#setPath} for complete details.\n\t*\n\t* @param {String} path - The path for which to set the given value.\n\t* @param {*} value - The value to set.\n\t* @param {Object} [opts] - An options hash.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\tset: function () {\n\t\treturn utils.setPath.apply(this, arguments);\n\t},\n\n\t/**\n\t* Binds a [callback]{@glossary callback} to this [object]{@link module:enyo/CoreObject~Object}.\n\t* If the object has been destroyed, the bound method will be aborted cleanly,\n\t* with no value returned.\n\t*\n\t* This method should generally be used instead of {@link module:enyo/utils#bind} for running\n\t* code in the context of an instance of {@link module:enyo/CoreObject~Object} or one of its\n\t* [subkinds]{@glossary subkind}.\n\t*\n\t* @public\n\t*/\n\tbindSafely: function () {\n\t\tvar args = Array.prototype.slice.call(arguments);\n\t\targs.unshift(this);\n\t\treturn utils.bindSafely.apply(null, args);\n\t},\n\t\n\t/**\n\t* An abstract method (primarily) that sets the [destroyed]{@link module:enyo/CoreObject~Object#destroyed} \n\t* property to `true`.\n\t*\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\tdestroy: function () {\n\t\t\n\t\t// Since JS objects are never truly destroyed (GC'd) until all references are\n\t\t// gone, we might have some delayed action on this object that needs access\n\t\t// to this flag.\n\t\t// Using this.set to make the property observable\n\t\treturn this.set('destroyed', true);\n\t}\n});\n\n/**\n* @private\n*/\nCoreObject.concat = function (ctor, props) {\n\tvar pubs = props.published,\n\t\tcpy,\n\t\tprop;\n\t\t\n\tif (pubs) {\n\t\tcpy = ctor.prototype || ctor;\n\t\tfor (prop in pubs) {\n\t\t\t// need to make sure that even though a property is 'published'\n\t\t\t// it does not overwrite any computed properties\n\t\t\tif (props[prop] && typeof props[prop] == 'function') continue;\n\t\t\taddGetterSetter(prop, pubs[prop], cpy);\n\t\t}\n\t}\n};\n\n/**\n* This method creates a getter/setter for a published property of an {@link module:enyo/CoreObject~Object}, but is\n* deprecated. It is maintained for purposes of backwards compatibility. The preferred method is \n* to mark public and protected (private) methods and properties using documentation or other \n* means and rely on the [get]{@link module:enyo/CoreObject~Object#get} and [set]{@link module:enyo/CoreObject~Object#set} methods of\n* {@link module:enyo/CoreObject~Object} instances.\n*\n* @private\n*/\nfunction addGetterSetter (prop, value, proto) {\n\t\n\t// so we don't need to re-execute this over and over and over...\n\tvar cap = utils.cap(prop),\n\t\tgetName = 'get' + cap,\n\t\tsetName = 'set' + cap,\n\t\tgetters = proto._getters || (proto._getters = {}),\n\t\tsetters = proto._setters || (proto._setters = {}),\n\t\tfn;\n\t\n\t// we assign the default value from the published block to the prototype\n\t// so it will be initialized properly\n\tproto[prop] = value;\n\t\n\t// check for a supplied getter and if there isn't one we create one otherwise\n\t// we mark the supplied getter in the tracking object so the global getPath will\n\t// know about it\n\tif (!(fn = proto[getName]) || typeof fn != 'function') {\n\t\tfn = proto[getName] = function () {\n\t\t\treturn utils.getPath.fast.call(this, prop);\n\t\t};\n\t\t\n\t\t// and we mark it as generated\n\t\tfn.generated = true;\n\t} else if (fn && typeof fn == 'function' && !fn.generated) getters[prop] = getName;\n\t\n\t// we need to do the same thing for the setters\n\tif (!(fn = proto[setName]) || typeof fn != 'function') {\n\t\tfn = proto[setName] = function (val) {\n\t\t\treturn utils.setPath.fast.call(this, prop, val);\n\t\t};\n\t\t\n\t\t// and we mark it as generated\n\t\tfn.generated = true;\n\t} else if (fn && typeof fn == 'function' && !fn.generated) setters[prop] = setName;\n}\n",
    "mtime": 1434758950000,
    "relPath": "enyo/CoreObject",
    "requires": [
      "enyo",
      "./kind",
      "./logger",
      "./utils",
      "./MixinSupport",
      "./ObserverSupport",
      "./BindingSupport",
      "./ComputedSupport"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./ObserverSupport",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/ObserverSupport",
    "name": "enyo/ObserverSupport",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/ObserverSupport.js",
    "contents": "/**\n* Exports the {@link module:enyo/ObserverSupport~ObserverSupport} mixin\n* @module enyo/ObserverSupport\n*/\nrequire('enyo');\n\nvar\n\tkind = require('./kind'),\n\tutils = require('./utils');\n\nvar\n\tObserverChain = require('./ObserverChain');\n\nvar observerTable = {};\n\t\nkind.concatenated.push(\"observers\");\n\n/**\n* Responds to changes in one or more properties.\n* [Observers]{@link module:enyo/ObserverSupport~ObserverSupport.observer} may be registered in\n* several different ways. See the {@link module:enyo/ObserverSupport} documentation\n* for more details. Also note that, while observers should not be called\n* directly, if defined on a [kind]{@glossary kind}, they may be\n* overloaded for special behavior.\n*\n* @see module:enyo/ObserverSupport\n* @see module:enyo/ObserverSupport~ObserverSupport.observe\n* @callback module:enyo/ObserverSupport~ObserverSupport~Observer\n* @param {*} was - The previous value of the property that has changed.\n* @param {*} is - The current value of the property that has changed.\n* @param {String} prop - The name of the property that has changed.\n* @public\n*/\n\nfunction addObserver (path, fn, ctx, opts) {\n\t\n\tvar observers = this.getObservers(),\n\t\tchains = this.getChains(),\n\t\tparts = path.split('.'),\n\t\tprio = opts && opts.priority,\n\t\tentries,\n\t\tnoChain;\n\t\t\n\tnoChain = (opts && opts.noChain) ||\n\t\t\tchains[path] ||\n\t\t\tparts.length < 2 ||\n\t\t\t(parts.length === 2 && path[0] == '$');\n\t\n\tif (observers[path] && !observers.hasOwnProperty(path)) {\n\t\tobservers[path] = observers[path].slice();\n\t}\n\t\n\tentries = observers[path] || (observers[path] = []);\n\tentries[prio ? 'unshift' : 'push']({method: fn, ctx: ctx || this});\n\t\n\tif (!noChain) {\n\t\tthis.getChains()[path] = new ObserverChain(path, this);\n\t}\n\t\n\treturn this;\n}\n\nfunction removeObserver (obj, path, fn, ctx) {\n\tvar observers = obj.getObservers(path)\n\t\t, chains = obj.getChains()\n\t\t, idx, chain;\n\t\t\n\tif (observers && observers.length) {\n\t\tidx = observers.findIndex(function (ln) {\n\t\t\treturn ln.method === fn && (ctx? ln.ctx === ctx: true);\n\t\t});\n\t\tidx > -1 && observers.splice(idx, 1);\n\t}\n\t\n\tif ((chain = chains[path]) && !observers.length) {\n\t\tchain.destroy();\n\t}\n\t\n\treturn obj;\n}\n\nfunction notifyObservers (obj, path, was, is, opts) {\n\tif (obj.isObserving()) {\n\t\tvar observers = obj.getObservers(path);\n\t\t\n\t\tif (observers && observers.length) {\n\t\t\tfor (var i=0, ln; (ln=observers[i]); ++i) {\n\t\t\t\tif (typeof ln.method == \"string\") obj[ln.method](was, is, path, opts);\n\t\t\t\telse ln.method.call(ln.ctx || obj, was, is, path, opts);\n\t\t\t}\n\t\t}\n\t} else enqueue(obj, path, was, is, opts);\n\t\n\treturn obj;\n}\n\nfunction enqueue (obj, path, was, is, opts) {\n\tif (obj._notificationQueueEnabled) {\n\t\tvar queue = obj._notificationQueue || (obj._notificationQueue = {})\n\t\t\t, ln = queue[path] || (queue[path] = {});\n\t\n\t\tln.was = was;\n\t\tln.is = is;\n\t\tln.opts = opts;\n\t}\n}\n\nfunction flushQueue (obj) {\n\tvar queue = obj._notificationQueue\n\t\t, path, ln;\n\t\n\tif (queue) {\n\t\tobj._notificationQueue = null;\n\t\t\n\t\tfor (path in queue) {\n\t\t\tln = queue[path];\n\t\t\tobj.notify(path, ln.was, ln.is, ln.opts);\n\t\t}\n\t}\n}\n\t\n/**\n* Adds support for notifications on property changes. Most\n* [kinds]{@glossary kind} (including all kinds that inherit from\n* {@link module:enyo/CoreObject~Object}) already have this {@glossary mixin} applied.\n* This allows for\n* [observers]{@link module:enyo/ObserverSupport~ObserverSupport~Observer} to be\n* [declared]{@link module:enyo/ObserverSupport~ObserverSupport.observers} or \"implied\" (see below).\n*\n* Implied observers are not declared, but derived from their `name`. They take\n* the form `<property>Changed`, where `<property>` is the property to\n* [observe]{@link module:enyo/ObserverSupport~ObserverSupport.observe}. For example:\n*\n* ```javascript\n* enyo.kind({\n* \tname: 'MyKind',\n*\n* \t// some local property\n* \tvalue: true,\n*\n* \t// and the implied observer of that property\n* \tvalueChanged: function (was, is) {\n* \t\t// do something now that it has changed\n* \t\tenyo.log('value was \"' + was + '\" but now it is \"' + is + '\"');\n* \t}\n* });\n*\n* var mine = new MyKind();\n* mine.set('value', false); // -> value was \"true\" but now it is \"false\"\n* ```\n*\n* Using the `observers` property for its declarative syntax, an observer may\n* observe any property (or properties), regardless of its `name`. For example:\n*\n* ```javascript\n* enyo.kind({\n* \tname: 'MyKind',\n*\n* \t// some local property\n* \tvalue: true,\n*\n* \t// another local property\n* \tcount: 1,\n*\n* \t// declaring the observer\n* \tobservers: [\n* \t\t// the path can be a single string or an array of strings\n* \t\t{method: 'myObserver', path: ['value', 'count']}\n* \t],\n*\n* \t// now this observer will be notified of changes to both properties\n* \tmyObserver: function (was, is, prop) {\n* \t\t// do something now that it changed\n* \t\tenyo.log(prop + ' was \"' + was + '\" but now it is \"' + is + '\"');\n* \t}\n* });\n*\n* var mine = new MyKind();\n* mine.set('value', false); // -> value was \"true\" but now it is \"false\"\n* mine.set('count', 2); // -> count was \"1\" but now it is \"2\"\n* ```\n*\n* While observers may be [notified]{@link module:enyo/ObserverSupport~ObserverSupport.notify} of\n* changes to multiple properties, this is not a typical use case for implied\n* observers, since, by convention, they are only registered for the named\n* property.\n*\n* There is one additional way to use observers, if necessary. You may use the\n* API methods [observe()]{@link module:enyo/ObserverSupport~ObserverSupport.observe} and\n* [unobserve()]{@link module:enyo/ObserverSupport~ObserverSupport.unobserve} to dynamically\n* register and unregister observers as needed. For example:\n*\n* ```javascript\n* var object = new enyo.Object({value: true});\n* var observer = function (was, is) {\n* \tenyo.log('value was \"' + was + '\" but now it is \"' + is + '\"');\n* };\n*\n* object.observe('value', observer);\n* object.set('value', false); // -> value was \"true\" but now it is \"false\"\n* object.unobserve('value', observer);\n* object.set('value', true); // no output because there is no observer\n* ```\n*\n* Be sure to read the documentation for these API methods; proper usage of\n* these methods is important for avoiding common pitfalls and memory leaks.\n*\n* @mixin\n* @public\n*/\nvar ObserverSupport = {\n\t\n\t/**\n\t* @private\n\t*/\n\tname: \"ObserverSupport\",\n\t\n\t/**\n\t* @private\n\t*/\n\t_observing: true,\n\t\n\t/**\n\t* @private\n\t*/\n\t_observeCount: 0,\n\t\n\t/**\n\t* @private\n\t*/\n\t_notificationQueue: null,\n\t\n\t/**\n\t* @private\n\t*/\n\t_notificationQueueEnabled: true,\n\t\n\t/**\n\t* Determines whether `_observing` is enabled. If\n\t* [stopNotifications()]{@link module:enyo/ObserverSupport~ObserverSupport.stopNotifications} has\n\t* been called, then this will return `false`.\n\t*\n\t* @see module:enyo/ObserverSupport~ObserverSupport.stopNotifications\n\t* @see module:enyo/ObserverSupport~ObserverSupport.startNotifications\n\t* @returns {Boolean} Whether or not the callee is observing.\n\t*/\n\tisObserving: function () {\n\t\treturn this._observing;\n\t},\n\t\n\t/**\n\t* Returns an immutable list of [observers]{@link module:enyo/ObserverSupport~ObserverSupport~Observer}\n\t* for the given `path`, or all observers for the callee.\n\t*\n\t* @param {String} [path] - Path or property path for which\n\t* [observers]{@link module:enyo/ObserverSupport~ObserverSupport~Observer} will be returned. If not\n\t* specified, all observers for the callee will be returned.\n\t*\n\t* @returns {module:enyo/ObserverSupport~ObserverSupport~Observer[]} The immutable\n\t* [array]{@glossary Array} of observers.\n\t* @public\n\t*/\n\tgetObservers: function (path) {\n\t\tvar euid = this.euid || (this.euid = utils.uid('o')),\n\t\t\tret,\n\t\t\tloc;\n\t\t\t\n\t\tloc = observerTable[euid] || (observerTable[euid] = (\n\t\t\tthis._observers? Object.create(this._observers): {}\n\t\t));\n\t\t\n\t\tif (!path) return loc;\n\t\t\n\t\tret = loc[path];\n\t\t\n\t\t// if the special property exists...\n\t\tif (loc['*']) ret = ret ? ret.concat(loc['*']) : loc['*'].slice();\n\t\treturn ret;\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tgetChains: function () {\n\t\treturn this._observerChains || (this._observerChains = {});\n\t},\n\t\n\t/**\n\t* @deprecated\n\t* @alias enyo.ObserverSupport.observe\n\t* @public\n\t*/\n\taddObserver: function () {\n\t\t// @NOTE: In this case we use apply because of internal variable use of parameters\n\t\treturn addObserver.apply(this, arguments);\n\t},\n\t\n\t/**\n\t* Registers an [observer]{@link module:enyo/ObserverSupport~ObserverSupport~Observer} to be\n\t* [notified]{@link module:enyo/ObserverSupport~ObserverSupport.notify} when the given property has\n\t* been changed. It is important to note that it is possible to register the\n\t* same observer multiple times (although this is never the intention), so\n\t* care should be taken to avoid that scenario. It is also important to\n\t* understand how observers are stored and unregistered\n\t* ([unobserved]{@link module:enyo/ObserverSupport~ObserverSupport.unobserve}). The `ctx` (context)\n\t* parameter is stored with the observer reference. **If used when\n\t* registering, it should also be used when unregistering.**\n\t*\n\t* @see module:enyo/ObserverSupport~ObserverSupport.unobserve\n\t* @param {String} path - The property or property path to observe.\n\t* @param {module:enyo/ObserverSupport~ObserverSupport~Observer} fn - The\n\t*\t[observer]{@link module:enyo/ObserverSupport~ObserverSupport~Observer} method that responds to changes.\n\t* @param {*} [ctx] - The `this` (context) under which to execute the observer.\n\t*\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\tobserve: function () {\n\t\t// @NOTE: In this case we use apply because of internal variable use of parameters\n\t\treturn addObserver.apply(this, arguments);\n\t},\n\t\n\t/**\n\t* @deprecated\n\t* @alias enyo.ObserverSupport.unobserve\n\t* @public\n\t*/\n\tremoveObserver: function (path, fn, ctx) {\n\t\treturn removeObserver(this, path, fn);\n\t},\n\t\n\t/**\n\t* Unregisters an [observer]{@link module:enyo/ObserverSupport~ObserverSupport~Observer}. If a `ctx`\n\t* (context) was supplied to [observe()]{@link module:enyo/ObserverSupport~ObserverSupport.observe},\n\t* then it should also be supplied to this method.\n\t*\n\t* @see module:enyo/ObserverSupport~ObserverSupport.observe\n\t* @param {String} path - The property or property path to unobserve.\n\t* @param {module:enyo/ObserverSupport~ObserverSupport~Observer} fn - The\n\t*\t[observer]{@link module:enyo/ObserverSupport~ObserverSupport~Observer} method that responds to changes.\n\t* @param {*} [ctx] - The `this` (context) under which to execute the observer.\n\t*\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\tunobserve: function (path, fn, ctx) {\n\t\treturn removeObserver(this, path, fn, ctx);\n\t},\n\t\n\t/**\n\t* Removes all [observers]{@link module:enyo/ObserverSupport~ObserverSupport~Observer} from the\n\t* callee. If a `path` parameter is provided, observers will only be removed\n\t* from that path (or property).\n\t*\n\t* @param {String} [path] - A property or property path from which to remove all\n\t*\t[observers]{@link module:enyo/ObserverSupport~ObserverSupport~Observer}.\n\t* @returns {this} The callee for chaining.\n\t*/\n\tremoveAllObservers: function (path) {\n\t\tvar euid = this.euid\n\t\t\t, loc = euid && observerTable[euid];\n\t\t\n\t\tif (loc) {\n\t\t\tif (path) {\n\t\t\t\tloc[path] = null;\n\t\t\t} else {\n\t\t\t\tobserverTable[euid] = null;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn this;\n\t},\n\t\n\t/**\n\t* @deprecated\n\t* @alias enyo.ObserverSupport.notify\n\t* @public\n\t*/\n\tnotifyObservers: function (path, was, is, opts) {\n\t\treturn notifyObservers(this, path, was, is, opts);\n\t},\n\t\n\t/**\n\t* Triggers any [observers]{@link module:enyo/ObserverSupport~ObserverSupport~Observer} for the\n\t* given `path`. The previous and current values must be supplied. This\n\t* method is typically called automatically, but it may also be called\n\t* forcibly by [setting]{@link module:enyo/CoreObject~Object#set} a value with the\n\t* `force` option.\n\t*\n\t* @param {String} path - The property or property path to notify.\n\t* @param {*} was - The previous value.\n\t* @param {*} is - The current value.\n\t* @returns {this} The callee for chaining.\n\t*/\n\tnotify: function (path, was, is, opts) {\n\t\treturn notifyObservers(this, path, was, is, opts);\n\t},\n\t\n\t/**\n\t* Stops all [notifications]{@link module:enyo/ObserverSupport~ObserverSupport.notify} from\n\t* propagating. By default, all notifications will be queued and flushed once\n\t* [startNotifications()]{@link module:enyo/ObserverSupport~ObserverSupport.startNotifications}\n\t* has been called. Setting the optional `noQueue` flag will also disable the\n\t* queue, or you can use the\n\t* [disableNotificationQueue()]{@link module:enyo/ObserverSupport~ObserverSupport.disableNotificationQueue} and\n\t* [enableNotificationQueue()]{@link module:enyo/ObserverSupport~ObserverSupport.enableNotificationQueue}\n\t* API methods. `startNotifications()` will need to be called the same number\n\t* of times that this method has been called.\n\t*\n\t* @see module:enyo/ObserverSupport~ObserverSupport.startNotifications\n\t* @see module:enyo/ObserverSupport~ObserverSupport.disableNotificationQueue\n\t* @see module:enyo/ObserverSupport~ObserverSupport.enableNotificationQueue\n\t* @param {Boolean} [noQueue] - If `true`, this will also disable the notification queue.\n\t* @returns {this} The callee for chaining.\n\t*/\n\tstopNotifications: function (noQueue) {\n\t\tthis._observing = false;\n\t\tthis._observeCount++;\n\t\tnoQueue && this.disableNotificationQueue();\n\t\treturn this;\n\t},\n\t\n\t/**\n\t* Starts [notifications]{@link module:enyo/ObserverSupport~ObserverSupport.notify} if they have\n\t* been [disabled]{@link module:enyo/ObserverSupport~ObserverSupport.stopNotifications}. If the\n\t* notification queue was not disabled, this will automatically flush the\n\t* queue of all notifications that were encountered while stopped. This\n\t* method must be called the same number of times that\n\t* [stopNotifications()]{@link module:enyo/ObserverSupport~ObserverSupport.stopNotifications} was\n\t* called.\n\t*\n\t* @see module:enyo/ObserverSupport~ObserverSupport.stopNotifications\n\t* @see module:enyo/ObserverSupport~ObserverSupport.disableNotificationQueue\n\t* @see module:enyo/ObserverSupport~ObserverSupport.enableNotificationQueue\n\t* @param {Boolean} [queue] - If `true` and the notification queue is disabled,\n\t* the queue will be re-enabled.\n\t* @returns {this} The callee for chaining.\n\t*/\n\tstartNotifications: function (queue) {\n\t\tthis._observeCount && this._observeCount--;\n\t\tthis._observeCount === 0 && (this._observing = true);\n\t\tqueue && this.enableNotificationQueue();\n\t\tthis.isObserving() && flushQueue(this);\n\t\treturn this;\n\t},\n\t\n\t/**\n\t* Re-enables the notification queue, if it was disabled.\n\t*\n\t* @see module:enyo/ObserverSupport~ObserverSupport.disableNotificationQueue\n\t* @returns {this} The callee for chaining.\n\t*/\n\tenableNotificationQueue: function () {\n\t\tthis._notificationQueueEnabled = true;\n\t\treturn this;\n\t},\n\t\n\t/**\n\t* If the notification queue is enabled (the default), it will be disabled\n\t* and any notifications in the queue will be removed.\n\t*\n\t* @see module:enyo/ObserverSupport~ObserverSupport.enableNotificationQueue\n\t* @returns {this} The callee for chaining.\n\t*/\n\tdisableNotificationQueue: function () {\n\t\tthis._notificationQueueEnabled = false;\n\t\tthis._notificationQueue = null;\n\t\treturn this;\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tconstructor: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tvar chains, chain, path, entries, i;\n\t\t\t\n\t\t\t// if there are any observers that need to create dynamic chains\n\t\t\t// we look for and instance those now\n\t\t\tif (this._observerChains) {\n\t\t\t\tchains = this._observerChains;\n\t\t\t\tthis._observerChains = {};\n\t\t\t\tfor (path in chains) {\n\t\t\t\t\tentries = chains[path];\n\t\t\t\t\tfor (i = 0; (chain = entries[i]); ++i) this.observe(path, chain.method);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\t\n\t/**\n\t* @private\n\t*/\n\tdestroy: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tvar chains = this._observerChains,\n\t\t\t\tpath,\n\t\t\t\tchain;\n\t\t\t\n\t\t\tsup.apply(this, arguments);\n\t\t\t\n\t\t\tif (chains) {\n\t\t\t\tfor (path in chains) {\n\t\t\t\t\tchain = chains[path];\n\t\t\t\t\tchain.destroy();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis._observerChains = null;\n\t\t\t}\n\t\t};\n\t})\n\t\n};\n\nmodule.exports = ObserverSupport;\n\n/**\n* Hijack the original so we can add additional default behavior.\n*\n* @private\n*/\nvar sup = kind.concatHandler;\n\n// @NOTE: It seems like a lot of work but it really won't happen that much and the more\n// we push to kind-time the better for initialization time\n\n/** @private */\nkind.concatHandler = function (ctor, props, instance) {\n\t\n\tsup.call(this, ctor, props, instance);\n\t\n\tif (props === ObserverSupport) return;\n\n\tvar proto = ctor.prototype || ctor\n\t\t, observers = proto._observers? Object.create(proto._observers): null\n\t\t, incoming = props.observers\n\t\t, chains = proto._observerChains && Object.create(proto._observerChains);\n\t\t\n\tif (!observers) {\n\t\tif (proto.kindName) observers = {};\n\t\telse return;\n\t}\n\t\t\n\tif (incoming && !(incoming instanceof Array)) {\n\t\t(function () {\n\t\t\tvar tmp = [], deps, name;\n\t\t\t// here is the slow iteration over the properties...\n\t\t\tfor (name in props.observers) {\n\t\t\t\t// points to the dependencies of the computed method\n\t\t\t\tdeps = props.observers[name];\n\t\t\t\t// create a single entry now for the method/computed with all dependencies\n\t\t\t\ttmp.push({method: name, path: deps});\n\t\t\t}\n\t\t\tincoming = tmp;\n\t\t}());\n\t\t// we need to ensure we don't modify the fixed array of a mixin or reused object\n\t\t// because it could wind up inadvertantly adding the same entry multiple times\n\t} else if (incoming) incoming = incoming.slice();\n\t\n\t// this scan is required to figure out what auto-observers might be present\n\tfor (var key in props) {\n\t\tif (key.slice(-7) == \"Changed\") {\n\t\t\tincoming || (incoming = []);\n\t\t\tincoming.push({method: key, path: key.slice(0, -7)});\n\t\t}\n\t}\n\t\n\tvar addObserverEntry = function (path, method) {\n\t\tvar obs;\n\t\t// we have to make sure that the path isn't a chain because if it is we add it\n\t\t// to the chains instead\n\t\tif (path.indexOf(\".\") > -1) {\n\t\t\tif (!chains) chains = {};\n\t\t\tobs = chains[path] || (chains[path] = []);\n\t\t\tobs.push({method: method});\n\t\t} else {\n\t\t\tif (observers[path] && !observers.hasOwnProperty(path)) observers[path] = observers[path].slice();\n\t\t\tobs = observers[path] || (observers[path] = []);\n\t\t\tif (!obs.find(function (ln) { return ln.method == method; })) obs.push({method: method});\n\t\t}\n\t};\n\t\n\tif (incoming) {\n\t\tincoming.forEach(function (ln) {\n\t\t\t// first we determine if the path itself is an array of paths to observe\n\t\t\tif (ln.path && ln.path instanceof Array) ln.path.forEach(function (en) { addObserverEntry(en, ln.method); });\n\t\t\telse addObserverEntry(ln.path, ln.method);\n\t\t});\n\t}\n\t\n\t// we clear the key so it will not be added to the prototype\n\t// delete props.observers;\n\t// we update the properties to whatever their new values may be\n\tproto._observers = observers;\n\tproto._observerChains = chains;\n};\n",
    "mtime": 1434758950000,
    "relPath": "enyo/ObserverSupport",
    "requires": [
      "enyo",
      "./kind",
      "./utils",
      "./ObserverChain"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./ObserverChain",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/ObserverChain",
    "name": "enyo/ObserverChain",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/ObserverChain.js",
    "contents": "require('enyo');\n\n/**\n* Contains the declaration for the {@link module:enyo/ObserverChain~ObserverChain} kind.\n* @module enyo/ObserverChain\n*/\n\nvar\n\tkind = require('./kind');\n\nvar\n\tLinkedList = require('./LinkedList'),\n\tObserverChainNode = require('./ObserverChainNode');\n\nfunction get (base, prop) {\n\treturn base && /*isObject(base)*/ (typeof base == 'object')? (\n\t\tbase.get? base.get(prop): base[prop]\n\t): undefined;\n}\n\n/**\n* An internally used {@glossary kind}.\n*\n* @class ObserverChain\n* @extends module:enyo/LinkedList~LinkedList\n* @private\n*/\nmodule.exports = kind(\n\t/** @lends module:enyo/ObserverChain~ObserverChain.prototype */ {\n\n\t/**\n\t* @private\n\t*/\n\tkind: LinkedList,\n\n\t/**\n\t* @private\n\t*/\n\tnodeKind: ObserverChainNode,\n\n\t/**\n\t* @private\n\t*/\n\n\t\n\t/**\n\t* @private\n\t*/\n\tconnected: 0,\n\t\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tconstructor: function (path, object) {\n\t\tthis.object = object;\n\t\tthis.path = path;\n\t\tthis.parts = path.split('.');\n\t\tthis.createChain();\n\t},\n\t\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tdestroy: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tsup.apply(this, arguments);\n\t\t\tthis.object = null;\n\t\t\tthis.parts = null;\n\t\t\tthis.path = null;\n\t\t};\n\t}),\n\t\n\t/**\n\t* @private\n\t*/\n\trebuild: function (target) {\n\t\tif (!this.rebuilding) {\n\t\t\tthis.rebuilding = true;\n\t\t\tthis.forward(function (node) {\n\t\t\t\tif (node !== this.head) {\n\t\t\t\t\tvar src = node.prev.object\n\t\t\t\t\t\t, prop = node.prev.property;\n\t\t\t\t\tnode.setObject(get(src, prop));\n\t\t\t\t}\n\t\t\t}, this, target);\n\t\t\tthis.rebuilding = false;\n\t\t}\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tisConnected: function () {\n\t\treturn !! (this.connected === this.length && this.length);\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tbuildPath: function (target) {\n\t\tvar str = '';\n\t\t\n\t\tthis.backward(function (node) {\n\t\t\tstr = node.property + (str? ('.' + str): str);\n\t\t}, this, target);\n\t\t\n\t\treturn str;\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tcreateChain: function () {\n\t\tvar parts = this.parts\n\t\t\t, next = this.object\n\t\t\t, $ = false\n\t\t\t, node, prop;\n\t\t\t\n\t\tfor (var i=0; (prop=parts[i]); ++i) {\n\t\t\t\n\t\t// forEach(parts, function (prop, idx) {\n\t\t\t// we create a special case for the $ hash property\n\t\t\tif (prop == '$') {\n\t\t\t\t$ = true;\n\t\t\t} else {\n\t\t\t\t// in cases where the chain has the $ property we arbitrarily\n\t\t\t\t// force it onto our current nodes property and let the special handling\n\t\t\t\t// in ObserverChainNode and ObserverSupport handle the rest\n\t\t\t\t$ && (prop = '$.' + prop);\n\t\t\t\tnode = this.createNode({property: prop, object: next, list: this});\n\t\t\t\tthis.appendNode(node);\n\t\t\t\tnext = get(next, prop);\n\t\t\t\t$ = false;\n\t\t\t}\n\t\t// }, this);\n\t\t}\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tobserved: function (node, was, is) {\n\t\tthis.object.stopNotifications();\n\t\t// @NOTE: About the following two cases, they are mutually exclusive and this seems perfect\n\t\t// that we don't see double notifications\n\t\t// @TODO: Only notify if it was the full property path? This is far more efficient after\n\t\t// testing but not as flexible...\n\t\tnode === this.tail /*&& was !== is*/ && this.object.notify(this.buildPath(node), was, is);\n\t\t// @TODO: It seems the same case across the board that the rebuild only needs to take place\n\t\t// from the beginning to the second-to-last elem\n\t\tnode !== this.tail && was !== is && this.rebuild(node);\n\t\tthis.object.startNotifications();\n\t}\n});\n",
    "mtime": 1434758950000,
    "relPath": "enyo/ObserverChain",
    "requires": [
      "enyo",
      "./kind",
      "./LinkedList",
      "./ObserverChainNode"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./LinkedList",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/LinkedList",
    "name": "enyo/LinkedList",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/LinkedList.js",
    "contents": "require('enyo');\n\n/**\n* Contains the declaration for the {@link module:enyo/LinkedList~LinkedList} kind.\n* @module enyo/LinkedList\n*/\n\nvar\n\tkind = require('./kind');\n\nvar\n\tLinkedListNode = require('./LinkedListNode');\n\n/**\n* An abstract linked-list.\n*\n* @class LinkedList\n* @private\n*/\nmodule.exports = kind(\n\t/** @lends module:enyo/LinkedList~LinkedList.prototype */ {\n\t\n\t/**\n\t* @private\n\t*/\n\tkind: null,\n\t\n\t/**\n\t* @private\n\t*/\n\n\t\n\t/**\n\t* @private\n\t*/\n\tnodeKind: LinkedListNode,\n\t\n\t/**\n\t* @private\n\t*/\n\thead: null,\n\t\n\t/**\n\t* @private\n\t*/\n\ttail: null,\n\t\n\t/**\n\t* @private\n\t*/\n\tlength: 0,\n\t\n\t/**\n\t* @private\n\t*/\n\tclear: function () {\n\t\tif (this.head) {\n\t\t\t// this will trigger a chain event down the list\n\t\t\tthis.head.destroy();\n\t\t}\n\t\tthis.head = null;\n\t\tthis.tail = null;\n\t\tthis.length = 0;\t\t\t\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tslice: function (fromNode, toNode) {\n\t\tvar node = fromNode || this.head\n\t\t\t, list = new this.ctor()\n\t\t\t, cpy;\n\t\t\n\t\t// ensure we have a final node or our tail\n\t\ttoNode = toNode || this.tail;\n\t\t\n\t\tif (node && node !== toNode) {\n\t\t\tdo {\n\t\t\t\tcpy = node.copy();\n\t\t\t\tlist.appendNode(cpy);\n\t\t\t} while ((node = node.next) && node !== toNode);\n\t\t}\n\t\t\n\t\treturn list;\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tdestroy: function () {\n\t\tthis.clear();\n\t\tthis.destroyed = true;\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tcreateNode: function (props) {\n\t\treturn new this.nodeKind(props);\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tdeleteNode: function (node) {\n\t\tthis.removeNode(node);\n\t\t\n\t\t// can't chain destruct because we removed its chain references\n\t\tnode.destroy();\n\t\treturn this;\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tremoveNode: function (node) {\n\t\tvar prev = node.prev\n\t\t\t, next = node.next;\n\t\t\t\n\t\tprev && (prev.next = next);\n\t\tnext && (next.prev = prev);\n\t\tthis.length--;\n\t\tnode.next = node.prev = null;\n\t\treturn this;\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tappendNode: function (node, targetNode) {\n\t\ttargetNode = targetNode || this.tail;\n\t\t\n\t\tif (targetNode) {\n\t\t\tif (targetNode.next) {\n\t\t\t\tnode.next = targetNode.next;\n\t\t\t}\n\t\t\t\n\t\t\ttargetNode.next = node;\n\t\t\tnode.prev = targetNode;\n\t\t\t\n\t\t\tif (targetNode === this.tail) {\n\t\t\t\tthis.tail = node;\n\t\t\t}\n\t\t\t\n\t\t\tthis.length++;\n\t\t} else {\n\t\t\t\n\t\t\tthis.head = this.tail = node;\n\t\t\tnode.prev = node.next = null;\n\t\t\tthis.length = 1;\n\t\t}\n\t\treturn this;\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tfind: function (fn, ctx, targetNode) {\n\t\tvar node = targetNode || this.head;\n\t\tif (node) {\n\t\t\tdo {\n\t\t\t\tif (fn.call(ctx || this, node, this)) {\n\t\t\t\t\treturn node;\n\t\t\t\t}\n\t\t\t} while ((node = node.next));\n\t\t}\n\t\t// if no node qualified it returns false\n\t\treturn false;\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tforward: function (fn, ctx, targetNode) {\n\t\tvar node = targetNode || this.head;\n\t\tif (node) {\n\t\t\tdo {\n\t\t\t\tif (fn.call(ctx || this, node, this)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} while ((node = node.next));\n\t\t}\n\t\t// returns the last node (if any) that was processed in the chain\n\t\treturn node;\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tbackward: function (fn, ctx, targetNode) {\n\t\tvar node = targetNode || this.tail;\n\t\tif (node) {\n\t\t\tdo {\n\t\t\t\tif (fn.call(ctx || this, node, this)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} while ((node = node.prev));\n\t\t}\n\t\t// returns the last node (if any) that was processed in the chain\n\t\treturn node;\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tconstructor: function () {\n\t\tthis.nodeType = kind.constructorForKind(this.nodeType);\n\t}\n});\n",
    "mtime": 1434758950000,
    "relPath": "enyo/LinkedList",
    "requires": [
      "enyo",
      "./kind",
      "./LinkedListNode"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./ObserverChainNode",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/ObserverChainNode",
    "name": "enyo/ObserverChainNode",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/ObserverChainNode.js",
    "contents": "require('enyo');\n\n/**\n* Contains the declaration for the {@link module:enyo/ObserverChainNode~ObserverChainNode} kind.\n* @module enyo/ObserverChainNode\n*/\n\nvar\n\tkind = require('./kind');\n\nvar\n\tLinkedListNode = require('./LinkedListNode');\n\nfunction get (base, prop) {\n\treturn base && /*isObject(base)*/ (typeof base == 'object')? (\n\t\tbase.get? base.get(prop): base[prop]\n\t): undefined;\n}\n\n/**\n* An internally used {@glossary kind}.\n*\n* @class ObserverChainNode\n* @extends module:enyo/LinkedListNode~LinkedListNode\n* @private\n*/\nmodule.exports = kind(\n\t/** @lends module:enyo/ObserverChainNode~ObserverChainNode.prototype */ {\n\n\t/**\n\t* @private\n\t*/\n\tkind: LinkedListNode,\n\n\t/**\n\t* @private\n\t*/\n\n\t\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tconstructor: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tsup.apply(this, arguments);\n\t\t\tthis.connect();\n\t\t};\n\t}),\n\t\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tdestroy: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tthis.disconnect();\n\t\t\tsup.apply(this, arguments);\n\t\t\tthis.observer = null;\n\t\t\tthis.list = null;\n\t\t\tthis.object = null;\n\t\t};\n\t}),\n\t\n\t/**\n\t* @private\n\t*/\n\tconnect: function () {\n\t\tvar obj = this.object\n\t\t\t, obs = this._changed\n\t\t\t, prop = this.property;\n\t\tif (obj) {\n\t\t\tif (obj.observe) obj.observe(prop, obs, this, {noChain: true, priority: true});\n\t\t\tthis.connected = true;\n\t\t\tthis.list.connected++;\n\t\t}\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tdisconnect: function () {\n\t\tvar obj = this.object\n\t\t\t, obs = this._changed\n\t\t\t, prop = this.property\n\t\t\t, was = this.connected;\n\t\tobj && obj.unobserve && obj.unobserve(prop, obs, this);\n\t\tthis.connected = null;\n\t\tif (was) this.list.connected--;\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tsetObject: function (object) {\n\t\tvar cur = this.object\n\t\t\t, prop = this.property\n\t\t\t, was, is;\n\t\t\n\t\tif (cur !== object) {\n\t\t\tthis.disconnect();\n\t\t\tthis.object = object;\n\t\t\tthis.connect();\n\t\t\t\n\t\t\tif (this.list.tail === this) {\n\t\t\t\twas = get(cur, prop);\n\t\t\t\tis = get(object, prop);\n\t\t\t\t// @TODO: It would be better to somehow cache values\n\t\t\t\t// such that it could intelligently derive the difference\n\t\t\t\t// without needing to continuously look it up with get\n\t\t\t\twas !== is && this.list.observed(this, was, is);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\t_changed: function (was, is) {\n\t\tthis.list.observed(this, was, is);\n\t}\n});\n",
    "mtime": 1434758950000,
    "relPath": "enyo/ObserverChainNode",
    "requires": [
      "enyo",
      "./kind",
      "./LinkedListNode"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./BindingSupport",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/BindingSupport",
    "name": "enyo/BindingSupport",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/BindingSupport.js",
    "contents": "/**\n* Exports the {@link module:enyo/BindingSupport~BindingSupport} mixin\n* @module enyo/BindingSupport\n*/\n\nrequire('enyo');\n\nvar\n\tkind = require('./kind'),\n\tutils = require('./utils');\n\nvar\n\tBinding = require('./Binding');\n\nkind.concatenated.push('bindings');\n\n/**\n* An internally-used {@glossary mixin} that is added to {@link module:enyo/CoreObject~Object}\n* and its [subkinds]{@glossary subkind}. It includes public and protected API\n* methods for working with [bindings]{@link module:enyo/Binding~Binding}.\n*\n* @mixin\n* @protected\n*/\nvar BindingSupport = {\n\t\n\t/**\n\t* @private\n\t*/\n\tname: 'BindingSupport',\n\t\n\t/**\n\t* @private\n\t*/\n\t_bindingSupportInitialized: false,\n\t\n\t/**\n\t* Imperatively creates a [binding]{@link module:enyo/Binding~Binding}. Merges a variable\n\t* number of [hashes]{@glossary Object} and instantiates a binding that\n\t* will have its [owner]{@link module:enyo/Binding~Binding#owner} property set to the callee\n\t* (the current {@link module:enyo/CoreObject~Object}). Bindings created in this way will be\n\t* [destroyed]{@link module:enyo/Binding~Binding#destroy} when their `owner` is\n\t* [destroyed]{@link module:enyo/CoreObject~Object#destroy}.\n\t*\n\t* @param {...Object} props A variable number of [hashes]{@glossary Object} that will\n\t*\tbe merged into the properties applied to the {@link module:enyo/Binding~Binding} instance.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\tbinding: function () {\n\t\tvar args = utils.toArray(arguments)\n\t\t\t, props = utils.mixin(args)\n\t\t\t, bindings = this.bindings || (this.bindings = [])\n\t\t\t, Ctor, bnd;\n\t\t\t\n\t\tprops.owner = props.owner || this;\n\t\tCtor = props.kind = props.kind || this.defaultBindingKind || Binding.defaultBindingKind;\n\t\t\n\t\tif (this._bindingSupportInitialized) {\n\t\t\tutils.isString(Ctor) && (Ctor = props.kind = kind.constructorForKind(Ctor));\n\t\t\tbnd = new Ctor(props);\n\t\t\tbindings.push(bnd);\n\t\t\treturn bnd;\n\t\t} else bindings.push(props);\n\t\t\n\t\treturn this;\n\t},\n\t\n\t/**\n\t* Removes and [destroys]{@link module:enyo/Binding~Binding#destroy} all of, or a subset of,\n\t* the [bindings]{@link module:enyo/Binding~Binding} belonging to the callee.\n\t*\n\t* @param {module:enyo/Binding~Binding[]} [subset] - The optional [array]{@glossary Array} of\n\t*\t[bindings]{@link module:enyo/Binding~Binding} to remove.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\tclearBindings: function (subset) {\n\t\tvar bindings = subset || (this.bindings && this.bindings.slice());\n\t\tbindings.forEach(function (bnd) {\n\t\t\tbnd.destroy();\n\t\t});\n\t\t\n\t\treturn this;\n\t},\n\t\n\t/**\n\t* Removes a single {@link module:enyo/Binding~Binding} from the callee. (This does not\n\t* [destroy]{@link module:enyo/Binding~Binding#destroy} the binding.) Also removes the\n\t* [owner]{@link module:enyo/Binding~Binding#owner} reference if it is the callee.\n\t*\n\t* It should be noted that when a binding is destroyed, it is automatically\n\t* removed from its owner.\n\t*\n\t* @param {module:enyo/Binding~Binding} binding - The {@link module:enyo/Binding~Binding} instance to remove.\n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\tremoveBinding: function (binding) {\n\t\tutils.remove(binding, this.bindings);\n\t\t\n\t\tif (binding.owner === this) binding.owner = null;\n\t\t\n\t\treturn this;\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tconstructed: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tvar bindings = this.bindings;\n\t\t\tthis._bindingSupportInitialized = true;\n\t\t\tbindings && (this.bindings = []) && bindings.forEach(function (def) {\n\t\t\t\tthis.binding(def);\n\t\t\t}, this);\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\t\n\t/**\n\t* @private\n\t*/\n\tdestroy: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tsup.apply(this, arguments);\n\t\t\tthis.bindings && this.bindings.length && this.clearBindings();\n\t\t\tthis.bindings = null;\n\t\t};\n\t})\n};\n\nmodule.exports = BindingSupport;\n\n/**\n\tHijack the original so we can add additional default behavior.\n*/\nvar sup = kind.concatHandler\n\t, flags = {ignore: true};\n\n/**\n* @private\n*/\nkind.concatHandler = function (ctor, props, instance) {\n\tvar proto = ctor.prototype || ctor\n\t\t, kind = props && (props.defaultBindingKind || Binding.defaultBindingKind)\n\t\t, defaults = props && props.bindingDefaults;\n\t\n\tsup.call(this, ctor, props, instance);\n\tif (props.bindings) {\n\t\tprops.bindings.forEach(function (bnd) {\n\t\t\tdefaults && utils.mixin(bnd, defaults, flags);\n\t\t\tbnd.kind || (bnd.kind = kind); \n\t\t});\n\t\t\n\t\tproto.bindings = proto.bindings? proto.bindings.concat(props.bindings): props.bindings;\n\t\tdelete props.bindings;\n\t}\n};\n",
    "mtime": 1434758950000,
    "relPath": "enyo/BindingSupport",
    "requires": [
      "enyo",
      "./kind",
      "./utils",
      "./Binding"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./MixinSupport",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/MixinSupport",
    "name": "enyo/MixinSupport",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/MixinSupport.js",
    "contents": "/**\n* Exports the {@link module:enyo/MixinSupport~MixinSupport} mixin.\n* @module enyo/MixinSupport\n*/\n\nrequire('enyo');\n\n\nvar\n\tutils = require('./utils'),\n\tkind = require('./kind'),\n\tlogger = require('./logger');\n\nkind.concatenated.push('mixins');\n\nvar sup = kind.statics.extend;\n\nvar extend = kind.statics.extend = function extend (args, target) {\n\tif (utils.isArray(args)) return utils.forEach(args, function (ln) { extend.call(this, ln, target); }, this);\n\tif (typeof args == 'string') apply(target || this.prototype, args);\n\telse {\n\t\tif (args.mixins) feature(target || this, args);\n\t\n\t\t// this allows for mixins to apply mixins which...is less than ideal but possible\n\t\tif (args.name) apply(target || this.prototype, args);\n\t\telse sup.apply(this, arguments);\n\t}\n};\n\n/*\n* Applies, with safeguards, a given mixin to an object.\n*/\nfunction apply (proto, props) {\n\tvar applied = proto._mixins? (proto._mixins = proto._mixins.slice()): (proto._mixins = [])\n\t\t, name = utils.isString(props)? props: props.name\n\t\t, idx = utils.indexOf(name, applied);\n\tif (idx < 0) {\n\t\tname == props && (props = utils.getPath(name));\n\t\t// if we could not resolve the requested mixin (should never happen)\n\t\t// we throw a simple little error\n\t\t// @TODO: Normalize error format\n\t\t!props && logger.error('Could not find the mixin ' + name);\n\t\t\n\t\t// it should be noted that this ensures it won't recursively re-add the same mixin but\n\t\t// since it is possible for mixins to apply mixins the names will be out of order\n\t\t// this name is pushed on but the nested mixins are applied before this one\n\t\tname && applied.push(name);\n\t\t\n\t\tprops = utils.clone(props);\n\t\t\n\t\t// we need to temporarily move the constructor if it has one so it\n\t\t// will override the correct method - this is a one-time permanent\n\t\t// runtime operation so subsequent additions of the mixin don't require\n\t\t// it again\n\t\tif (props.hasOwnProperty('constructor')) {\n\t\t\tprops._constructor = props.constructor;\n\t\t\tdelete props.constructor;\n\t\t}\n\t\t\n\t\tdelete props.name;\n\t\textend(props, proto);\n\t\t\n\t\t// now put it all back the way it was\n\t\tprops.name = name;\n\t}\n}\n\nfunction feature (ctor, props) {\n\tif (props.mixins) {\n\t\tvar proto = ctor.prototype || ctor\n\t\t\t, mixins = props.mixins;\n\t\t\n\t\t// delete props.mixins;\n\t\t// delete proto.mixins;\n\t\t\n\t\tproto._mixins && (proto._mixins = proto._mixins.slice());\n\t\tutils.forEach(mixins, function (ln) { apply(proto, ln); });\n\t}\n}\n\nkind.features.push(feature);\n\n/**\n* An internally-used support {@glossary mixin} that adds API methods to aid in\n* using and applying mixins to [kinds]{@glossary kind}.\n*\n* @mixin\n* @protected\n*/\nvar MixinSupport = {\n\t\n\t/**\n\t* @private\n\t*/\n\tname: 'MixinSupport',\n\t\n\t/**\n\t* Extends the instance with the given properties.\n\t*\n\t* @param {Object} props - The property [hash]{@glossary Object} from which to extend\n\t*\tthe callee.\n\t*/\n\textend: function (props) {\n\t\tprops && apply(this, props);\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\timportProps: kind.inherit(function (sup) {\n\t\treturn function (props) {\n\t\t\tprops && props.mixins && feature(this, props);\n\t\t\t\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t})\n};\n\nmodule.exports = MixinSupport;\n",
    "mtime": 1434758950000,
    "relPath": "enyo/MixinSupport",
    "requires": [
      "enyo",
      "./utils",
      "./kind",
      "./logger"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./LinkedListNode",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/LinkedListNode",
    "name": "enyo/LinkedListNode",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/LinkedListNode.js",
    "contents": "require('enyo');\n\n/**\n* Contains the declaration for the {@link module:enyo/LinkedListNode~LinkedListNode} kind.\n* @module enyo/LinkedListNode\n*/\n\nvar\n\tkind = require('./kind'),\n\tutils = require('./utils');\n\n/**\n* An abstract linked-list node.\n*\n* @class LinkedListNode\n* @private\n*/\nmodule.exports = kind(\n\t/** @lends module:enyo/LinkedListNode~LinkedListNode.prototype */ {\n\t\n\t/**\n\t* @private\n\t*/\n\tkind: null,\n\t\n\t/**\n\t* @private\n\t*/\n\n\t\n\t/**\n\t* @private\n\t*/\n\tprev: null,\n\t\n\t/**\n\t* @private\n\t*/\n\tnext: null,\n\t\n\t/**\n\t* @private\n\t*/\n\tcopy: function () {\n\t\tvar cpy = new this.ctor();\n\t\tcpy.prev = this.prev;\n\t\tcpy.next = this.next;\n\t\treturn cpy;\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tconstructor: function (props) {\n\t\tprops && utils.mixin(this, props);\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tdestroy: function () {\n\t\t// clear reference to previous node\n\t\tthis.prev = null;\n\t\t\n\t\t// if we have a reference to our next node\n\t\t// we continue down the chain\n\t\tthis.next && this.next.destroy();\n\t\t\n\t\t// clear our reference to the next node\n\t\tthis.next = null;\n\t}\n});\n",
    "mtime": 1434758950000,
    "relPath": "enyo/LinkedListNode",
    "requires": [
      "enyo",
      "./kind",
      "./utils"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./Binding",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/Binding",
    "name": "enyo/Binding",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/Binding.js",
    "contents": "require('enyo');\n\n/**\n* Contains the declaration for the {@link module:enyo/Binding~Binding} kind.\n* @module enyo/Binding\n*/\n\nvar\n\tkind = require('./kind'),\n\tutils = require('./utils');\n\nvar bindings = [];\n\nvar DIRTY_FROM = 0x01\n\t, DIRTY_TO = 0x02;\n\n/**\n* Used to determine if an {@link module:enyo/Binding~Binding} is actually ready.\n*\n* @private\n*/\nfunction ready (binding) {\n\tvar rdy = binding.ready;\n\t\n\tif (!rdy) {\n\t\t\n\t\tvar from = binding.from || '',\n\t\t\tto = binding.to || '',\n\t\t\tsource = binding.source,\n\t\t\ttarget = binding.target,\n\t\t\towner = binding.owner,\n\t\t\ttwoWay = !binding.oneWay,\n\t\t\ttoTarget;\n\t\t\n\t\tif (typeof from != 'string') from = '';\n\t\tif (typeof to != 'string') to = '';\n\t\t\n\t\tif (!source) {\n\t\t\t\n\t\t\t// the worst case scenario here is for backward compatibility purposes\n\t\t\t// we have to at least be able to derive the source via the from string\n\t\t\tif (from[0] == '^') {\n\t\t\t\t\n\t\t\t\t// this means we're reaching for a global\n\t\t\t\tvar fromParts = from.split('.');\n\t\t\t\tfrom = fromParts.pop();\n\t\t\t\tsource = utils.getPath.call(global, fromParts.join('.').slice(1));\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\tsource = owner;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tif (!target) {\n\t\t\t\n\t\t\t// same worst case as above, for backwards compatibility purposes\n\t\t\t// we have to at least be able to derive the target via the to string\n\t\t\tif (to[0] == '^') {\n\t\t\t\t\n\t\t\t\t// this means we're reaching for a global\n\t\t\t\tvar toParts = to.split('.');\n\t\t\t\tto = toParts.pop();\n\t\t\t\ttarget = utils.getPath.call(global, toParts.join('.').slice(1));\n\t\t\t} else {\n\t\t\t\ttarget = owner;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// we do this so we don't overwrite the originals in case we need to reset later\n\t\tbinding._target = target;\n\t\tbinding._source = source;\n\t\tbinding._from = from[0] == '.'? from.slice(1): from;\n\t\tbinding._to = to[0] == '.'? to.slice(1): to;\n\t\t\n\t\tif (!twoWay) {\n\t\t\ttoTarget = binding._to.split('.');\n\t\t\tif (toTarget.length > 2) {\n\t\t\t\ttoTarget.pop();\n\t\t\t\tbinding._toTarget = toTarget.join('.');\n\t\t\t}\n\t\t}\n\t\t\n\t\t// now our sanitization\n\t\trdy = !! (\n\t\t\t(source && (typeof source == 'object')) &&\n\t\t\t(target && (typeof target == 'object')) &&\n\t\t\t(from) &&\n\t\t\t(to)\n\t\t);\n\t}\n\t\n\t/*jshint -W093 */\n\treturn (binding.ready = rdy);\n\t/*jshint +W093 */\n}\n\n/**\n* The details for an {@link module:enyo/Binding~Binding#transform} [function]{@glossary Function}, \n* including the available parameters and how they can be used.\n* \n* @callback module:enyo/Binding~Binding~Transform\n* @param {*} value - The value being synchronized.\n* @param {Number} direction - The direction of synchronization; will be either\n* \t1 (source value has changed and will be written to target) or 2 (target\n* \tvalue has changed and will be written to source).\n* @param {Object} binding - A reference to the associated [binding]{@link module:enyo/Binding~Binding}. In cases \n* \twhere the binding should be interrupted and not propagate the synchronization at all, call\n* \tthe [stop()]{@link module:enyo/Binding~Binding#stop} method on the passed-in binding reference.\n*/\n\n/**\n* {@link module:enyo/Binding~Binding} is a mechanism used to keep properties synchronized. A \n* binding may be used to link two properties on different\n* [objects]{@glossary Object}, or even two properties on the same object.\n* Once a binding has been established, it will wait for change notifications;\n* when a notification arrives, the binding will synchronize the value between\n* the two ends. Note that bindings may be either\n* [one-way]{@link module:enyo/Binding~Binding#oneWay} (the default) or\n* [two-way]{@link module:enyo/Binding~Binding#oneWay}.\n* \n* Usually, you will not need to create Binding objects arbitrarily, but will\n* instead rely on the public [BindingSupport API]{@link module:enyo/BindingSupport~BindingSupport},\n* which is applied to [Object]{@link module:enyo/CoreObject~Object} and so is available on\n* all of its [subkinds]{@glossary subkind}.\n* \n* @class Binding\n* @public\n*/\nexports = module.exports = kind(\n\t/** @lends module:enyo/Binding~Binding.prototype */ {\n\t\n\tname: 'enyo.Binding',\n\t\n\t/**\n\t* @private\n\t*/\n\tkind: null,\n\t\n\t/**\n\t* @private\n\t*/\n\n\t\n\t/**\n\t* If a [binding]{@link module:enyo/Binding~Binding} is one-way, this flag should be `true` (the default). \n\t* If this flag is set to `false`, the binding will be two-way.\n\t*\n\t* @type {Boolean}\n\t* @default true\n\t* @public\n\t*/\n\toneWay: true,\n\t\n\t/**\n\t* If the [binding]{@link module:enyo/Binding~Binding} was able to resolve both ends (i.e., its \n\t* [source]{@link module:enyo/Binding~Binding#source} and [target]{@link module:enyo/Binding~Binding#target} \n\t* [objects]{@glossary Object}), this value will be `true`. Setting this manually will\n\t* have undesirable effects.\n\t*\n\t* @type {Boolean}\n\t* @default false\n\t* @public\n\t*/\n\tconnected: false,\n\t\n\t/**\n\t* This property is used extensively for various purposes within a\n\t* [binding]{@link module:enyo/Binding~Binding}. One primary purpose is to serve as a root\n\t* [object]{@glossary Object} from which to\tsearch for the binding's ends (the\n\t* [source]{@link module:enyo/Binding~Binding#source} and/or [target]{@link module:enyo/Binding~Binding#target}).\n\t* If the owner created the binding, it will also be responsible for destroying \n\t* it (automatically).\n\t*\n\t* @type {module:enyo/CoreObject~Object}\n\t* @default null\n\t* @public\n\t*/\n\towner: null,\n\t\n\t/**\n\t* By default, a [binding]{@link module:enyo/Binding~Binding} will attempt to connect to both ends \n\t* ([source]{@link module:enyo/Binding~Binding#source} and [target]{@link module:enyo/Binding~Binding#target}). If this \n\t* process should be deferred, set this flag to `false`.\n\t*\n\t* @type {Boolean}\n\t* @default true\n\t* @public\n\t*/\n\tautoConnect: true,\n\t\n\t/**\n\t* By default, a [binding]{@link module:enyo/Binding~Binding} will attempt to synchronize its values from \n\t* its [source]{@link module:enyo/Binding~Binding#source} to its [target]{@link module:enyo/Binding~Binding#target}. If \n\t* this process should be deferred, set this flag to `false`.\n\t* \n\t* @type {Boolean}\n\t* @default true\n\t* @public\n\t*/\n\tautoSync: true,\n\t\n\t/**\n\t* Set this only to a reference for an [object]{@glossary Object} to use\n\t* as the source for the [binding]{@link module:enyo/Binding~Binding}. If this is not a\n\t* [bindable]{@link module:enyo/BindingSupport~BindingSupport} object, the source will be derived\n\t* from the [from]{@link module:enyo/Binding~Binding#from} property during initialization.\n\t* \n\t* @type {Object}\n\t* @default null\n\t* @public\n\t*/\n\tsource: null,\n\t\n\t/**\n\t* Set this only to a reference for an [object]{@glossary Object} to use\n\t* as the target for the [binding]{@link module:enyo/Binding~Binding}. If this is not a\n\t* [bindable]{@link module:enyo/BindingSupport~BindingSupport} object, the target will will be\n\t* derived from the [to]{@link module:enyo/Binding~Binding#to} property during initialization.\n\t* \n\t* @type {Object}\n\t* @default null\n\t* @public\n\t*/\n\ttarget: null,\n\t\n\t/**\n\t* A path in which the property of the [source]{@link module:enyo/Binding~Binding#source} to\n\t* bind from may be found. If the source is explicitly provided and the path\n\t* is relative (i.e., it begins with a `\".\"`), it is relative to the source;\n\t* otherwise, it is relative to the [owner]{@link module:enyo/Binding~Binding#owner} of the\n\t* [binding]{@link module:enyo/Binding~Binding}. To have a binding be evaluated from the\n\t* global scope, prefix the path with a `\"^\"`. If the source and the `\"^\"`\n\t* are used in tandem, the `\"^\"` will be ignored and the path will be assumed\n\t* to be relative to the provided source.\n\t* \n\t* @type {String}\n\t* @default null\n\t* @public\n\t*/\n\tfrom: null,\n\t\n\t/**\n\t* The `dirty` property represents the changed value state of both the property designated by\n\t* the [from]{@link module:enyo/Binding~Binding#from} path and the property designated by the \n\t* [to]{@link module:enyo/Binding~Binding#to} path.\n\t*\n\t* @type {Number}\n\t* @default module:enyo/Binding#DIRTY_FROM\n\t* @public\n\t*/\n\tdirty: DIRTY_FROM,\n\t\n\t/**\n\t* A path in which the property of the [target]{@link module:enyo/Binding~Binding#target} to\n\t* bind from may be found. If the target is explicitly provided and the path\n\t* is relative (i.e., it begins with a `\".\"`), it is relative to the target;\n\t* otherwise, it is relative to the owner of the [binding]{@link module:enyo/Binding~Binding}.\n\t* To have a binding be evaluated from the global scope, prefix the path with\n\t* a `\"^\"`. If the target and the `\"^\"` are used in tandem, the `\"^\"` will be\n\t* ignored and the path will be assumed to be relative to the provided target.\n\t* \n\t* @type {String}\n\t* @default null\n\t* @public\n\t*/\n\tto: null,\n\n\t/**\n\t* Set this to a [function]{@glossary Function} or the name of a method on\n\t* the [owner]{@link module:enyo/Binding~Binding#owner} of this [binding]{@link module:enyo/Binding~Binding}.\n\t* The transform is used to programmatically modify the value being synchronized.\n\t* See {@link module:enyo/Binding~Binding~Transform} for detailed information on the parameters\n\t* that are available to `transform`.\n\t* \n\t* @type {module:enyo/Binding~Binding~Transform}\n\t* @default null\n\t* @public\n\t*/\n\ttransform: null,\n\t\n\t/**\n\t* Indicates whether the [binding]{@link module:enyo/Binding~Binding} is currently connected.\n\t*\n\t* @returns {Boolean} `true` if connected; otherwise, `false`.\n\t* @public\n\t*/\n\tisConnected: function () {\n\t\tvar from = this._from,\n\t\t\tto = this.oneWay ? (this._toTarget || this._to) : this._to,\n\t\t\tsource = this._source,\n\t\t\ttarget = this._target,\n\t\t\ttoChain,\n\t\t\tfromChain;\n\t\t\t\n\t\tif (from && to && source && target) {\n\t\t\tif (!this.oneWay || this._toTarget) toChain = target.getChains()[to];\n\t\t\tfromChain = source.getChains()[from];\n\t\t\t\n\t\t\treturn this.connected\n\t\t\t\t&& (fromChain ? fromChain.isConnected() : true)\n\t\t\t\t&& (toChain ? toChain.isConnected() : true);\n\t\t}\n\t\t\n\t\treturn false;\n\t},\n\t\n\t/**\n\t* Causes a single propagation attempt to fail. Typically not called outside\n\t* the scope of a [transform]{@link module:enyo/Binding~Binding#transform}.\n\t* \n\t* @public\n\t*/\n\tstop: function () {\n\t\tthis._stop = true;\n\t},\n\t\n\t/**\n\t* Indicates whether the [binding]{@link module:enyo/Binding~Binding} is actually ready.\n\t* \n\t* @returns {Boolean} `true` if ready; otherwise, `false`.\n\t* @public\n\t*/\n\tisReady: function () {\n\t\treturn this.ready || ready(this);\n\t},\n\t\n\t/**\n\t* Resets all properties to their original state.\n\t* \n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\treset: function () {\n\t\tthis.disconnect();\n\t\tthis.ready = null;\n\t\tthis._source = this._target = this._to = this._from = this._toTarget = null;\n\t\treturn this;\n\t},\n\t\n\t/**\n\t* Rebuilds the entire [binding]{@link module:enyo/Binding~Binding}. Will synchronize if it is able to \n\t* connect and the [autoSync]{@link module:enyo/Binding~Binding#autoSync} flag is `true`.\n\t* \n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\trebuild: function () {\n\t\treturn this.reset().connect();\n\t},\n\t\n\t/**\n\t* Connects the ends (i.e., the [source]{@link module:enyo/Binding~Binding#source} and\n\t* [target]{@link module:enyo/Binding~Binding#target}) of the [binding]{@link module:enyo/Binding~Binding}. While you\n\t* typically won't need to call this method, it is safe to call even when the ends are\n\t* already established. Note that if one or both of the ends does become connected and the\n\t* [autoSync]{@link module:enyo/Binding~Binding#autoSync} flag is `true`, the ends will automatically be\n\t* synchronized.\n\t* \n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\tconnect: function () {\n\t\tif (!this.isConnected()) {\n\t\t\tif (this.isReady()) {\n\t\t\t\tthis._source.observe(this._from, this._sourceChanged, this, {priority: true});\n\t\t\t\t\n\t\t\t\t// for two-way bindings we register to observe changes\n\t\t\t\t// from the target\n\t\t\t\tif (!this.oneWay) this._target.observe(this._to, this._targetChanged, this);\n\t\t\t\telse if (this._toTarget) {\n\t\t\t\t\tthis._target.observe(this._toTarget, this._toTargetChanged, this, {priority: true});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// we flag it as having been connected\n\t\t\t\tthis.connected = true;\n\t\t\t\tif (this.isConnected() && this.autoSync) this.sync(true);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn this;\n\t},\n\t\n\t/**\n\t* Disconnects from the ends (i.e., the [source]{@link module:enyo/Binding~Binding#source} and \n\t* [target]{@link module:enyo/Binding~Binding#target}) if a connection exists at either end. This method \n\t* will most likely not need to be called directly.\n\t* \n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\tdisconnect: function () {\n\t\tif (this.isConnected()) {\n\t\t\tthis._source.unobserve(this._from, this._sourceChanged, this);\n\t\t\t\n\t\t\t// for two-way bindings we unregister the observer from\n\t\t\t// the target as well\n\t\t\tif (!this.oneWay) this._target.unobserve(this._to, this._targetChanged, this);\n\t\t\telse if (this._toTarget) {\n\t\t\t\tthis._target.unobserve(this._toTarget, this._toTargetChanged, this);\n\t\t\t}\n\t\t\t\n\t\t\tthis.connected = false;\n\t\t}\n\t\t\n\t\treturn this;\n\t},\n\t\n\t/**\n\t* Synchronizes values from the [source]{@link module:enyo/Binding~Binding#source} to the\n\t* [target]{@link module:enyo/Binding~Binding#target}. This usually will not need to be called manually.\n\t* [Two-way bindings]{@link module:enyo/Binding~Binding#oneWay} will automatically synchronize from the\n\t* target end once they are connected.\n\t* \n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\tsync: function (force) {\n\t\tvar source = this._source,\n\t\t\ttarget = this._target,\n\t\t\tfrom = this._from,\n\t\t\tto = this._to,\n\t\t\txform = this.getTransform(),\n\t\t\tval;\n\t\t\n\t\tif (this.isReady() && this.isConnected()) {\n\t\t\t\t\n\t\t\tswitch (this.dirty || (force && DIRTY_FROM)) {\n\t\t\tcase DIRTY_TO:\n\t\t\t\tval = target.get(to);\n\t\t\t\tif (xform) val = xform.call(this.owner || this, val, DIRTY_TO, this);\n\t\t\t\tif (!this._stop) source.set(from, val, {create: false});\n\t\t\t\tbreak;\n\t\t\tcase DIRTY_FROM:\n\t\t\t\t\n\t\t\t// @TODO: This should never need to happen but is here just in case\n\t\t\t// it is ever arbitrarily called not having been dirty?\n\t\t\t// default:\n\t\t\t\tval = source.get(from);\n\t\t\t\tif (xform) val = xform.call(this.owner || this, val, DIRTY_FROM, this);\n\t\t\t\tif (!this._stop) target.set(to, val, {create: false});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis.dirty = null;\n\t\t\tthis._stop = null;\n\t\t}\n\t\t\n\t\treturn this;\n\t},\n\t\n\t/**\n\t* Releases all of the [binding's]{@link module:enyo/Binding~Binding} parts and unregisters its \n\t* [observers]{@link module:enyo/ObserverSupport~ObserverSupport}. Typically, this method will not need to be called \n\t* directly unless the binding was created without an [owner]{@link module:enyo/Binding~Binding#owner}.\n\t* \n\t* @returns {this} The callee for chaining.\n\t* @public\n\t*/\n\tdestroy: function () {\n\t\tvar owner = this.owner,\n\t\t\tidx;\n\t\t\n\t\tthis.disconnect();\n\t\tthis.owner = null;\n\t\tthis.source = this._source = null;\n\t\tthis.target = this._target = null;\n\t\tthis.ready = null;\n\t\tthis.destroyed = true;\n\t\t\n\t\t// @todo: remove me or postpone operation?\n\t\tidx = bindings.indexOf(this);\n\t\tif (idx > -1) bindings.splice(idx, 1);\n\t\t\n\t\tif (owner && !owner.destroyed) owner.removeBinding(this);\n\t\t\n\t\treturn this;\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tgetTransform: function () {\n\t\treturn this._didInitTransform ? this.transform : (function (bnd) {\n\t\t\tbnd._didInitTransform = true;\n\t\t\t\n\t\t\tvar xform = bnd.transform,\n\t\t\t\towner = bnd.owner,\n\t\t\t\txformOwner = owner && owner.bindingTransformOwner;\n\t\t\t\n\t\t\tif (xform) {\n\t\t\t\tif (typeof xform == 'string') {\n\t\t\t\t\tif (xformOwner && xformOwner[xform]) {\n\t\t\t\t\t\txform = xformOwner[xform];\n\t\t\t\t\t} else if (owner && owner[xform]) {\n\t\t\t\t\t\txform = owner[xform];\n\t\t\t\t\t} else {\n\t\t\t\t\t\txform = utils.getPath.call(global, xform);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t/*jshint -W093 */\n\t\t\t\treturn (bnd.transform = (typeof xform == 'function' ? xform : null));\n\t\t\t\t/*jshint +W093 */\n\t\t\t}\n\t\t})(this);\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tconstructor: function (props) {\n\t\tbindings.push(this);\n\t\t\n\t\tif (props) utils.mixin(this, props);\n\t\t\n\t\tif (!this.euid) this.euid = utils.uid('b');\n\t\tif (this.autoConnect) this.connect();\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\t_sourceChanged: function (was, is, path) {\n\t\t// @TODO: Should it...would it benefit from using these passed in values?\n\t\tthis.dirty = this.dirty == DIRTY_TO ? null : DIRTY_FROM;\n\t\treturn this.dirty == DIRTY_FROM && this.sync();\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\t_targetChanged: function (was, is, path) {\n\t\t// @TODO: Same question as above, it seems useful but would it affect computed\n\t\t// properties or stale values?\n\t\tthis.dirty = this.dirty == DIRTY_FROM ? null : DIRTY_TO;\n\t\treturn this.dirty == DIRTY_TO && this.sync();\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\t_toTargetChanged: function (was, is, path) {\n\t\tthis.dirty = DIRTY_FROM;\n\t\tthis.reset().connect();\n\t}\n});\n\n/**\n* Retrieves a [binding]{@link module:enyo/Binding~Binding} by its global id.\n*\n* @param {String} euid - The [Enyo global id]{@glossary EUID} by which to retrieve a \n*\t[binding]{@link module:enyo/Binding~Binding}.\n* @returns {module:enyo/Binding~Binding|undefined} A reference to the binding if the id\n*\tis found; otherwise, it will return [undefined]{@glossary undefined}.\n* \n* @static\n* @public\n*/\nexports.find = function (euid) {\n\treturn bindings.find(function (ln) {\n\t\treturn ln.euid == euid;\n\t});\n};\n\n/**\n* All {@link module:enyo/Binding~Binding} instances are stored in this list and may be retrieved via the\n* {@link module:enyo/Binding.find} method using an {@link module:enyo/Binding~Binding#id} identifier.\n*\n* @type {module:enyo/Binding~Binding[]}\n* @default []\n* @public\n*/\nexports.bindings = bindings;\n\n/**\n* Possible value of the [dirty]{@link module:enyo/Binding~Binding#dirty} property, indicating that the value \n* of the [binding source]{@link module:enyo/Binding~Binding#source} has changed.\n* \n* @static\n* @public\n*/\nexports.DIRTY_FROM = DIRTY_FROM;\n\n/**\n* Possible value of the [dirty]{@link module:enyo/Binding~Binding#dirty} property, indicating that the value\n* of the [binding target]{@link module:enyo/Binding~Binding#target} has changed.\n* \n* @static\n* @public\n*/\nexports.DIRTY_TO = DIRTY_TO;\n\n/**\n* The default [kind]{@glossary kind} that provides [binding]{@link module:enyo/Binding~Binding} \n* functionality.\n* \n* @static\n* @public\n*/\nexports.defaultBindingKind = exports;\n",
    "mtime": 1434758950000,
    "relPath": "enyo/Binding",
    "requires": [
      "enyo",
      "./kind",
      "./utils"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./ComputedSupport",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/ComputedSupport",
    "name": "enyo/ComputedSupport",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/ComputedSupport.js",
    "contents": "/**\n* Exports the {@link module:enyo/ComputedSupport~ComputedSupport} mixin.\n* @module enyo/ComputedSupport\n*/\n\nrequire('enyo');\n\nvar\n\tkind = require('./kind'),\n\tutils = require('./utils');\n\nvar extend = kind.statics.extend;\n\t\nkind.concatenated.push('computed');\n\nfunction getComputedValue (obj, path) {\n\tvar cache = obj._getComputedCache(path)\n\t\t, isCached = obj._isComputedCached(path);\n\t\n\t// in the end, for efficiency and completeness in other situations\n\t// it is better to know the returned value of all computed properties\n\t// but in cases where they are set as cached we will sometimes use\n\t// that value\n\tif (cache.dirty || cache.dirty === undefined) {\n\t\tisCached && (cache.dirty = false);\n\t\tcache.previous = cache.value;\n\t\tcache.value = obj[path]();\n\t}\n\t\n\treturn cache.value;\n}\n\nfunction queueComputed (obj, path) {\n\tvar queue = obj._computedQueue || (obj._computedQueue = [])\n\t\t, deps = obj._computedDependencies[path];\n\t\t\n\tif (deps) {\n\t\tfor (var i=0, dep; (dep=deps[i]); ++i) {\n\t\t\tif (!queue.length || -1 == queue.indexOf(dep)) queue.push(dep);\n\t\t}\n\t}\n}\n\nfunction flushComputed (obj) {\n\tvar queue = obj._computedQueue;\n\tobj._computedQueue = null;\n\tif (queue && obj.isObserving()) {\n\t\tfor (var i=0, ln; (ln=queue[i]); ++i) {\n\t\t\tobj.notify(ln, obj._getComputedCache(ln).value, getComputedValue(obj, ln));\n\t\t}\n\t}\n}\n\n/**\n* A {@glossary mixin} that adds API methods to support\n* [computed properties]{@glossary computed_property}. Unlike other support mixins,\n* this mixin does not need to be explicitly included by a [kind]{@glossary kind}. If the\n* `computed` [array]{@glossary Array} is found in a kind definition, this mixin will\n* automatically be included.\n*\n* @mixin\n* @public\n*/\nvar ComputedSupport = {\n\t/**\n\t* @private\n\t*/\n\tname: 'ComputedSuport',\n\t\n\t/**\n\t* @private\n\t*/\n\t_computedRecursion: 0,\n\t\n\t/**\n\t* Primarily intended for internal use, this method determines whether the\n\t* given path is a known [computed property]{@glossary computed_property}.\n\t*\n\t* @param {String} path - The property or path to test.\n\t* @returns {Boolean} Whether or not the `path` is a\n\t*\t[computed property]{@glossary computed_property}.\n\t* @public\n\t*/\n\tisComputed: function (path) {\n\t\t// if it exists it will be explicitly one of these cases and it is cheaper than hasOwnProperty\n\t\treturn this._computed && (this._computed[path] === true || this._computed[path] === false);\n\t},\n\t\n\t/**\n\t* Primarily intended for internal use, this method determines whether the\n\t* given path is a known dependency of a\n\t* [computed property]{@glossary computed_property}.\n\t*\n\t* @param {String} path - The property or path to test.\n\t* @returns {Boolean} Whether or not the `path` is a dependency of a\n\t*\t[computed property]{@glossary computed_property}.\n\t* @public\n\t*/\n\tisComputedDependency: function (path) {\n\t\treturn !! (this._computedDependencies? this._computedDependencies[path]: false);\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tget: kind.inherit(function (sup) {\n\t\treturn function (path) {\n\t\t\treturn this.isComputed(path)? getComputedValue(this, path): sup.apply(this, arguments);\n\t\t};\n\t}),\n\t\n\t/**\n\t* @private\n\t*/\n\tset: kind.inherit(function (sup) {\n\t\treturn function (path) {\n\t\t\t// we do not accept parameters for computed properties\n\t\t\treturn this.isComputed(path)? this: sup.apply(this, arguments);\n\t\t};\n\t}),\n\t\n\t/**\n\t* @private\n\t*/\n\tnotifyObservers: function () {\n\t\treturn this.notify.apply(this, arguments);\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tnotify: kind.inherit(function (sup) {\n\t\treturn function (path, was, is) {\n\t\t\tthis.isComputedDependency(path) && queueComputed(this, path);\n\t\t\tthis._computedRecursion++;\n\t\t\tsup.apply(this, arguments);\n\t\t\tthis._computedRecursion--;\n\t\t\tthis._computedQueue && this._computedRecursion === 0 && flushComputed(this);\n\t\t\treturn this;\n\t\t};\n\t}),\n\t\n\t/**\n\t* @private\n\t*/\n\t_isComputedCached: function (path) {\n\t\treturn this._computed[path];\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\t_getComputedCache: function (path) {\n\t\tvar cache = this._computedCache || (this._computedCache = {});\n\t\treturn cache[path] || (cache[path] = {});\n\t}\n};\n\nmodule.exports = ComputedSupport;\n\n/*\n* Hijack the original so we can add additional default behavior.\n*/\nvar sup = kind.concatHandler;\n\n// @NOTE: It seems like a lot of work but it really won't happen that much and the more\n// we push to kind-time the better for initialization time\n\n/**\n* @private\n*/\nkind.concatHandler = function (ctor, props, instance) {\n\n\tsup.call(this, ctor, props, instance);\n\n\t// only matters if there are computed properties to manage\n\tif (props.computed) {\n\t\t\n\t\tvar proto = ctor.prototype || ctor\n\t\t\t, computed = proto._computed? Object.create(proto._computed): {}\n\t\t\t, dependencies = proto._computedDependencies? Object.create(proto._computedDependencies): {};\n\t\t\n\t\t// if it hasn't already been applied we need to ensure that the prototype will\n\t\t// actually have the computed support mixin present, it will not apply it more\n\t\t// than once to the prototype\n\t\textend(ComputedSupport, proto);\n\t\n\t\t// @NOTE: This is the handling of the original syntax provided for computed properties in 2.3.ish...\n\t\t// All we do here is convert it to a structure that can be used for the other scenario and preferred\n\t\t// computed declarations format\n\t\tif (!props.computed || !(props.computed instanceof Array)) {\n\t\t\t(function () {\n\t\t\t\tvar tmp = [], deps, name, conf;\n\t\t\t\t// here is the slow iteration over the properties...\n\t\t\t\tfor (name in props.computed) {\n\t\t\t\t\t// points to the dependencies of the computed method\n\t\t\t\t\tdeps = props.computed[name];\n\t\t\t\t\t/*jshint -W083 */\n\t\t\t\t\tconf = deps && deps.find(function (ln) {\n\t\t\t\t\t\t// we deliberately remove the entry here and forcibly return true to break\n\t\t\t\t\t\treturn typeof ln == 'object'? (utils.remove(deps, ln) || true): false;\n\t\t\t\t\t});\n\t\t\t\t\t/*jshint +W083 */\n\t\t\t\t\t// create a single entry now for the method/computed with all dependencies\n\t\t\t\t\ttmp.push({method: name, path: deps, cached: conf? conf.cached: null});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// note that we only do this one so even for a mixin that is evaluated several\n\t\t\t\t// times this would only happen once\n\t\t\t\tprops.computed = tmp;\n\t\t\t}());\n\t\t}\n\t\t\n\t\tvar addDependency = function (path, dep) {\n\t\t\t// its really an inverse look at the original\n\t\t\tvar deps;\n\t\t\t\n\t\t\tif (dependencies[path] && !dependencies.hasOwnProperty(path)) dependencies[path] = dependencies[path].slice();\n\t\t\tdeps = dependencies[path] || (dependencies[path] = []);\n\t\t\tdeps.push(dep);\n\t\t};\n\t\t\n\t\t// now we handle the new computed properties the way we intended to\n\t\tfor (var i=0, ln; (ln=props.computed[i]); ++i) {\n\t\t\t// if the entry already exists we are merely updating whether or not it is\n\t\t\t// now cached\n\t\t\tcomputed[ln.method] = !! ln.cached;\n\t\t\t// we must now look to add an entry for any given dependencies and map them\n\t\t\t// back to the computed property they will trigger\n\t\t\t/*jshint -W083 */\n\t\t\tif (ln.path && ln.path instanceof Array) ln.path.forEach(function (dep) { addDependency(dep, ln.method); });\n\t\t\t/*jshint +W083 */\n\t\t\telse if (ln.path) addDependency(ln.path, ln.method);\n\t\t}\n\t\t\n\t\t// arg, free the key from the properties so it won't be applied later...\n\t\t// delete props.computed;\n\t\t// make sure to reassign the correct items to the prototype\n\t\tproto._computed = computed;\n\t\tproto._computedDependencies = dependencies;\n\t}\n};\n",
    "mtime": 1434758950000,
    "relPath": "enyo/ComputedSupport",
    "requires": [
      "enyo",
      "./kind",
      "./utils"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./ApplicationSupport",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/ApplicationSupport",
    "name": "enyo/ApplicationSupport",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/ApplicationSupport.js",
    "contents": "/**\n* Exports the {@link module:enyo/ApplicationSupport~ApplicationSupport} mixin.\n* @module enyo/ApplicationSupport\n*/\n\nrequire('enyo');\n\nvar kind = require('./kind');\n\n/**\n* An internally-used support {@glossary mixin} that is applied to all\n* [components]{@link module:enyo/Component~Component} of an {@link module:enyo/Application~Application} instance\n* (and to their components, recursively). This mixin adds an `app` property to\n* each component -- a local reference to the `Application` instance that\n* the component belongs to.\n* \n* @mixin\n* @protected\n*/\nvar ApplicationSupport = {\n\n\t/**\n\t* @private\n\t*/\n\tname: 'ApplicationSupport',\n\n\t/**\n\t* @private\n\t*/\n\tadjustComponentProps: kind.inherit(function (sup) {\n\t\treturn function (props) {\n\t\t\tprops.app = props.app || this.app;\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\n\t/**\n\t* @private\n\t*/\n\tdestroy: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\t// release the reference to the application\n\t\t\tthis.app = null;\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t})\n\n};\n\nmodule.exports = ApplicationSupport;\n",
    "mtime": 1434758950000,
    "relPath": "enyo/ApplicationSupport",
    "requires": [
      "enyo",
      "./kind"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./ComponentBindingSupport",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/ComponentBindingSupport",
    "name": "enyo/ComponentBindingSupport",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/ComponentBindingSupport.js",
    "contents": "/**\n* Exports the {@link module:enyo/ComponentBindingSupport~ComponentBindingSupport} mixin.\n* @module enyo/ComponentBindingSupport\n*/\n\nrequire('enyo');\n\nvar\n\tkind = require('./kind');\n\n/**\n* An internally-used {@glossary mixin} applied to {@link module:enyo/Component~Component}\n* instances to better support [bindings]{@link module:enyo/Binding~Binding}.\n*\n* @mixin\n* @protected\n*/\nvar ComponentBindingSupport = {\n\t\n\t/**\n\t* @private\n\t*/\n\tname: 'ComponentBindingSupport',\n\t\n\t/**\n\t* @private\n\t*/\n\tadjustComponentProps: kind.inherit(function (sup) {\n\t\treturn function (props) {\n\t\t\tsup.apply(this, arguments);\n\t\t\tprops.bindingTransformOwner || (props.bindingTransformOwner = this.getInstanceOwner());\n\t\t};\n\t})\n};\n\nmodule.exports = ComponentBindingSupport;\n",
    "mtime": 1434758950000,
    "relPath": "enyo/ComponentBindingSupport",
    "requires": [
      "enyo",
      "./kind"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./MultipleDispatchSupport",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/MultipleDispatchSupport",
    "name": "enyo/MultipleDispatchSupport",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/MultipleDispatchSupport.js",
    "contents": "/**\n* Exports the {@link module:enyo/MultipleDispatchSupport~MultipleDispatchSupport} mixin.\n* @module enyo/MultipleDispatchSupport\n*/\n\nrequire('enyo');\n\nvar\n\tkind = require('./kind'),\n\tutils = require('./utils');\n\n/**\n* A collection of methods to allow a single {@link module:enyo/Component~Component} to\n* [dispatch]{@link module:enyo/Component~Component#dispatchEvent} a single {@glossary event} to\n* multiple targets. The events are synchronously propagated in the order in\n* which the targets are encountered. Note that this {@glossary mixin} is\n* already applied to a base [kind]{@glossary kind},\n* {@link module:enyo/MultipleDispatchComponent~MultipleDispatchComponent}.\n*\n* @mixin\n* @public\n*/\nvar MultipleDispatchSupport = {\n\t\n\t/**\n\t* @private\n\t*/\n\tname: 'MultipleDispatchSupport',\n\t\n\t/**\n\t* Adds a target for dispatching.\n\t*\n\t* @param {module:enyo/Component~Component} component - The {@link module:enyo/Component~Component} to add as a dispatch target.\n\t* @public\n\t*/\n\taddDispatchTarget: function (component) {\n\t\tvar dt = this._dispatchTargets;\n\t\tif (component && !~utils.indexOf(component, dt)) {\n\t\t\tdt.push(component);\n\t\t}\n\t},\n\t/**\n\t* Removes a target from dispatching.\n\t*\n\t* @param {module:enyo/Component~Component} component - The {@link module:enyo/Component~Component} to remove as a dispatch\n\t*\ttarget.\n\t* @public\n\t*/\n\tremoveDispatchTarget: function (component) {\n\t\tvar dt = this._dispatchTargets, i;\n\t\ti = utils.indexOf(component, dt);\n\t\tif (i > -1) {\n\t\t\tdt.splice(i, 1);\n\t\t}\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tbubbleUp: kind.inherit(function (sup) {\n\t\treturn function (name, event, sender) {\n\t\t\tif (this._dispatchDefaultPath) {\n\t\t\t\tsup.apply(this, arguments);\n\t\t\t}\n\t\t\tvar dt = this._dispatchTargets;\n\t\t\tfor (var i=0, t; (t=dt[i]); ++i) {\n\t\t\t\tif (t && !t.destroyed) {\n\t\t\t\t\tt.dispatchBubble(name, event, sender);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}),\n\t\n\t/**\n\t* @private\n\t*/\n\townerChanged: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tsup.apply(this, arguments);\n\t\t\tvar o = this.owner;\n\t\t\tthis._dispatchDefaultPath = !! o;\n\t\t};\n\t}),\n\t\n\t/**\n\t* @private\n\t*/\n\tconstructor: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tthis._dispatchTargets = [];\n\t\t\treturn sup.apply(this, arguments);\n\t\t};\n\t}),\n\t\n\t/**\n\t* @private\n\t*/\n\tdestroy: kind.inherit(function (sup) {\n\t\treturn function () {\n\t\t\tthis._dispatchTargets = null;\n\t\t\tsup.apply(this, arguments);\n\t\t};\n\t}),\n\t\n\t/**\n\t* @private\n\t*/\n\t_dispatchDefaultPath: false\n};\n\nmodule.exports = MultipleDispatchSupport;\n",
    "mtime": 1434758950000,
    "relPath": "enyo/MultipleDispatchSupport",
    "requires": [
      "enyo",
      "./kind",
      "./utils"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./AccessibilitySupport",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/AccessibilitySupport",
    "name": "enyo/AccessibilitySupport",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/AccessibilitySupport",
    "isPackage": true,
    "packageFile": "/Users/jason/Git/bootplate/lib/enyo/lib/AccessibilitySupport/package.json",
    "mtime": {
      "/Users/jason/Git/bootplate/lib/enyo/lib/AccessibilitySupport/package.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo/lib/AccessibilitySupport/AccessibilitySupport.js": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo/lib/AccessibilitySupport/AccessibilitySupport.css": 1434758950000
    },
    "json": {
      "main": "AccessibilitySupport.js",
      "styles": [
        "AccessibilitySupport.css"
      ]
    },
    "main": "/Users/jason/Git/bootplate/lib/enyo/lib/AccessibilitySupport/AccessibilitySupport.js",
    "contents": "var\n\tkind = require('../kind');\n\n/**\n* @name AccessibilityMixin\n* @mixin\n*/\nmodule.exports = {\n\n\t/**\n\t* @private\n\t*/\n\tname: 'enyo.AccessibilitySupport',\n\n\t/**\n\t* AccessibilityLabel is used for accessibility voice readout.\n\t* If accessibilityLabel is set, screen reader reads the label when control is focused.\n\t*\n\t* @type {String}\n\t* @default ''\n\t* @public\n\t*/\n\taccessibilityLabel: '',\n\n\t/**\n\t* AccessibilityHint is used for additional information of control.\n\t* If accessibilityHint is set and content exists, screen reader\n\t* reads accessibilityHint with content when control is focused.\n\t*\n\t* @type {String}\n\t* @default ''\n\t* @public\n\t*/\n\taccessibilityHint: '',\n\n\t/**\n\t* AccessibilityAlert is for alert message or page description.\n\t* If accessibilityAlert is true, aria role will be set to \"alert\" and\n\t* screen reader will automatically reads content or accessibilityLabel\n\t* regardless focus.\n\t* Note that if you use accessibilityAlert, previous role will be\n\t* replaced with \"alert\" role.\n\t*\n\t* Range: [`true`, `false`]\n\t* - true: screen reader automatically reads label regardless focus.\n\t* - false: screen reader reads label with focus.\n\t*\n\t* @type {Boolean}\n\t* @default false\n\t* @public\n\t*/\n\taccessibilityAlert: false,\n\n\t/**\n\t* AccessibilityLive is for dynamic content which updates without a page reload.\n\t* If AccessibilityLive is true, screen reader will read content or accessibilityLabel\n\t* when it changed.\n\t*\n\t* Range: [`true`, `false`]\n\t* - true: screen reader reads content when it changed.\n\t* - false: screen reader reads content with focus.\n\t*\n\t* @type {Boolean}\n\t* @default false\n\t* @public\n\t*/\n\taccessibilityLive: false,\n\n\t/**\n\t* AccessibilityDisabled prevents VoiceReadout.\n\t* If accessibilityDisabled is true, screen reader doesn't read any label for the control.\n\t* Note that this is not working on HTML form elements which can get focus without tabindex.\n\t*\n\t* Range: [`true`, `false`]\n\t*\n\t* @type {Boolean}\n\t* @default false\n\t* @public\n\t*/\n\taccessibilityDisabled: false,\n\n\t/**\n\t* @private\n\t*/\n\tobservers: [\n\t\t{method: 'updateAccessibilityAttributes', path: [\n\t\t\t'content',\n\t\t\t'accessibilityHint',\n\t\t\t'accessibilityLabel',\n\t\t\t'accessibilityAlert',\n\t\t\t'accessibilityLive',\n\t\t\t'accessibilityDisabled'\n\t\t]}\n\t],\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tcreate: kind.inherit(function (sup) {\n\t\treturn function (props) {\n\t\t\tsup.apply(this, arguments);\n\t\t\tthis.initAccessibility();\n\t\t};\n\t}),\n\n\t/**\n\t* One-time intialization logic for control accessibility should be done here. By default, it\n\t* invokes the accessibility property observer,\n\t* {@link AccessibilityMixin#updateAccessibilityAttributes}\n\t*\n\t* @protected\n\t*/\n\tinitAccessibility: function () {\n\t\tthis.updateAccessibilityAttributes();\n\t},\n\n\t/**\n\t* Observes changes on properties that affect the accessibility attributes. Control-specific\n\t* accessibility mixins should add an observer block for any additional properties.\n\t*\n\t* ```javascript\n\t* observers: [\n\t* \t{method: 'updateAccessibilityAttributes', path: 'checked'}\n\t* ],\n\t*\n\t* updateAccessibilityAttributes: kind.inherit(function (sup) {\n\t* \treturn function (was, is, prop) {\n\t* \t\tvar enabled = !this.accessibilityDisabled;\n\t* \t\tsup.apply(this, arguments);\n\t* \t\tthis.setAttribute('aria-checked', enabled && this.checked || null);\n\t* \t};\n\t* });\n\t* ```\n\t*\n\t* @protected\n\t*/\n\tupdateAccessibilityAttributes: function (was, is, prop) {\n\t\tvar enabled = !this.accessibilityDisabled,\n\t\t\tfocusable = this.accessibilityLabel || this.content || this.accessibilityHint || null,\n\t\t\tprefix = this.accessibilityLabel || this.content || null,\n\t\t\tlabel = this.accessibilityHint && prefix && (prefix + ' ' + this.accessibilityHint) ||\n\t\t\t\t\tthis.accessibilityHint ||\n\t\t\t\t\tthis.accessibilityLabel ||\n\t\t\t\t\tnull;\n\n\t\tthis.setAttribute('tabindex', focusable && enabled ? 0 : null);\n\t\tthis.setAttribute('aria-label', enabled ? label : null);\n\t\tthis.setAttribute('role', this.accessibilityAlert && enabled ? 'alert' : null);\n\t\tthis.setAttribute('aria-live', this.accessibilityLive && enabled ? 'assertive' : null);\n\t},\n};",
    "relPath": "enyo/AccessibilitySupport",
    "requires": [
      "../kind"
    ],
    "requests": [],
    "resolved": true,
    "styleEntries": [
      {
        "glob": "AccessibilitySupport.css",
        "files": [
          "/Users/jason/Git/bootplate/lib/enyo/lib/AccessibilitySupport/AccessibilitySupport.css"
        ],
        "sources": {
          "/Users/jason/Git/bootplate/lib/enyo/lib/AccessibilitySupport/AccessibilitySupport.css": "/* Accessibility */\n\n*[tabindex] {\n\t/* remove outline in case dom has tabindex attribute */\n\toutline: none;\n\t/* remove tap highlight in case dom has tabindex attribute */\n\t-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n\n"
        },
        "source": "/* Accessibility */\n\n*[tabindex] {\n\t/* remove outline in case dom has tabindex attribute */\n\toutline: none;\n\t/* remove tap highlight in case dom has tabindex attribute */\n\t-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n\n"
      }
    ]
  },
  {
    "path": "./floatingLayer",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/floatingLayer",
    "name": "enyo/floatingLayer",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/floatingLayer.js",
    "contents": "/**\n* Exports the {@link module:enyo/floatingLayer~FloatingLayer} singleton instance.\n* @module enyo/floatingLayer\n*/\n\nrequire('enyo');\n\nvar\n\tkind = require('./kind'),\n\tplatform = require('./platform');\n\nmodule.exports = function (Control) {\n\t/**\n\t* {@link module:enyo/floatingLayer~FloatingLayer} is a [control]{@link module:enyo/Control~Control} that provides a layer for\n\t* controls that should be displayed above an [application]{@link module:enyo/Application~Application}. The\n\t* `floatingLayer` singleton can be set as a control's parent to have the control float\n\t* above the application, e.g.:\n\t*\n\t* ```\n\t* var floatingLayer = require('enyo/floatingLayer');\n\t* ...\n\t* create: kind.inherit(function (sup) {\n\t*\treturn function() {\n\t*\t\tsup.apply(this, arguments);\n\t*\t\tthis.setParent(floatingLayer);\n\t*\t}\n\t* });\n\t* ```\n\t*\n\t* Note: `FloatingLayer` is not meant to be instantiated by users.\n\t*\n\t* @class FloatingLayer\n\t* @extends module:enyo/Control~Control\n\t* @ui\n\t* @protected\n\t*/\n\treturn kind(\n\t\t/** @lends module:enyo/floatingLayer~FloatingLayer.prototype */ {\n\n\t\t/**\n\t\t* @private\n\t\t*/\n\t\tkind: Control,\n\n\t\t/**\n\t\t* @private\n\t\t*/\n\t\tclasses: 'enyo-fit enyo-clip enyo-untouchable',\n\n\t\t/**\n\t\t* @method\n\t\t* @private\n\t\t*/\n\t\tcreate: kind.inherit(function (sup) {\n\t\t\treturn function() {\n\t\t\t\tsup.apply(this, arguments);\n\t\t\t\tthis.setParent(null);\n\n\t\t\t\tif (platform.ie < 11) {\n\t\t\t\t\tthis.removeClass('enyo-fit');\n\t\t\t\t}\n\t\t\t};\n\t\t}),\n\n\t\t/**\n\t\t* Detects when [node]{@glossary Node} is detatched due to `document.body` being stomped.\n\t\t*\n\t\t* @method\n\t\t* @private\n\t\t*/\n\t\thasNode: kind.inherit(function (sup) {\n\t\t\treturn function() {\n\t\t\t\tsup.apply(this, arguments);\n\t\t\t\tif (this.node && !this.node.parentNode) {\n\t\t\t\t\tthis.teardownRender();\n\t\t\t\t}\n\t\t\t\treturn this.node;\n\t\t\t};\n\t\t}),\n\n\t\t/**\n\t\t* @method\n\t\t* @private\n\t\t*/\n\t\trender: kind.inherit(function (sup) {\n\t\t\treturn function() {\n\t\t\t\tthis.parentNode = document.body;\n\t\t\t\treturn sup.apply(this, arguments);\n\t\t\t};\n\t\t}),\n\n\t\t/**\n\t\t* @private\n\t\t*/\n\t\tgenerateInnerHtml: function () {\n\t\t\treturn '';\n\t\t},\n\n\t\t/**\n\t\t* @private\n\t\t*/\n\t\tbeforeChildRender: function () {\n\t\t\tif (!this.hasNode()) {\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t* @private\n\t\t*/\n\t\tteardownChildren: function () {\n\t\t}\n\t});\n};\n",
    "mtime": 1434758950000,
    "relPath": "enyo/floatingLayer",
    "requires": [
      "enyo",
      "./kind",
      "./platform"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "enyo/Layout",
    "base": "/Users/jason/Git/bootplate/lib/layout/lib/FittableLayout",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/Layout",
    "name": "enyo/Layout",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/Layout.js",
    "contents": "require('enyo');\n\n/**\n* Contains the declaration for the {@link module:enyo/Layout~Layout} kind.\n* @module enyo/Layout\n*/\n\nvar\n\tkind = require('./kind');\n\n/**\n* {@link module:enyo/Layout~Layout} is the base [kind]{@glossary kind} for layout\n* kinds. Layout kinds are used by {@link module:enyo/UiComponent~UiComponent}-based\n* [controls]{@link module:enyo/Control~Control} to allow for arranging of child controls by\n* setting the [layoutKind]{@link module:enyo/UiComponent~UiComponent#layoutKind} property.\n* \n* Derived kinds will usually provide their own\n* [layoutClass]{@link module:enyo/Layout~Layout#layoutClass} property to affect the CSS\n* rules used, and may also implement the [flow()]{@link module:enyo/Layout~Layout#flow}\n* and [reflow()]{@link module:enyo/Layout~Layout#reflow} methods. `flow()` is called\n* during control rendering, while `reflow()` is called when the associated\n* control is resized.\n*\n* @class Layout\n* @public\n*/\nmodule.exports = kind(\n\t/** @lends module:enyo/Layout~Layout.prototype */ {\n\n\tname: 'enyo.Layout',\n\n\t/**\n\t* @private\n\t*/\n\tkind: null,\n\n\t/** \n\t* CSS class that's added to the [control]{@link module:enyo/Control~Control} using this \n\t* [layout]{@link module:enyo/Layout~Layout} [kind]{@glossary kind}.\n\t*\n\t* @type {String}\n\t* @default ''\n\t* @public\n\t*/\n\tlayoutClass: '',\n\t\n\t/**\n\t* @private\n\t*/\n\tconstructor: function (container) {\n\t\tthis.container = container;\n\t\tif (container) {\n\t\t\tcontainer.addClass(this.layoutClass);\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tdestroy: function () {\n\t\tif (this.container) {\n\t\t\tthis.container.removeClass(this.layoutClass);\n\t\t}\n\t},\n\t\n\t/**\n\t* Called during static property layout (i.e., during rendering).\n\t*\n\t* @public\n\t*/\n\tflow: function () {\n\t},\n\n\t/** \n\t* Called during dynamic measuring layout (i.e., during a resize).\n\t*\n\t* @public\n\t*/\n\treflow: function () {\n\t}\n});\n",
    "mtime": 1434758950000,
    "relPath": "enyo/Layout",
    "requires": [
      "enyo",
      "./kind"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./ButtonAccessibilitySupport",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib/Button",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/Button/ButtonAccessibilitySupport",
    "name": "enyo/Button/ButtonAccessibilitySupport",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/Button/ButtonAccessibilitySupport.js",
    "contents": "var\n\tkind = require('../kind');\n\n/**\n* @name ButtonAccessibilityMixin\n* @mixin\n*/\nmodule.exports = {\n\n\t/**\n\t* @private\n\t*/\n\tobservers: [\n\t\t{method: 'updateAccessibilityAttributes', path: 'disabled'}\n\t],\n\n\t/**\n\t* @private\n\t*/\n\tupdateAccessibilityAttributes: kind.inherit(function (sup) {\n\t\treturn function (was, is, prop) {\n\t\t\tvar enabled = !this.accessibilityDisabled;\n\t\t\tsup.apply(this, arguments);\n\t\t\tthis.setAttribute('role', enabled ? 'button' : null);\n\t\t\tthis.setAttribute('tabindex', enabled ? 0 : null);\n\t\t\tthis.setAttribute('aria-disabled', enabled && this.disabled ? 'true' : null);\n\t\t};\n\t})\n};",
    "mtime": 1434758950000,
    "relPath": "enyo/Button/ButtonAccessibilitySupport",
    "requires": [
      "../kind"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "enyo/kind",
    "base": "/Users/jason/Git/bootplate/src",
    "external": true,
    "relName": "enyo/kind",
    "name": "enyo/kind",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/kind.js",
    "contents": "require('enyo');\n\nvar\n\tlogger = require('./logger'),\n\tutils = require('./utils');\n\nvar defaultCtor = null;\n\n/**\n* Creates a JavaScript [constructor]{@glossary constructor} function with\n* a prototype defined by `props`. **All constructors must have a unique name.**\n*\n* `enyo.kind()` makes it easy to build a constructor-with-prototype (like a\n* class) that has advanced features like prototype-chaining\n* ([inheritance]{@glossary inheritance}).\n*\n* A plug-in system is included for extending the abilities of the\n* [kind]{@glossary kind} generator, and constructors are allowed to\n* perform custom operations when subclassed.\n*\n* If you make changes to `enyo.kind()`, be sure to add or update the appropriate\n* [unit tests](@link https://github.com/enyojs/enyo/tree/master/tools/test/core/tests).\n*\n* For more information, see the documentation on\n* [Kinds]{@linkplain $dev-guide/key-concepts/kinds.html} in the Enyo Developer Guide.\n*\n* @module enyo/kind\n* @param {Object} props - A [hash]{@glossary Object} of properties used to define and create\n*\tthe [kind]{@glossary kind}\n* @public\n*/\n/*jshint -W120*/\nvar kind = exports = module.exports = function (props) {\n/*jshint +W120*/\n\t// extract 'name' property\n\tvar name = props.name || '';\n\tdelete props.name;\n\t// extract 'kind' property\n\tvar hasKind = ('kind' in props);\n\tvar kindName = props.kind;\n\tdelete props.kind;\n\t// establish base class reference\n\tvar base = constructorForKind(kindName);\n\tvar isa = base && base.prototype || null;\n\t// if we have an explicit kind property with value undefined, we probably\n\t// tried to reference a kind that is not yet in scope\n\tif (hasKind && kindName === undefined || base === undefined) {\n\t\tvar problem = kindName === undefined ? 'undefined kind' : 'unknown kind (' + kindName + ')';\n\t\tthrow 'enyo.kind: Attempt to subclass an ' + problem + '. Check dependencies for [' + (name || '<unnamed>') + '].';\n\t}\n\t// make a boilerplate constructor\n\tvar ctor = kind.makeCtor();\n\t// semi-reserved word 'constructor' causes problems with Prototype and IE, so we rename it here\n\tif (props.hasOwnProperty('constructor')) {\n\t\tprops._constructor = props.constructor;\n\t\tdelete props.constructor;\n\t}\n\t// create our prototype\n\t//ctor.prototype = isa ? enyo.delegate(isa) : {};\n\tutils.setPrototype(ctor, isa ? utils.delegate(isa) : {});\n\t// there are special cases where a base class has a property\n\t// that may need to be concatenated with a subclasses implementation\n\t// as opposed to completely overwriting it...\n\tkind.concatHandler(ctor, props);\n\n\t// put in our props\n\tutils.mixin(ctor.prototype, props);\n\t// alias class name as 'kind' in the prototype\n\t// but we actually only need to set this if a new name was used,\n\t// not if it is inheriting from a kind anonymously\n\tif (name) {\n\t\tctor.prototype.kindName = name;\n\t}\n\t// this is for anonymous constructors\n\telse {\n\t\tctor.prototype.kindName = base && base.prototype? base.prototype.kindName: '';\n\t}\n\t// cache superclass constructor\n\tctor.prototype.base = base;\n\t// reference our real constructor\n\tctor.prototype.ctor = ctor;\n\t// support pluggable 'features'\n\tutils.forEach(kind.features, function(fn){ fn(ctor, props); });\n\t\n\tif (name) kindCtors[name] = ctor;\n\t\n\treturn ctor;\n};\n\nexports.setDefaultCtor = function (ctor) {\n\tdefaultCtor = ctor;\n};\n\nvar getDefaultCtor = exports.getDefaultCtor = function () {\n\treturn defaultCtor;\n};\n\n/**\n* @private\n*/\nvar concatenated = exports.concatenated = [];\n\n/**\n* Creates a singleton of a given [kind]{@glossary kind} with a given\n* definition. **The `name` property will be the instance name of the singleton\n* and must be unique.**\n*\n* ```javascript\n*\tenyo.singleton({\n*\t\tkind: 'enyo.Control',\n*\t\tname: 'app.MySingleton',\n*\t\tpublished: {\n*\t\t\tvalue: 'foo'\n*\t\t},\n*\t\tmakeSomething: function() {\n*\t\t\t//...\n*\t\t}\n*\t});\n*\n*\tapp.MySingleton.makeSomething();\n*\tapp.MySingleton.setValue('bar');\n*```\n*\n* @public\n*/\nexports.singleton = function (conf, context) {\n\t// extract 'name' property (the name of our singleton)\n\tvar name = conf.name;\n\tdelete(conf.name);\n\t// create an unnamed kind and save its constructor's function\n\tvar Kind = kind(conf);\n\tvar inst;\n\t// create the singleton with the previous name and constructor\n\tutils.setPath.call(context || global, name, (inst = new Kind()));\n\treturn inst;\n};\n\n/**\n* @private\n*/\nkind.makeCtor = function () {\n\tvar enyoConstructor = function () {\n\t\tif (!(this instanceof enyoConstructor)) {\n\t\t\tthrow 'enyo.kind: constructor called directly, not using \"new\"';\n\t\t}\n\n\t\t// two-pass instantiation\n\t\tvar result;\n\t\tif (this._constructor) {\n\t\t\t// pure construction\n\t\t\tresult = this._constructor.apply(this, arguments);\n\t\t}\n\t\t// defer initialization until entire constructor chain has finished\n\t\tif (this.constructed) {\n\t\t\t// post-constructor initialization\n\t\t\tthis.constructed.apply(this, arguments);\n\t\t}\n\n\t\tif (result) {\n\t\t\treturn result;\n\t\t}\n\t};\n\treturn enyoConstructor;\n};\n\n/**\n* Classes referenced by name may omit this namespace (e.g., \"Button\" instead of \"enyo.Button\")\n*\n* @private\n*/\nkind.defaultNamespace = 'enyo';\n\n/**\n* Feature hooks for the oop system\n*\n* @private\n*/\nkind.features = [];\n\n/**\n* Used internally by several mechanisms to allow safe and normalized handling for extending a\n* [kind's]{@glossary kind} super-methods. It can take a\n* [constructor]{@glossary constructor}, a [prototype]{@glossary Object.prototype}, or an\n* instance.\n*\n* @private\n*/\nkind.extendMethods = function (ctor, props, add) {\n\tvar proto = ctor.prototype || ctor,\n\t\tb = proto.base;\n\tif (!proto.inherited && b) {\n\t\tproto.inherited = kind.inherited;\n\t}\n\t// rename constructor to _constructor to work around IE8/Prototype problems\n\tif (props.hasOwnProperty('constructor')) {\n\t\tprops._constructor = props.constructor;\n\t\tdelete props.constructor;\n\t}\n\t// decorate function properties to support inherited (do this ex post facto so that\n\t// ctor.prototype is known, relies on elements in props being copied by reference)\n\tfor (var n in props) {\n\t\tvar p = props[n];\n\t\tif (isInherited(p)) {\n\t\t\t// ensure that if there isn't actually a super method to call, it won't\n\t\t\t// fail miserably - while this shouldn't happen often, it is a sanity\n\t\t\t// check for mixin-extensions for kinds\n\t\t\tif (add) {\n\t\t\t\tp = proto[n] = p.fn(proto[n] || utils.nop);\n\t\t\t} else {\n\t\t\t\tp = proto[n] = p.fn(b? (b.prototype[n] || utils.nop): utils.nop);\n\t\t\t}\n\t\t}\n\t\tif (utils.isFunction(p)) {\n\t\t\tif (add) {\n\t\t\t\tproto[n] = p;\n\t\t\t\tp.displayName = n + '()';\n\t\t\t} else {\n\t\t\t\tp._inherited = b? b.prototype[n]: null;\n\t\t\t\t// FIXME: we used to need some extra values for inherited, then inherited got cleaner\n\t\t\t\t// but in the meantime we used these values to support logging in Object.\n\t\t\t\t// For now we support this legacy situation, by suppling logging information here.\n\t\t\t\tp.displayName = proto.kindName + '.' + n + '()';\n\t\t\t}\n\t\t}\n\t}\n};\nkind.features.push(kind.extendMethods);\n\n/**\n* Called by {@link module:enyo/CoreObject~Object} instances attempting to access super-methods\n* of a parent class ([kind]{@glossary kind}) by calling\n* `this.inherited(arguments)` from within a kind method. This can only be done\n* safely when there is known to be a super class with the same method.\n*\n* @private\n*/\nkind.inherited = function (originals, replacements) {\n\t// one-off methods are the fast track\n\tvar target = originals.callee;\n\tvar fn = target._inherited;\n\n\t// regardless of how we got here, just ensure we actually\n\t// have a function to call or else we throw a console\n\t// warning to notify developers they are calling a\n\t// super method that doesn't exist\n\tif ('function' === typeof fn) {\n\t\tvar args = originals;\n\t\tif (replacements) {\n\t\t\t// combine the two arrays, with the replacements taking the first\n\t\t\t// set of arguments, and originals filling up the rest.\n\t\t\targs = [];\n\t\t\tvar i = 0, l = replacements.length;\n\t\t\tfor (; i < l; ++i) {\n\t\t\t\targs[i] = replacements[i];\n\t\t\t}\n\t\t\tl = originals.length;\n\t\t\tfor (; i < l; ++i) {\n\t\t\t\targs[i] = originals[i];\n\t\t\t}\n\t\t}\n\t\treturn fn.apply(this, args);\n\t} else {\n\t\tlogger.warn('enyo.kind.inherited: unable to find requested ' +\n\t\t\t'super-method from -> ' + originals.callee.displayName + ' in ' + this.kindName);\n\t}\n};\n\n// dcl inspired super-inheritance\n\n/**\n* @private\n*/\nvar Inherited = function (fn) {\n\tthis.fn = fn;\n};\n\n/**\n* When defining a method that overrides an existing method in a [kind]{@glossary kind}, you\n* can wrap the definition in this function and it will decorate it appropriately for inheritance\n* to work.\n*\n* The older `this.inherited(arguments)` method still works, but this version results in much\n* faster code and is the only one supported for kind [mixins]{@glossary mixin}.\n*\n* @param {Function} fn - A [function]{@glossary Function} that takes a single\n*   argument (usually named `sup`) and returns a function where\n*   `sup.apply(this, arguments)` is used as a mechanism to make the\n*   super-call.\n* @public\n*/\nexports.inherit = function (fn) {\n\treturn new Inherited(fn);\n};\n\n/**\n* @private\n*/\nvar isInherited = exports.isInherited = function (fn) {\n\treturn fn && (fn instanceof Inherited);\n};\n\n\n//\n// 'statics' feature\n//\nkind.features.push(function(ctor, props) {\n\t// install common statics\n\tif (!ctor.subclass) {\n\t\tctor.subclass = kind.statics.subclass;\n\t}\n\tif (!ctor.extend) {\n\t\tctor.extend = kind.statics.extend;\n\t}\n\t// move props statics to constructor\n\tif (props.statics) {\n\t\tutils.mixin(ctor, props.statics);\n\t\tdelete ctor.prototype.statics;\n\t}\n\t// also support protectedStatics which won't interfere with defer\n\tif (props.protectedStatics) {\n\t\tutils.mixin(ctor, props.protectedStatics);\n\t\tdelete ctor.prototype.protectedStatics;\n\t}\n\t// allow superclass customization\n\tvar base = ctor.prototype.base;\n\twhile (base) {\n\t\tbase.subclass(ctor, props);\n\t\tbase = base.prototype.base;\n\t}\n});\n\n/**\n* @private\n*/\nkind.statics = {\n\n\t/**\n\t* A [kind]{@glossary kind} may set its own `subclass()` method as a\n\t* static method for its [constructor]{@glossary constructor}. Whenever\n\t* it is subclassed, the constructor and properties will be passed through\n\t* this method for special handling of important features.\n\t*\n\t* @param {Function} ctor - The [constructor]{@glossary constructor} of the\n\t*\t[kind]{@glossary kind} being subclassed.\n\t* @param {Object} props - The properties of the kind being subclassed.\n\t* @memberof enyo.kind\n\t* @public\n\t*/\n\tsubclass: function (ctor, props) {},\n\n\t/**\n\t* Allows for extension of the current [kind]{@glossary kind} without\n\t* creating a new kind. This method is available on all\n\t* [constructors]{@glossary constructor}, although calling it on a\n\t* [deferred]{@glossary deferred} constructor will force it to be\n\t* resolved at that time. This method does not re-run the\n\t* {@link module:enyo/kind~kind.features} against the constructor or instance.\n\t*\n\t* @param {Object|Object[]} props A [hash]{@glossary Object} or [array]{@glossary Array}\n\t*\tof [hashes]{@glossary Object}. Properties will override\n\t*\t[prototype]{@glossary Object.prototype} properties. If a\n\t*\tmethod that is being added already exists, the new method will\n\t*\tsupersede the existing one. The method may call\n\t*\t`this.inherited()` or be wrapped with `kind.inherit()` to call\n\t*\tthe original method (this chains multiple methods tied to a\n\t*\tsingle [kind]{@glossary kind}).\n\t* @param {Object} [target] - The instance to be extended. If this is not specified, then the\n\t*\t[constructor]{@glossary constructor} of the\n\t*\t[object]{@glossary Object} this method is being called on will\n\t*\tbe extended.\n\t* @returns {Object} The constructor of the class, or specific\n\t*\tinstance, that has been extended.\n\t* @memberof enyo.kind\n\t* @public\n\t*/\n\textend: function (props, target) {\n\t\tvar ctor = this\n\t\t\t, exts = utils.isArray(props)? props: [props]\n\t\t\t, proto, fn;\n\n\t\tfn = function (key, value) {\n\t\t\treturn !(typeof value == 'function' || isInherited(value)) && concatenated.indexOf(key) === -1;\n\t\t};\n\n\t\tproto = target || ctor.prototype;\n\t\tfor (var i=0, ext; (ext=exts[i]); ++i) {\n\t\t\tkind.concatHandler(proto, ext, true);\n\t\t\tkind.extendMethods(proto, ext, true);\n\t\t\tutils.mixin(proto, ext, {filter: fn});\n\t\t}\n\n\t\treturn target || ctor;\n\t}\n};\n\n/**\n* @private\n*/\nexports.concatHandler = function (ctor, props, instance) {\n\tvar proto = ctor.prototype || ctor\n\t\t, base = proto.ctor;\n\n\twhile (base) {\n\t\tif (base.concat) base.concat(ctor, props, instance);\n\t\tbase = base.prototype.base;\n\t}\n};\n\n/**\n* Factory for [kinds]{@glossary kind} identified by [strings]{@glossary String}.\n*\n* @private\n*/\nvar kindCtors = exports._kindCtors = {};\n\n/**\n* @private\n*/\nvar constructorForKind = exports.constructorForKind = function (kind) {\n\tif (kind === null) {\n\t\treturn kind;\n\t} else if (kind === undefined) {\n\t\treturn getDefaultCtor();\n\t}\n\telse if (utils.isFunction(kind)) {\n\t\treturn kind;\n\t}\n\tlogger.warn('Creating instances by name is deprecated. Name used:', kind);\n\t// use memoized constructor if available...\n\tvar ctor = kindCtors[kind];\n\tif (ctor) {\n\t\treturn ctor;\n\t}\n\t// otherwise look it up and memoize what we find\n\t//\n\t// if kind is an object in enyo, say \"Control\", then ctor = enyo[\"Control\"]\n\t// if kind is a path under enyo, say \"Heritage.Button\", then ctor = enyo[\"Heritage.Button\"] || enyo.Heritage.Button\n\t// if kind is a fully qualified path, say \"enyo.Heritage.Button\", then ctor = enyo[\"enyo.Heritage.Button\"] || enyo.enyo.Heritage.Button || enyo.Heritage.Button\n\t//\n\t// Note that kind \"Foo\" will resolve to enyo.Foo before resolving to global \"Foo\".\n\t// This is important so \"Image\" will map to built-in Image object, instead of enyo.Image control.\n\tctor = Theme[kind] || (global.enyo && global.enyo[kind]) || utils.getPath.call(global, 'enyo.' + kind) || global[kind] || utils.getPath.call(global, kind);\n\n\t// If what we found at this namespace isn't a function, it's definitely not a kind constructor\n\tif (!utils.isFunction(ctor)) {\n\t\tthrow '[' + kind + '] is not the name of a valid kind.';\n\t}\n\tkindCtors[kind] = ctor;\n\treturn ctor;\n};\n\n/**\n* Namespace for current theme (`enyo.Theme.Button` references the Button specialization for the\n* current theme).\n*\n* @private\n*/\nvar Theme = exports.Theme = {};\n\n/**\n* @private\n*/\nexports.registerTheme = function (ns) {\n\tutils.mixin(Theme, ns);\n};\n\n/**\n* @private\n*/\nexports.createFromKind = function (nom, param) {\n\tvar Ctor = nom && constructorForKind(nom);\n\tif (Ctor) {\n\t\treturn new Ctor(param);\n\t}\n};\n",
    "mtime": 1434758950000,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relPath": "enyo/kind",
    "requires": [
      "enyo",
      "./logger",
      "./utils"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "enyo/resolution",
    "base": "/Users/jason/Git/bootplate/lib/moonstone/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/resolution",
    "name": "enyo/resolution",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/resolution.js",
    "contents": "require('enyo');\n\nvar\n\tDom = require('./dom');\n\nvar _baseScreenType = 'standard',\n\t_riRatio,\n\t_screenType,\n\t_screenTypes = [ {name: 'standard', pxPerRem: 16, width: global.innerWidth,  height: global.innerHeight, aspectRatioName: 'standard'} ],\t// Assign one sane value in case defineScreenTypes is never run.\n\t_screenTypeObject,\n\t_oldScreenType;\n\nvar getScreenTypeObject = function (type) {\n\ttype = type || _screenType;\n\tif (_screenTypeObject && _screenTypeObject.name == type) {\n\t\treturn _screenTypeObject;\n\t}\n\treturn _screenTypes.filter(function (elem) {\n\t\treturn (type == elem.name);\n\t})[0];\n};\n\n/**\n* Resolution independence methods\n* @module enyo/resolution\n*/\nvar ri = module.exports = {\n\t/**\n\t* Setup screen resolution scaling capabilities by defining all of the screens you're working\n\t* with. These should be in the order of smallest to largest (according to width). Running\n\t* this also initializes the rest of this resolution code.\n\t*\n\t* In the arguments, the following properties are required: 'name', 'pxPerRem', 'width',\n\t* 'aspectRatioName'. The property 'base' defines the primary or default resoultion that\n\t* everything else will be based upon.\n\t*\n\t* ```\n\t* ri.defineScreenTypes([\n\t* \t{name: 'vga',     pxPerRem: 8,  width: 640,  height: 480,  aspectRatioName: 'standard'},\n\t* \t{name: 'xga',     pxPerRem: 16, width: 1024, height: 768,  aspectRatioName: 'standard'},\n\t* \t{name: 'hd',      pxPerRem: 16, width: 1280, height: 720,  aspectRatioName: 'hdtv'},\n\t* \t{name: 'fhd',     pxPerRem: 24, width: 1920, height: 1080, aspectRatioName: 'hdtv', base: true},\n\t* \t{name: 'uw-uxga', pxPerRem: 24, width: 2560, height: 1080, aspectRatioName: 'cinema'},\n\t* \t{name: 'uhd',     pxPerRem: 48, width: 3840, height: 2160, aspectRatioName: 'hdtv'}\n\t* ]);\n\t* ```\n\t*\n\t* @param {Array} types An array of objects with arguments like the example\n\t* @public\n\t*/\n\tdefineScreenTypes: function (types) {\n\t\t_screenTypes = types;\n\t\tfor (var i = 0; i < _screenTypes.length; i++) {\n\t\t\tif (_screenTypes[i]['base']) _baseScreenType = _screenTypes[i].name;\n\t\t}\n\t\tri.init();\n\t},\n\n\t/**\n\t* Fetches the best-matching screen type name for the current screen size. The \"best\" screen type\n\t* is determined by the screen type name that is the closest to the screen resolution without\n\t* going over. (\"The Price is Right\" style.)\n\t*\n\t* @param {Object} [rez] - Optional measurement scheme. Must have \"height\" and \"width\" properties.\n\t* @returns {String} Screen type, like \"fhd\", \"uhd\", etc.\n\t* @public\n\t*/\n\tgetScreenType: function (rez) {\n\t\trez = rez || {\n\t\t\theight: global.innerHeight,\n\t\t\twidth: global.innerWidth\n\t\t};\n\t\tvar i,\n\t\t\ttypes = _screenTypes,\n\t\t\tbestMatch = types[types.length - 1].name;\n\n\t\t// loop thorugh resolutions\n\t\tfor (i = types.length - 1; i >= 0; i--) {\n\t\t\t// find the one that matches our current size or is smaller. default to the first.\n\t\t\tif (rez.width <= types[i].width) {\n\t\t\t\tbestMatch = types[i].name;\n\t\t\t}\n\t\t}\n\t\t// return the name of the resolution if we find one.\n\t\treturn bestMatch;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tupdateScreenBodyClasses: function (type) {\n\t\ttype = type || _screenType;\n\t\tif (_oldScreenType) {\n\t\t\tDom.removeClass(document.body, 'enyo-res-' + _oldScreenType.toLowerCase());\n\t\t\tvar oldScrObj = getScreenTypeObject(_oldScreenType);\n\t\t\tif (oldScrObj.aspectRatioName) {\n\t\t\t\tDom.removeClass(document.body, 'enyo-aspect-ratio-' + oldScrObj.aspectRatioName.toLowerCase());\n\t\t\t}\n\t\t}\n\t\tif (type) {\n\t\t\tDom.addBodyClass('enyo-res-' + type.toLowerCase());\n\t\t\tvar scrObj = getScreenTypeObject(type);\n\t\t\tif (scrObj.aspectRatioName) {\n\t\t\t\tDom.addBodyClass('enyo-aspect-ratio-' + scrObj.aspectRatioName.toLowerCase());\n\t\t\t}\n\t\t\treturn type;\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tgetRiRatio: function (type) {\n\t\ttype = type || _screenType;\n\t\tif (type) {\n\t\t\tvar ratio = this.getUnitToPixelFactors(type) / this.getUnitToPixelFactors(_baseScreenType);\n\t\t\tif (type == _screenType) {\n\t\t\t\t// cache this if it's for our current screen type.\n\t\t\t\t_riRatio = ratio;\n\t\t\t}\n\t\t\treturn ratio;\n\t\t}\n\t\treturn 1;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tgetUnitToPixelFactors: function (type) {\n\t\ttype = type || _screenType;\n\t\tif (type) {\n\t\t\treturn getScreenTypeObject(type).pxPerRem;\n\t\t}\n\t\treturn 1;\n\t},\n\n\t/**\n\t* Calculates the aspect ratio of the screen type provided. If none is provided the current\n\t* screen type is used.\n\t*\n\t* @param {String} type Screen type to get the aspect ratio of. Providing nothing uses the\n\t*\tcurrent screen type.\n\t* @returns {Number} The calculated screen ratio (1.333, 1.777, 2.333, etc)\n\t* @public\n\t*/\n\tgetAspectRatio: function (type) {\n\t\tvar scrObj = getScreenTypeObject(type);\n\t\tif (scrObj.width && scrObj.height) {\n\t\t\treturn (scrObj.width / scrObj.height);\n\t\t}\n\t\treturn 1;\n\t},\n\n\t/**\n\t* Returns the name of the aspect ration given the screen type or the default screen type if\n\t* none is proided.\n\t*\n\t* @param {String} type Screen type to get the aspect ratio of. Providing nothing uses the\n\t*\tcurrent screen type.\n\t* @returns {String} The name of the type of screen ratio\n\t* @public\n\t*/\n\tgetAspectRatioName: function (type) {\n\t\tvar scrObj = getScreenTypeObject(type);\n\t\t return scrObj.aspectRatioName || 'standard';\n\t},\n\n\t/**\n\t* Takes a provided pixel value and preforms a scaling operation on the number based on the\n\t* current screen type.\n\t*\n\t* @param {Number} px The amount of standard-resolution pixels to scale to the current screen\n\t*\tresolution.\n\t* @returns {Number} The scaled value based on the current screen scaling factor.\n\t* @public\n\t*/\n\tscale: function (px) {\n\t\treturn (_riRatio || this.getRiRatio()) * px;\n\t},\n\n\t/**\n\t* The default configurable [options]{@link ri.selectSrc#options}.\n\t*\n\t* @typedef {Object} ri.selectSrc~src\n\t* @property {String} hd - HD / 720p Resolution image asset source URI/URL\n\t* @property {String} fhd - FHD / 1080p Resolution image asset source URI/URL\n\t* @property {String} uhd - UHD / 4K Resolution image asset source URI/URL\n\t*\n\t* @typedef {String} ri.selectSrc~src - Image asset source URI/URL\n\t*/\n\n\t/**\n\t* Image src chooser. A simple utility method to select the ideal image asset from a set of\n\t* assets, based on various screen resolutions: HD (720p), FHD (1080p), UHD (4k). When provided\n\t* with a src argument, multiResSrc will choose the best image with respect to the current screen\n\t* resolution. `src` may be either the traditional string, which will pass straight through, or a\n\t* hash/object of screen types and their asset sources (keys:screen and values:src). The image\n\t* sources will be used chosen when the screen resolution is less than or equal to the provided\n\t* screen types.\n\t*\n\t* ```\n\t* // Take advantage of the multi-rez mode\n\t* {kind: 'moon.Image', src: {\n\t* \t'hd': 'http://lorempixel.com/64/64/city/1/',\n\t* \t'fhd': 'http://lorempixel.com/128/128/city/1/',\n\t* \t'uhd': 'http://lorempixel.com/256/256/city/1/'\n\t* }, alt: 'Multi-rez'},\n\t* // Standard string `src`\n\t* {kind: 'moon.Image', src: http://lorempixel.com/128/128/city/1/', alt: 'Large'},\n\t* ```\n\t*\n\t* @param {(String|moon.ri.selectSrc~src)} src A string containing a single image src or a\n\t*\tkey/value hash/object containing keys representing screen types (hd, fhd, uhd, etc) and\n\t*\tvalues containing the asset src for that target screen resolution.\n\t* @returns {String} The choosen src given the string or list provided.\n\t* @public\n\t*/\n\tselectSrc: function (src) {\n\t\tif (typeof src != 'string' && src) {\n\t\t\tvar i, t,\n\t\t\t\tnewSrc = src.fhd || src.uhd || src.hd,\n\t\t\t\ttypes = _screenTypes;\n\n\t\t\t// loop through resolutions\n\t\t\tfor (i = types.length - 1; i >= 0; i--) {\n\t\t\t\tt = types[i].name;\n\t\t\t\tif (_screenType == t && src[t]) newSrc = src[t];\n\t\t\t}\n\n\t\t\tsrc = newSrc;\n\t\t}\n\t\treturn src;\n\t},\n\n\t/**\n\t* This will need to be re-run any time the screen size changes, so all the values can be\n\t* re-cached.\n\t*\n\t* @public\n\t*/\n\t// Later we can wire this up to a screen resize event so it doesn't need to be called manually.\n\tinit: function () {\n\t\t_oldScreenType = _screenType;\n\t\t_screenType = this.getScreenType();\n\t\t_screenTypeObject = getScreenTypeObject();\n\t\tthis.updateScreenBodyClasses();\n\t\tDom.unitToPixelFactors.rem = this.getUnitToPixelFactors();\n\t\t_riRatio = this.getRiRatio();\n\t}\n};\n",
    "mtime": 1434758950000,
    "relPath": "enyo/resolution",
    "requires": [
      "enyo",
      "./dom"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./HTMLStringDelegate",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/HTMLStringDelegate",
    "name": "enyo/HTMLStringDelegate",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/HTMLStringDelegate.js",
    "contents": "require('enyo');\n\nvar\n\tDom = require('./dom');\n\nvar selfClosing = {img: 1, hr: 1, br: 1, area: 1, base: 1, basefont: 1, input: 1, link: 1,\n\tmeta: 1, command: 1, embed: 1, keygen: 1, wbr: 1, param: 1, source: 1, track: 1, col: 1};\n\n/**\n* This is the default render delegate used by {@link module:enyo/Control~Control}. It\n* generates the HTML [string]{@glossary String} content and correctly inserts\n* it into the DOM. A string-concatenation technique is used to perform DOM\n* insertion in batches.\n*\n* @module enyo/HTMLStringDelegate\n* @public\n*/\nmodule.exports = {\n\t\n\t/**\n\t* @private\n\t*/\n\tinvalidate: function (control, item) {\n\t\tswitch (item) {\n\t\tcase 'content':\n\t\t\tthis.renderContent(control);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tcontrol.tagsValid = false;\n\t\t\tbreak;\n\t\t}\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\trender: function (control) {\n\t\tif (control.parent) {\n\t\t\tcontrol.parent.beforeChildRender(control);\n\t\t\t\n\t\t\tif (!control.parent.generated) return;\n\t\t\tif (control.tag === null) return control.parent.render();\n\t\t}\n\t\t\n\t\tif (!control.hasNode()) this.renderNode(control);\n\t\tif (control.hasNode()) {\n\t\t\tthis.renderDom(control);\n\t\t\tif (control.generated) control.rendered();\n\t\t}\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\trenderInto: function (control, parentNode) {\n\t\tparentNode.innerHTML = this.generateHtml(control);\n\t\t\n\t\tif (control.generated) control.rendered();\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\trenderNode: function (control) {\n\t\tthis.teardownRender(control);\n\t\tcontrol.node = document.createElement(control.tag);\n\t\tcontrol.addNodeToParent();\n\t\tcontrol.set('generated', true);\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\trenderDom: function (control) {\n\t\tthis.renderAttributes(control);\n\t\tthis.renderStyles(control);\n\t\tthis.renderContent(control);\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\trenderStyles: function (control) {\n\t\tvar style = control.style;\n\t\t\n\t\t// we can safely do this knowing it will synchronize properly without a double\n\t\t// set in the DOM because we're flagging the internal property\n\t\tif (control.hasNode()) {\n\t\t\tcontrol.node.style.cssText = style;\n\t\t\t// retrieve the parsed value for synchronization\n\t\t\tcontrol.cssText = style = control.node.style.cssText;\n\t\t\t// now we set it knowing they will be synchronized and everybody that is listening\n\t\t\t// will also be updated to know about the change\n\t\t\tcontrol.set('style', style);\n\t\t}\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\trenderAttributes: function (control) {\n\t\tvar attrs = control.attributes,\n\t\t\tnode = control.hasNode(),\n\t\t\tkey,\n\t\t\tval;\n\t\t\n\t\tif (node) {\n\t\t\tfor (key in attrs) {\n\t\t\t\tval = attrs[key];\n\t\t\t\tif (val === null || val === false || val === \"\") {\n\t\t\t\t\tnode.removeAttribute(key);\n\t\t\t\t} else {\n\t\t\t\t\tnode.setAttribute(key, val);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\trenderContent: function (control) {\n\t\tif (control.generated) this.teardownChildren(control);\n\t\tif (control.hasNode()) control.node.innerHTML = this.generateInnerHtml(control);\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tgenerateHtml: function (control) {\n\t\tvar content,\n\t\t\thtml;\n\t\t\n\t\tif (control.canGenerate === false) {\n\t\t\treturn '';\n\t\t}\n\t\t// do this first in case content generation affects outer html (styles or attributes)\n\t\tcontent = this.generateInnerHtml(control);\n\t\t// generate tag, styles, attributes\n\t\thtml = this.generateOuterHtml(control, content);\n\t\t// NOTE: 'generated' is used to gate access to findNodeById in\n\t\t// hasNode, because findNodeById is expensive.\n\t\t// NOTE: we typically use 'generated' to mean 'created in DOM'\n\t\t// but that has not actually happened at this point.\n\t\t// We set 'generated = true' here anyway to avoid having to walk the\n\t\t// control tree a second time (to set it later).\n\t\t// The contract is that insertion in DOM will happen synchronously\n\t\t// to generateHtml() and before anybody should be calling hasNode().\n\t\tcontrol.set('generated', true);\n\t\treturn html;\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tgenerateOuterHtml: function (control, content) {\n\t\tif (!control.tag) return content;\n\t\tif (!control.tagsValid) this.prepareTags(control);\n\t\treturn control._openTag + content + control._closeTag;\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tgenerateInnerHtml: function (control) {\n\t\tvar allowHtml = control.allowHtml,\n\t\t\tcontent;\n\t\t\n\t\t// flow can alter the way that html content is rendered inside\n\t\t// the container regardless of whether there are children.\n\t\tcontrol.flow();\n\t\tif (control.children.length) return this.generateChildHtml(control);\n\t\telse {\n\t\t\tcontent = control.get('content');\n\t\t\treturn allowHtml ? content : Dom.escape(content);\n\t\t}\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tgenerateChildHtml: function (control) {\n\t\tvar child,\n\t\t\thtml = '',\n\t\t\ti = 0,\n\t\t\tdelegate;\n\t\t\n\t\tfor (; (child = control.children[i]); ++i) {\n\t\t\tdelegate = child.renderDelegate || this;\n\t\t\thtml += delegate.generateHtml(child);\n\t\t}\n\t\t\n\t\treturn html;\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tprepareTags: function (control) {\n\t\tvar html = '';\n\t\t\n\t\t// open tag\n\t\thtml += '<' + control.tag + (control.style ? ' style=\"' + control.style + '\"' : '');\n\t\thtml += this.attributesToHtml(control.attributes);\n\t\tif (selfClosing[control.tag]) {\n\t\t\tcontrol._openTag = html + '/>';\n\t\t\tcontrol._closeTag = '';\n\t\t} else {\n\t\t\tcontrol._openTag = html + '>';\n\t\t\tcontrol._closeTag = '</' + control.tag + '>';\n\t\t}\n\t\t\n\t\tcontrol.tagsValid = true;\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tattributesToHtml: function(attrs) {\n\t\tvar key,\n\t\t\tval,\n\t\t\thtml = '';\n\t\t\t\n\t\tfor (key in attrs) {\n\t\t\tval = attrs[key];\n\t\t\tif (val != null && val !== false && val !== '') {\n\t\t\t\thtml += ' ' + key + '=\"' + this.escapeAttribute(val) + '\"';\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn html;\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tescapeAttribute: function (text) {\n\t\tif (typeof text != 'string') return text;\n\t\n\t\treturn String(text).replace(/&/g, '&amp;').replace(/\\\"/g, '&quot;');\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tteardownRender: function (control, cache) {\n\t\tif (control.generated) this.teardownChildren(control, cache);\n\t\tcontrol.node = null;\n\t\tcontrol.set('generated', false);\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tteardownChildren: function (control, cache) {\n\t\tvar child,\n\t\t\ti = 0;\n\t\t\t\n\t\tfor (; (child = control.children[i]); ++i) {\n\t\t\tchild.teardownRender(cache);\n\t\t}\n\t}\n};\n",
    "mtime": 1434758950000,
    "relPath": "enyo/HTMLStringDelegate",
    "requires": [
      "enyo",
      "./dom"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./util",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib/gesture",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/gesture/util",
    "name": "enyo/gesture/util",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/gesture/util.js",
    "contents": "var\n\tdom = require('../dom'),\n\tplatform = require('../platform'),\n\tutils = require('../utils');\n\n/**\n* Used internally by {@link module:enyo/gesture}\n*\n* @module enyo/gesture/util\n* @private\n*/\nmodule.exports = {\n\n\t/**\n\t* @private\n\t*/\n\teventProps: ['target', 'relatedTarget', 'clientX', 'clientY', 'pageX', 'pageY',\n\t\t'screenX', 'screenY', 'altKey', 'ctrlKey', 'metaKey', 'shiftKey',\n\t\t'detail', 'identifier', 'dispatchTarget', 'which', 'srcEvent'],\n\n\t/**\n\t* Creates an {@glossary event} of type `type` and returns it.\n\t* `evt` should be an event [object]{@glossary Object}.\n\t*\n\t* @param {String} type - The type of {@glossary event} to make.\n\t* @param {(Event|Object)} evt - The event you'd like to clone or an object that looks like it.\n\t* @returns {Object} The new event [object]{@glossary Object}.\n\t* @public\n\t*/\n\tmakeEvent: function(type, evt) {\n\t\tvar e = {};\n\t\te.type = type;\n\t\tfor (var i=0, p; (p=this.eventProps[i]); i++) {\n\t\t\te[p] = evt[p];\n\t\t}\n\t\te.srcEvent = e.srcEvent || evt;\n\t\te.preventDefault = this.preventDefault;\n\t\te.disablePrevention = this.disablePrevention;\n\n\t\tif (dom._bodyScaleFactorX !== 1 || dom._bodyScaleFactorY !== 1) {\n\t\t\t// Intercept only these events, not all events, like: hold, release, tap, etc,\n\t\t\t// to avoid doing the operation again.\n\t\t\tif (e.type == 'move' || e.type == 'up' || e.type == 'down' || e.type == 'enter' || e.type == 'leave') {\n\t\t\t\te.clientX *= dom._bodyScaleFactorX;\n\t\t\t\te.clientY *= dom._bodyScaleFactorY;\n\t\t\t}\n\t\t}\n\t\t//\n\t\t// normalize event.which and event.pageX/event.pageY\n\t\t// Note that while 'which' works in IE9, it is broken for mousemove. Therefore,\n\t\t// in IE, use global.event.button\n\t\tif (platform.ie < 10) {\n\t\t\t//Fix for IE8, which doesn't include pageX and pageY properties\n\t\t\tif(platform.ie==8 && e.target) {\n\t\t\t\te.pageX = e.clientX + e.target.scrollLeft;\n\t\t\t\te.pageY = e.clientY + e.target.scrollTop;\n\t\t\t}\n\t\t\tvar b = global.event && global.event.button;\n\t\t\tif (b) {\n\t\t\t\t// multi-button not supported, priority: left, right, middle\n\t\t\t\t// (note: IE bitmask is 1=left, 2=right, 4=center);\n\t\t\t\te.which = b & 1 ? 1 : (b & 2 ? 2 : (b & 4 ? 3 : 0));\n\t\t\t}\n\t\t} else if (platform.webos || global.PalmSystem) {\n\t\t\t// Temporary fix for owos: it does not currently supply 'which' on move events\n\t\t\t// and the user agent string doesn't identify itself so we test for PalmSystem\n\t\t\tif (e.which === 0) {\n\t\t\t\te.which = 1;\n\t\t\t}\n\t\t}\n\t\treturn e;\n\t},\n\n\t/**\n\t* Installed on [events]{@glossary event} and called in event context.\n\t*\n\t* @private\n\t*/\n\tpreventDefault: function() {\n\t\tif (this.srcEvent) {\n\t\t\tthis.srcEvent.preventDefault();\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tdisablePrevention: function() {\n\t\tthis.preventDefault = utils.nop;\n\t\tif (this.srcEvent) {\n\t\t\tthis.srcEvent.preventDefault = utils.nop;\n\t\t}\n\t}\n};\n",
    "mtime": 1434758950000,
    "relPath": "enyo/gesture/util",
    "requires": [
      "../dom",
      "../platform",
      "../utils"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./xhr",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/xhr",
    "name": "enyo/xhr",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/xhr.js",
    "contents": "require('enyo');\n\n/**\n* An internally-used module for XHR-related methods and wrappers.\n*\n* @module enyo/xhr\n* @private\n*/\n\nvar\n\tutils = require('./utils'),\n\tplatform = require('./platform'),\n\tpath = require('./pathResolver');\n\n/**\n* Parameters and options for the [enyo/xhr.request()]{@link module:enyo/xhr#request} method.\n*\n* @typedef {Object} requestOptions\n* @property {String} url - The URL to request (required).\n* @property {String} method - One of `'GET'`, `'POST'`, `'DELETE'`, `'UPDATE'`, or\n* custom methods; defaults to `'GET'`.\n* @property {Function} callback - Optional callback method to fire when complete.\n* @property {Object} body - Optional serializable body for `POST` requests.\n* @property {Object} headers - Optional header overrides; defaults to `null`.\n* @property {String} username - Optional username to provide for authentication purposes.\n* @property {String} password - Optional password to provide for authentication purposes.\n* @property {Object} xhrFields - Optional key/value pairs to apply directly to the request.\n* @property {String} mimeType - Optional specification for the `MIME-Type` of the request.\n* @property {Boolean} mozSystem - Optional boolean to create cross-domain XHR (Firefox OS only).\n* @property {Boolean} mozAnon - Optional boolean to create anonymous XHR that does not send\n*\tcookies or authentication headers (Firefox OS only).\n* @private\n*/\n\nmodule.exports = {\n\t\n\t/**\n\t* Internally-used method to execute XHR requests.\n\t*\n\t* Note that we explicitly add a `'cache-control: no-cache'` header for iOS 6 for any\n\t* non-`GET` requests to work around a system bug causing non-cachable requests to be\n\t* cached. To disable this, use the `header` property to specify an object where\n\t* `cache-control` is set to `null`.\n\t*\n\t* @param {module:enyo/xhr~requestOptions} params - The options and properties for this XHR request.\n\t* @returns {XMLHttpRequest} The XHR request object.\n\t* @private\n\t*/\n\trequest: function (params) {\n\t\tvar xhr = this.getXMLHttpRequest(params);\n\t\tvar url = this.simplifyFileURL(path.rewrite(params.url));\n\t\t//\n\t\tvar method = params.method || 'GET';\n\t\tvar async = !params.sync;\n\t\t//\n\t\tif (params.username) {\n\t\t\txhr.open(method, url, async, params.username, params.password);\n\t\t} else {\n\t\t\txhr.open(method, url, async);\n\t\t}\n\t\t//\n\t\tutils.mixin(xhr, params.xhrFields);\n\t\t// only setup handler when we have a callback\n\t\tif (params.callback) {\n\t\t\tthis.makeReadyStateHandler(xhr, params.callback);\n\t\t}\n\t\t//\n\t\tparams.headers = params.headers || {};\n\t\t// work around iOS 6.0 bug where non-GET requests are cached\n\t\t// see http://www.einternals.com/blog/web-development/ios6-0-caching-ajax-post-requests\n\t\tif (method !== 'GET' && platform.ios && platform.ios == 6) {\n\t\t\tif (params.headers['cache-control'] !== null) {\n\t\t\t\tparams.headers['cache-control'] = params.headers['cache-control'] || 'no-cache';\n\t\t\t}\n\t\t}\n\t\t// user-set headers override any platform-default\n\t\tif (xhr.setRequestHeader) {\n\t\t\tfor (var key in params.headers) {\n\t\t\t\tif (params.headers[key]) {\n\t\t\t\t\txhr.setRequestHeader(key, params.headers[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//\n\t\tif((typeof xhr.overrideMimeType == 'function') && params.mimeType) {\n\t\t\txhr.overrideMimeType(params.mimeType);\n\t\t}\n\t\t//\n\t\txhr.send(params.body || null);\n\t\tif (!async && params.callback) {\n\t\t\txhr.onreadystatechange(xhr);\n\t\t}\n\t\treturn xhr;\n\t},\n\t\n\t/**\n\t* Removes any callbacks that might be set from Enyo code for an existing XHR\n\t* and stops the XHR from completing (if possible).\n\t*\n\t* @param {XMLHttpRequest} The - request to cancel.\n\t* @private\n\t*/\n\tcancel: function (xhr) {\n\t\tif (xhr.onload) {\n\t\t\txhr.onload = null;\n\t\t}\n\t\tif (xhr.onreadystatechange) {\n\t\t\txhr.onreadystatechange = null;\n\t\t}\n\t\tif (xhr.abort) {\n\t\t\txhr.abort();\n\t\t}\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tmakeReadyStateHandler: function (inXhr, inCallback) {\n\t\tif (global.XDomainRequest && inXhr instanceof global.XDomainRequest) {\n\t\t\tinXhr.onload = function() {\n\t\t\t\tvar data;\n\t\t\t\tif (inXhr.responseType === 'arraybuffer') {\n\t\t\t\t\tdata = inXhr.response;\n\t\t\t\t} else if (typeof inXhr.responseText === 'string') {\n\t\t\t\t\tdata = inXhr.responseText;\n\t\t\t\t}\n\t\t\t\tinCallback.apply(null, [data, inXhr]);\n\t\t\t\tinXhr = null;\n\t\t\t};\n\t\t} else {\n\t\t\tinXhr.onreadystatechange = function() {\n\t\t\t\tif (inXhr && inXhr.readyState == 4) {\n\t\t\t\t\tvar data;\n\t\t\t\t\tif (inXhr.responseType === 'arraybuffer') {\n\t\t\t\t\t\tdata = inXhr.response;\n\t\t\t\t\t} else if (typeof inXhr.responseText === 'string') {\n\t\t\t\t\t\tdata = inXhr.responseText;\n\t\t\t\t\t}\n\t\t\t\t\tinCallback.apply(null, [data, inXhr]);\n\t\t\t\t\tinXhr = null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tinOrigin: function (url) {\n\t\tvar a = document.createElement('a'), result = false;\n\t\ta.href = url;\n\t\t// protocol is ':' for relative URLs\n\t\tif (a.protocol === ':' ||\n\t\t\t\t(a.protocol === global.location.protocol &&\n\t\t\t\t\ta.hostname === global.location.hostname &&\n\t\t\t\t\ta.port === (global.location.port ||\n\t\t\t\t\t\t(global.location.protocol === 'https:' ? '443' : '80')))) {\n\t\t\tresult = true;\n\t\t}\n\t\treturn result;\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tsimplifyFileURL: function (url) {\n\t\tvar a = document.createElement('a');\n\t\ta.href = url;\n\t\t// protocol is ':' for relative URLs\n\t\tif (a.protocol === 'file:' ||\n\t\t\ta.protocol === ':' && global.location.protocol === 'file:') {\n\t\t\t// leave off search and hash parts of the URL\n\t\t\t// and work around a bug in webOS 3 where the app's host has a domain string\n\t\t\t// in it that isn't resolved as a path\n\t\t\tvar host = (platform.webos < 4) ? '' : a.host;\n\t\t\treturn a.protocol + '//' + host + a.pathname;\n\t\t} else if (a.protocol === ':' && global.location.protocol === 'x-wmapp0:') {\n\t\t\t// explicitly return absolute URL for Windows Phone 8, as an absolute path is required for local files\n\t\t\treturn global.location.protocol + '//' + global.location.pathname.split('/')[0] + '/' + a.host + a.pathname;\n\t\t} else {\n\t\t\treturn url;\n\t\t}\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tgetXMLHttpRequest: function (params) {\n\t\ttry {\n\t\t\t// only use XDomainRequest when it exists, no extra headers were set, and the\n\t\t\t// target URL maps to a domain other than the document origin.\n\t\t\tif (platform.ie < 10 && global.XDomainRequest && !params.headers &&\n\t\t\t\t!this.inOrigin(params.url) && !/^file:\\/\\//.test(global.location.href)) {\n\t\t\t\treturn new global.XDomainRequest();\n\t\t\t}\n\t\t} catch(e) {}\n\t\ttry {\n\n\t\t\tif (platform.firefoxOS) {\n\t\t\t\tvar shouldCreateNonStandardXHR = false; // flag to decide if we're creating the xhr or not\n\t\t\t\tvar xhrOptions = {};\n\n\t\t\t\t// mozSystem allows you to do cross-origin requests on Firefox OS\n\t\t\t\t// As seen in:\n\t\t\t\t//   https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#Non-standard_properties\n\t\t\t\tif (params.mozSystem) {\n\t\t\t\t\txhrOptions.mozSystem = true;\n\t\t\t\t\tshouldCreateNonStandardXHR = true;\n\t\t\t\t}\n\n\t\t\t\t// mozAnon allows you to send a request without cookies or authentication headers\n\t\t\t\t// As seen in:\n\t\t\t\t//   https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#Non-standard_properties\n\t\t\t\tif (params.mozAnon) {\n\t\t\t\t\txhrOptions.mozAnon = true;\n\t\t\t\t\tshouldCreateNonStandardXHR = true;\n\t\t\t\t}\n\n\t\t\t\tif (shouldCreateNonStandardXHR) {\n\t\t\t\t\treturn new XMLHttpRequest(xhrOptions);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn new XMLHttpRequest();\n\t\t} catch(e) {}\n\t\treturn null;\n\t}\n};\n",
    "mtime": 1434758950000,
    "relPath": "enyo/xhr",
    "requires": [
      "enyo",
      "./utils",
      "./platform",
      "./pathResolver"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./logger",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/logger",
    "name": "enyo/logger",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/logger.js",
    "contents": "require('enyo');\n\nvar\n\tjson = require('./json'),\n\tutils = require('./utils'),\n\tplatform = require('./platform');\n\n/**\n* These platforms only allow one argument for [console.log()]{@glossary console.log}:\n*\n* * android\n* * ios\n* * webos\n*\n* @private\n*/\nvar dumbConsole = Boolean(platform.android || platform.ios || platform.webos);\n\n/**\n* Internally used methods and properties associated with logging.\n*\n* @module enyo/logging\n* @public\n*/\nexports = module.exports = {\n\t\n\t/**\n\t* The log level to use. Can be a value from -1 to 99, where -1 disables all\n\t* logging, 0 is 'error', 10 is 'warn', and 20 is 'log'. It is preferred that\n\t* this value be set using the [setLogLevel()]{@link module:enyo/logging.setLogLevel}\n\t* method.\n\t*\n\t* @type {Number}\n\t* @default 99\n\t* @public\n\t*/\n\tlevel: 99,\n\t\n\t/**\n\t* The known levels.\n\t*\n\t* @private\n\t*/\n\tlevels: {log: 20, warn: 10, error: 0},\n\t\n\t/**\n\t* @private\n\t*/\n\tshouldLog: function (fn) {\n\t\tvar ll = parseInt(this.levels[fn], 0);\n\t\treturn (ll <= this.level);\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tvalidateArgs: function (args) {\n\t\t// gracefully handle and prevent circular reference errors in objects\n\t\tfor (var i=0, l=args.length, item; (item=args[i]) || i<l; i++) {\n\t\t\ttry {\n\t\t\t\tif (typeof item === 'object') {\n\t\t\t\t\targs[i] = json.stringify(item);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\targs[i] = 'Error: ' + e.message;\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\t_log: function (fn, args) {\n\t\t// avoid trying to use console on IE instances where the object hasn't been\n\t\t// created due to the developer tools being unopened\n\t\tvar console = global.console;\n\t\tif (typeof console === 'undefined') {\n            return;\n        }\n\t\t//var a$ = utils.logging.formatArgs(fn, args);\n\t\tvar a$ = utils.isArray(args) ? args : utils.cloneArray(args);\n\t\tif (platform.androidFirefox) {\n\t\t\t// Firefox for Android's console does not handle objects with circular references\n\t\t\tthis.validateArgs(a$);\n\t\t}\n\t\tif (dumbConsole) {\n\t\t\t// at least in early versions of webos, console.* only accept a single argument\n\t\t\ta$ = [a$.join(' ')];\n\t\t}\n\t\tvar fn$ = console[fn];\n\t\tif (fn$ && fn$.apply) {\n\t\t\t// some consoles support 'warn', 'info', and so on\n\t\t\tfn$.apply(console, a$);\n\t\t} else if (console.log.apply) {\n\t\t\t// some consoles support console.log.apply\n\t\t\tconsole.log.apply(console, a$);\n\t\t} else {\n\t\t\t// otherwise, do our own formatting\n\t\t\tconsole.log(a$.join(' '));\n\t\t}\n\t},\n\t\n\t/**\n\t* This is exposed elsewhere.\n\t*\n\t* @private\n\t*/\n\tlog: function (fn, args) {\n\n\t\tif (fn != 'log' && fn != 'warn' && fn != 'error') {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t\tfn = 'log';\n\t\t}\n\n\t\tvar console = global.console;\n\t\tif (typeof console !== 'undefined') {\n\t\t\tif (this.shouldLog(fn)) {\n\t\t\t\tthis._log(fn, args);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n* Sets the log level to the given value. This will restrict the amount of output depending on\n* the settings. The higher the value, the more output that will be allowed. The default is\n* 99. The value, -1, would silence all logging, even 'error' (0).\n* Without the 'see': {@link module:enyo/logger.log}.\n*\n* @see module:enyo/logging.level\n* @see module:enyo/logging.log\n* @see module:enyo/logging.warn\n* @see module:enyo/logging.error\n* @param {Number} level - The level to set logging to.\n*/\nexports.setLogLevel = function (level) {\n\tvar ll = parseInt(level, 0);\n\tif (isFinite(ll)) {\n\t\tthis.level = ll;\n\t}\n};\n\n/**\n* A wrapper for [console.log()]{@glossary console.log}, compatible\n* across supported platforms. Will output only if the current\n* [log level]{@link module:enyo/logging.level} allows it. [Object]{@glossary Object}\n* parameters will be serialized via [JSON.stringify()]{@glossary JSON.stringify}\n* automatically.\n*\n* @utility\n* @see {@glossary console.log}\n* @param {...*} - The arguments to be logged.\n* @public\n*/\n\n/**\n* A wrapper for [console.warn()]{@glossary console.warn}, compatible\n* across supported platforms. Will output only if the current\n* [log level]{@link module:enyo/logging.level} allows it. [Object]{@glossary Object}\n* parameters will be serialized via [JSON.stringify()]{@glossary JSON.stringify}\n* automatically.\n*\n* @utility\n* @see {@glossary console.warn}\n* @param {...*} - The arguments to be logged.\n* @public\n*/\nexports.warn = function () {\n\tthis.log('warn', arguments);\n};\n\n/**\n* A wrapper for [console.error()]{@glossary console.error}, compatible\n* across supported platforms. Will output only if the current\n* [log level]{@link module:enyo/logging.level} allows it. [Object]{@glossary Object}\n* parameters will be serialized via [JSON.stringify()]{@glossary JSON.stringify}\n* automatically.\n*\n* @utility\n* @see {@glossary console.error}\n* @param {...*} - The arguments to be logged.\n* @public\n*/\nexports.error = function () {\n\tthis.log('error', arguments);\n};\n",
    "mtime": 1434758950000,
    "relPath": "enyo/logger",
    "requires": [
      "enyo",
      "./json",
      "./utils",
      "./platform"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./dom",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/dom",
    "name": "enyo/dom",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/dom.js",
    "contents": "/**\n* Contains methods for working with DOM\n* @module enyo/dom\n*/\nrequire('enyo');\n\nvar\n\troots = require('./roots'),\n\tutils = require('./utils'),\n\tplatform = require('./platform');\n\nvar dom = module.exports = {\n\n\t/**\n\t* Shortcut for `document.getElementById()` if `id` is a string; otherwise,\n\t* returns `id`. Uses `global.document` unless a document is specified in the\n\t* (optional) `doc` parameter.\n\t*\n\t* ```javascript\n\t* // find 'node' if it's a string id, or return it unchanged if it's already a node reference\n\t* var domNode = enyo.dom.byId(node);\n\t* ```\n\t*\n\t* @param {String} id - The document element ID to get.\n\t* @param {Node} [doc] - A [node]{@glossary Node} to search in. Default is the whole\n\t*\tdocument.\n\t* @returns {Element} A reference to a DOM element.\n\t* @public\n\t*/\n\tbyId: function(id, doc){\n\t\treturn (typeof id == 'string') ? (doc || document).getElementById(id) : id;\n\t},\n\n\t/**\n\t* Returns a string with ampersand, less-than, and greater-than characters replaced with HTML\n\t* entities, e.g.,\n\t* ```\n\t* '&lt;code&gt;'This &amp; That'&lt;/code&gt;'\n\t* ```\n\t* becomes\n\t* ```\n\t* '&amp;lt;code&amp;gt;'This &amp;amp; That'&amp;lt;/code&amp;gt;'\n\t* ```\n\t*\n\t* @param {String} text - A string with entities you'd like to escape/convert.\n\t* @returns {String} A string that is properly escaped (the above characters.)\n\t* @public\n\t*/\n\tescape: function(text) {\n\t\treturn text !== null ? String(text).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;') : '';\n\t},\n\n\t/**\n\t* Returns an object describing the geometry of this node.\n\t*\n\t* @param {Node} n - The [node]{@glossary Node} to measure.\n\t* @returns {Object} An object containing the properties `top`, `left`,\n\t* `height`, and `width`.\n\t* @public\n\t*/\n\tgetBounds: function(n) {\n\t\tif (n) {\n\t\t\treturn {left: n.offsetLeft, top: n.offsetTop, width: n.offsetWidth, height: n.offsetHeight};\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t},\n\n\t/**\n\t* This is designed to be copied into the `computedStyle` object.\n\t*\n\t* @private\n\t*/\n\t_ie8GetComputedStyle: function(prop) {\n\t\tvar re = /(\\-([a-z]){1})/g;\n\t\tif (prop === 'float') {\n\t\t\tprop = 'styleFloat';\n\t\t} else if (re.test(prop)) {\n\t\t\tprop = prop.replace(re, function () {\n\t\t\t\treturn arguments[2].toUpperCase();\n\t\t\t});\n\t\t}\n\t\treturn this[prop] !== undefined ? this[prop] : null;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tgetComputedStyle: function(node) {\n\t\tif(platform.ie < 9 && node && node.currentStyle) {\n\t\t\t//simple global.getComputedStyle polyfill for IE8\n\t\t\tvar computedStyle = utils.clone(node.currentStyle);\n\t\t\tcomputedStyle.getPropertyValue = this._ie8GetComputedStyle;\n\t\t\tcomputedStyle.setProperty = function() {\n\t\t\t\treturn node.currentStyle.setExpression.apply(node.currentStyle, arguments);\n\t\t\t};\n\t\t\tcomputedStyle.removeProperty = function() {\n\t\t\t\treturn node.currentStyle.removeAttribute.apply(node.currentStyle, arguments);\n\t\t\t};\n\t\t\treturn computedStyle;\n\t\t} else {\n\t\t\treturn global.getComputedStyle && node && global.getComputedStyle(node, null);\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tgetComputedStyleValue: function(node, property, computedStyle) {\n\t\tvar s   = computedStyle || this.getComputedStyle(node),\n\t\t\tnIE = platform.ie;\n\n\t\ts = s ? s.getPropertyValue(property) : null;\n\n\t\tif (nIE) {\n\t\t\tvar oConversion = {\n\t\t\t\t'thin'   : (nIE > 8 ? 2 : 1) + 'px',\n\t\t\t\t'medium' : (nIE > 8 ? 4 : 3) + 'px',\n\t\t\t\t'thick'  : (nIE > 8 ? 6 : 5) + 'px',\n\t\t\t\t'none'   : '0'\n\t\t\t};\n\t\t\tif (typeof oConversion[s] != 'undefined') {\n\t\t\t\ts = oConversion[s];\n\t\t\t}\n\n\t\t\tif (s == 'auto') {\n\t\t\t\tswitch (property) {\n\t\t\t\tcase 'width':\n\t\t\t\t\ts = node.offsetWidth;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'height':\n\t\t\t\t\ts = node.offsetHeight;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn s;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tgetFirstElementByTagName: function(tagName) {\n\t\tvar e = document.getElementsByTagName(tagName);\n\t\treturn e && e[0];\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tapplyBodyFit: function() {\n\t\tvar h = this.getFirstElementByTagName('html');\n\t\tif (h) {\n\t\t\tthis.addClass(h, 'enyo-document-fit');\n\t\t}\n\t\tdom.addBodyClass('enyo-body-fit');\n\t\tdom.bodyIsFitting = true;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tgetWindowWidth: function() {\n\t\tif (global.innerWidth) {\n\t\t\treturn global.innerWidth;\n\t\t}\n\t\tif (document.body && document.body.offsetWidth) {\n\t\t\treturn document.body.offsetWidth;\n\t\t}\n\t\tif (document.compatMode=='CSS1Compat' &&\n\t\t\tdocument.documentElement &&\n\t\t\tdocument.documentElement.offsetWidth ) {\n\t\t\treturn document.documentElement.offsetWidth;\n\t\t}\n\t\treturn 320;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tgetWindowHeight: function() {\n\t\tif (global.innerHeight) {\n\t\t\treturn global.innerHeight;\n\t\t}\n\t\tif (document.body && document.body.offsetHeight) {\n\t\t\treturn document.body.offsetHeight;\n\t\t}\n\t\tif (document.compatMode=='CSS1Compat' &&\n\t\t\tdocument.documentElement &&\n\t\t\tdocument.documentElement.offsetHeight ) {\n\t\t\treturn document.documentElement.offsetHeight;\n\t\t}\n\t\treturn 480;\n\t},\n\n\t/**\n\t* The proportion by which the `body` tag differs from the global size, in both X and Y\n\t* dimensions. This is relevant when we need to scale the whole interface down from 1920x1080\n\t* (1080p) to 1280x720 (720p), for example.\n\t*\n\t* @private\n\t*/\n\t_bodyScaleFactorY: 1,\n\t_bodyScaleFactorX: 1,\n\tupdateScaleFactor: function() {\n\t\tvar bodyBounds = this.getBounds(document.body);\n\t\tthis._bodyScaleFactorY = bodyBounds.height / this.getWindowHeight();\n\t\tthis._bodyScaleFactorX = bodyBounds.width / this.getWindowWidth();\n\t},\n\n\t/**\n\t* @private\n\t*/\n\t// Workaround for lack of compareDocumentPosition support in IE8\n\t// Code MIT Licensed, John Resig; source: http://ejohn.org/blog/comparing-document-position/\n\tcompareDocumentPosition: function(a, b) {\n\t\treturn a.compareDocumentPosition ?\n\t\ta.compareDocumentPosition(b) :\n\t\ta.contains ?\n\t\t\t(a != b && a.contains(b) && 16) +\n\t\t\t(a != b && b.contains(a) && 8) +\n\t\t\t(a.sourceIndex >= 0 && b.sourceIndex >= 0 ?\n\t\t\t\t(a.sourceIndex < b.sourceIndex && 4) +\n\t\t\t\t(a.sourceIndex > b.sourceIndex && 2) :\n\t\t\t\t1) +\n\t\t\t0 :\n\t\t\t0;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\t// moved from FittableLayout.js into common protected code\n\t_ieCssToPixelValue: function(node, value) {\n\t\tvar v = value;\n\t\t// From the awesome hack by Dean Edwards\n\t\t// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291\n\t\tvar s = node.style;\n\t\t// store style and runtime style values\n\t\tvar l = s.left;\n\t\tvar rl = node.runtimeStyle && node.runtimeStyle.left;\n\t\t// then put current style in runtime style.\n\t\tif (rl) {\n\t\t\tnode.runtimeStyle.left = node.currentStyle.left;\n\t\t}\n\t\t// apply given value and measure its pixel value\n\t\ts.left = v;\n\t\tv = s.pixelLeft;\n\t\t// finally restore previous state\n\t\ts.left = l;\n\t\tif (rl) {\n\t\t\ts.runtimeStyle.left = rl;\n\t\t}\n\t\treturn v;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\t_pxMatch: /px/i,\n\tgetComputedBoxValue: function(node, prop, boundary, computedStyle) {\n\t\tvar s = computedStyle || this.getComputedStyle(node);\n\t\tif (s && (!platform.ie || platform.ie >= 9)) {\n\t\t\tvar p = s.getPropertyValue(prop + '-' + boundary);\n\t\t\treturn p === 'auto' ? 0 : parseInt(p, 10);\n\t\t} else if (node && node.currentStyle) {\n\t\t\tvar v = node.currentStyle[prop + utils.cap(boundary)];\n\t\t\tif (!v.match(this._pxMatch)) {\n\t\t\t\tv = this._ieCssToPixelValue(node, v);\n\t\t\t}\n\t\t\treturn parseInt(v, 0);\n\t\t}\n\t\treturn 0;\n\t},\n\n\t/**\n\t* Gets the boundaries of a [node's]{@glossary Node} `margin` or `padding` box.\n\t*\n\t* @param {Node} node - The [node]{@glossary Node} to measure.\n\t* @param {Node} box - The boundary to measure from ('padding' or 'margin').\n\t* @returns {Object} An object containing the properties `top`, `right`, `bottom`, and\n\t*\t`left`.\n\t* @public\n\t*/\n\tcalcBoxExtents: function(node, box) {\n\t\tvar s = this.getComputedStyle(node);\n\t\treturn {\n\t\t\ttop: this.getComputedBoxValue(node, box, 'top', s),\n\t\t\tright: this.getComputedBoxValue(node, box, 'right', s),\n\t\t\tbottom: this.getComputedBoxValue(node, box, 'bottom', s),\n\t\t\tleft: this.getComputedBoxValue(node, box, 'left', s)\n\t\t};\n\t},\n\n\t/**\n\t* Gets the calculated padding of a node. Shortcut for\n\t* [enyo.dom.calcBoxExtents()]{@link enyo.dom.calcBoxExtents}.\n\t*\n\t* @param {Node} node - The [node]{@glossary Node} to measure.\n\t* @returns {Object} An object containing the properties `top`, `right`, `bottom`, and\n\t*\t`left`.\n\t* @public\n\t*/\n\tcalcPaddingExtents: function(node) {\n\t\treturn this.calcBoxExtents(node, 'padding');\n\t},\n\n\t/**\n\t* Gets the calculated margin of a node. Shortcut for\n\t* [enyo.dom.calcBoxExtents()]{@link enyo.dom.calcBoxExtents}.\n\t*\n\t* @param {Node} node - The [node]{@glossary Node} to measure.\n\t* @returns {Object} An object containing the properties `top`, `right`, `bottom`, and\n\t*\t`left`.\n\t* @public\n\t*/\n\tcalcMarginExtents: function(node) {\n\t\treturn this.calcBoxExtents(node, 'margin');\n\t},\n\t/**\n\t* Returns an object like `{top: 0, left: 0, bottom: 100, right: 100, height: 10, width: 10}`\n\t* that represents the object's position relative to `relativeToNode` (suitable for absolute\n\t* positioning within that parent node). Negative values mean part of the object is not\n\t* visible. If you leave `relativeToNode` as `undefined` (or it is not a parent element), then\n\t* the position will be relative to the viewport and suitable for absolute positioning in a\n\t* floating layer.\n\t*\n\t* @param {Node} node - The [node]{@glossary Node} to measure.\n\t* @param {Node} relativeToNode - The [node]{@glossary Node} to measure the distance from.\n\t* @returns {Object} An object containing the properties `top`, `right`, `bottom`, `left`,\n\t*\t`height`, and `width`.\n\t* @public\n\t*/\n\tcalcNodePosition: function(targetNode, relativeToNode) {\n\t\t// Parse upward and grab our positioning relative to the viewport\n\t\tvar top = 0,\n\t\t\tleft = 0,\n\t\t\tnode = targetNode,\n\t\t\twidth = node.offsetWidth,\n\t\t\theight = node.offsetHeight,\n\t\t\ttransformProp = dom.getStyleTransformProp(),\n\t\t\txregex = /translateX\\((-?\\d+)px\\)/i,\n\t\t\tyregex = /translateY\\((-?\\d+)px\\)/i,\n\t\t\tborderLeft = 0, borderTop = 0,\n\t\t\ttotalHeight = 0, totalWidth = 0,\n\t\t\toffsetAdjustLeft = 0, offsetAdjustTop = 0;\n\n\t\tif (relativeToNode) {\n\t\t\ttotalHeight = relativeToNode.offsetHeight;\n\t\t\ttotalWidth = relativeToNode.offsetWidth;\n\t\t} else {\n\t\t\ttotalHeight = (document.body.parentNode.offsetHeight > this.getWindowHeight() ? this.getWindowHeight() - document.body.parentNode.scrollTop : document.body.parentNode.offsetHeight);\n\t\t\ttotalWidth = (document.body.parentNode.offsetWidth > this.getWindowWidth() ? this.getWindowWidth() - document.body.parentNode.scrollLeft : document.body.parentNode.offsetWidth);\n\t\t}\n\n\t\tif (node.offsetParent) {\n\t\t\tdo {\n\t\t\t\t// Adjust the offset if relativeToNode is a child of the offsetParent\n\t\t\t\t// For IE 8 compatibility, have to use integer 8 instead of Node.DOCUMENT_POSITION_CONTAINS\n\t\t\t\tif (relativeToNode && this.compareDocumentPosition(relativeToNode, node.offsetParent) & 8) {\n\t\t\t\t\toffsetAdjustLeft = relativeToNode.offsetLeft;\n\t\t\t\t\toffsetAdjustTop = relativeToNode.offsetTop;\n\t\t\t\t}\n\t\t\t\t// Ajust our top and left properties based on the position relative to the parent\n\t\t\t\tleft += node.offsetLeft - (node.offsetParent ? node.offsetParent.scrollLeft : 0) - offsetAdjustLeft;\n\t\t\t\tif (transformProp && xregex.test(node.style[transformProp])) {\n\t\t\t\t\tleft += parseInt(node.style[transformProp].replace(xregex, '$1'), 10);\n\t\t\t\t}\n\t\t\t\ttop += node.offsetTop - (node.offsetParent ? node.offsetParent.scrollTop : 0) - offsetAdjustTop;\n\t\t\t\tif (transformProp && yregex.test(node.style[transformProp])) {\n\t\t\t\t\ttop += parseInt(node.style[transformProp].replace(yregex, '$1'), 10);\n\t\t\t\t}\n\t\t\t\t// Need to correct for borders if any exist on parent elements\n\t\t\t\tif (node !== targetNode) {\n\t\t\t\t\tif (node.currentStyle) {\n\t\t\t\t\t\t// Oh IE, we do so love working around your incompatibilities\n\t\t\t\t\t\tborderLeft = parseInt(node.currentStyle.borderLeftWidth, 10);\n\t\t\t\t\t\tborderTop = parseInt(node.currentStyle.borderTopWidth, 10);\n\t\t\t\t\t} else if (global.getComputedStyle) {\n\t\t\t\t\t\tborderLeft = parseInt(global.getComputedStyle(node, '').getPropertyValue('border-left-width'), 10);\n\t\t\t\t\t\tborderTop = parseInt(global.getComputedStyle(node, '').getPropertyValue('border-top-width'), 10);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// No computed style options, so try the normal style object (much less robust)\n\t\t\t\t\t\tborderLeft = parseInt(node.style.borderLeftWidth, 10);\n\t\t\t\t\t\tborderTop = parseInt(node.style.borderTopWidth, 10);\n\t\t\t\t\t}\n\t\t\t\t\tif (borderLeft) {\n\t\t\t\t\t\tleft += borderLeft;\n\t\t\t\t\t}\n\t\t\t\t\tif (borderTop) {\n\t\t\t\t\t\ttop += borderTop;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Continue if we have an additional offsetParent, and either don't have a relativeToNode or the offsetParent is contained by the relativeToNode (if offsetParent contains relativeToNode, then we have already calculated up to the node, and can safely exit)\n\t\t\t\t// For IE 8 compatibility, have to use integer 16 instead of Node.DOCUMENT_POSITION_CONTAINED_BY\n\t\t\t} while ((node = node.offsetParent) && (!relativeToNode || this.compareDocumentPosition(relativeToNode, node) & 16));\n\t\t}\n\t\treturn {\n\t\t\t'top': top,\n\t\t\t'left': left,\n\t\t\t'bottom': totalHeight - top - height,\n\t\t\t'right': totalWidth - left - width,\n\t\t\t'height': height,\n\t\t\t'width': width\n\t\t};\n\t},\n\n\t/**\n\t* Sets the `innerHTML` property of the specified `node` to `html`.\n\t*\n\t* @param {Node} node - The [node]{@glossary Node} to set.\n\t* @param {String} html - An HTML string.\n\t* @public\n\t*/\n\tsetInnerHtml: function(node, html) {\n\t\tnode.innerHTML = html;\n\t},\n\n\t/**\n\t* Checks a [DOM]{@glossary Node} [node]{@glossary Node} for a specific CSS class.\n\t*\n\t* @param {Node} node - The [node]{@glossary Node} to set.\n\t* @param {String} s - The class name to check for.\n\t* @returns {(Boolean|undefined)} `true` if `node` has the `s` class; `undefined`\n\t* if there is no `node` or it has no `className` property.\n\t* @public\n\t*/\n\thasClass: function(node, s) {\n\t\tif (!node || !node.className) { return; }\n\t\treturn (' ' + node.className + ' ').indexOf(' ' + s + ' ') >= 0;\n\t},\n\n\t/**\n\t* Uniquely adds a CSS class to a DOM node.\n\t*\n\t* @param {Node} node - The [node]{@glossary Node} to set.\n\t* @param {String} s - The class name to add.\n\t* @public\n\t*/\n\taddClass: function(node, s) {\n\t\tif (node && !this.hasClass(node, s)) {\n\t\t\tvar ss = node.className;\n\t\t\tnode.className = (ss + (ss ? ' ' : '') + s);\n\t\t}\n\t},\n\n\t/**\n\t* Removes a CSS class from a DOM node if it exists.\n\t*\n\t* @param {Node} node - The [node]{@glossary Node} from which to remove the class.\n\t* @param {String} s - The class name to remove from `node`.\n\t* @public\n\t*/\n\tremoveClass: function(node, s) {\n\t\tif (node && this.hasClass(node, s)) {\n\t\t\tvar ss = node.className;\n\t\t\tnode.className = (' ' + ss + ' ').replace(' ' + s + ' ', ' ').slice(1, -1);\n\t\t}\n\t},\n\n\t/**\n\t* Adds a class to `document.body`. This defers the actual class change if nothing has been\n\t* rendered into `body` yet.\n\t*\n\t* @param {String} s - The class name to add to the document's `body`.\n\t* @public\n\t*/\n\taddBodyClass: function(s) {\n\t\tif (!utils.exists(roots.roots) || roots.roots.length === 0) {\n\t\t\tif (dom._bodyClasses) {\n\t\t\t\tdom._bodyClasses.push(s);\n\t\t\t} else {\n\t\t\t\tdom._bodyClasses = [s];\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tdom.addClass(document.body, s);\n\t\t}\n\t},\n\n\t/**\n\t* Returns an object describing the absolute position on the screen, relative to the top left\n\t* corner of the screen. This function takes into account account absolute/relative\n\t* `offsetParent` positioning, `scroll` position, and CSS transforms (currently\n\t* `translateX`, `translateY`, and `matrix3d`).\n\t*\n\t* ```javascript\n\t* {top: ..., right: ..., bottom: ..., left: ..., height: ..., width: ...}\n\t* ```\n\t*\n\t* Values returned are only valid if `hasNode()` is truthy. If there's no DOM node for the\n\t* object, this returns a bounds structure with `undefined` as the value of all fields.\n\t*\n\t* @param {Node} n - The [node]{@glossary Node} to measure.\n\t* @returns {Object} An object containing the properties `top`, `right`, `bottom`, `left`,\n\t*\t`height`, and `width`.\n\t* @public\n\t*/\n\tgetAbsoluteBounds: function(targetNode) {\n\t\treturn utils.clone(targetNode.getBoundingClientRect());\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tflushBodyClasses: function() {\n\t\tif (dom._bodyClasses) {\n\t\t\tfor (var i = 0, c; (c=dom._bodyClasses[i]); ++i) {\n\t\t\t\tdom.addClass(document.body, c);\n\t\t\t}\n\t\t\tdom._bodyClasses = null;\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\t_bodyClasses: null,\n\n\t/**\n\t* Convert to various unit formats. Useful for converting pixels to a resolution-independent\n\t* measurement method, like \"rem\". Other units are available if defined in the\n\t* [enyo.dom.unitToPixelFactors]{@link enyo.dom.unitToPixelFactors} object.\n\t*\n\t* ```javascript\n\t* // Do calculations and get back the desired CSS unit.\n\t* var frameWidth = 250,\n\t*     frameWithMarginInches = enyo.dom.unit( 10 + frameWidth + 10, 'in' ),\n\t*     frameWithMarginRems = enyo.dom.unit( 10 + frameWidth + 10, 'rem' );\n\t* // '2.8125in' == frameWithMarginInches\n\t* // '22.5rem' == frameWithMarginRems\n\t* ```\n\t*\n\t* @param {(String|Number)} pixels - The the pixels or math to convert to the unit.\n\t*\t(\"px\" suffix in String format is permitted. ex: `'20px'`)\n\t* @param {(String)} toUnit - The name of the unit to convert to.\n\t* @returns {(Number|undefined)} Resulting conversion, in case of malformed input, `undefined`\n\t* @public\n\t*/\n\tunit: function (pixels, toUnit) {\n\t\tif (!toUnit || !this.unitToPixelFactors[toUnit]) return;\n\t\tif (typeof pixels == 'string' && pixels.substr(-2) == 'px') pixels = parseInt(pixels.substr(0, pixels.length - 2), 10);\n\t\tif (typeof pixels != 'number') return;\n\n\t\treturn (pixels / this.unitToPixelFactors[toUnit]) + '' + toUnit;\n\t},\n\n\t/**\n\t* Object that stores all of the pixel conversion factors to each keyed unit.\n\t*\n\t* @public\n\t*/\n\tunitToPixelFactors: {\n\t\t'rem': 12,\n\t\t'in': 96\n\t}\n};\n\n// override setInnerHtml for Windows 8 HTML applications\nif (typeof global.MSApp !== 'undefined') {\n\tdom.setInnerHtml = function(node, html) {\n\t\tglobal.MSApp.execUnsafeLocalFunction(function() {\n\t\t\tnode.innerHTML = html;\n\t\t});\n\t};\n}\n\n// use faster classList interface if it exists\nif (document.head && document.head.classList) {\n\tdom.hasClass = function(node, s) {\n\t\tif (node) {\n\t\t\treturn node.classList.contains(s);\n\t\t}\n\t};\n\tdom.addClass = function(node, s) {\n\t\tif (node) {\n\t\t\treturn node.classList.add(s);\n\t\t}\n\t};\n\tdom.removeClass = function (node, s) {\n\t\tif (node) {\n\t\t\treturn node.classList.remove(s);\n\t\t}\n\t};\n}\n\n/**\n* Allows bootstrapping in environments that do not have a global object right away.\n*\n* @param {Function} func - The function to run\n* @public\n*/\ndom.requiresWindow = function(func) {\n\tfunc();\n};\n\n\nvar cssTransformProps = ['transform', '-webkit-transform', '-moz-transform', '-ms-transform', '-o-transform'],\n\tstyleTransformProps = ['transform', 'webkitTransform', 'MozTransform', 'msTransform', 'OTransform'];\n\n/**\n* @private\n*/\ndom.calcCanAccelerate = function() {\n\t/* Android 2 is a liar: it does NOT support 3D transforms, even though Perspective is the best check */\n\tif (platform.android <= 2) {\n\t\treturn false;\n\t}\n\tvar p$ = ['perspective', 'WebkitPerspective', 'MozPerspective', 'msPerspective', 'OPerspective'];\n\tfor (var i=0, p; (p=p$[i]); i++) {\n\t\tif (typeof document.body.style[p] != 'undefined') {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\n/**\n* @private\n*/\ndom.getCssTransformProp = function() {\n\tif (this._cssTransformProp) {\n\t\treturn this._cssTransformProp;\n\t}\n\tvar i = utils.indexOf(this.getStyleTransformProp(), styleTransformProps);\n\tthis._cssTransformProp = cssTransformProps[i];\n\treturn this._cssTransformProp;\n};\n\n/**\n* @private\n*/\ndom.getStyleTransformProp = function() {\n\tif (this._styleTransformProp || !document.body) {\n\t\treturn this._styleTransformProp;\n\t}\n\tfor (var i = 0, p; (p = styleTransformProps[i]); i++) {\n\t\tif (typeof document.body.style[p] != 'undefined') {\n\t\t\tthis._styleTransformProp = p;\n\t\t\treturn this._styleTransformProp;\n\t\t}\n\t}\n};\n\n/**\n* @private\n*/\ndom.domTransformsToCss = function(inTransforms) {\n\tvar n, v, text = '';\n\tfor (n in inTransforms) {\n\t\tv = inTransforms[n];\n\t\tif ((v !== null) && (v !== undefined) && (v !== '')) {\n\t\t\ttext +=  n + '(' + v + ') ';\n\t\t}\n\t}\n\treturn text;\n};\n\n/**\n* @private\n*/\ndom.transformsToDom = function(control) {\n\tvar css = this.domTransformsToCss(control.domTransforms),\n\t\tstyleProp;\n\n\tif (control.hasNode()) {\n\t\tstyleProp = this.getStyleTransformProp();\n\t} else {\n\t\tstyleProp = this.getCssTransformProp();\n\t}\n\n\tif (styleProp) control.applyStyle(styleProp, css);\n};\n\n/**\n* Returns `true` if the platform supports CSS3 Transforms.\n*\n* @returns {Boolean} `true` if platform supports CSS `transform` property;\n* otherwise, `false`.\n* @public\n*/\ndom.canTransform = function() {\n\treturn Boolean(this.getStyleTransformProp());\n};\n\n/**\n* Returns `true` if platform supports CSS3 3D Transforms.\n*\n* Typically used like this:\n* ```\n* if (dom.canAccelerate()) {\n* \tdom.transformValue(this.$.slidingThing, 'translate3d', x + ',' + y + ',' + '0')\n* } else {\n* \tdom.transformValue(this.$.slidingThing, 'translate', x + ',' + y);\n* }\n* ```\n*\n* @returns {Boolean} `true` if platform supports CSS3 3D Transforms;\n* otherwise, `false`.\n* @public\n*/\ndom.canAccelerate = function() {\n\treturn (this.accelerando !== undefined) ? this.accelerando : document.body && (this.accelerando = this.calcCanAccelerate());\n};\n\n/**\n* Applies a series of transforms to the specified {@link module:enyo/Control~Control}, using\n* the platform's prefixed `transform` property.\n*\n* **Note:** Transforms are not commutative, so order is important.\n*\n* Transform values are updated by successive calls, so\n* ```javascript\n* dom.transform(control, {translate: '30px, 40px', scale: 2, rotate: '20deg'});\n* dom.transform(control, {scale: 3, skewX: '-30deg'});\n* ```\n*\n* is equivalent to:\n* ```javascript\n* dom.transform(control, {translate: '30px, 40px', scale: 3, rotate: '20deg', skewX: '-30deg'});\n* ```\n*\n* When applying these transforms in a WebKit browser, this is equivalent to:\n* ```javascript\n* control.applyStyle('-webkit-transform', 'translate(30px, 40px) scale(3) rotate(20deg) skewX(-30deg)');\n* ```\n*\n* And in Firefox, this is equivalent to:\n* ```javascript\n* control.applyStyle('-moz-transform', 'translate(30px, 40px) scale(3) rotate(20deg) skewX(-30deg)');\n* ```\n*\n* @param {module:enyo/Control~Control} control - The {@link module:enyo/Control~Control} to transform.\n* @param {Object} transforms - The set of transforms to apply to `control`.\n* @public\n*/\ndom.transform = function(control, transforms) {\n\tvar d = control.domTransforms = control.domTransforms || {};\n\tutils.mixin(d, transforms);\n\tthis.transformsToDom(control);\n};\n\n/**\n* Applies a single transform to the specified {@link module:enyo/Control~Control}.\n*\n* Example:\n* ```\n* tap: function(inSender, inEvent) {\n* \tvar c = inEvent.originator;\n* \tvar r = c.rotation || 0;\n* \tr = (r + 45) % 360;\n* \tc.rotation = r;\n* \tdom.transformValue(c, 'rotate', r);\n* }\n* ```\n*\n* This will rotate the tapped control by 45 degrees clockwise.\n*\n* @param {module:enyo/Control~Control} control - The {@link module:enyo/Control~Control} to transform.\n* @param {String} transform - The name of the transform function.\n* @param {(String|Number)} value - The value to apply to the transform.\n* @public\n*/\ndom.transformValue = function(control, transform, value) {\n\tvar d = control.domTransforms = control.domTransforms || {};\n\td[transform] = value;\n\tthis.transformsToDom(control);\n};\n\n/**\n* Applies a transform that should trigger GPU compositing for the specified\n* {@link enyo.Control}. By default, the acceleration is only applied if the\n* browser supports it. You may also optionally force-set `value` directly, to\n* be applied to `translateZ(value)`.\n*\n* @param {module:enyo/Control~Control} control - The {@link module:enyo/Control~Control} to accelerate.\n* @param {(String|Number)} [value] - An optional value to apply to the acceleration transform\n*\tproperty.\n* @public\n*/\ndom.accelerate = function(control, value) {\n\tvar v = value == 'auto' ? this.canAccelerate() : value;\n\tthis.transformValue(control, 'translateZ', v ? 0 : null);\n};\n\n\n/**\n * The CSS `transition` property name for the current browser/platform, e.g.:\n *\n * * `-webkit-transition`\n * * `-moz-transition`\n * * `transition`\n *\n * @type {String}\n * @private\n */\ndom.transition = (platform.ios || platform.android || platform.chrome || platform.androidChrome || platform.safari)\n\t? '-webkit-transition'\n\t: (platform.firefox || platform.firefoxOS || platform.androidFirefox)\n\t\t? '-moz-transition'\n\t\t: 'transition';\n",
    "mtime": 1434758950000,
    "relPath": "enyo/dom",
    "requires": [
      "enyo",
      "./roots",
      "./utils",
      "./platform"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./animation",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/animation",
    "name": "enyo/animation",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/animation.js",
    "contents": "/**\n* Contains methods useful for animations.\n* @module enyo/animation\n*/\n\nrequire('enyo');\n\nvar\n\tplatform = require('./platform'),\n\tutils = require('./utils');\n\nvar ms = Math.round(1000/60);\nvar prefix = ['webkit', 'moz', 'ms', 'o', ''];\nvar r = 'requestAnimationFrame';\nvar c = 'cancel' + utils.cap(r);\n\n/*\n* Fallback on setTimeout\n*\n* @private\n*/\nvar _requestFrame = function(inCallback) {\n\treturn global.setTimeout(inCallback, ms);\n};\n\n/*\n* Fallback on clearTimeout\n*\n* @private\n*/\nvar _cancelFrame = function(inId) {\n\treturn global.clearTimeout(inId);\n};\n\nfor (var i = 0, pl = prefix.length, p, wc, wr; (p = prefix[i]) || i < pl; i++) {\n\t// if we're on ios 6 just use setTimeout, requestAnimationFrame has some kinks currently\n\tif (platform.ios >= 6) {\n\t\tbreak;\n\t}\n\n\t// if prefixed, becomes Request and Cancel\n\twc = p ? (p + utils.cap(c)) : c;\n\twr = p ? (p + utils.cap(r)) : r;\n\t// Test for cancelRequestAnimationFrame, because some browsers (Firefix 4-10) have a request without a cancel\n\tif (global[wc]) {\n\t\t_cancelFrame = global[wc];\n\t\t_requestFrame = global[wr];\n\t\tif (p == 'webkit') {\n\t\t\t/*\n\t\t\t\tNote: In Chrome, the first return value of webkitRequestAnimationFrame is 0.\n\t\t\t\tWe make 1 bogus call so the first used return value of webkitRequestAnimationFrame is > 0, as the spec requires.\n\t\t\t\tThis makes it so that the requestId is always truthy.\n\t\t\t\t(we choose to do this rather than wrapping the native function to avoid the overhead)\n\t\t\t*/\n\t\t\t_cancelFrame(_requestFrame(utils.nop));\n\t\t}\n\t\tbreak;\n\t}\n}\n/**\n* Requests an animation callback.\n*\n* On compatible browsers, if `node` is defined, the [callback]{@glossary callback} will\n* fire only if `node` is visible.\n*\n* @param {Function} callback - A [callback]{@glossary callback} to be executed on the\n*                            animation frame.\n* @param {Node} node - The DOM node to request the animation frame for.\n* @returns {Object} A request id to be used with\n*                     [enyo.cancelRequestAnimationFrame()]{@link module:enyo/cancelRequestAnimationFrame~cancelRequestAnimationFrame}.\n* @public\n*/\nexports.requestAnimationFrame = function(callback, node) {\n\treturn _requestFrame(callback, node);\n};\n/**\n* Cancels a requested animation callback with the specified id.\n*\n* @public\n*/\nexports.cancelRequestAnimationFrame = function(inId) {\n\treturn _cancelFrame(inId);\n};\n\n/**\n* A set of interpolation functions for animations, similar in function to CSS3\n* transitions.\n*\n* These are intended for use with {@link module:enyo/animation.easedLerp}. Each easing function\n* accepts one (1) [Number]{@glossary Number} parameter and returns one (1)\n* [Number]{@glossary Number} value.\n*\n* @public\n*/\nexports.easing = /** @lends module:enyo/easing~easing */ {\n\t/**\n\t* cubicIn\n\t*\n\t* @public\n\t*/\n\tcubicIn: function(n) {\n\t\treturn Math.pow(n, 3);\n\t},\n\t/**\n\t* cubicOut\n\t*\n\t* @public\n\t*/\n\tcubicOut: function(n) {\n\t\treturn Math.pow(n - 1, 3) + 1;\n\t},\n\t/**\n\t* expoOut\n\t*\n\t* @public\n\t*/\n\texpoOut: function(n) {\n\t\treturn (n == 1) ? 1 : (-1 * Math.pow(2, -10 * n) + 1);\n\t},\n\t/**\n\t* quadInOut\n\t*\n\t* @public\n\t*/\n\tquadInOut: function(n) {\n\t\tn = n * 2;\n\t\tif (n < 1) {\n\t\t\treturn Math.pow(n, 2) / 2;\n\t\t}\n\t\treturn -1 * ((--n) * (n - 2) - 1) / 2;\n\t},\n\t/**\n\t* linear\n\t*\n\t* @public\n\t*/\n\tlinear: function(n) {\n\t\treturn n;\n\t}\n};\n\n/**\n* Gives an interpolation of an animated transition's distance from 0 to 1.\n*\n* Given a start time (`t0`) and an animation duration (`duration`), this\n* method applies the `easing` function to the percentage of time elapsed\n* divided by duration, capped at 100%.\n*\n* @param {Number} t0 - Start time.\n* @param {Number} duration - Duration in milliseconds.\n* @param {Function} easing - An easing [function]{@glossary Function} reference from\n*\t{@link module:enyo/easing~easing}.\n* @param {Boolean} reverse - Whether the animation will run in reverse.\n* @returns {Number} The resulting position, capped at a maximum of 100%.\n* @public\n*/\nexports.easedLerp = function(t0, duration, easing, reverse) {\n\tvar lerp = (utils.perfNow() - t0) / duration;\n\tif (reverse) {\n\t\treturn lerp >= 1 ? 0 : (1 - easing(1 - lerp));\n\t} else {\n\t\treturn lerp >= 1 ? 1 : easing(lerp);\n\t}\n};\n\n/**\n* Gives an interpolation of an animated transition's distance from\n* `startValue` to `valueChange`.\n*\n* Applies the `easing` function with a wider range of variables to allow for\n* more complex animations.\n*\n* @param {Number} t0 - Start time.\n* @param {Number} duration - Duration in milliseconds.\n* @param {Function} easing - An easing [function]{@glossary Function} reference from\n*\t{@link module:enyo/easing~easing}.\n* @param {Boolean} reverse - Whether the animation will run in reverse.\n* @param {Number} time\n* @param {Number} startValue - Starting value.\n* @param {Number} valueChange\n* @returns {Number} The resulting position, capped at a maximum of 100%.\n* @public\n*/\nexports.easedComplexLerp = function(t0, duration, easing, reverse, time, startValue, valueChange) {\n\tvar lerp = (utils.perfNow() - t0) / duration;\n\tif (reverse) {\n\t\treturn easing(1 - lerp, time, startValue, valueChange, duration);\n\t} else {\n\t\treturn easing(lerp, time, startValue, valueChange, duration);\n\t}\n};\n",
    "mtime": 1434758950000,
    "relPath": "enyo/animation",
    "requires": [
      "enyo",
      "./platform",
      "./utils"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./FormData",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/FormData",
    "name": "enyo/FormData",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/FormData.js",
    "contents": "require('enyo');\n\nvar\n\tutils = require('./utils');\n\n/**\n* An [XHR2]{@linkplain http://www.w3.org/TR/XMLHttpRequest/} FormData implementation.\n* It is used to send `multipart/form-data` [Ajax]{@glossary ajax} requests. The\n* internal [enyo/Blob]{@link module:enyo/Blob} [kind]{@glossary kind} is the\n* content provider for file-parts.\n*\n* Note that in Internet Explorer < 10, both `enyo/FormData` and `enyo.Blob` are\n* limited to [string]{@glossary String} content and `enyo.Blob` may only be\n* instantiated using an [array]{@glossary Array} of [strings]{@glossary String}.\n*\n* This implementation is inspired by\n* [html5-formdata]{@linkplain https://github.com/francois2metz/html5-formdata/blob/master/formdata.js}.\n*\n* ```\n* Emulate FormData for some browsers\n* MIT License\n* (c) 2010 Francois de Metz\n* ```\n*\n* @module enyo/FormData\n* @public\n*/\nexports = null;\n\nif (typeof FormData != 'undefined') {\n\ttry {\n\t\tnew FormData();\n\t\t\n\t\texports = module.exports = FormData;\n\t// Android Chrome 18 will throw an error trying to create this\n\t} catch (e) {}\n}\n\nif (!exports) {\n\n\t/*jshint -W082 */\n\tfunction FormData() {\n\t\tthis.fake = true;\n\t\tthis._fields = [];\n\t\t// This generates a 50 character boundary similar to\n\t\t// those used by Firefox.  They are optimized for\n\t\t// boyer-moore parsing.\n\t\tthis.boundary = '--------------------------';\n\t\tfor (var i = 0; i < 24; i++) {\n\t\t\tthis.boundary += Math.floor(Math.random() * 10).toString(16);\n\t\t}\n\t}\n\tFormData.prototype.getContentType = function() {\n\t\treturn \"multipart/form-data; boundary=\" + this.boundary;\n\t};\n\tFormData.prototype.append = function(key, value, filename) {\n\t\tthis._fields.push([key, value, filename]);\n\t};\n\tFormData.prototype.toString = function() {\n\t\tvar boundary = this.boundary;\n\t\tvar body = \"\";\n\t\tutils.forEach(this._fields, function(field) {\n\t\t\tbody += \"--\" + boundary + \"\\r\\n\";\n\t\t\tif (field[2] || field[1].name) {\n\t\t\t\t// file upload\n\t\t\t\tvar file = field[1], filename = field[2] || file.name;\n\t\t\t\tbody += \"Content-Disposition: form-data; name=\\\"\"+ field[0] +\"\\\"; filename=\\\"\"+ filename +\"\\\"\\r\\n\";\n\t\t\t\tbody += \"Content-Type: \"+ file.type +\"\\r\\n\\r\\n\";\n\t\t\t\tbody += file.getAsBinary() + \"\\r\\n\";\n\t\t\t} else {\n\t\t\t\t// key-value field\n\t\t\t\tbody += \"Content-Disposition: form-data; name=\\\"\"+ field[0] +\"\\\";\\r\\n\\r\\n\";\n\t\t\t\tbody += field[1] + \"\\r\\n\";\n\t\t\t}\n\t\t});\n\t\tbody += \"--\" + boundary +\"--\";\n\t\treturn body;\n\t};\n\t/*jshint +W082 */\n\t\n\tmodule.exports = FormData;\n}\n",
    "mtime": 1434758950000,
    "relPath": "enyo/FormData",
    "requires": [
      "enyo",
      "./utils"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./platform",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/platform",
    "name": "enyo/platform",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/platform.js",
    "contents": "require('enyo');\n\nvar utils = require('./utils');\n\n/**\n* Determines OS versions of platforms that need special treatment. Can have one of the following\n* properties:\n*\n* * android\n* * androidChrome (Chrome on Android, standard starting in 4.1)\n* * androidFirefox\n* * ie\n* * ios\n* * webos\n* * windowsPhone\n* * blackberry\n* * tizen\n* * safari (desktop version)\n* * chrome (desktop version)\n* * firefox (desktop version)\n* * firefoxOS\n*\n* If the property is defined, its value will be the major version number of the platform.\n*\n* Example:\n* ```javascript\n* // android 2 does not have 3d css\n* if (enyo.platform.android < 3) {\n* \tt = 'translate(30px, 50px)';\n* } else {\n* \tt = 'translate3d(30px, 50px, 0)';\n* }\n* this.applyStyle('-webkit-transform', t);\n* ```\n*\n* @module enyo/platform\n*/\nexports = module.exports = \n\t/** @lends module:enyo/platform~platform */ {\n\t//* `true` if the platform has native single-finger [events]{@glossary event}.\n\ttouch: Boolean(('ontouchstart' in window) || window.navigator.msMaxTouchPoints),\n\t//* `true` if the platform has native double-finger [events]{@glossary event}.\n\tgesture: Boolean(('ongesturestart' in window) || window.navigator.msMaxTouchPoints)\n};\n\n/**\n* @private\n*/\nvar ua = navigator.userAgent;\nvar ep = exports;\nvar platforms = [\n\t// Android 4+ using Chrome\n\t{platform: 'androidChrome', regex: /Android .* Chrome\\/(\\d+)[.\\d]+/},\n\t// Android 2 - 4\n\t{platform: 'android', regex: /Android (\\d+)/},\n\t// Kindle Fire\n\t// Force version to 2, (desktop mode does not list android version)\n\t{platform: 'android', regex: /Silk\\/1./, forceVersion: 2, extra: {silk: 1}},\n\t// Kindle Fire HD (Silk versions 2 or 3)\n\t// Force version to 4\n\t{platform: 'android', regex: /Silk\\/2./, forceVersion: 4, extra: {silk: 2}},\n\t{platform: 'android', regex: /Silk\\/3./, forceVersion: 4, extra: {silk: 3}},\n\t// Windows Phone 7 - 8\n\t{platform: 'windowsPhone', regex: /Windows Phone (?:OS )?(\\d+)[.\\d]+/},\n\t// IE 8 - 10\n\t{platform: 'ie', regex: /MSIE (\\d+)/},\n\t// IE 11\n\t{platform: 'ie', regex: /Trident\\/.*; rv:(\\d+)/},\n\t// iOS 3 - 5\n\t// Apple likes to make this complicated\n\t{platform: 'ios', regex: /iP(?:hone|ad;(?: U;)? CPU) OS (\\d+)/},\n\t// webOS 1 - 3\n\t{platform: 'webos', regex: /(?:web|hpw)OS\\/(\\d+)/},\n\t// webOS 4 / OpenWebOS\n\t{platform: 'webos', regex: /WebAppManager|Isis|webOS\\./, forceVersion: 4},\n\t// Open webOS release LuneOS\n\t{platform: 'webos', regex: /LuneOS/, forceVersion: 4, extra: {luneos: 1}},\n\t// desktop Safari\n\t{platform: 'safari', regex: /Version\\/(\\d+)[.\\d]+\\s+Safari/},\n\t// desktop Chrome\n\t{platform: 'chrome', regex: /Chrome\\/(\\d+)[.\\d]+/},\n\t// Firefox on Android\n\t{platform: 'androidFirefox', regex: /Android;.*Firefox\\/(\\d+)/},\n\t// FirefoxOS\n\t{platform: 'firefoxOS', regex: /Mobile;.*Firefox\\/(\\d+)/},\n\t// desktop Firefox\n\t{platform: 'firefox', regex: /Firefox\\/(\\d+)/},\n\t// Blackberry Playbook\n\t{platform: 'blackberry', regex: /PlayBook/i, forceVersion: 2},\n\t// Blackberry 10+\n\t{platform: 'blackberry', regex: /BB1\\d;.*Version\\/(\\d+\\.\\d+)/},\n\t// Tizen\n\t{platform: 'tizen', regex: /Tizen (\\d+)/}\n];\nfor (var i = 0, p, m, v; (p = platforms[i]); i++) {\n\tm = p.regex.exec(ua);\n\tif (m) {\n\t\tif (p.forceVersion) {\n\t\t\tv = p.forceVersion;\n\t\t} else {\n\t\t\tv = Number(m[1]);\n\t\t}\n\t\tep[p.platform] = v;\n\t\tif (p.extra) {\n\t\t\tutils.mixin(ep, p.extra);\n\t\t}\n\t\tep.platformName = p.platform;\n\t\tbreak;\n\t}\n}\n",
    "mtime": 1434758950000,
    "relPath": "enyo/platform",
    "requires": [
      "enyo",
      "./utils"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./AjaxProperties",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/AjaxProperties",
    "name": "enyo/AjaxProperties",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/AjaxProperties.js",
    "contents": "require('enyo');\n\n/**\n* The available options used by {@link module:enyo/Ajax~Ajax} and {@link module:enyo/WebService~WebService}. You will not\n* generally want to access this module directly.\n*\n* @module enyo/AjaxProperties\n* @public\n*/\nmodule.exports = {\n\t\n\t/**\n\t* When `true`, appends a random number as a parameter for `GET` requests to try to\n\t* force a new fetch of the resource instead of reusing a local cache.\n\t*\n\t* @type {Boolean}\n\t* @default true\n\t* @public\n\t*/\n\tcacheBust: true,\n\t\n\t/**\n\t* The URL for the service. This may be a relative URL if used to fetch resources bundled\n\t* with the application.\n\t*\n\t* @type {String}\n\t* @default ''\n\t* @public\n\t*/\n\turl: '',\n\t\n\t/**\n\t* The HTTP method to use for the request; defaults to `'GET'`.  Supported values include\n\t* `'GET'`, `'POST'`, `'PUT'`, and `'DELETE'`.\n\t*\n\t* @type {String}\n\t* @default 'GET'\n\t* @public\n\t*/\n\tmethod: 'GET', // {value: 'GET', options: ['GET', 'POST', 'PUT', 'DELETE']}\n\t\n\t/**\n\t* How the response will be handled. Supported values are `'json'`, `'text'`, and `'xml'`.\n\t*\n\t* @type {String}\n\t* @default 'json'\n\t* @public\n\t*/\n\thandleAs: 'json', // {value: 'json', options: ['text', 'json', 'xml']}\n\t\n\t/**\n\t* The `Content-Type` header for the request as a String.\n\t*\n\t* @type {String}\n\t* @default 'application/x-www-form-urlencoded'\n\t* @public\n\t*/\n\tcontentType: 'application/x-www-form-urlencoded',\n\t\n\t/**\n\t* If `true`, makes a synchronous (blocking) call, if supported.\n\t*\n\t* @type {Boolean}\n\t* @default false\n\t* @public\n\t*/\n\tsync: false,\n\t\n\t/**\n\t* Optional additional request headers as a [hash]{@glossary Object}, or `null`.\n\t\n\t* ```javascript\n\t* { 'X-My-Header': 'My Value', 'Mood': 'Happy' }\n\t* ```\n\t*\n\t* @type {Object}\n\t* @default null\n\t* @public\n\t*/\n\theaders: null,\n\t\n\t/**\n\t* The content for the request body for `POST/PUT` methods. When `postBody` is a\n\t* [buffer]{@glossary Buffer} or a [string]{@glossary String}, it is passed\n\t* verbatim in the request body. When it is a [hash]{@glossary Object}, the way it is\n\t* encoded depends on the `contentType`:\n\t*\n\t* - `'application/json'` => [JSON.stringify()]{@glossary JSON.stringify}\n\t* - `'application/x-www-urlencoded'` => url-encoded parameters\n\t* - `'multipart/form-data'` => passed as fields in {@link module:enyo/FormData} (XHR2 emulation)\n\t*\n\t* @type {(String|Buffer|Object)}\n\t* @default ''\n\t* @public\n\t*/\n\tpostBody: '',\n\n\t/**\n\t* The optional username to use for authentication purposes.\n\t*\n\t* @type {String}\n\t* @default ''\n\t* @public\n\t*/\n\tusername: '',\n\t\n\t/**\n\t* The optional password to use for authentication purposes.\n\t*\n\t* @type {String}\n\t* @default ''\n\t* @public\n\t*/\n\tpassword: '',\n\t\n\t/**\n\t* Optional [hash]{@glossary Object} with fields to pass directly to the underlying XHR\n\t* object. One example is the `withCredentials` flag used for cross-origin requests.\n\t*\n\t* @type {Object}\n\t* @default null\n\t* @public\n\t*/\n\txhrFields: null,\n\t\n\t/**\n\t* Optional [string]{@glossary String} to override the `MIME-Type` header.\n\t*\n\t* @type {String}\n\t* @default null\n\t* @public\n\t*/\n\tmimeType: null\n};\n",
    "mtime": 1434758950000,
    "relPath": "enyo/AjaxProperties",
    "requires": [
      "enyo"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "enyo/ready",
    "base": "/Users/jason/Git/bootplate",
    "external": true,
    "relName": "enyo/ready",
    "name": "enyo/ready",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/ready.js",
    "contents": "require('enyo');\n\n// we need to register appropriately to know when\n// the document is officially ready, to ensure that\n// client code is only going to execute at the\n// appropriate time\n\nvar doc = global.document;\nvar queue = [];\nvar ready = (\"complete\" === doc.readyState);\nvar run;\nvar init;\nvar remove;\nvar add;\nvar flush;\nvar flushScheduled = false;\n\n/**\n* Registers a callback (and optional `this` context) to run after all the Enyo and library code\n* has loaded and the `DOMContentLoaded` event (or equivalent on older browsers) has been sent.\n* \n* If called after the system is in a ready state, runs the supplied code asynchronously at the\n* earliest opportunity.\n*\n* @module enyo/ready\n* @param {Function} fn - The method to execute when the DOM is ready.\n* @param {Object} [context] - The optional context (`this`) under which to execute the\n*\tcallback method.\n* @public\n*/\nmodule.exports = function (fn, context) {\n\tqueue.push([fn, context]);\n\t// schedule another queue flush if needed to run new ready calls\n\tif (ready && !flushScheduled) {\n\t\tsetTimeout(flush, 0);\n\t\tflushScheduled = true;\n\t}\n};\n\n/**\n* @private\n*/\nrun = function (fn, context) {\n\tfn.call(context || global);\n};\n\n/**\n* @private\n*/\ninit = function (event) {\n\t// if we're interactive, it should be safe to move\n\t// forward because the content has been parsed\n\tif ((ready = (\"interactive\" === doc.readyState))) {\n\t\tif (\"DOMContentLoaded\" !== event.type && \"readystatechange\" !== event.type) {\n\t\t\tremove(event.type, init);\n\t\t\tflush();\n\t\t}\n\t}\n\t// for an IE8 fallback and legacy WebKit (including webOS 3.x and less) and assurance\n\tif ((ready = (\"complete\" === doc.readyState || \"loaded\" === doc.readyState))) {\n\t\tremove(event.type, init);\n\t\tflush();\n\t}\n};\n\n/**\n* @private\n*/\nadd = function (event, fn) {\n\tvar name = doc.addEventListener? \"addEventListener\": \"attachEvent\";\n\tvar on = name === \"attachEvent\"? \"on\": \"\";\n\tdoc[name](on + event, fn, false);\n};\n\n/**\n* @private\n*/\nremove = function (event, fn) {\n\tvar name = doc.addEventListener? \"removeEventListener\": \"detachEvent\";\n\tvar on = name === \"detachEvent\"? \"on\": \"\";\n\tdoc[name](on + event, fn, false);\n};\n\n/**\n* @private\n*/\nflush = function () {\n\tif (ready && queue.length) {\n\t\twhile (queue.length) {\n\t\t\trun.apply(global, queue.shift());\n\t\t}\n\t}\n\tflushScheduled = false;\n};\n\n// ok, let's hook this up\nadd(\"DOMContentLoaded\", init);\nadd(\"readystatechange\", init);\n",
    "mtime": 1434758950000,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relPath": "enyo/ready",
    "requires": [
      "enyo"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./json",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/json",
    "name": "enyo/json",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/json.js",
    "contents": "require('enyo');\n\n\n/**\n* [JSON]{@glossary JSON} related methods and wrappers.\n*\n* @module enyo/json\n* @public\n*/\nmodule.exports = {\n\t\n\t/**\n\t* Wrapper for [JSON.stringify()]{@glossary JSON.stringify}. Creates a\n\t* [JSON]{@glossary JSON} [string]{@glossary String} from an\n\t* [object]{@glossary Object}.\n\t*\n\t* @see {@glossary JSON.stringify}\n\t* @param {Object} value - The [object]{@glossary Object} to convert to a\n\t*\t[JSON]{@glossary JSON} [string]{@glossary String}.\n\t* @param {(Function|String[])} [replacer] An optional parameter indicating either an\n\t*\t[array]{@glossary Array} of keys to include in the final output or a\n\t*\t[function]{@glossary Function} that will have the opportunity to dynamically return\n\t*\tvalues to include for keys.\n\t* @param {(Number|String)} [space] - Determines the spacing (if any) for pretty-printed\n\t*\toutput of the JSON string. A [number]{@glossary Number} indicates the number of\n\t* spaces to use in the output, while a string will be used verbatim.\n\t* @returns {String} The JSON string for the given object.\n\t* @public\n\t*/\n\tstringify: function(value, replacer, space) {\n\t\treturn JSON.stringify(value, replacer, space);\n\t},\n\t\n\t/**\n\t* Wrapper for [JSON.parse()]{@glossary JSON.parse}. Parses a valid\n\t* [JSON]{@glossary JSON} [string]{@glossary String} and returns an\n\t* [object]{@glossary Object}, or `null` if the parameters are invalid.\n\t*\n\t* @see {@glossary JSON.parse}\n\t* @param {String} json - The [JSON]{@glossary JSON} [string]{@glossary String} to\n\t*\tparse into an [object]{@glossary Object}.\n\t* @param {Function} [reviver] - The optional [function]{@glossary Function} to use to\n\t*\tparse individual keys of the return object.\n\t* @returns {(Object|null)} If parameters are valid, an [object]{@glossary Object}\n\t* is returned; otherwise, `null`.\n\t* @public\n\t*/\n\tparse: function(json, reviver) {\n\t\treturn json ? JSON.parse(json, reviver) : null;\n\t}\n};\n",
    "mtime": 1434758950000,
    "relPath": "enyo/json",
    "requires": [
      "enyo"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./utils",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/utils",
    "name": "enyo/utils",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/utils.js",
    "contents": "require('enyo');\n\n/**\n* A collection of utilities\n* @module enyo/utils\n*/\n\n/**\n* A polyfill for platforms that don't yet support\n* [bind()]{@glossary Function.prototype.bind}. As explained in the linked article, this\n* polyfill handles the general use case but cannot exactly mirror the ECMA-262 version 5\n* implementation specification. This is an adaptation of the example promoted\n* [here]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind}.\n*/\nif (!Function.prototype.bind) {\n\tFunction.prototype.bind = function (ctx) {\n\t\t// deliberately used here...\n\t\tvar args = Array.prototype.slice.call(arguments, 1),\n\t\t\tscop = this,\n\t\t\tnop = function () {},\n\t\t\tret;\n\n\t\t// as-per MDN's explanation of this polyfill we're filling in for the IsCallable\n\t\t// internal (we can't access it)\n\t\tif (typeof this != 'function') {\n\t\t\tthrow new TypeError('Function.prototype.bind called on non-callable object.');\n\t\t}\n\n\t\tret = function () {\n\t\t\tvar largs = args.concat(Array.prototype.slice.call(arguments)),\n\t\t\t\tlctx = this instanceof nop && ctx ? this : ctx;\n\n\t\t\treturn scop.apply(lctx, largs);\n\t\t};\n\n\t\tnop.prototype = this.prototype;\n\n\t\t/*jshint -W055 */\n\t\tret.prototype = new nop();\n\t\t/*jshint +W055 */\n\n\t\treturn ret;\n\t};\n}\n\n/**\n* Returns a function that can be extended (via `.extend()`) similar to prototypal inheritance.\n* Like {@link module:enyo/kind#inherit}, `extend()` expects as its first argument a factory function\n* that returns the new function that will be called instead of the original function. The original\n* is available as the first argument to that factory function.\n*\n* ```javascript\n* var\n*\tutils = require('enyo/utils');\n*\n* var factor = new utils.Extensible(function (a, b) {\n*\treturn a + b;\n* });\n* factor(2, 4); // returns 6;\n* factor.extend(function (sup) {\n*\treturn function (a, b) {\n*\t\treturn sup.apply(this, arguments) * b;\n*\t};\n* });\n* factor(2, 4) // return 24;\n* ```\n*\n* @param  {Function} fn - Original function that can be extended\n* @param {Object} [ctx] - Context on which `fn` will be called. Defaults to the Extensible instance.\n* @return {Function} - A wrapped version of `fn` with the `extend()` method added\n*\n* @public\n*/\nexports.Extensible = function Extensible (fn) {\n\tif (!(this instanceof Extensible)) return new Extensible(fn);\n\n\tthis.fn = fn;\n\tvar f = function () {\n\t\treturn this.fn.apply(this, arguments);\n\t}.bind(this);\n\n\tf.extend = function (factory) {\n\t\tthis.fn = factory(this.fn);\n\t}.bind(this);\n\n\treturn f;\n};\n\n/**\n* @private\n*/\nexports.nop = function () {};\n\n/**\n* @private\n*/\nexports.nob = {};\n\n/**\n* @private\n*/\nexports.nar = [];\n\n/**\n* This name is reported in inspectors as the type of objects created via delegate;\n* otherwise, we would just use {@link module:enyo/nop~nop}.\n*\n* @private\n*/\nvar Instance = exports.instance = function () {};\n\n/**\n* @private\n*/\nvar setPrototype = exports.setPrototype = function (ctor, proto) {\n\tctor.prototype = proto;\n};\n\n/**\n* Boodman/crockford delegation w/cornford optimization\n*\n* @private\n*/\nexports.delegate = function (proto) {\n\tsetPrototype(Instance, proto);\n\treturn new Instance();\n};\n\n// ----------------------------------\n// General Functions\n// ----------------------------------\n\n/**\n* Determines whether a variable is defined.\n*\n* @param {*} target - Anything that can be compared to `undefined`.\n* @returns {Boolean} `true` if defined, `false` otherwise.\n* @public\n*/\nvar exists = exports.exists = function (target) {\n\treturn (target !== undefined);\n};\n\nvar uidCounter = 0;\n\n/**\n* Creates a unique identifier (with an optional prefix) and returns the identifier as a string.\n*\n* @param {String} [prefix] - The prefix to prepend to the generated unique id.\n* @returns {String} An optionally-prefixed identifier.\n* @public\n*/\nexports.uid = function (prefix) {\n\treturn String((prefix? prefix: '') + uidCounter++);\n};\n\n/**\n* RFC4122 uuid generator for the browser.\n*\n* @returns {String} An [RFC4122]{@glossary UUID}-compliant, universally unique identifier.\n* @public\n*/\nexports.uuid = function () {\n\t// @TODO: Could possibly be faster\n\tvar t, p = (\n\t\t(Math.random().toString(16).substr(2,8)) + '-' +\n\t\t((t=Math.random().toString(16).substr(2,8)).substr(0,4)) + '-' +\n\t\t(t.substr(4,4)) +\n\t\t((t=Math.random().toString(16).substr(2,8)).substr(0,4)) + '-' +\n\t\t(t.substr(4,4)) +\n\t\t(Math.random().toString(16).substr(2,8))\n\t);\n\treturn p;\n};\n\n/**\n* Generates a random number using [Math.random]{@glossary Math.random}.\n*\n* @param {Number} bound - The multiplier used to generate the product.\n* @returns {Number} A random number.\n* @public\n*/\nexports.irand = function (bound) {\n\treturn Math.floor(Math.random() * bound);\n};\n\nvar toString = Object.prototype.toString;\n\n/**\n* Determines whether a given variable is a [String]{@glossary String}.\n*\n* @param {*} it - The variable to be tested.\n* @returns {Boolean} `true` if variable is a [String]{@glossary String};\n* otherwise, `false`.\n* @public\n*/\nexports.isString = function (it) {\n\treturn toString.call(it) === '[object String]';\n};\n\n/**\n* Determines whether a given variable is a [Function]{@glossary Function}.\n*\n* @param {*} it - The variable to be tested.\n* @returns {Boolean} `true` if variable is a [Function]{@glossary Function};\n* otherwise, `false`.\n* @public\n*/\nexports.isFunction = function (it) {\n\treturn toString.call(it) === '[object Function]';\n};\n\n/**\n* Determines whether a given variable is an [Array]{@glossary Array}.\n*\n* @param {*} it - The variable to be tested.\n* @returns {Boolean} `true` if variable is an [Array]{@glossary Array};\n* otherwise, `false`.\n* @method\n* @public\n*/\nvar isArray = exports.isArray = Array.isArray || function (it) {\n\treturn toString.call(it) === '[object Array]';\n};\n\n/**\n* Determines whether a given variable is an [Object]{@glossary Object}.\n*\n* @param {*} it - The variable to be tested.\n* @returns {Boolean} `true` if variable is an [Object]{@glossary Object};\n* otherwise, `false`.\n* @method\n* @public\n*/\nexports.isObject = Object.isObject || function (it) {\n\t// explicit null/undefined check for IE8 compatibility\n\treturn (it != null) && (toString.call(it) === '[object Object]');\n};\n\n/**\n* Determines whether a given variable is an explicit boolean `true`.\n*\n* @param {*} it - The variable to be tested.\n* @returns {Boolean} `true` if variable is an explicit `true`; otherwise,\n* `false`.\n* @public\n*/\nexports.isTrue = function (it) {\n\treturn !(it === 'false' || it === false || it === 0 || it === null || it === undefined);\n};\n\n/**\n* Determines whether a given variable is a numeric value.\n*\n* @param {*} it - The variable to be tested.\n* @returns {Boolean} `true` if variable is a numeric value; otherwise,\n* `false`.\n* @public\n*/\nexports.isNumeric = function (it) {\n\t// borrowed from jQuery\n\treturn !isArray(it) && (it - parseFloat(it) + 1) >= 0;\n};\n\n/**\n* Binds the `this` context of any method to a scope and a variable number of provided initial\n* parameters.\n*\n* @param {Object} scope - The `this` context for the method.\n* @param {(Function|String)} method - A Function or the name of a method to bind.\n* @param {...*} [args] Any arguments that will be provided as the initial arguments to the\n*                      enclosed method.\n* @returns {Function} The bound method/closure.\n* @public\n*/\nvar bind = exports.bind = function (scope, method) {\n\tif (!method) {\n\t\tmethod = scope;\n\t\tscope = null;\n\t}\n\tscope = scope || global;\n\tif (typeof method == 'string') {\n\t\tif (scope[method]) {\n\t\t\tmethod = scope[method];\n\t\t} else {\n\t\t\tthrow('enyo.bind: scope[\"' + method + '\"] is null (scope=\"' + scope + '\")');\n\t\t}\n\t}\n\tif (typeof method == 'function') {\n\t\tvar args = cloneArray(arguments, 2);\n\t\tif (method.bind) {\n\t\t\treturn method.bind.apply(method, [scope].concat(args));\n\t\t} else {\n\t\t\treturn function() {\n\t\t\t\tvar nargs = cloneArray(arguments);\n\t\t\t\t// invoke with collected args\n\t\t\t\treturn method.apply(scope, args.concat(nargs));\n\t\t\t};\n\t\t}\n\t} else {\n\t\tthrow('enyo.bind: scope[\"' + method + '\"] is not a function (scope=\"' + scope + '\")');\n\t}\n};\n\n/**\n* Binds a callback to a scope. If the object has a `destroyed` property that's truthy, then the\n* callback will not be run if called. This can be used to implement both\n* {@link module:enyo/CoreObject~Object.bindSafely} and {@link module:enyo/CoreObject~Object}-like objects like\n* {@link module:enyo/Model~Model} and {@link module:enyo/Collection~Collection}.\n*\n* @param {Object} scope - The `this` context for the method.\n* @param {(Function|String)} method - A Function or the name of a method to bind.\n* @param {...*} [args] Any arguments that will be provided as the initial arguments to the\n*                      enclosed method.\n* @returns {Function} The bound method/closure.\n* @public\n*/\nexports.bindSafely = function (scope, method) {\n\tif (typeof method == 'string') {\n\t\tif (scope[method]) {\n\t\t\tmethod = scope[method];\n\t\t} else {\n\t\t\tthrow('enyo.bindSafely: scope[\"' + method + '\"] is null (this=\"' + this + '\")');\n\t\t}\n\t}\n\tif (typeof method == 'function') {\n\t\tvar args = cloneArray(arguments, 2);\n\t\treturn function() {\n\t\t\tif (scope.destroyed) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar nargs = cloneArray(arguments);\n\t\t\treturn method.apply(scope, args.concat(nargs));\n\t\t};\n\t} else {\n\t\tthrow('enyo.bindSafely: scope[\"' + method + '\"] is not a function (this=\"' + this + '\")');\n\t}\n};\n\n/**\n* Calls the provided `method` on `scope`, asynchronously.\n*\n* Uses [window.setTimeout()]{@glossary window.setTimeout} with minimum delay,\n* usually around 10ms.\n*\n* Additional arguments are passed to `method` when it is invoked.\n*\n* If only a single argument is supplied, will just call that function asynchronously without\n* doing any additional binding.\n*\n* @param {Object} scope - The `this` context for the method.\n* @param {(Function|String)} method - A Function or the name of a method to bind.\n* @param {...*} [args] Any arguments that will be provided as the initial arguments to the\n*                      enclosed method.\n* @returns {Number} The `setTimeout` id.\n* @public\n*/\nexports.asyncMethod = function (scope, method) {\n\tif (!method) {\n\t\t// passed just a single argument\n\t\treturn setTimeout(scope, 1);\n\t} else {\n\t\treturn setTimeout(bind.apply(scope, arguments), 1);\n\t}\n};\n\n/**\n* Calls the provided `method` ([String]{@glossary String}) on `scope` with optional\n* arguments `args` ([Array]{@glossary Array}), if the object and method exist.\n*\n* @example\n* \tenyo.call(myWorkObject, 'doWork', [3, 'foo']);\n*\n* @param {Object} scope - The `this` context for the method.\n* @param {(Function|String)} method - A Function or the name of a method to bind.\n* @param {Array} [args] - An array of arguments to pass to the method.\n* @returns {*} The return value of the method.\n* @public\n*/\nexports.call = function (scope, method, args) {\n\tvar context = scope || this;\n\tif (method) {\n\t\tvar fn = context[method] || method;\n\t\tif (fn && fn.apply) {\n\t\t\treturn fn.apply(context, args || []);\n\t\t}\n\t}\n};\n\n/**\n* Returns the current time in milliseconds. On platforms that support it,\n* [Date.now()]{@glossary Date.now} will be used; otherwise this will\n* be equivalent to [new Date().getTime()]{@glossary Date.getTime}.\n*\n* @returns {Number} Number of milliseconds representing the current time.\n* @method\n* @public\n*/\n\nvar now = exports.now = Date.now || function () {\n\treturn new Date().getTime();\n};\n\n/**\n* When [window.performance]{@glossary window.performance} is available, supplies\n* a high-precision, high-performance monotonic timestamp, which is independent of\n* changes to the system clock and thus safer for use in animation, etc. Falls back to\n* [enyo.now()]{@link enyo#now} (based on the JavaScript [Date]{@glossary Date}\n* object), which is subject to system time changes.\n*\n* @returns {Number} Number of milliseconds representing the current time or time since\n*                   start of application execution as reported by the platform.\n* @method\n* @public\n*/\nexports.perfNow = (function () {\n\t// we have to check whether or not the browser has supplied a valid\n\t// method to use\n\tvar perf = window.performance || {};\n\t// test against all known vendor-specific implementations, but use\n\t// a fallback just in case\n\tperf.now = perf.now || perf.mozNow || perf.msNow || perf.oNow || perf.webkitNow || now;\n\treturn function () {\n\t\treturn perf.now();\n\t};\n}());\n\n/**\n* A fast-path enabled global getter that takes a string path, which may be a full path (from\n* context window/Enyo) or a relative path (to the execution context of the method). It knows how\n* to check for and call the backwards-compatible generated getters, as well as how to handle\n* computed properties. Returns `undefined` if the object at the given path cannot be found. May\n* safely be called on non-existent paths.\n*\n* @param {String} path - The path from which to retrieve a value.\n* @returns {*} The value for the given path, or `undefined` if the path could not be\n*                  completely resolved.\n* @method enyo.getPath\n* @public\n*/\nvar getPath = exports.getPath = function (path) {\n\t// we're trying to catch only null/undefined not empty string or 0 cases\n\tif (!path && path !== null && path !== undefined) return path;\n\n\tvar next = this,\n\t\tparts,\n\t\tpart,\n\t\tgetter,\n\t\tprev;\n\n\t// obviously there is a severe penalty for requesting get with a path lead\n\t// by unnecessary relative notation...\n\tif (path[0] == '.') path = path.replace(/^\\.+/, '');\n\n\t// here's where we check to make sure we have a truthy string-ish\n\tif (!path) return;\n\n\tparts = path.split('.');\n\tpart = parts.shift();\n\n\tdo {\n\t\tprev = next;\n\t\t// for constructors we must check to make sure they are undeferred before\n\t\t// looking for static properties\n\t\t// for the auto generated or provided published property support we have separate\n\t\t// routines that must be called to preserve compatibility\n\t\tif (next._getters && ((getter = next._getters[part])) && !getter.generated) next = next[getter]();\n\t\t// for all other special cases to ensure we use any overloaded getter methods\n\t\telse if (next.get && next !== this && next.get !== getPath) next = next.get(part);\n\t\t// and for regular cases\n\t\telse next = next[part];\n\t} while (next && (part = parts.shift()));\n\n\t// if necessary we ensure we've undeferred any constructor that we're\n\t// retrieving here as a final property as well\n\treturn next;\n};\n\n/**\n* @private\n*/\ngetPath.fast = function (path) {\n\t// the current context\n\tvar b = this, fn, v;\n\tif (b._getters && (fn = b._getters[path])) {\n\t\tv = b[fn]();\n\t} else {\n\t\tv = b[path];\n\t}\n\n\treturn v;\n};\n\n/**\n* @TODO: Out of date...\n* A global setter that takes a string path (relative to the method's execution context) or a\n* full path (relative to window). Attempts to automatically retrieve any previously existing\n* value to supply to any observers. If the context is an {@link module:enyo/CoreObject~Object} or subkind, the\n* {@link module:enyo/ObserverSupport~ObserverSupport.notify} method is used to notify listeners for the path's being\n* set. If the previous value is equivalent to the newly set value, observers will not be\n* triggered by default. If the third parameter is present and is an explicit boolean true, the\n* observers will be triggered regardless. Returns the context from which the method was executed.\n*\n* @param {String} path - The path for which to set the given value.\n* @param {*} is - The value to set.\n* @param {Object} [opts] - An options hash.\n* @returns {this} Whatever the given context was when executed.\n* @method enyo.setPath\n* @public\n*/\nvar setPath = exports.setPath = function (path, is, opts) {\n\t// we're trying to catch only null/undefined not empty string or 0 cases\n\tif (!path || (!path && path !== null && path !== undefined)) return this;\n\n\tvar next = this,\n\t\toptions = {create: true, silent: false, force: false},\n\t\tbase = next,\n\t\tparts,\n\t\tpart,\n\t\twas,\n\t\tforce,\n\t\tcreate,\n\t\tsilent,\n\t\tcomparator;\n\n\tif (typeof opts == 'object') opts = mixin({}, [options, opts]);\n\telse {\n\t\tforce = opts;\n\t\topts = options;\n\t}\n\n\tif (opts.force) force = true;\n\tsilent = opts.silent;\n\tcreate = opts.create;\n\tcomparator = opts.comparator;\n\n\n\t// obviously there is a severe penalty for requesting get with a path lead\n\t// by unnecessary relative notation...\n\tif (path[0] == '.') path = path.replace(/^\\.+/, '');\n\n\t// here's where we check to make sure we have a truthy string-ish\n\tif (!path) return next;\n\n\tparts = path.split('.');\n\tpart = parts.shift();\n\n\tdo {\n\n\t\tif (!parts.length) was = next.get && next.get !== getPath? next.get(part): next[part];\n\t\telse {\n\t\t\t// this allows us to ensure that if we're setting a static property of a constructor we have the\n\t\t\t// correct constructor\n\t\t\t// @TODO: It seems ludicrous to have to check this on every single part of a chain; if we didn't have\n\t\t\t// deferred constructors this wouldn't be necessary and is expensive - unnecessarily so when speed is so important\n\t\t\tif (next !== base && next.set && next.set !== setPath) {\n\t\t\t\tparts.unshift(part);\n\t\t\t\tnext.set(parts.join('.'), is, opts);\n\t\t\t\treturn base;\n\t\t\t}\n\t\t\tif (next !== base && next.get) next = (next.get !== getPath? next.get(part): next[part]) || (create && (next[part] = {}));\n\t\t\telse next = next[part] || (create && (next[part] = {}));\n\t\t}\n\n\t} while (next && parts.length && (part = parts.shift()));\n\n\tif (!next) return base;\n\n\t// now update to the new value\n\tif (next !== base && next.set && next.set !== setPath) {\n\t\tnext.set(part, is, opts);\n\t\treturn base;\n\t} else next[part] = is;\n\n\t// if possible we notify the changes but this change is notified from the immediate\n\t// parent not the root object (could be the same)\n\tif (next.notify && !silent && (force || was !== is || (comparator && comparator(was, is)))) next.notify(part, was, is, opts);\n\t// we will always return the original root-object of the call\n\treturn base;\n};\n\n/**\n* @private\n*/\nsetPath.fast = function (path, value) {\n\t// the current context\n\tvar b = this,\n\t\t// the previous value and helper variable\n\t\trv, fn;\n\t// we have to check and ensure that we're not setting a computed property\n\t// and if we are, do nothing\n\tif (b._computed && b._computed[path] !== undefined) {\n\t\treturn b;\n\t}\n\tif (b._getters && (fn=b._getters[path])) {\n\t\trv = b[fn]();\n\t} else {\n\t\trv = b[path];\n\t}\n\t// set the new value now that we can\n\tb[path] = value;\n\n\t// this method is only ever called from the context of enyo objects\n\t// as a protected method\n\tif (rv !== value) { b.notifyObservers(path, rv, value); }\n\t// return the context\n\treturn b;\n};\n\n// ----------------------------------\n// String Functions\n// ----------------------------------\n\n/**\n* Uppercases a given string. Will coerce to a [String]{@glossary String}\n* if possible/necessary.\n*\n* @param {String} str - The string to uppercase.\n* @returns {String} The uppercased string.\n* @public\n*/\nexports.toUpperCase = new exports.Extensible(function (str) {\n\tif (str != null) {\n\t\treturn str.toString().toUpperCase();\n\t}\n\treturn str;\n});\n\n/**\n* Lowercases a given string. Will coerce to a [String]{@glossary String}\n* if possible/necessary.\n*\n* @param {String} str - The string to lowercase.\n* @returns {String} The lowercased string.\n* @public\n*/\nexports.toLowerCase = new exports.Extensible(function (str) {\n\tif (str != null) {\n\t\treturn str.toString().toLowerCase();\n\t}\n\treturn str;\n});\n\n/**\n* Capitalizes a given string.\n*\n* @param {String} str - The string to capitalize.\n* @returns {String} The capitalized string.\n* @public\n*/\nexports.cap = function (str) {\n\treturn str.slice(0, 1).toUpperCase() + str.slice(1);\n};\n\n/**\n* Un-capitalizes a given string.\n*\n* @param {String} str - The string to un-capitalize.\n* @returns {String} The un-capitalized string.\n* @public\n*/\nexports.uncap = function (str) {\n\treturn str.slice(0, 1).toLowerCase() + str.slice(1);\n};\n\n/**\n* Injects an arbitrary number of values, in order, into a template string at\n* positions marked by `\"%.\"`.\n*\n* @param {String} template - The string template to inject with values.\n* @param {...String} val The values to inject into the template.\n* @returns {String} A copy of the template populated with values.\n* @public\n*/\nexports.format = function (template) {\n\tvar pattern = /\\%./g,\n\t\targ = 0,\n\t\ttmp = template,\n\t\targs = arguments,\n\t\treplacer;\n\n\treplacer = function () {\n\t\treturn args[++arg];\n\t};\n\n\treturn tmp.replace(pattern, replacer);\n};\n\n/**\n* @private\n*/\nString.prototype.trim = String.prototype.trim || function () {\n\treturn this.replace(/^\\s+|\\s+$/g, '');\n};\n\n/**\n* Takes a string and trims leading and trailing spaces. Strings with no length,\n* non-strings, and falsy values will be returned without modification.\n*\n* @param {String} str - The string from which to remove whitespace.\n* @returns {String} The trimmed string.\n* @public\n*/\nexports.trim = function (str) {\n\treturn (typeof str == 'string' && str.trim()) || str;\n};\n\n// ----------------------------------\n// Object Functions\n// ----------------------------------\n\n/**\n* A [polyfill]{@glossary polyfill} for platforms that don't support\n* [Object.create()]{@glossary Object.create}.\n*/\nObject.create = Object.create || (function () {\n\tvar Anon = function () {};\n\treturn function (obj) {\n\t\t// in the polyfill we can't support the additional features so we are ignoring\n\t\t// the extra parameters\n\t\tif (!obj || obj === null || typeof obj != 'object') throw 'Object.create: Invalid parameter';\n\t\tAnon.prototype = obj;\n\t\treturn new Anon();\n\t};\n})();\n\n/**\n* A [polyfill]{@glossary polyfill} for platforms that don't support\n* [Object.keys()]{@glossary Object.keys}.\n*/\nObject.keys = Object.keys || function (obj) {\n\tvar results = [];\n\tvar hop = Object.prototype.hasOwnProperty;\n\tfor (var prop in obj) {\n\t\tif (hop.call(obj, prop)) {\n\t\t\tresults.push(prop);\n\t\t}\n\t}\n\t// *sigh* IE 8\n\tif (!({toString: null}).propertyIsEnumerable('toString')) {\n\t\tvar dontEnums = [\n\t\t\t'toString',\n\t\t\t'toLocaleString',\n\t\t\t'valueOf',\n\t\t\t'hasOwnProperty',\n\t\t\t'isPrototypeOf',\n\t\t\t'propertyIsEnumerable',\n\t\t\t'constructor'\n\t\t];\n\t\tfor (var i = 0, p; (p = dontEnums[i]); i++) {\n\t\t\tif (hop.call(obj, p)) {\n\t\t\t\tresults.push(p);\n\t\t\t}\n\t\t}\n\t}\n\treturn results;\n};\n\n/**\n* Returns an array of all known enumerable properties found on a given object.\n*\n* @alias Object.keys.\n* @method enyo.keys\n* @public\n*/\nexports.keys = Object.keys;\n\n/**\n* Convenience method that takes an [array]{@glossary Array} of properties\n* and an [object]{@glossary Object} as parameters. Returns a new object\n* with only those properties named in the array that are found to exist on the\n* base object. If the third parameter is `true`, falsy values will be ignored.\n*\n* @param {String[]} properties The properties to include on the returned object.\n* @param {Object} object - The object from which to retrieve values for the requested properties.\n* @param {Boolean} [ignore=false] Whether or not to ignore copying falsy values.\n* @returns {Object} A new object populated with the requested properties and values from\n*                     the given object.\n* @public\n*/\nexports.only = function (properties, object, ignore) {\n\tvar ret = {},\n\t\tprop,\n\t\tlen,\n\t\ti;\n\n\tfor (i = 0, len = properties.length >>> 0; i < len; ++i) {\n\t\tprop = properties[i];\n\n\t\tif (ignore && (object[prop] === undefined || object[prop] === null)) continue;\n\t\tret[prop] = object[prop];\n\t}\n\n\treturn ret;\n};\n\n/**\n* Convenience method that takes two [objects]{@glossary Object} as parameters.\n* For each key from the first object, if the key also exists in the second object,\n* a mapping of the key from the first object to the key from the second object is\n* added to a result object, which is eventually returned. In other words, the\n* returned object maps the named properties of the first object to the named\n* properties of the second object. The optional third parameter is a boolean\n* designating whether to pass unknown key/value pairs through to the new object.\n* If `true`, those keys will exist on the returned object.\n*\n* @param {Object} map - The object with key/value pairs.\n* @param {Object} obj - The object whose values will be used.\n* @param {Boolean} [pass=false] Whether or not to pass unnamed properties through\n*                               from the given object.\n* @returns {Object} A new object whose properties have been mapped.\n* @public\n*/\nexports.remap = function (map, obj, pass) {\n\tvar ret = pass ? clone(obj) : {},\n\t\tkey;\n\n\tfor (key in map) {\n\t\tif (key in obj) ret[map[key]] = obj.get ? obj.get(key) : obj[key];\n\t}\n\treturn ret;\n};\n\n/**\n* Helper method that accepts an [array]{@glossary Array} of\n* [objects]{@glossary Object} and returns a hash of those objects indexed\n* by the specified `property`. If a `filter` is provided, the filter should\n* accept four parameters: the key, the value (object), the current mutable map\n* reference, and an immutable copy of the original array of objects for\n* comparison.\n*\n* @param {String} property - The property to index the array by.\n* @param {Array} array - An array of property objects.\n* @param {Function} [filter] - The filter function to use; accepts four arguments.\n* @returns {Object} A hash (object) indexed by the `property` argument\n* @public\n*/\nexports.indexBy = function (property, array, filter) {\n\t// the return value - indexed map from the given array\n\tvar map = {},\n\t\tvalue,\n\t\tlen,\n\t\tidx = 0;\n\t// sanity check for the array with an efficient native array check\n\tif (!exists(array) || !(array instanceof Array)) {\n\t\treturn map;\n\t}\n\t// sanity check the property as a string\n\tif (!exists(property) || 'string' !== typeof property) {\n\t\treturn map;\n\t}\n\t// the immutable copy of the array\n\tvar copy = clone(array);\n\t// test to see if filter actually exsits\n\tfilter = exists(filter) && 'function' === typeof filter ? filter : undefined;\n\tfor (len = array.length; idx < len; ++idx) {\n\t\t// grab the value from the array\n\t\tvalue = array[idx];\n\t\t// make sure that it exists and has the requested property at all\n\t\tif (exists(value) && exists(value[property])) {\n\t\t\tif (filter) {\n\t\t\t\t// if there was a filter use it - it is responsible for\n\t\t\t\t// updating the map accordingly\n\t\t\t\tfilter(property, value, map, copy);\n\t\t\t} else {\n\t\t\t\t// use the default behavior - check to see if the key\n\t\t\t\t// already exists on the map it will be overwritten\n\t\t\t\tmap[value[property]] = value;\n\t\t\t}\n\t\t}\n\t}\n\t// go ahead and return our modified map\n\treturn map;\n};\n\n/**\n* Creates and returns a shallow copy of an [Object]{@glossary Object} or an\n* [Array]{@glossary Array}. For objects, by default, properties will be scanned and\n* copied directly to the clone such that they would pass the\n* [hasOwnProperty()]{@glossary Object.hasOwnProperty} test. This is expensive and often not\n* required. In this case, the optional second parameter may be used to allow a more efficient\n* [copy]{@link Object.create} to be made.\n*\n* @param {(Object|Array)} base - The [Object]{@glossary Object} or\n*                              [Array]{@glossary Array} to be cloned.\n* @param {Boolean} [quick] - If `true`, when cloning objects, a faster [copy]{@link Object.create}\n*                          method will be used. This parameter has no meaning when cloning arrays.\n* @returns {*} A clone of the provided `base` if `base` is of the correct type; otherwise,\n*              returns `base` as it was passed in.\n* @public\n*/\nvar clone = exports.clone = function (base, quick) {\n\tif (base) {\n\n\t\t// avoid the overhead of calling yet another internal function to do type-checking\n\t\t// just copy the array and be done with it\n\t\tif (base instanceof Array) return base.slice();\n\t\telse if (base instanceof Object) {\n\t\t\treturn quick ? Object.create(base) : mixin({}, base);\n\t\t}\n\t}\n\n\t// we will only do this if it is not an array or native object\n\treturn base;\n};\n\nvar empty = {};\nvar mixinDefaults = {\n\texists: false,\n\tignore: false,\n\tfilter: null\n};\n\n/**\n\t@todo Rewrite with appropriate documentation for options parameter (typedef)\n\t@todo document 'quick' option\n\n\tWill take a variety of options to ultimately mix a set of properties\n\tfrom objects into single object. All configurations accept a boolean as\n\tthe final parameter to indicate whether or not to ignore _truthy_/_existing_\n\tvalues on any _objects_ prior.\n\n\tIf _target_ exists and is an object, it will be the base for all properties\n\tand the returned value. If the parameter is used but is _falsy_, a new\n\tobject will be created and returned. If no such parameter exists, the first\n\tparameter must be an array of objects and a new object will be created as\n\tthe _target_.\n\n\tThe _source_ parameter may be an object or an array of objects. If no\n\t_target_ parameter is provided, _source_ must be an array of objects.\n\n\tThe _options_ parameter allows you to set the _ignore_ and/or _exists_ flags\n\tsuch that if _ignore_ is true, it will not override any truthy values in the\n\ttarget, and if _exists_ is true, it will only use truthy values from any of\n\tthe sources. You may optionally add a _filter_ method-option that returns a\n\ttrue or false value to indicate whether the value should be used. It receives\n\tparameters in this order: _property_, _source value_, _source values_,\n\t_target_, _options_. Note that modifying the target in the filter method can\n\thave unexpected results.\n\n\tSetting _options_ to true will set all options to true.\n\n* @method enyo.mixin\n* @public\n*/\nvar mixin = exports.mixin = function () {\n\tvar ret = arguments[0],\n\t\tsrc = arguments[1],\n\t\topts = arguments[2],\n\t\tval;\n\n\tif (!ret) ret = {};\n\telse if (ret instanceof Array) {\n\t\topts = src;\n\t\tsrc = ret;\n\t\tret = {};\n\t}\n\n\tif (!opts || opts === true) opts = mixinDefaults;\n\n\tif (src instanceof Array) for (var i=0, it; (it=src[i]); ++i) mixin(ret, it, opts);\n\telse {\n\t\tfor (var key in src) {\n\t\t\tval = src[key];\n\n\t\t\t// quickly ensure the property isn't a default\n\t\t\tif (empty[key] !== val) {\n\t\t\t\tif (\n\t\t\t\t\t(!opts.exists || val) &&\n\t\t\t\t\t(!opts.ignore || !ret[key]) &&\n\t\t\t\t\t(opts.filter? opts.filter(key, val, src, ret, opts): true)\n\t\t\t\t) {\n\t\t\t\t\tret[key] = val;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn ret;\n};\n\n/**\n* Returns an [array]{@glossary Array} of the values of all properties in an\n* [object]{@glossary Object}.\n*\n* @param {Object} obj - The [Object]{@glossary Object} to read the values from.\n* @returns {Array} An [array]{@glossary Array} with the values from the `obj`.\n* @public\n*/\nexports.values = function (obj) {\n\tvar ret = [];\n\tfor (var key in obj) {\n\t\tif (obj.hasOwnProperty(key)) ret.push(obj[key]);\n\t}\n\treturn ret;\n};\n\n// ----------------------------------\n// Array Functions\n// ----------------------------------\n\n/**\n* Because our older API parameters are not consistent with other array API methods, and also\n* because only [IE8 lacks integrated support]{@glossary polyfill} for\n* [indexOf()]{@linkcode external:Array.indexOf}, we ensure it is defined (only IE8) and advise,\n* moving forward, that the built-in method be used. But to preserve our original API, it will\n* simply call this method, knowing it exists.\n*\n* @private\n*/\nArray.prototype.indexOf = Array.prototype.indexOf || function (el, offset) {\n\tvar len = this.length >>> 0;\n\n\toffset = +offset || 0;\n\n\tif (Math.abs(offset) === Infinity) offset = 0;\n\tif (offset < 0) offset += len;\n\tif (offset < 0) offset = 0;\n\n\tfor (; offset < len; ++offset) {\n\t\tif (this[offset] === el) return offset;\n\t}\n\n\treturn -1;\n};\n\n/**\n* Because our older API parameters are not consistent with other array API methods, and also\n* because only [IE8 lacks integrated support]{@glossary polyfill} for\n* [lastIndexOf()]{@glossary Array.lastIndexOf} we ensure it is defined (only IE8) and\n* advise, moving forward, that the built-in method be used. But to preserve our original API, it\n* will simply call this method, knowing it exists.\n*\n* @private\n*/\nArray.prototype.lastIndexOf = Array.prototype.lastIndexOf || function (el, offset) {\n\tvar array = Object(this)\n\t\t, len = array.length >>> 0;\n\n\tif (len === 0) return -1;\n\n\tif (offset !== undefined) {\n\t\toffset = Number(offset);\n\t\tif (Math.abs(offset) > len) offset = len;\n\t\tif (offset === Infinity || offset === -Infinity) offset = len;\n\t\tif (offset < 0) offset += len;\n\t} else offset = len;\n\n\tfor (; offset > -1; --offset) {\n\t\tif (array[offset] === el) return offset;\n\t}\n\n\treturn -1;\n};\n\n/**\n* A [polyfill]{@glossary polyfill} for platforms that don't support\n* [Array.findIndex()]{@glossary Array.findIndex}.\n*/\nArray.prototype.findIndex = Array.prototype.findIndex || function (fn, ctx) {\n\tfor (var i=0, len=this.length >>> 0; i<len; ++i) {\n\t\tif (fn.call(ctx, this[i], i, this)) return i;\n\t}\n\treturn -1;\n};\n\n/**\n* A [polyfill]{@glossary polyfill} for platforms that don't support\n* [Array.find()]{@glossary Array.find}.\n*/\nArray.prototype.find = Array.prototype.find || function (fn, ctx) {\n\tfor (var i=0, len=this.length >>> 0; i<len; ++i) {\n\t\tif (fn.call(ctx, this[i], i, this)) return this[i];\n\t}\n};\n\n/**\n* A [polyfill]{@glossary polyfill} for platforms that don't support\n* [Array.forEach()]{@glossary Array.forEach}.\n*/\nArray.prototype.forEach = Array.prototype.forEach || function (fn, ctx) {\n\tfor (var i=0, len=this.length >>> 0; i<len; ++i) fn.call(ctx, this[i], this);\n};\n\n/**\n* A [polyfill]{@glossary polyfill} for platforms that don't support\n* [Array.map()]{@glossary Array.map}.\n*/\nArray.prototype.map = Array.prototype.map || function (fn, ctx) {\n\tvar ret = [];\n\tfor (var i=0, len=this.length >>> 0; i<len; ++i) {\n\t\tret.push(fn.call(ctx, this[i], i, this));\n\t}\n\treturn ret;\n};\n\n/**\n* A [polyfill]{@glossary polyfill} for platforms that don't support\n* [Array.filter()]{@glossary Array.filter}.\n*/\nArray.prototype.filter = Array.prototype.filter || function (fn, ctx) {\n\tvar ret = [];\n\tfor (var i=0, len=this.length >>> 0; i<len; ++i) {\n\t\tfn.call(ctx, this[i], i, this) && ret.push(this[i]);\n\t}\n\treturn ret;\n};\n\n/**\n* An Enyo convenience method reference to [Array.indexOf()]{@glossary Array.indexOf}.\n*\n* This also supports the legacy Enyo argument order `el.indexOf(array, offset)` and can\n* differentiate between this and the standard `array.indexOf(el, offset)`.\n*\n* **When possible, you should use the native equivalent.**\n*\n* This method supports the same arguments as the native version, plus an extra argument at the\n* beginning referring to the [array]{@glossary Array} to run this method on.\n*\n* @public\n*/\nexports.indexOf = function (array, el, offset) {\n\tif (!(array instanceof Array)) return el.indexOf(array, offset);\n\treturn array.indexOf(el, offset);\n};\n\n/**\n* An Enyo convenience method reference to [Array.lastIndexOf()]{@glossary Array.lastIndexOf}.\n*\n* This also supports the legacy Enyo argument order `el.lastIndexOf(array, offset)` and can\n* differentiate between this and the standard `array.lastIndexOf(el, offset)`.\n*\n* **When possible, you should use the native equivalent.**\n*\n* This method supports the same arguments as the native version, plus an extra argument at the\n* beginning referring to the [array]{@glossary Array} to run this method on.\n*\n* @public\n*/\nexports.lastIndexOf = function (array, el, offset) {\n\tif (!(array instanceof Array)) return el.lastIndexOf(array, offset);\n\treturn array.lastIndexOf(el, offset);\n};\n\n/**\n* An Enyo convenience method reference to [Array.findIndex()]{@glossary Array.findIndex}.\n*\n* **When possible, you should use the native equivalent.**\n*\n* This method supports the same arguments as the native version, plus an extra argument at the\n* beginning referring to the [array]{@glossary Array} to run this method on.\n*\n* @public\n*/\nexports.findIndex = function (array, fn, ctx) {\n\treturn array.findIndex(fn, ctx);\n};\n\n/**\n* An Enyo convenience method reference to [Array.find()]{@glossary Array.find}.\n*\n* **When possible, you should use the native equivalent.**\n*\n* This method supports the same arguments as the native version, plus an extra argument at the\n* beginning referring to the [array]{@glossary Array} to run this method on.\n*\n* @method enyo.find\n* @public\n*/\nvar find = exports.find = function (array, fn, ctx) {\n\treturn array.find(fn, ctx);\n};\n\n/**\n* @alias enyo.find\n* @method enyo.where\n* @public\n*/\nexports.where = find;\n\n/**\n* An Enyo convenience method reference to [Array.forEach()]{@glossary Array.forEach}.\n*\n* **When possible, you should use the native equivalent.**\n*\n* This method supports the same arguments as the native version, plus an extra argument at the\n* beginning referring to the [array]{@glossary Array} to run this method on.\n*\n* @public\n*/\nexports.forEach = function (array, fn, ctx) {\n\treturn array.forEach(fn, ctx);\n};\n\n/**\n* An Enyo convenience method reference to [Array.map()]{@glossary Array.map}.\n*\n* **When possible, you should use the native equivalent.**\n*\n* This method supports the same arguments as the native version, plus an extra argument at the\n* beginning referring to the [array]{@glossary Array} to run this method on.\n*\n* @public\n*/\nexports.map = function (array, fn, ctx) {\n\treturn array.map(fn, ctx);\n};\n\n/**\n* An Enyo convenience method reference to [Array.filter()]{@glossary Array.filter}.\n*\n* **When possible, you should use the native equivalent.**\n*\n* This method supports the same arguments as the native version, plus an extra argument at the\n* beginning referring to the [array]{@glossary Array} to run this method on.\n*\n* @public\n*/\nexports.filter = function (array, fn, ctx) {\n\treturn array.filter(fn, ctx);\n};\n\n/**\n* When given an [array]{@glossary Array} of [objects]{@glossary Object},\n* searches through the array's objects; each object with a property name matching\n* `prop` has its value for that property compiled into a result array, which is\n* eventually returned. For each array object that doesn't have a matching property,\n* an `undefined` placeholder element is added to the result array, such that the\n* returned result array has the same length as the passed-in `array` parameter.\n*\n* @param {Array} array - The [array]{@glossary Array} of [objects]{@glossary Object}\n*                      in which the `prop` will be searched for.\n* @param {String} prop - A string containing the name of the property to search for.\n* @returns {Array} An array of all the values of the named property from\n*                     objects contained in the `array`.\n* @public\n*/\nexports.pluck = function (array, prop) {\n\tif (!(array instanceof Array)) {\n\t\tvar tmp = array;\n\t\tarray = prop;\n\t\tprop = tmp;\n\t}\n\n\tvar ret = [];\n\tfor (var i=0, len=array.length >>> 0; i<len; ++i) {\n\t\tret.push(array[i]? array[i][prop]: undefined);\n\t}\n\treturn ret;\n};\n\n/**\n* Concatenates a variable number of [arrays]{@glossary Array}, removing any duplicate\n* entries.\n*\n* @returns {Array} The unique values from all [arrays]{@glossary Array}.\n* @public\n*/\nexports.merge = function (/* _arrays_ */) {\n\tvar ret = [],\n\t\tvalues = Array.prototype.concat.apply([], arguments);\n\tfor (var i=0, len=values.length >>> 0; i<len; ++i) {\n\t\tif (!~ret.indexOf(values[i])) ret.push(values[i]);\n\t}\n\treturn ret;\n};\n\n/**\n* Clones an existing [Array]{@glossary Array}, or converts an array-like\n* object into an Array.\n*\n* If `offset` is non-zero, the cloning starts from that index in the source\n* Array. The clone may be appended to an existing Array by passing in the\n* existing Array as `initialArray`.\n*\n* Array-like objects have `length` properties, and support square-bracket\n* notation `([])`. Array-like objects often do not support Array methods\n* such as `push()` or `concat()`, and so must be converted to Arrays before\n* use.\n*\n* The special `arguments` variable is an example of an array-like object.\n*\n* @public\n*/\nvar cloneArray = exports.cloneArray = function (array, offset, initialArray) {\n\tvar ret = initialArray || [];\n\tfor(var i = offset || 0, l = array.length; i<l; i++){\n\t\tret.push(array[i]);\n\t}\n\t// Alternate smarter implementation:\n\t// return Array.prototype.slice.call(array, offset);\n\t// Array.of\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n\treturn ret;\n};\n\n/**\n* @alias cloneArray\n* @method enyo.toArray\n* @public\n*/\nexports.toArray = cloneArray;\n\n/**\n* Within a given [array]{@glossary Array}, removes the first\n* [strictly equal to]{@glossary ===} occurrence of `el`.\n* Note that `array` is modified directly.\n*\n* @param {Array} array - The [Array]{@glossary Array} to look through.\n* @param {*} el - The element to search for and remove.\n* @public\n*/\nexports.remove = function (array, el) {\n\tif (!(array instanceof Array)) {\n\t\tvar tmp = array;\n\t\tarray = el;\n\t\tel = tmp;\n\t}\n\n\tvar i = array.indexOf(el);\n\tif (-1 < i) array.splice(i, 1);\n\treturn array;\n};\n\n/**\n* This regex pattern is used by the [isRtl()]{@link module:enyo/util#isRtl} function.\n*\n* Arabic: \\u0600-\\u06FF\\u0750-\\u077F\\u08A0-\\u08FF\\uFB50-\\uFDFF\\uFE70-\\uFEFE\n* Hebrew: \\u0590-\\u05FF\\uFB1D-\\uFB4F\n*\n* @private\n*/\nvar rtlPattern = /[\\u0600-\\u06FF\\u0750-\\u077F\\u08A0-\\u08FF\\uFB50-\\uFDFF\\uFE70-\\uFEFE\\u0590-\\u05FF\\uFB1D-\\uFB4F]/;\n\n/**\n* Takes content `str` and determines whether or not it is [RTL]{@glossary RTL}.\n*\n* @param {String} str - A [String]{@glossary String} to check the [RTL]{@glossary RTL}-ness of.\n* @return {Boolean} `true` if `str` should be RTL; `false` if not.\n* @public\n*/\nexports.isRtl = function (str) {\n\treturn rtlPattern.test(str);\n};",
    "mtime": 1434758950000,
    "relPath": "enyo/utils",
    "requires": [
      "enyo"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./roots",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/roots",
    "name": "enyo/roots",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/roots.js",
    "contents": "require('enyo');\n\n/**\n* @module enyo/roots\n*/\n\n/**\n* @private\n*/\nvar callbacks = [],\n\troots = [];\n\n/**\n* Registers a single callback to be executed whenever a root view is rendered.\n* \n* @name enyo.rendered\n* @method\n* @param {Function} method - The callback to execute.\n* @param {Object} [context=enyo.global] The context under which to execute the callback.\n* @public\n*/\nexports.rendered = function (method, context) {\n\tcallbacks.push({method: method, context: context || global});\n};\n\n/**\n* @private\n*/\nexports.roots = roots;\n\n/**\n* Invokes all known callbacks (if any) against the root view once it has been rendered.\n* This method is not likely to be executed very often.\n* \n* @private\n*/\nfunction invoke (root) {\n\tcallbacks.forEach(function (ln) {\n\t\tln.method.call(ln.context, root);\n\t});\n}\n\n/**\n* @private\n*/\nexports.addToRoots = function (view) {\n\tvar rendered,\n\t\tdestroy;\n\t\n\t// since it is possible to call renderInto more than once on a given view we ensure we\n\t// don't register it twice unnecessarily\n\tif (roots.indexOf(view) === -1) {\n\t\t\n\t\troots.push(view);\n\t\t\n\t\t// hijack the rendered method\n\t\trendered = view.rendered;\n\t\t\n\t\t// hijack the destroy method\n\t\tdestroy = view.destroy;\n\t\t\n\t\t// supply our rendered hook\n\t\tview.rendered = function () {\n\t\t\t// we call the original first\n\t\t\trendered.apply(this, arguments);\n\t\t\t\n\t\t\t// and now we invoke the known callbacks against this root\n\t\t\tinvoke(this);\n\t\t};\n\t\t\n\t\t// supply our destroy hook\n\t\tview.destroy = function () {\n\t\t\tvar idx = roots.indexOf(this);\n\t\t\t\n\t\t\t// remove it from the roots array\n\t\t\tif (idx > -1) roots.splice(idx, 1);\n\t\t\t\n\t\t\t// now we can call the original\n\t\t\tdestroy.apply(this, arguments);\n\t\t};\n\t}\n};\n",
    "mtime": 1434758950000,
    "relPath": "enyo/roots",
    "requires": [
      "enyo"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./pathResolver",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/pathResolver",
    "name": "enyo/pathResolver",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/pathResolver.js",
    "contents": "var PathResolverFactory = require('./PathResolverFactory');\n\nmodule.exports = new PathResolverFactory();\n",
    "mtime": 1434758950000,
    "relPath": "enyo/pathResolver",
    "requires": [
      "./PathResolverFactory"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "enyo",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo",
    "name": "enyo",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo",
    "isPackage": true,
    "packageFile": "/Users/jason/Git/bootplate/lib/enyo/package.json",
    "mtime": {
      "/Users/jason/Git/bootplate/lib/enyo/package.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo/index.js": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo/css/enyo.css": 1434758950000
    },
    "json": {
      "name": "enyo",
      "filename": "enyo.js",
      "version": "2.6.0-pre",
      "description": "Enyo is an open source object-oriented JavaScript framework emphasizing encapsulation and modularity. Enyo contains everything you need to create a fast, scalable mobile or web application.",
      "homepage": "http://enyojs.com/",
      "bugs": "http://jira.enyojs.com/",
      "main": "index.js",
      "styles": [
        "css/enyo.css"
      ],
      "keywords": [
        "framework",
        "toolkit",
        "components",
        "mobile",
        "webOS"
      ],
      "maintainers": [
        {
          "name": "Enyo JS Framework Team",
          "web": "http://enyojs.com/"
        }
      ],
      "licenses": [
        {
          "type": "Apache-2.0",
          "url": "http://www.apache.org/licenses/LICENSE-2.0"
        }
      ],
      "scripts": {
        "test": "./node_modules/.bin/gulp"
      },
      "repository": {
        "type": "git",
        "url": "http://github.com/enyojs/enyo"
      },
      "devDependencies": {
        "browserify": "^9.0.3",
        "chai": "~1.9.2",
        "gulp": "^3.8.11",
        "gulp-jshint": "^1.10.0",
        "gulp-mocha-phantomjs": "^0.6.1",
        "gulp-sourcemaps": "^1.5.0",
        "jshint": "~2.5.1",
        "jshint-stylish": "^1.0.1",
        "mocha": "~1.20.0",
        "mocha-phantomjs": "~3.4.1",
        "sinon": "~1.8.1",
        "sinon-chai": "~2.5.0",
        "through2": "^0.6.3",
        "vinyl": "^0.4.6",
        "vinyl-buffer": "^1.0.0",
        "vinyl-source-stream": "^1.0.0"
      }
    },
    "main": "/Users/jason/Git/bootplate/lib/enyo/index.js",
    "contents": "'use strict';\n\nexports = module.exports = require('./lib/options');\nexports.version = '2.6.0-pre';",
    "relPath": "enyo",
    "requires": [
      "./lib/options"
    ],
    "requests": [],
    "resolved": true,
    "styleEntries": [
      {
        "glob": "css/enyo.css",
        "files": [
          "/Users/jason/Git/bootplate/lib/enyo/css/enyo.css"
        ],
        "sources": {
          "/Users/jason/Git/bootplate/lib/enyo/css/enyo.css": "/* things we always want */\nbody {\n\tfont-family: 'Helvetica Neue', 'Nimbus Sans L', Arial, sans-serif;\n}\n\n/* allow hw-accelerated scrolling on platforms that support it */\nbody.webkitOverflowScrolling {\n\t-webkit-overflow-scrolling: touch;\n}\n\n/* for apps */\n.enyo-document-fit {\n\tmargin: 0;\n\theight: 100%;\n\t/* note: giving html overflow: auto is odd and was only ever done to avoid duplication\n\t\thowever, android 4.04 sometimes does not hide nodes when their display is set to none\n\t\tif document is overflow auto.\n\t*/\n\tposition: relative;\n}\n\n.enyo-body-fit {\n\tmargin: 0;\n\theight: 100%;\n\t/* helps prevent ios page scroll */\n\toverflow: auto;\n\tposition: relative;\n}\n\n.enyo-no-touch-action {\n\t-ms-touch-action: none;\n}\n\n.enyo-untouchable {\n\tpointer-events: none;\n}\n.enyo-untouchable > * {\n\tpointer-events: auto;\n}\n\n/* user selection */\n\n.enyo-unselectable {\n\tcursor: default;\n\t-ms-user-select: none;\n\t-webkit-user-select: none;\n\t-moz-user-select: -moz-none;\n\tuser-select: none;\n}\n\n.enyo-selectable {\n\tcursor: auto;\n\t-ms-user-select: element;\n\t-webkit-user-select: text;\n\t-moz-user-select: text;\n\tuser-select: text;\n}\n\n.enyo-selectable::selection, .enyo-selectable ::selection {\n\tbackground: #3297FD;\n\tcolor: #FFF;\n}\n\n/* layout */\n\nbody .enyo-fit {\n\tposition: absolute;\n\tleft: 0;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n}\n\n.enyo-clip {\n\toverflow: hidden;\n}\n\n.enyo-border-box {\n\t-webkit-box-sizing: border-box;\n\t-moz-box-sizing: border-box;\n\tbox-sizing: border-box;\n}\n\n/* compositing */\n\n.enyo-composite {\n\t-webkit-transform: translateZ(0);\n\t-moz-transform: translateZ(0);\n\t-ms-transform: translateZ(0);\n\t-o-transform: translateZ(0);\n\ttransform: translateZ(0);\n}\n\n.enyo-inline {\n\tdisplay: inline-block;\n}\n\n.enyo-positioned {\n\tposition: relative;\n}\n\n.enyo-fill {\n\tposition: relative;\n\twidth: 100%;\n\theight: 100%;\n}"
        },
        "source": "/* things we always want */\nbody {\n\tfont-family: 'Helvetica Neue', 'Nimbus Sans L', Arial, sans-serif;\n}\n\n/* allow hw-accelerated scrolling on platforms that support it */\nbody.webkitOverflowScrolling {\n\t-webkit-overflow-scrolling: touch;\n}\n\n/* for apps */\n.enyo-document-fit {\n\tmargin: 0;\n\theight: 100%;\n\t/* note: giving html overflow: auto is odd and was only ever done to avoid duplication\n\t\thowever, android 4.04 sometimes does not hide nodes when their display is set to none\n\t\tif document is overflow auto.\n\t*/\n\tposition: relative;\n}\n\n.enyo-body-fit {\n\tmargin: 0;\n\theight: 100%;\n\t/* helps prevent ios page scroll */\n\toverflow: auto;\n\tposition: relative;\n}\n\n.enyo-no-touch-action {\n\t-ms-touch-action: none;\n}\n\n.enyo-untouchable {\n\tpointer-events: none;\n}\n.enyo-untouchable > * {\n\tpointer-events: auto;\n}\n\n/* user selection */\n\n.enyo-unselectable {\n\tcursor: default;\n\t-ms-user-select: none;\n\t-webkit-user-select: none;\n\t-moz-user-select: -moz-none;\n\tuser-select: none;\n}\n\n.enyo-selectable {\n\tcursor: auto;\n\t-ms-user-select: element;\n\t-webkit-user-select: text;\n\t-moz-user-select: text;\n\tuser-select: text;\n}\n\n.enyo-selectable::selection, .enyo-selectable ::selection {\n\tbackground: #3297FD;\n\tcolor: #FFF;\n}\n\n/* layout */\n\nbody .enyo-fit {\n\tposition: absolute;\n\tleft: 0;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n}\n\n.enyo-clip {\n\toverflow: hidden;\n}\n\n.enyo-border-box {\n\t-webkit-box-sizing: border-box;\n\t-moz-box-sizing: border-box;\n\tbox-sizing: border-box;\n}\n\n/* compositing */\n\n.enyo-composite {\n\t-webkit-transform: translateZ(0);\n\t-moz-transform: translateZ(0);\n\t-ms-transform: translateZ(0);\n\t-o-transform: translateZ(0);\n\ttransform: translateZ(0);\n}\n\n.enyo-inline {\n\tdisplay: inline-block;\n}\n\n.enyo-positioned {\n\tposition: relative;\n}\n\n.enyo-fill {\n\tposition: relative;\n\twidth: 100%;\n\theight: 100%;\n}"
      }
    ]
  },
  {
    "path": "./PathResolverFactory",
    "base": "/Users/jason/Git/bootplate/lib/enyo/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/PathResolverFactory",
    "name": "enyo/PathResolverFactory",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/PathResolverFactory.js",
    "contents": "\n\nvar PathResolverFactory = module.exports = function() {\n\tthis.paths = {};\n\tthis.pathNames = [];\n};\n\nPathResolverFactory.prototype = {\n\taddPath: function(inName, inPath) {\n\t\tthis.paths[inName] = inPath;\n\t\tthis.pathNames.push(inName);\n\t\tthis.pathNames.sort(function(a, b) {\n\t\t\treturn b.length - a.length;\n\t\t});\n\t\treturn inPath;\n\t},\n\taddPaths: function(inPaths) {\n\t\tif (inPaths) {\n\t\t\tfor (var n in inPaths) {\n\t\t\t\tthis.addPath(n, inPaths[n]);\n\t\t\t}\n\t\t}\n\t},\n\tincludeTrailingSlash: function(inPath) {\n\t\treturn (inPath && inPath.slice(-1) !== \"/\") ? inPath + \"/\" : inPath;\n\t},\n\t// replace macros of the form $pathname with the mapped value of paths.pathname\n\trewrite: function (inPath) {\n\t\tvar working, its = this.includeTrailingSlash, paths = this.paths;\n\t\tvar fn = function(macro, name) {\n\t\t\tworking = true;\n\t\t\treturn its(paths[name]) || '';\n\t\t};\n\t\tvar result = inPath;\n\t\tdo {\n\t\t\tworking = false;\n\t\t\tfor (var i=0; i<this.pathNames.length; i++) {\n\t\t\t\tvar regex = new RegExp(\"\\\\$(\" + this.pathNames[i] + \")(\\\\/)?\", \"g\");\n\t\t\t\tresult = result.replace(regex, fn);\n\t\t\t}\n\t\t} while (working);\n\t\treturn result;\n\t}\n};\n",
    "mtime": 1434758950000,
    "relPath": "enyo/PathResolverFactory",
    "requires": [],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./lib/options",
    "base": "/Users/jason/Git/bootplate/lib/enyo",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo",
    "libName": "enyo",
    "relName": "enyo/options",
    "name": "enyo/options",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo/lib/options.js",
    "contents": "/*jshint node:true */\n'use strict';\n\n/**\n* Returns the global enyo options hash\n* @module enyo/options\n*/\n\nmodule.exports = (global.enyo && global.enyo.options) || {};\n",
    "mtime": 1434758950000,
    "relPath": "enyo/options",
    "requires": [],
    "requests": [],
    "resolved": true
  },
  {
    "path": "onyx/Button",
    "base": "/Users/jason/Git/bootplate/src/views",
    "external": true,
    "relName": "onyx/Button",
    "name": "onyx/Button",
    "fullpath": "/Users/jason/Git/bootplate/lib/onyx/lib/Button",
    "isPackage": true,
    "packageFile": "/Users/jason/Git/bootplate/lib/onyx/lib/Button/package.json",
    "mtime": {
      "/Users/jason/Git/bootplate/lib/onyx/lib/Button/package.json": 1434993188000,
      "/Users/jason/Git/bootplate/lib/onyx/lib/Button/Button.js": 1434993188000,
      "/Users/jason/Git/bootplate/lib/onyx/lib/Button/Button.less": 1434993188000
    },
    "json": {
      "main": "Button.js",
      "styles": [
        "Button.less"
      ]
    },
    "main": "/Users/jason/Git/bootplate/lib/onyx/lib/Button/Button.js",
    "contents": "require('onyx');\n\n/**\n* Contains the declaration for the {@link module:onyx/Button~Button} kind.\n* @module onyx/Button\n*/\n\nvar\n\tkind = require('enyo/kind'),\n\tButton = require('enyo/Button');\n\n/**\n* {@link module:onyx/Button~Button} is an {@link module:enyo/Button~Button} with Onyx styling applied. The\n* color of the button may be customized by specifying a background color.\n*\n* The `'onyx-affirmative'`, `'onyx-negative'`, and `'onyx-blue'` classes provide\n* some built-in presets.\n* ```\n* var\n* \tButton = require('onyx/Button');\n*\n* {kind: Button, content: 'Button'},\n* {kind: Button, content: 'Affirmative', classes: 'onyx-affirmative'},\n* {kind: Button, content: 'Negative', classes: 'onyx-negative'},\n* {kind: Button, content: 'Blue', classes: 'onyx-blue'},\n* {kind: Button, content: 'Custom', style: 'background-color: purple; color: #F1F1F1;'}\n* ```\n* For more information, see the documentation on\n* [Buttons]{@linkplain $dev-guide/building-apps/controls/buttons.html} in the\n* Enyo Developer Guide.\n*\n* @class Button\n* @extends module:enyo/Button~Button\n* @ui\n* @public\n*/\nmodule.exports = kind(\n\t/** @lends module:onyx/Button~Button.prototype */ {\n\n\t/**\n\t* @private\n\t*/\n\tname: 'onyx.Button',\n\n\t/**\n\t* @private\n\t*/\n\tkind: Button,\n\n\t/**\n\t* @private\n\t*/\n\tclasses: 'onyx-button enyo-unselectable',\n\n\t/**\n\t* @private\n\t*/\n\thandlers: {\n\t\tondown: 'down',\n\t\tonenter: 'enter',\n\t\tondragfinish: 'dragfinish',\n\t\tonleave: 'leave',\n\t\tonup: 'up'\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tdown: function (sender, event) {\n\t\tif (this.disabled) {\n\t\t\treturn true;\n\t\t}\n\t\tthis.addClass('pressed');\n\t\tthis._isPressed = true;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tenter: function (sender, event) {\n\t\tif (this.disabled) {\n\t\t\treturn true;\n\t\t}\n\t\tif(this._isPressed) {\n\t\t\tthis.addClass('pressed');\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tdragfinish: function (sender, event) {\n\t\tif (this.disabled) {\n\t\t\treturn true;\n\t\t}\n\t\tthis.removeClass('pressed');\n\t\tthis._isPressed = false;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tleave: function (sender, event) {\n\t\tif (this.disabled) {\n\t\t\treturn true;\n\t\t}\n\t\tthis.removeClass('pressed');\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tup: function (sender, event) {\n\t\tif (this.disabled) {\n\t\t\treturn true;\n\t\t}\n\t\tthis.removeClass('pressed');\n\t\tthis._isPressed = false;\n\t}\n});\n",
    "lib": "/Users/jason/Git/bootplate/lib/onyx",
    "libName": "onyx",
    "relPath": "onyx/Button",
    "requires": [
      "onyx",
      "enyo/kind",
      "enyo/Button"
    ],
    "requests": [],
    "resolved": true,
    "styleEntries": [
      {
        "glob": "Button.less",
        "files": [
          "/Users/jason/Git/bootplate/lib/onyx/lib/Button/Button.less"
        ],
        "sources": {
          "/Users/jason/Git/bootplate/lib/onyx/lib/Button/Button.less": "/* Button.css */\n.onyx-button {\n\toutline: 0;\n\t/**/\n\tcolor: @onyx-button-text-color;\n\tfont-size: @onyx-button-font-size;\n\ttext-align: center;\n\twhite-space: nowrap;\n\t/**/\n\tmargin: 0;\n\tpadding: @onyx-button-padding-tb @onyx-button-padding-lr;\n\toverflow: hidden;\n\t/**/\n\tborder-radius: @onyx-button-border-radius;\n\t/* for IE8 */\n\tborder: 1px solid (@onyx-button-background * 0.498);\n\tborder: 1px solid fade((@onyx-button-background * 0.067), 20%);\n\t/*\n\t\tThe border and the gradient interact in a strange way that\n\t\tcauses the bottom-border (top if the gradient is aligned top)\n\t\tto be lighter than other borders.\n\t\tWe can fix it by using the darker bottom border below, but\n\t\tthen there are a few rogue pixels that end up very dark.\n\t*/\n\t/* border-bottom: 1px solid rgba(15, 15, 15, 0.5); */\n\tbox-shadow: inset 0px 1px 0px rgba(255,255,255,0.2);\n\t/**/\n\tbackground: @onyx-button-background @onyx-button-gradient repeat-x bottom;\n\tbackground-size: contain;\n\t/**/\n\ttext-overflow: ellipsis;\n\t/* the following cause arcane problems on IE */\n\t/*\n\tmin-width: 14px;\n\tmin-height: 20px;\n\t*/\n}\n\n/*\n\tIE8 can't handle these selectors in tandem:\n\t.onyx-button.active, .onyx-button:active:not([disabled]) {\n\n\tthe effect is as if .onyx-button.active doesn't exist\n*/\n.onyx-button.active, .onyx-button.pressed {\n\tbackground-image: @onyx-button-active-gradient;\n\tbackground-position: top;\n\tborder-top: 1px solid rgba(15, 15, 15, 0.6);\n\tbox-shadow: inset 0px 1px 0px rgba(0,0,0,0.1);\n}\n\n.onyx-button[disabled] {\n\topacity: @onyx-disabled-opacity;\n\tfilter: alpha(opacity=@onyx-disabled-opacity-ie);\n}\n\n.onyx-button > img {\n\tpadding: 0px 3px;\n}\n\n/* Remove the focused inner-border style in Firefox (Windows) */\n.onyx-button::-moz-focus-inner {\n  border: 0;\n}\n\n/* ButtonColors.css */\n.onyx-button.onyx-blue {\n\tbackground-color: #35A8EE;\n\tcolor: #F2F2F2;\n}\n\n.onyx-button.onyx-affirmative {\n\tbackground-color: #91BA07;\n\tcolor: #F2F2F2;\n}\n\n.onyx-button.onyx-negative {\n\tbackground-color: #C51616;\n\tcolor: #F2F2F2;\n}\n\n.onyx-button.onyx-dark {\n\tbackground-color: @onyx-dark-background;\n\tcolor: #F2F2F2;\n}\n\n.onyx-button.onyx-light {\n\tbackground-color: @onyx-light-background;\n\tcolor: #2F2F2F;\n}"
        },
        "source": "/* Button.css */\n.onyx-button {\n\toutline: 0;\n\t/**/\n\tcolor: @onyx-button-text-color;\n\tfont-size: @onyx-button-font-size;\n\ttext-align: center;\n\twhite-space: nowrap;\n\t/**/\n\tmargin: 0;\n\tpadding: @onyx-button-padding-tb @onyx-button-padding-lr;\n\toverflow: hidden;\n\t/**/\n\tborder-radius: @onyx-button-border-radius;\n\t/* for IE8 */\n\tborder: 1px solid (@onyx-button-background * 0.498);\n\tborder: 1px solid fade((@onyx-button-background * 0.067), 20%);\n\t/*\n\t\tThe border and the gradient interact in a strange way that\n\t\tcauses the bottom-border (top if the gradient is aligned top)\n\t\tto be lighter than other borders.\n\t\tWe can fix it by using the darker bottom border below, but\n\t\tthen there are a few rogue pixels that end up very dark.\n\t*/\n\t/* border-bottom: 1px solid rgba(15, 15, 15, 0.5); */\n\tbox-shadow: inset 0px 1px 0px rgba(255,255,255,0.2);\n\t/**/\n\tbackground: @onyx-button-background @onyx-button-gradient repeat-x bottom;\n\tbackground-size: contain;\n\t/**/\n\ttext-overflow: ellipsis;\n\t/* the following cause arcane problems on IE */\n\t/*\n\tmin-width: 14px;\n\tmin-height: 20px;\n\t*/\n}\n\n/*\n\tIE8 can't handle these selectors in tandem:\n\t.onyx-button.active, .onyx-button:active:not([disabled]) {\n\n\tthe effect is as if .onyx-button.active doesn't exist\n*/\n.onyx-button.active, .onyx-button.pressed {\n\tbackground-image: @onyx-button-active-gradient;\n\tbackground-position: top;\n\tborder-top: 1px solid rgba(15, 15, 15, 0.6);\n\tbox-shadow: inset 0px 1px 0px rgba(0,0,0,0.1);\n}\n\n.onyx-button[disabled] {\n\topacity: @onyx-disabled-opacity;\n\tfilter: alpha(opacity=@onyx-disabled-opacity-ie);\n}\n\n.onyx-button > img {\n\tpadding: 0px 3px;\n}\n\n/* Remove the focused inner-border style in Firefox (Windows) */\n.onyx-button::-moz-focus-inner {\n  border: 0;\n}\n\n/* ButtonColors.css */\n.onyx-button.onyx-blue {\n\tbackground-color: #35A8EE;\n\tcolor: #F2F2F2;\n}\n\n.onyx-button.onyx-affirmative {\n\tbackground-color: #91BA07;\n\tcolor: #F2F2F2;\n}\n\n.onyx-button.onyx-negative {\n\tbackground-color: #C51616;\n\tcolor: #F2F2F2;\n}\n\n.onyx-button.onyx-dark {\n\tbackground-color: @onyx-dark-background;\n\tcolor: #F2F2F2;\n}\n\n.onyx-button.onyx-light {\n\tbackground-color: @onyx-light-background;\n\tcolor: #2F2F2F;\n}"
      }
    ]
  },
  {
    "path": "onyx/Toolbar",
    "base": "/Users/jason/Git/bootplate/src/views",
    "external": true,
    "relName": "onyx/Toolbar",
    "name": "onyx/Toolbar",
    "fullpath": "/Users/jason/Git/bootplate/lib/onyx/lib/Toolbar",
    "isPackage": true,
    "packageFile": "/Users/jason/Git/bootplate/lib/onyx/lib/Toolbar/package.json",
    "mtime": {
      "/Users/jason/Git/bootplate/lib/onyx/lib/Toolbar/package.json": 1434993188000,
      "/Users/jason/Git/bootplate/lib/onyx/lib/Toolbar/Toolbar.js": 1434993188000,
      "/Users/jason/Git/bootplate/lib/onyx/lib/Toolbar/Toolbar.less": 1434993188000
    },
    "json": {
      "main": "Toolbar.js",
      "styles": [
        "Toolbar.less"
      ]
    },
    "main": "/Users/jason/Git/bootplate/lib/onyx/lib/Toolbar/Toolbar.js",
    "contents": "require('onyx');\n\n/**\n* Contains the declaration for the {@link module:onyx/Toolbar~Toolbar} kind.\n* @module onyx/Toolbar\n*/\n\nvar\n\tkind = require('enyo/kind'),\n\tplatform = require('enyo/platform'),\n\tControl = require('enyo/Control');\n\n/**\n* {@link module:onyx/Toolbar~Toolbar} is a horizontal bar containing controls used to perform\n* common UI actions.\n*\n* A toolbar customizes the styling of the controls it hosts, including buttons,\n* icons, and inputs.\n*\n* ```\n* var\n* \tButton = require('onyx/Button'),\n* \tIconButton = require('onyx/IconButton'),\n* \tInput = require('onyx/Input'),\n* \tInputDecorator = require('onyx/InputDecorator'),\n* \tToolbar = require('onyx/Toolbar');\n*\n*\t{kind: Toolbar, components: [\n*\t\t{kind: Button, content: 'Favorites'},\n*\t\t{kind: InputDecorator, components: [\n*\t\t\t{kind: Input, placeholder: 'Enter a search term...'}\n*\t\t]},\n*\t\t{kind: IconButton, src: 'go.png'}\n*\t]}\n* ```\n*\n* @class Toolbar\n* @extends module:enyo/Control~Control\n* @ui\n* @public\n*/\nmodule.exports = kind(\n\t/** @lends module:onyx/Toolbar~Toolbar.prototype */ {\n\n\t/**\n\t* @private\n\t*/\n\tname: 'onyx.Toolbar',\n\n\t/**\n\t* @private\n\t*/\n\tkind: Control,\n\n\t/**\n\t* @private\n\t*/\n\tclasses: 'onyx onyx-toolbar onyx-toolbar-inline',\n\n\t/**\n\t* @private\n\t*/\n\tcreate: function () {\n\t\tControl.prototype.create.apply(this, arguments);\n\n\t\t//workaround for android 4.0.3 rendering glitch (ENYO-674)\n\t\tif (this.hasClass('onyx-menu-toolbar') && (platform.android >= 4)) {\n\t\t\tthis.applyStyle('position', 'static');\n\t\t}\n\t}\n});\n",
    "lib": "/Users/jason/Git/bootplate/lib/onyx",
    "libName": "onyx",
    "relPath": "onyx/Toolbar",
    "requires": [
      "onyx",
      "enyo/kind",
      "enyo/platform",
      "enyo/Control"
    ],
    "requests": [],
    "resolved": true,
    "styleEntries": [
      {
        "glob": "Toolbar.less",
        "files": [
          "/Users/jason/Git/bootplate/lib/onyx/lib/Toolbar/Toolbar.less"
        ],
        "sources": {
          "/Users/jason/Git/bootplate/lib/onyx/lib/Toolbar/Toolbar.less": "/* Toolbar.css */\n.onyx-toolbar {\n\t/*\n\t\tline-height is unreliable for centering, instead\n\t\tuse vertical-align: middle to align\n\t\telements along a common centerline and use\n\t\tpadding to fill out the space.\n\t*/\n\tpadding: 9px 8px 10px 8px;\n\t/**/\n\tborder: 1px solid #3A3A3A;\n\tbackground: @onyx-toolbar-background @onyx-toolbar-gradient repeat-x 0 bottom;\n\tbackground-size: contain;\n\tcolor: @onyx-toolbar-text-color;\n\t/**/\n\twhite-space: nowrap;\n\toverflow-y: visible;\n\tfont-size: @onyx-toolbar-font-size;\n}\n\n.onyx-toolbar-inline > *, .enyo-fittable-columns-layout.onyx-toolbar-inline > * {\n\tdisplay: inline-block;\n\tvertical-align: middle;\n\tmargin: 4px 6px 5px;\n\tbox-sizing: border-box;\n}\n\n/* needed for MathJax support */\n.onyx-toolbar-inline > script, .enyo-fittable-columns-layout.onyx-toolbar-inline > script {\n\tdisplay: none;\n}\n\n.onyx-toolbar .onyx-icon-button {\n\tmargin: 3px 2px 1px;\n}\n\n.onyx-toolbar .onyx-button {\n\tcolor: @onyx-toolbar-button-text-color;\n\tbackground-color: @onyx-toolbar-button-background;\n\tborder-color: rgba(15, 15, 15, 0.5);\n\tmargin-top: 0;\n\tmargin-bottom: 0;\n\theight: 36px;\n}\n\n.onyx-toolbar .onyx-input-decorator {\n\tmargin: 1px 3px;\n\tbox-shadow: inset 0px 1px 4px rgba(0,0,0,0.1);\n\tbackground-color: @onyx-toolbar-input-background;\n\tpadding: 0px 6px 5px 6px;\n}\n\n.onyx-toolbar .onyx-input-decorator.onyx-focused {\n\tbox-shadow: inset 0px 1px 4px rgba(0,0,0,0.3);\n\tbackground-color: @onyx-toolbar-input-focused-background;\n}\n\n.onyx-toolbar .onyx-input-decorator .onyx-input {\n\tcolor: @onyx-toolbar-input-text-color;\n\tfont-size: @onyx-toolbar-input-font-size;\n}\n\n.onyx-toolbar .onyx-input-decorator .onyx-input:focus {\n\tcolor: @onyx-toolbar-input-focus-text-color;\n}\n\n.onyx-toolbar .onyx-input-decorator .onyx-input:focus::-webkit-input-placeholder {\n\tcolor: @onyx-toolbar-input-placeholder-text-color;\n}\n"
        },
        "source": "/* Toolbar.css */\n.onyx-toolbar {\n\t/*\n\t\tline-height is unreliable for centering, instead\n\t\tuse vertical-align: middle to align\n\t\telements along a common centerline and use\n\t\tpadding to fill out the space.\n\t*/\n\tpadding: 9px 8px 10px 8px;\n\t/**/\n\tborder: 1px solid #3A3A3A;\n\tbackground: @onyx-toolbar-background @onyx-toolbar-gradient repeat-x 0 bottom;\n\tbackground-size: contain;\n\tcolor: @onyx-toolbar-text-color;\n\t/**/\n\twhite-space: nowrap;\n\toverflow-y: visible;\n\tfont-size: @onyx-toolbar-font-size;\n}\n\n.onyx-toolbar-inline > *, .enyo-fittable-columns-layout.onyx-toolbar-inline > * {\n\tdisplay: inline-block;\n\tvertical-align: middle;\n\tmargin: 4px 6px 5px;\n\tbox-sizing: border-box;\n}\n\n/* needed for MathJax support */\n.onyx-toolbar-inline > script, .enyo-fittable-columns-layout.onyx-toolbar-inline > script {\n\tdisplay: none;\n}\n\n.onyx-toolbar .onyx-icon-button {\n\tmargin: 3px 2px 1px;\n}\n\n.onyx-toolbar .onyx-button {\n\tcolor: @onyx-toolbar-button-text-color;\n\tbackground-color: @onyx-toolbar-button-background;\n\tborder-color: rgba(15, 15, 15, 0.5);\n\tmargin-top: 0;\n\tmargin-bottom: 0;\n\theight: 36px;\n}\n\n.onyx-toolbar .onyx-input-decorator {\n\tmargin: 1px 3px;\n\tbox-shadow: inset 0px 1px 4px rgba(0,0,0,0.1);\n\tbackground-color: @onyx-toolbar-input-background;\n\tpadding: 0px 6px 5px 6px;\n}\n\n.onyx-toolbar .onyx-input-decorator.onyx-focused {\n\tbox-shadow: inset 0px 1px 4px rgba(0,0,0,0.3);\n\tbackground-color: @onyx-toolbar-input-focused-background;\n}\n\n.onyx-toolbar .onyx-input-decorator .onyx-input {\n\tcolor: @onyx-toolbar-input-text-color;\n\tfont-size: @onyx-toolbar-input-font-size;\n}\n\n.onyx-toolbar .onyx-input-decorator .onyx-input:focus {\n\tcolor: @onyx-toolbar-input-focus-text-color;\n}\n\n.onyx-toolbar .onyx-input-decorator .onyx-input:focus::-webkit-input-placeholder {\n\tcolor: @onyx-toolbar-input-placeholder-text-color;\n}\n"
      }
    ]
  },
  {
    "path": "onyx",
    "base": "/Users/jason/Git/bootplate/lib/onyx/lib/Toolbar",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/onyx",
    "libName": "onyx",
    "relName": "onyx",
    "name": "onyx",
    "fullpath": "/Users/jason/Git/bootplate/lib/onyx",
    "isPackage": true,
    "packageFile": "/Users/jason/Git/bootplate/lib/onyx/package.json",
    "mtime": {
      "/Users/jason/Git/bootplate/lib/onyx/package.json": 1434993188000,
      "/Users/jason/Git/bootplate/lib/onyx/index.js": 1434993188000,
      "/Users/jason/Git/bootplate/lib/onyx/css/onyx-variables.less": 1434993188000,
      "/Users/jason/Git/bootplate/lib/onyx/css/onyx-rules.less": 1434993188000,
      "/Users/jason/Git/bootplate/lib/onyx/images/checkbox.png": 1434993188000,
      "/Users/jason/Git/bootplate/lib/onyx/images/close-active.png": 1434993188000,
      "/Users/jason/Git/bootplate/lib/onyx/images/close-inactive.png": 1434993188000,
      "/Users/jason/Git/bootplate/lib/onyx/images/grabbutton.png": 1434993188000,
      "/Users/jason/Git/bootplate/lib/onyx/images/gradient-invert.png": 1434993188000,
      "/Users/jason/Git/bootplate/lib/onyx/images/gradient.png": 1434993188000,
      "/Users/jason/Git/bootplate/lib/onyx/images/more.png": 1434993188000,
      "/Users/jason/Git/bootplate/lib/onyx/images/progress-button-cancel.png": 1434993188000,
      "/Users/jason/Git/bootplate/lib/onyx/images/search-input-cancel.png": 1434993188000,
      "/Users/jason/Git/bootplate/lib/onyx/images/search-input-search.png": 1434993188000,
      "/Users/jason/Git/bootplate/lib/onyx/images/slider-handle.png": 1434993188000,
      "/Users/jason/Git/bootplate/lib/onyx/images/spinner-dark.gif": 1434993188000,
      "/Users/jason/Git/bootplate/lib/onyx/images/spinner-light.gif": 1434993188000
    },
    "json": {
      "name": "onyx",
      "version": "1.0.0",
      "main": "index.js",
      "styles": [
        "css/onyx-variables.less",
        "css/onyx-rules.less"
      ],
      "assets": [
        "images/*.png",
        "images/*.gif"
      ],
      "optionalLibs": [
        "enyo-ilib"
      ],
      "directories": {
        "doc": "docs"
      },
      "scripts": {
        "test": "./node_modules/.bin/gulp"
      },
      "repository": {
        "type": "git",
        "url": "https://github.com/enyojs/onyx.git"
      },
      "author": "",
      "license": "ISC",
      "homepage": "https://github.com/enyojs/onyx",
      "devDependencies": {
        "gulp": "^3.8.11",
        "gulp-jshint": "^1.10.0",
        "jshint-stylish": "^1.0.1"
      }
    },
    "main": "/Users/jason/Git/bootplate/lib/onyx/index.js",
    "contents": "/**\n* Features a variety of commonly used widgets, including toolbars, text inputs, checkboxes, groups\n* and multiple types of buttons. \n*\n* @namespace onyx \n*/\nmodule.exports.version = \"2.6.0-pre.4.dev\";",
    "relPath": "onyx",
    "requires": [],
    "requests": [],
    "resolved": true,
    "styleEntries": [
      {
        "glob": "css/onyx-variables.less",
        "files": [
          "/Users/jason/Git/bootplate/lib/onyx/css/onyx-variables.less"
        ],
        "sources": {
          "/Users/jason/Git/bootplate/lib/onyx/css/onyx-variables.less": "/* Paths */\n/* application importing Onyx Less files will have to override this  */\n/* variable. Otherwise, Onyx image load will fail with a 404 error  */\n@onyx-image-path: '../images';\n\n\n/* Fonts */\n/* ---------------------------------------*/\n@onyx-font-family: 'Helvetica Neue', 'Nimbus Sans L', Arial, sans-serif;\n@onyx-font-size-small: 14px;\n@onyx-font-size-medium: 16px;\n@onyx-font-size-large: 20px;\n\n@onyx-button-font-size: @onyx-font-size-medium;\n@onyx-font-size: @onyx-font-size-large;\n@onyx-groupbox-font-size: @onyx-font-size-medium;\n@onyx-groupbox-header-font-size: @onyx-font-size-small;\n@onyx-input-font-size: @onyx-font-size-medium;\n@onyx-popup-font-size: @onyx-font-size-medium;\n@onyx-progressbutton-font-size: @onyx-font-size-medium;\n@onyx-radiobutton-font-size: @onyx-font-size-medium;\n@onyx-richtext-font-size: @onyx-font-size-medium;\n@onyx-tabbutton-font-size: @onyx-font-size-large;\n@onyx-textarea-font-size: @onyx-font-size-medium;\n@onyx-togglebutton-font-size: @onyx-font-size-small;\n@onyx-toolbar-font-size: @onyx-font-size-large;\n@onyx-toolbar-input-font-size: @onyx-font-size-small;\n\n/* Text Colors */\n/* ---------------------------------------*/\n@onyx-button-text-color: #292929;\n@onyx-groupbox-text-color: white;\n@onyx-picker-text-color: black;\n@onyx-popup-text-color: white;\n@onyx-progressbutton-text-color: #F1F1F1;\n@onyx-radiobutton-active-text-color: white;\n@onyx-text-color: #333333;\n@onyx-togglebutton-text-color: white;\n@onyx-toolbar-button-text-color: #F2F2F2;\n@onyx-toolbar-input-focus-text-color: #000;\n@onyx-toolbar-input-placeholder-text-color: #ddd;\n@onyx-toolbar-input-text-color: #e5e5e5;\n@onyx-toolbar-text-color: white;\n@onyx-tooltip-text-color: white;\n\n/* Background Colors */\n/* ---------------------------------------*/\n@onyx-background: #EAEAEA;\n@onyx-light-background: color(\"#CACACA\");\n@onyx-dark-background: #555656;\n@onyx-selected-background: #C4E3FE;\n\n@onyx-button-background: #E1E1E1;\n@onyx-groupbox-background: #4C4C4C;\n@onyx-highlight-background: #DEDFDF;\n@onyx-input-background: transparent;\n@onyx-input-focused-background: white;\n@onyx-menu-item-hover: #284152;\n@onyx-picker-background: #E1E1E1;\n@onyx-picker-item-background: #cde7fe;\n@onyx-popup-background: #4C4C4C;\n@onyx-progressbar-background: #B8B8B8;\n@onyx-progressbar-bar-background: #58ABEF;\n@onyx-radiobutton-active-background: #0091F2;\n@onyx-radiobutton-background: #E7E7E7;\n@onyx-switeable-item-background: #EAEAEA;\n@onyx-togglebutton-background: #8BBA3D;\n@onyx-togglebutton-knob-background: #F6F6F6;\n@onyx-togglebutton-off-background: #B1B1B1;\n@onyx-toolbar-background: #4C4C4C;\n@onyx-toolbar-button-background: #555656;\n@onyx-toolbar-input-background: rgba(0, 0, 0, 0.1);\n@onyx-toolbar-input-focused-background: white;\n@onyx-tooltip-background: #216593;\n\n/* Border Radius */\n/* ---------------------------------------*/\n@onyx-border-radius: 4px;\n@onyx-border-radius-tight: 3px;\n\n@onyx-button-border-radius: @onyx-border-radius-tight;\n@onyx-groupbox-border-radius: @onyx-border-radius;\n@onyx-input-border-radius: @onyx-border-radius-tight;\n@onyx-menu-border-radius: @onyx-border-radius-tight;\n@onyx-progressbar-border-radius: @onyx-border-radius-tight;\n@onyx-radiobutton-border-radius: @onyx-border-radius-tight;\n@onyx-togglebutton-border-radius: @onyx-border-radius-tight;\n@onyx-tooltip-border-radius: @onyx-border-radius-tight;\n\n/* Padding */\n/* ---------------------------------------*/\n@onyx-button-padding-lr: 18px;\n@onyx-button-padding-tb: 6px;\n@onyx-tabbutton-padding-lr: 34px;\n@onyx-tabbutton-padding-tb: 8px;\n\n/* Icon Sizes */\n/* ---------------------------------------*/\n@onyx-icon-size: 32px;\n\n/* Disabled Opacity */\n/* ---------------------------------------*/\n@onyx-disabled-opacity: 0.4;\n\n/* Gradient Overlays */\n/* ---------------------------------------*/\n@onyx-gradient: url('onyx/css/@{onyx-image-path}/gradient.png');\n@onyx-gradient-invert: url('onyx/css/@{onyx-image-path}/gradient-invert.png');\n\n@onyx-button-active-gradient: @onyx-gradient-invert;\n@onyx-button-gradient: @onyx-gradient;\n@onyx-groupbox-gradient: @onyx-gradient;\n@onyx-popup-gradient: @onyx-gradient;\n@onyx-progressbar-bar-gradient: @onyx-gradient;\n@onyx-progressbar-gradient: @onyx-gradient-invert;\n@onyx-radiobutton-active-gradient: @onyx-gradient-invert;\n@onyx-radiobutton-gradient: @onyx-gradient;\n@onyx-togglebutton-gradient: @onyx-gradient-invert;\n@onyx-togglebutton-knob-gradient: @onyx-gradient;\n@onyx-toolbar-gradient: @onyx-gradient;\n@onyx-tooltip-gradient: @onyx-gradient;\n\n/* Images */\n/* ---------------------------------------*/\n@onyx-checkbox-image: url('onyx/css/@{onyx-image-path}/checkbox.png');\n@onyx-checkbox-image-height: 32px;\n@onyx-checkbox-image-width: 32px;\n\n@onyx-grabber-image: url('onyx/css/@{onyx-image-path}/grabbutton.png');\n@onyx-grabber-image-height: 27px;\n@onyx-grabber-image-width: 23px;\n\n@onyx-more-toolbar-button-image: url('onyx/css/@{onyx-image-path}/more.png');\n@onyx-more-toolbar-button-image-height: 32px;\n@onyx-more-toolbar-button-image-width: 32px;\n\n@onyx-slider-knob-image: url('onyx/css/@{onyx-image-path}/slider-handle.png');\n@onyx-slider-knob-image-height: 40px;\n@onyx-slider-knob-image-width: 40px;\n\n@onyx-spinner-dark-image: url('onyx/css/@{onyx-image-path}/spinner-dark.gif');\n@onyx-spinner-light-image: url('onyx/css/@{onyx-image-path}/spinner-light.gif');\n@onyx-spinner-image-width: 59px;\n@onyx-spinner-image-height: 58px;\n"
        },
        "source": "/* Paths */\n/* application importing Onyx Less files will have to override this  */\n/* variable. Otherwise, Onyx image load will fail with a 404 error  */\n@onyx-image-path: '../images';\n\n\n/* Fonts */\n/* ---------------------------------------*/\n@onyx-font-family: 'Helvetica Neue', 'Nimbus Sans L', Arial, sans-serif;\n@onyx-font-size-small: 14px;\n@onyx-font-size-medium: 16px;\n@onyx-font-size-large: 20px;\n\n@onyx-button-font-size: @onyx-font-size-medium;\n@onyx-font-size: @onyx-font-size-large;\n@onyx-groupbox-font-size: @onyx-font-size-medium;\n@onyx-groupbox-header-font-size: @onyx-font-size-small;\n@onyx-input-font-size: @onyx-font-size-medium;\n@onyx-popup-font-size: @onyx-font-size-medium;\n@onyx-progressbutton-font-size: @onyx-font-size-medium;\n@onyx-radiobutton-font-size: @onyx-font-size-medium;\n@onyx-richtext-font-size: @onyx-font-size-medium;\n@onyx-tabbutton-font-size: @onyx-font-size-large;\n@onyx-textarea-font-size: @onyx-font-size-medium;\n@onyx-togglebutton-font-size: @onyx-font-size-small;\n@onyx-toolbar-font-size: @onyx-font-size-large;\n@onyx-toolbar-input-font-size: @onyx-font-size-small;\n\n/* Text Colors */\n/* ---------------------------------------*/\n@onyx-button-text-color: #292929;\n@onyx-groupbox-text-color: white;\n@onyx-picker-text-color: black;\n@onyx-popup-text-color: white;\n@onyx-progressbutton-text-color: #F1F1F1;\n@onyx-radiobutton-active-text-color: white;\n@onyx-text-color: #333333;\n@onyx-togglebutton-text-color: white;\n@onyx-toolbar-button-text-color: #F2F2F2;\n@onyx-toolbar-input-focus-text-color: #000;\n@onyx-toolbar-input-placeholder-text-color: #ddd;\n@onyx-toolbar-input-text-color: #e5e5e5;\n@onyx-toolbar-text-color: white;\n@onyx-tooltip-text-color: white;\n\n/* Background Colors */\n/* ---------------------------------------*/\n@onyx-background: #EAEAEA;\n@onyx-light-background: color(\"#CACACA\");\n@onyx-dark-background: #555656;\n@onyx-selected-background: #C4E3FE;\n\n@onyx-button-background: #E1E1E1;\n@onyx-groupbox-background: #4C4C4C;\n@onyx-highlight-background: #DEDFDF;\n@onyx-input-background: transparent;\n@onyx-input-focused-background: white;\n@onyx-menu-item-hover: #284152;\n@onyx-picker-background: #E1E1E1;\n@onyx-picker-item-background: #cde7fe;\n@onyx-popup-background: #4C4C4C;\n@onyx-progressbar-background: #B8B8B8;\n@onyx-progressbar-bar-background: #58ABEF;\n@onyx-radiobutton-active-background: #0091F2;\n@onyx-radiobutton-background: #E7E7E7;\n@onyx-switeable-item-background: #EAEAEA;\n@onyx-togglebutton-background: #8BBA3D;\n@onyx-togglebutton-knob-background: #F6F6F6;\n@onyx-togglebutton-off-background: #B1B1B1;\n@onyx-toolbar-background: #4C4C4C;\n@onyx-toolbar-button-background: #555656;\n@onyx-toolbar-input-background: rgba(0, 0, 0, 0.1);\n@onyx-toolbar-input-focused-background: white;\n@onyx-tooltip-background: #216593;\n\n/* Border Radius */\n/* ---------------------------------------*/\n@onyx-border-radius: 4px;\n@onyx-border-radius-tight: 3px;\n\n@onyx-button-border-radius: @onyx-border-radius-tight;\n@onyx-groupbox-border-radius: @onyx-border-radius;\n@onyx-input-border-radius: @onyx-border-radius-tight;\n@onyx-menu-border-radius: @onyx-border-radius-tight;\n@onyx-progressbar-border-radius: @onyx-border-radius-tight;\n@onyx-radiobutton-border-radius: @onyx-border-radius-tight;\n@onyx-togglebutton-border-radius: @onyx-border-radius-tight;\n@onyx-tooltip-border-radius: @onyx-border-radius-tight;\n\n/* Padding */\n/* ---------------------------------------*/\n@onyx-button-padding-lr: 18px;\n@onyx-button-padding-tb: 6px;\n@onyx-tabbutton-padding-lr: 34px;\n@onyx-tabbutton-padding-tb: 8px;\n\n/* Icon Sizes */\n/* ---------------------------------------*/\n@onyx-icon-size: 32px;\n\n/* Disabled Opacity */\n/* ---------------------------------------*/\n@onyx-disabled-opacity: 0.4;\n\n/* Gradient Overlays */\n/* ---------------------------------------*/\n@onyx-gradient: url('onyx/css/@{onyx-image-path}/gradient.png');\n@onyx-gradient-invert: url('onyx/css/@{onyx-image-path}/gradient-invert.png');\n\n@onyx-button-active-gradient: @onyx-gradient-invert;\n@onyx-button-gradient: @onyx-gradient;\n@onyx-groupbox-gradient: @onyx-gradient;\n@onyx-popup-gradient: @onyx-gradient;\n@onyx-progressbar-bar-gradient: @onyx-gradient;\n@onyx-progressbar-gradient: @onyx-gradient-invert;\n@onyx-radiobutton-active-gradient: @onyx-gradient-invert;\n@onyx-radiobutton-gradient: @onyx-gradient;\n@onyx-togglebutton-gradient: @onyx-gradient-invert;\n@onyx-togglebutton-knob-gradient: @onyx-gradient;\n@onyx-toolbar-gradient: @onyx-gradient;\n@onyx-tooltip-gradient: @onyx-gradient;\n\n/* Images */\n/* ---------------------------------------*/\n@onyx-checkbox-image: url('onyx/css/@{onyx-image-path}/checkbox.png');\n@onyx-checkbox-image-height: 32px;\n@onyx-checkbox-image-width: 32px;\n\n@onyx-grabber-image: url('onyx/css/@{onyx-image-path}/grabbutton.png');\n@onyx-grabber-image-height: 27px;\n@onyx-grabber-image-width: 23px;\n\n@onyx-more-toolbar-button-image: url('onyx/css/@{onyx-image-path}/more.png');\n@onyx-more-toolbar-button-image-height: 32px;\n@onyx-more-toolbar-button-image-width: 32px;\n\n@onyx-slider-knob-image: url('onyx/css/@{onyx-image-path}/slider-handle.png');\n@onyx-slider-knob-image-height: 40px;\n@onyx-slider-knob-image-width: 40px;\n\n@onyx-spinner-dark-image: url('onyx/css/@{onyx-image-path}/spinner-dark.gif');\n@onyx-spinner-light-image: url('onyx/css/@{onyx-image-path}/spinner-light.gif');\n@onyx-spinner-image-width: 59px;\n@onyx-spinner-image-height: 58px;\n"
      },
      {
        "glob": "css/onyx-rules.less",
        "files": [
          "/Users/jason/Git/bootplate/lib/onyx/css/onyx-rules.less"
        ],
        "sources": {
          "/Users/jason/Git/bootplate/lib/onyx/css/onyx-rules.less": "/* onyx-classes.less - combined CSS (less) files for all released Onyx controls\n   into single onyx.less file to avoid IE bug that allows\n   a maximum of 31 style sheets to be loaded before silently failing */\n\n.onyx {\n\tcolor: @onyx-text-color;\n\tfont-family: @onyx-font-family;\n\tfont-size: @onyx-font-size;\n\tcursor: default;\n\tbackground-color: @onyx-background;\n\t/* remove automatic tap highlight color */\n\t-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n\n/* prevent IE from inheriting line-height for these elements */\n.onyx-button, .onyx label, .onyx input {\n\tline-height: normal;\n}\n\n.onyx-selected {\n\tbackground-color: @onyx-selected-background;\n}\n\n/* LESS pre-calculations */\n@onyx-disabled-opacity-ie: @onyx-disabled-opacity*100;\n\n/* some default colors */\n.onyx-dark {\n\tbackground-color: @onyx-dark-background;\n}\n\n.onyx-light {\n\tbackground-color: @onyx-light-background;\n}\n\n.onyx-green {\n\tbackground-color: #91BA07;\n}\n\n.onyx-red {\n\tbackground-color: #C51616;\n}\n\n.onyx-blue {\n\tbackground-color: #35A8EE;\n}\n"
        },
        "source": "/* onyx-classes.less - combined CSS (less) files for all released Onyx controls\n   into single onyx.less file to avoid IE bug that allows\n   a maximum of 31 style sheets to be loaded before silently failing */\n\n.onyx {\n\tcolor: @onyx-text-color;\n\tfont-family: @onyx-font-family;\n\tfont-size: @onyx-font-size;\n\tcursor: default;\n\tbackground-color: @onyx-background;\n\t/* remove automatic tap highlight color */\n\t-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n\n/* prevent IE from inheriting line-height for these elements */\n.onyx-button, .onyx label, .onyx input {\n\tline-height: normal;\n}\n\n.onyx-selected {\n\tbackground-color: @onyx-selected-background;\n}\n\n/* LESS pre-calculations */\n@onyx-disabled-opacity-ie: @onyx-disabled-opacity*100;\n\n/* some default colors */\n.onyx-dark {\n\tbackground-color: @onyx-dark-background;\n}\n\n.onyx-light {\n\tbackground-color: @onyx-light-background;\n}\n\n.onyx-green {\n\tbackground-color: #91BA07;\n}\n\n.onyx-red {\n\tbackground-color: #C51616;\n}\n\n.onyx-blue {\n\tbackground-color: #35A8EE;\n}\n"
      }
    ],
    "assetEntries": [
      {
        "glob": "images/*.png",
        "files": [
          "/Users/jason/Git/bootplate/lib/onyx/images/checkbox.png",
          "/Users/jason/Git/bootplate/lib/onyx/images/close-active.png",
          "/Users/jason/Git/bootplate/lib/onyx/images/close-inactive.png",
          "/Users/jason/Git/bootplate/lib/onyx/images/grabbutton.png",
          "/Users/jason/Git/bootplate/lib/onyx/images/gradient-invert.png",
          "/Users/jason/Git/bootplate/lib/onyx/images/gradient.png",
          "/Users/jason/Git/bootplate/lib/onyx/images/more.png",
          "/Users/jason/Git/bootplate/lib/onyx/images/progress-button-cancel.png",
          "/Users/jason/Git/bootplate/lib/onyx/images/search-input-cancel.png",
          "/Users/jason/Git/bootplate/lib/onyx/images/search-input-search.png",
          "/Users/jason/Git/bootplate/lib/onyx/images/slider-handle.png"
        ],
        "updated": [
          "/Users/jason/Git/bootplate/lib/onyx/images/checkbox.png",
          "/Users/jason/Git/bootplate/lib/onyx/images/close-active.png",
          "/Users/jason/Git/bootplate/lib/onyx/images/close-inactive.png",
          "/Users/jason/Git/bootplate/lib/onyx/images/grabbutton.png",
          "/Users/jason/Git/bootplate/lib/onyx/images/gradient-invert.png",
          "/Users/jason/Git/bootplate/lib/onyx/images/gradient.png",
          "/Users/jason/Git/bootplate/lib/onyx/images/more.png",
          "/Users/jason/Git/bootplate/lib/onyx/images/progress-button-cancel.png",
          "/Users/jason/Git/bootplate/lib/onyx/images/search-input-cancel.png",
          "/Users/jason/Git/bootplate/lib/onyx/images/search-input-search.png",
          "/Users/jason/Git/bootplate/lib/onyx/images/slider-handle.png"
        ]
      },
      {
        "glob": "images/*.gif",
        "files": [
          "/Users/jason/Git/bootplate/lib/onyx/images/spinner-dark.gif",
          "/Users/jason/Git/bootplate/lib/onyx/images/spinner-light.gif"
        ],
        "updated": [
          "/Users/jason/Git/bootplate/lib/onyx/images/spinner-dark.gif",
          "/Users/jason/Git/bootplate/lib/onyx/images/spinner-light.gif"
        ]
      }
    ]
  },
  {
    "path": "enyo-ilib",
    "base": "/Users/jason/Git/bootplate/lib/moonstone/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo-ilib",
    "libName": "enyo-ilib",
    "relName": "enyo-ilib",
    "name": "enyo-ilib",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo-ilib",
    "isPackage": true,
    "packageFile": "/Users/jason/Git/bootplate/lib/enyo-ilib/package.json",
    "mtime": {
      "/Users/jason/Git/bootplate/lib/enyo-ilib/package.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/index.js": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aa/dateformats.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aa/DJ/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aa/ER/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aa/ET/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aa/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aa/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aa/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ab/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/abq/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ace/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ach/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ada/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/address.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ady/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ae/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/ctrynames.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/dateformats.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/NA/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/NA/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/plurals.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/ZA/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/afa/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/afh/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/agq/CM/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/agq/ctrynames.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/agq/dateformats.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/agq/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/agq/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/agq/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aii/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ain/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ak/ctrynames.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ak/dateformats.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ak/GH/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ak/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ak/plurals.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ak/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ak/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/akk/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ale/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/alg/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/alt/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/am/ctrynames.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/am/dateformats.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/am/ET/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/am/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/am/plurals.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/am/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/am/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/amo/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/an/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ang/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/anp/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/apa/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/001/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/AE/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/BH/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/ctrynames.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/dateformats.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/DJ/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/DZ/dateformats.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/DZ/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/DZ/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/DZ/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/EG/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/EH/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/EH/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/ER/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/IL/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/IQ/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/IQ/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/JO/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/JO/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/KM/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/KW/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/LB/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/LB/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/LY/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/MA/dateformats.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/MA/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/MA/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/MA/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/MR/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/name.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/OM/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/plurals.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/PS/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/QA/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/SA/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/SD/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/SO/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/SS/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/SY/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/SY/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/TD/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/TN/dateformats.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/TN/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/TN/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/TN/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/YE/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/arc/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/arn/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/arp/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/art/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/arw/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/as/ctrynames.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/as/dateformats.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/as/IN/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/as/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/as/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/as/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/asa/ctrynames.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/asa/dateformats.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/asa/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/asa/plurals.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/asa/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/asa/TZ/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/asa/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ast/dateformats.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ast/ES/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ast/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ast/plurals.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ast/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ast/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/astro.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ath/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aus/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/av/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/awa/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ay/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/ctrynames.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/Cyrl-AZ/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/Cyrl/AZ/ctrynames.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/Cyrl/AZ/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/Cyrl/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/dateformats.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/Latn-AZ/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/Latn/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ba/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bad/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bai/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bal/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ban/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bas/CM/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bas/ctrynames.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bas/dateformats.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bas/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bas/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bas/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bat/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bax/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bbc/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bbj/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/be/BY/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/be/ctrynames.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/be/dateformats.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/be/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/be/plurals.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/be/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/be/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bej/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bem/dateformats.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bem/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bem/plurals.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bem/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bem/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bem/ZM/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ber/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bez/ctrynames.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bez/dateformats.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bez/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bez/plurals.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bez/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bez/TZ/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bez/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bfd/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bfq/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bft/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bfy/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bg/BG/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bg/ctrynames.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bg/dateformats.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bg/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bg/name.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bg/plurals.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bg/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bg/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bh/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bh/plurals.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bhb/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bho/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bi/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bik/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bin/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bjj/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bkm/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bku/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bla/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/blt/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bm/ctrynames.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bm/dateformats.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bm/Latn-ML/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bm/Latn/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bm/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bm/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bm/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/BD/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/ctrynames.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/dateformats.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/IN/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/name.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/plurals.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bnt/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bo/CN/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bo/ctrynames.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bo/dateformats.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bo/IN/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bo/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bo/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bo/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bqv/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/br/ctrynames.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/br/dateformats.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/br/FR/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/br/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/br/plurals.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/br/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/br/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bra/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/brx/ctrynames.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/brx/dateformats.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/brx/IN/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/brx/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/brx/plurals.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/brx/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/brx/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/ctrynames.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/Cyrl-BA/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/Cyrl/BA/ctrynames.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/Cyrl/BA/dateformats.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/Cyrl/BA/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/Cyrl/BA/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/Cyrl/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/dateformats.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/Latn-BA/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/Latn/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/name.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/plurals.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/unitfmt.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bss/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/btk/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/btv/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bua/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/buc/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bug/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bum/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bxr/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bya/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/byn/dateformats.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/byn/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/byn/sysres.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/byv/localeinfo.json": 1434758950000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/AD/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/ES-VALENCIA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/ES/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/FR/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/IT/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cad/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cai/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/car/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cau/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cay/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cch/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ccp/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ce/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ceb/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cel/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cgg/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cgg/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cgg/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cgg/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cgg/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cgg/UG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cgg/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ch/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chb/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chg/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chk/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chm/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chn/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cho/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chp/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chr/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chr/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chr/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chr/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chr/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chr/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chr/US/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chy/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cja/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cjm/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cjs/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ckb/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ckb/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ckt/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cmc/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/co/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/collation.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cop/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cop/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cop/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cop/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/countries.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cpe/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cpf/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cpp/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cr/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/crh/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/crk/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/crp/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cs/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cs/CZ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cs/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cs/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cs/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cs/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cs/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cs/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/csb/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ctype_c.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ctype_l.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ctype_m.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ctype_n.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ctype_p.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ctype_s.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ctype_z.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ctype.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cu/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/currency.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cus/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cv/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cwd/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cy/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cy/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cy/GB/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cy/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cy/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cy/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cy/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/DK/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/GL/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dak/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dar/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dav/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dav/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dav/KE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dav/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dav/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dav/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/day/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/AT/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/AT/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/AT/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/BE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/CH/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/CH/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/CH/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/collation.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/DE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/LI/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/LI/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/LU/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/phoneres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/del/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/den/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dgr/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/din/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dje/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dje/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dje/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dje/NE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dje/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dje/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dng/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/doi/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dra/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dsb/DE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dsb/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dsb/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dua/CM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dua/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dua/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dua/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dua/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dum/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dv/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dv/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dyo/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dyo/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dyo/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dyo/SN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dyo/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dyo/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dyu/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dz/BT/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dz/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dz/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dz/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dz/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dz/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dzg/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ebu/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ebu/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ebu/KE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ebu/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ebu/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ebu/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ee/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ee/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ee/GH/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ee/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ee/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ee/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ee/TG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ee/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/efi/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/egy/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eka/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eky/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/CY/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/CY/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/GR/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/elx/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/emk/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/001/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/150/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/AG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/AI/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/AS/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/AU/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/BB/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/BE/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/BE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/BM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/BS/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/BW/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/BZ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/CA/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/CA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/CC/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/CK/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/CM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/CX/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/DG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/DM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/Dsrt/US/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/Dsrt/US/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/ER/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/FJ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/FK/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/FM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GB/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GB/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GD/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GG/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GH/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GI/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GI/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GU/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GY/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/HK/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/IE/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/IE/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/IE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/IM/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/IM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/IN/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/IN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/IO/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/JE/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/JE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/JM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/KE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/KI/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/KN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/KY/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/LC/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/LR/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/LS/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MH/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MO/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MP/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MS/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MT/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MT/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MU/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MW/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MY/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/NA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/NF/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/NG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/NR/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/NU/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/NZ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/PG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/PH/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/PK/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/PN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/PR/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/PW/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/RW/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SB/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SC/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SD/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SH/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SL/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SS/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SX/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SZ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/TC/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/TK/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/TO/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/TT/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/TV/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/TZ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/UG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/UM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/US-POSIX/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/US/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/US/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/US/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/VC/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/VG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/VI/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/VU/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/WS/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/ZA/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/ZA/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/ZA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/ZM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/ZW/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/enm/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eo/001/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eo/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eo/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eo/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eo/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eo/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eo/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/419/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/AR/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/AR/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/AR/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/BO/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/BO/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CL/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CL/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CL/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CO/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CO/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/collation.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CR/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CR/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CU/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CU/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/DO/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/DO/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/EA/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/EA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/EC/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/EC/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/ES/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/ES/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/ES/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/GQ/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/GQ/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/GQ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/GT/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/GT/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/HN/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/HN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/IC/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/IC/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/MX/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/MX/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/NI/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/NI/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PA/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PE/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PH/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PH/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PH/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/phoneres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PR/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PR/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PY/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PY/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/SV/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/SV/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/US/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/US/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/US/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/UY/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/UY/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/VE/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/VE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/collation.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/EE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ett/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eu/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eu/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eu/ES/pseudomap.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eu/ES/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eu/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eu/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eu/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eu/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/evn/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ewo/CM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ewo/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ewo/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ewo/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ewo/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ewo/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/AF/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/AF/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/AF/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/IR/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fan/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fat/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/CM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/GN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/MR/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/SN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fi/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fi/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fi/FI/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fi/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fi/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fi/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fi/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fi/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fil/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fil/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fil/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fil/PH/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fil/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fil/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fil/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fiu/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fj/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fo/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fo/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fo/FO/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fo/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fo/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fo/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fo/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fon/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/BE/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/BE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/BF/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/BI/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/BJ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/BL/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CA/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CA/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CA/phoneres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CD/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CF/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CH/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CH/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CI/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/DJ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/DZ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/FR/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/GA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/GF/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/GN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/GP/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/GQ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/HT/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/KM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/LU/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/LU/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/MA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/MC/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/MF/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/MG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/ML/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/MQ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/MR/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/MU/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/NC/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/NE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/PF/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/phoneres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/PM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/RE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/RW/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/SC/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/SN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/SY/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/TD/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/TG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/TN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/VU/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/WF/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/YT/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/frm/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fro/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/frr/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/frs/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fur/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fur/IT/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fur/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fur/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fur/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fur/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fy/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fy/NL/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fy/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fy/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ga/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ga/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ga/IE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ga/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ga/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ga/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ga/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ga/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gaa/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gag/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gay/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gba/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gbm/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gcr/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gd/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gd/GB/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gd/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gd/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gd/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gd/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gem/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gez/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gil/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gl/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gl/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gl/ES/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gl/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gl/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gl/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gl/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gld/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gmh/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gn/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/goh/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gon/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gor/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/got/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/grb/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/grc/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/grt/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/CH/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/FR/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/LI/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gu/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gu/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gu/IN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gu/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gu/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gu/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gu/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gu/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/guz/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/guz/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/guz/KE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/guz/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/guz/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/guz/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gv/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gv/IM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gv/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gv/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gv/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gv/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gwi/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/Latn-GH/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/Latn-NE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/Latn-NG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/Latn/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hai/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/haw/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/haw/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/haw/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/haw/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/haw/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/haw/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/haw/US/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/he/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/he/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/he/IL/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/he/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/he/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/he/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/he/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/he/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hi/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hi/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hi/IN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hi/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hi/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hi/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hi/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hi/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hil/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/him/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hit/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hmn/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hne/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hnn/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ho/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hoc/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hoj/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hop/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/BA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/HR/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hsb/DE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hsb/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hsb/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ht/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hu/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hu/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hu/HU/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hu/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hu/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hu/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hu/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hup/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hy/AM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hy/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hy/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hy/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hy/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hy/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hz/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ia/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ia/FR/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ia/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ia/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ia/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/iba/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ibb/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/id/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/id/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/id/ID/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/id/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/id/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/id/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/id/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/idd.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/iddarea.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ie/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ig/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ig/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ig/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ig/NG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ig/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ig/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ii/CN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ii/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ii/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ii/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ii/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ii/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ijo/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ik/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ilibmanifest.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ilo/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/in/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/inc/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ine/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/inh/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/io/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ira/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/iro/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/is/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/is/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/is/IS/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/is/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/is/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/is/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/is/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/CH/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/CH/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/IT/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/phoneres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/SM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/iu/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/iu/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/iw/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ja/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ja/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ja/JP/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ja/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ja/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ja/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ja/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jbo/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jgo/CM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jgo/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jgo/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jgo/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jgo/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jgo/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jgo/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ji/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jmc/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jmc/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jmc/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jmc/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jmc/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jmc/TZ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jmc/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jpr/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jrb/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jv/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jw/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ka/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ka/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ka/GE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ka/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ka/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ka/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kaa/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kab/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kab/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kab/DZ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kab/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kab/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kab/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kab/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kac/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kaj/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kaj/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kam/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kam/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kam/KE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kam/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kam/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kam/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kar/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kaw/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kbd/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kbl/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kca/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kcg/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kcg/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kde/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kde/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kde/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kde/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kde/TZ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kde/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kdt/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kea/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kea/CV/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kea/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kea/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kea/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kea/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ken/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kfo/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kfr/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kg/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kha/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/khb/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/khi/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kho/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/khq/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/khq/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/khq/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/khq/ML/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/khq/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/khq/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kht/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ki/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ki/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ki/KE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ki/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ki/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ki/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kj/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kjh/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/Cyrl-KZ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/Cyrl/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kkj/CM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kkj/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kkj/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kkj/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kkj/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kkj/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kl/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kl/GL/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kl/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kl/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kl/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kl/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kln/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kln/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kln/KE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kln/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kln/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kln/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/km/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/km/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/km/KH/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/km/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/km/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/km/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kmb/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kmr/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kn/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kn/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kn/IN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kn/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kn/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kn/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kn/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/KP/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/KR/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/phoneres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/koi/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kok/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kok/IN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kok/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kok/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kok/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kos/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kpe/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kpv/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kpy/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kr/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/krc/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kri/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/krl/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kro/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kru/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ks/Arab-IN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ks/Arab/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ks/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ks/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ks/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ks/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ks/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ks/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksb/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksb/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksb/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksb/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksb/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksb/TZ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksb/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksf/CM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksf/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksf/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksf/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksf/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksf/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksh/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksh/DE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksh/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksh/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksh/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksh/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ku/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ku/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ku/Latn/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ku/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ku/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ku/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ku/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kum/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kut/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kv/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kw/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kw/GB/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kw/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kw/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kw/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kw/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ky/Cyrl-KG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ky/Cyrl/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ky/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ky/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ky/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ky/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ky/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kyu/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/la/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lab/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lad/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lag/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lag/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lag/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lag/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lag/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lag/TZ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lag/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lah/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lam/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lb/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lb/LU/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lb/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lb/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lbe/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lcp/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lep/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lez/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lg/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lg/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lg/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lg/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lg/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lg/UG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lg/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/li/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lif/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/likelylocales.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lis/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lki/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lkt/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lkt/US/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lmn/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/AO/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/CD/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/CF/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/CG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lo/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lo/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lo/LA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lo/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lo/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lo/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lol/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/loz/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/collation.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/LT/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lu/CD/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lu/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lu/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lu/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lu/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lu/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lua/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lui/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lun/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luo/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luo/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luo/KE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luo/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luo/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luo/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lus/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lut/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luy/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luy/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luy/KE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luy/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luy/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luy/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/collation.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/LV/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lwl/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mad/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/maf/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mag/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mai/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mak/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/man/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/map/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mas/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mas/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mas/KE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mas/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mas/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mas/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mas/TZ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mas/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mde/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mdf/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mdh/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mdr/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/men/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mer/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mer/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mer/KE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mer/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mer/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mer/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mfe/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mfe/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mfe/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mfe/MU/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mfe/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mfe/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mg/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mg/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mg/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mg/MG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mg/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mg/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mg/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mga/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgh/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgh/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgh/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgh/MZ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgh/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgh/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgo/CM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgo/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgo/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgo/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgo/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgo/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgo/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mh/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mi/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mic/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/min/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mis/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mk/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mk/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mk/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mk/MK/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mk/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mk/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mk/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mk/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mkh/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ml/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ml/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ml/IN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ml/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ml/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ml/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ml/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ml/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/Cyrl-MN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/Cyrl/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mnc.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mnc/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mni/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mno/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mns/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mnw/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mo/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mo/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/moh/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mos/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mr/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mr/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mr/IN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mr/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mr/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mr/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mr/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mr/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/BN/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/BN/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/Latn-BN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/Latn-MY/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/Latn-SG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/Latn/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mt/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mt/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mt/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mt/MT/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mt/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mt/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mt/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mua/CM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mua/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mua/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mua/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mua/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mua/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mul/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mun/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mus/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mwl/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mwr/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/my/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/my/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/my/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/my/MM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/my/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/my/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mye/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/myn/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/myv/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/myz/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/na/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nah/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nah/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nai/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nap/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/naq/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/naq/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/naq/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/naq/NA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/naq/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/naq/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/naq/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nativecountries.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/NO/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/SJ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nbf/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nd/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nd/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nd/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nd/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nd/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nd/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nd/ZW/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nds/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/IN/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/IN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/NP/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/new/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/all.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Arab.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Bali.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Beng.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Cakm.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Cyrl.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Deva.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Grek.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Guru.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Hani.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Hebr.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Hira.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Kana.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Knda.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Kthi.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Latn.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Mlym.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Mymr.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Orya.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Sinh.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Taml.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Telu.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Tibt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Zinh.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Zyyy.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/all.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Arab.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Armn.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Cyrl.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Geok.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Grek.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Hang.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Hani.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Hebr.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Hira.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Kana.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Laoo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Latn.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Tfng.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Thai.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Tibt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Zyyy.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ng/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nia/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nic/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/niu/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/AW/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/BE/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/BE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/BQ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/CW/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/NL/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/phoneres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/SR/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/SX/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nmg/CM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nmg/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nmg/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nmg/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nmg/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nmg/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nn/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nn/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nn/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nn/NO/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nn/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nn/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nn/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nnh/CM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nnh/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nnh/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nnh/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nnh/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nnh/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/no/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/no/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/no/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/no/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nod/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nog/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/non/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/norm.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nqo/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nr/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nr/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nr/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nr/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nr/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nr/ZA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nso/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nso/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nso/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nso/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nso/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nso/ZA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nub/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nus/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nus/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nus/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nus/SD/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nus/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nus/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nv/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nwc/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ny/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ny/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nym/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nyn/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nyn/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nyn/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nyn/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nyn/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nyn/UG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nyn/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nyo/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nzi/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/oc/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/oj/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/om/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/om/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/om/ET/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/om/KE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/om/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/om/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/om/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/om/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/or/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/or/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/or/IN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/or/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/or/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/or/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/or/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/os/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/os/GE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/os/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/os/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/os/RU/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/os/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/os/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/osa/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/osc/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ota/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/otk/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/oto/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/Arab-PK/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/Arab/PK/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/Arab/PK/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/Arab/PK/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/Arab/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/Guru-IN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/Guru/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/paa/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pag/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pal/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pam/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pap/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pap/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pau/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/peo/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/phi/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/phn/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/phonefmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/phoneloc.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pi/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pl/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pl/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pl/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pl/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pl/PL/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pl/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pl/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pl/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pon/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pra/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/prd/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/prg/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pro/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ps/AF/pseudomap.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ps/AF/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ps/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ps/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ps/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ps/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ps/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ps/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pseudomap.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/AO/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/AO/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/AO/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/BR/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/BR/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/CV/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/CV/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/CV/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/GW/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/GW/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/GW/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/MO/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/MO/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/MO/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/MZ/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/MZ/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/MZ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/PT/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/PT/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/PT/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/ST/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/ST/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/ST/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/TL/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/TL/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/TL/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/qu/BO/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/qu/EC/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/qu/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/qu/PE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/qu/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/raj/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rangeToScript.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rap/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rar/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rcf/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rej/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ril/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rm/CH/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rm/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rm/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rm/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rm/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rm/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rm/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rn/BI/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rn/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rn/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rn/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rn/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rn/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/MD/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/RO/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/roa/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rof/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rof/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rof/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rof/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rof/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rof/TZ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rof/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rom/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/root/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/BY/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/KG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/KZ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/MD/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/RU/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/UA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rup/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rw/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rw/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rw/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rw/RW/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rw/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rw/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rwk/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rwk/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rwk/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rwk/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rwk/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rwk/TZ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rwk/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sa/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sad/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sah/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sah/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sah/RU/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sah/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sah/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sai/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sal/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sam/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/saq/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/saq/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/saq/KE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/saq/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/saq/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/saq/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/saq/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sas/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sat/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/saz/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sba/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sbp/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sbp/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sbp/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sbp/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sbp/TZ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sbp/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sc/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/scn/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sco/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/scripts.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/scriptToRange.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sd/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sdh/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/se/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/se/FI/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/se/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/se/NO/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/se/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/se/SE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/se/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/se/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/see/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/seh/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/seh/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/seh/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/seh/MZ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/seh/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/seh/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/seh/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sel/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sem/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ses/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ses/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ses/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ses/ML/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ses/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ses/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sg/CF/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sg/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sg/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sg/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sg/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sg/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sga/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sgn/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sh/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sh/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/Latn-MA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/Latn/MA/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/Latn/MA/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/Latn/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/Tfng-MA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/Tfng/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shn/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shu/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/si/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/si/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/si/LK/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/si/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/si/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/si/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sid/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sio/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sit/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sk/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sk/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sk/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sk/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sk/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sk/SK/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sk/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sk/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sl/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sl/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sl/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sl/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sl/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sl/SI/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sl/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sl/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sla/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sm/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sma/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sma/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/smi/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/smi/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/smj/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/smj/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/smn/FI/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/smn/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/smn/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/smn/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sms/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sms/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sn/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sn/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sn/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sn/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sn/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sn/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sn/ZW/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/snk/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/DJ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/ET/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/KE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/SO/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sog/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/son/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/AL/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/MK/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/XK/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Cyrl-BA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Cyrl-ME/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Cyrl-RS/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Cyrl-XK/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Cyrl/BA/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Cyrl/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn-BA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn-ME/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn-RS/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn-XK/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/BA/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/BA/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/BA/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/BA/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/ME/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/ME/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/ME/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/ME/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/RS/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/RS/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/RS/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/RS/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/srn/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/srr/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ss/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ss/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ss/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ss/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ss/SZ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ss/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ss/ZA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ssa/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ssy/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ssy/ER/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ssy/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ssy/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ssy/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ssy/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/st/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/st/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/st/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/st/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/su/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/suk/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sus/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sux/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/AX/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/FI/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/FI/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/SE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/KE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/TZ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/UG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/swb/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/swc/CD/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/swc/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/swc/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/swc/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/swc/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/swc/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/syc/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/syl/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/syr/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/syr/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/IN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/LK/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/MY/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/SG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tab/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tai/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tbw/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tcy/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tdd/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/te/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/te/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/te/IN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/te/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/te/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/te/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/te/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/te/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tem/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/teo/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/teo/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/teo/KE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/teo/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/teo/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/teo/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/teo/UG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/teo/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ter/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tet/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tg/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tg/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tg/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tg/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/th/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/th/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/th/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/th/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/th/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/th/TH/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/th/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/ER/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/ER/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/ER/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/ET/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tig/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tig/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tig/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tig/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tiv/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tk/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tk/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tkl/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tl/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tl/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tlh/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tli/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tmh/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tn/BW/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tn/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tn/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tn/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tn/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tn/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tn/ZA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/to/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/to/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/to/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/to/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/to/TO/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/to/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tog/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tpi/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tr/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tr/CY/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tr/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tr/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tr/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tr/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tr/TR/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tr/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tru/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/trv/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ts/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ts/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ts/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ts/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ts/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ts/ZA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tsg/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tsi/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tt/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tts/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ttt/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tum/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tup/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tut/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tvl/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tw/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/twq/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/twq/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/twq/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/twq/NE/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/twq/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/twq/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ty/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tyv/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tzm/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tzm/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tzm/Latn-MA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tzm/Latn/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tzm/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tzm/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tzm/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tzm/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ude/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/udm/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ug/Arab-CN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ug/Arab/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ug/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ug/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uga/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uk/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uk/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uk/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uk/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uk/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uk/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uk/UA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uk/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uli/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/umb/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AC/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AD/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AD/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AE/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AE/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AE/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AF/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AF/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AF/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AG/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AI/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AL/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AL/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AL/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AM/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AM/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AM/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AN/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AN/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AO/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AO/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AO/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AQ/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AR/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AR/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AR/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AS/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AT/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AT/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AT/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AU/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AU/area.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AU/extarea.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AU/extstates.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AU/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AU/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AU/phonefmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AU/states.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AW/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AW/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AX/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AZ/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AZ/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AZ/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BA/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BA/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BA/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BB/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BD/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BD/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BE/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BE/area.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BE/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BE/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BE/phonefmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BE/states.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BF/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BF/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BF/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BG/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BG/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BG/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BH/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BH/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BH/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BI/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BI/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BJ/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BJ/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BJ/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BL/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BM/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BN/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BN/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BO/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BO/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BO/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BQ/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BR/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BR/area.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BR/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BR/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BR/phonefmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BR/states.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BS/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BT/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BT/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BV/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BW/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BW/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BY/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BY/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BY/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BZ/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BZ/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CA/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CA/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CC/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CD/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CD/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CD/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CF/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CF/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CF/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CG/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CG/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CG/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CH/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CH/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CH/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CI/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CI/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CI/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CK/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CK/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CL/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CL/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CL/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CM/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CM/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CM/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CN/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CN/area.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CN/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CN/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CN/phonefmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CN/states.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CO/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CO/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CO/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CP/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CR/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CR/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CR/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CU/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CU/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CV/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CV/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CV/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CW/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CX/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CY/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CY/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CY/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CZ/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CZ/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CZ/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DE/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DE/area.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DE/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DE/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DE/phonefmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DE/states.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DG/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DJ/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DJ/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DJ/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DK/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DK/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DK/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DM/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DO/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DO/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DZ/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DZ/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DZ/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EA/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EC/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EC/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EC/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EE/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EE/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EE/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EG/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EG/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EG/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EH/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ER/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ER/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ES/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ES/area.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ES/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ES/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ES/phonefmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ES/states.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ET/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ET/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ET/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EU/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FI/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FI/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FI/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FJ/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FJ/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FK/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FK/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FM/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FM/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FO/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FO/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FR/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FR/area.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FR/extarea.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FR/extstates.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FR/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FR/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FR/phonefmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FR/states.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GA/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GA/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GA/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GB/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GB/area.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GB/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GB/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GB/phonefmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GB/states.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GD/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GE/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GE/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GE/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GF/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GF/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GG/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GH/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GH/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GH/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GI/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GI/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GL/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GL/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GM/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GM/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GM/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GN/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GN/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GN/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GP/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GP/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GQ/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GQ/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GQ/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GR/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GR/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GR/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GS/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GT/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GT/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GT/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GU/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GW/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GW/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GY/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GY/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HK/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HK/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HK/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HK/phonefmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HK/states.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HM/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HN/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HN/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HN/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HR/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HR/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HR/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HT/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HT/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HU/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HU/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HU/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IC/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ID/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ID/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ID/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IE/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IE/area.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IE/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IE/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IE/phonefmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IE/states.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IL/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IL/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IL/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IM/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IN/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IN/area.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IN/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IN/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IN/phonefmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IN/states.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IO/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IQ/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IQ/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IQ/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IR/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IR/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IR/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IS/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IS/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IS/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IT/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IT/area.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IT/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IT/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IT/phonefmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IT/states.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JE/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JM/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JO/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JO/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JO/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JP/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JP/area.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JP/extarea.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JP/extstates.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JP/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JP/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JP/phonefmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JP/states.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KE/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KE/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KE/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KG/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KG/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KG/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KH/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KH/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KI/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KI/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KM/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KM/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KN/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KP/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KP/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KR/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KR/area.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KR/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KR/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KR/phonefmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KR/states.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KW/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KW/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KW/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KY/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KZ/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KZ/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KZ/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LA/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LA/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LB/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LB/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LB/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LC/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LI/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LI/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LK/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LK/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LK/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LR/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LR/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LR/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LS/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LS/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LT/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LT/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LT/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LU/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LU/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LU/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LU/phonefmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LU/states.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LV/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LV/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LV/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LY/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LY/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LY/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MA/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MA/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MA/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MC/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MC/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MD/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MD/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ME/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ME/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ME/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MF/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MG/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MG/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MH/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MH/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MK/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MK/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MK/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ML/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ML/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ML/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MM/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MM/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MM/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MN/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MN/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MN/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MO/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MO/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MO/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MP/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MQ/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MQ/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MR/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MR/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MR/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MS/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MT/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MT/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MU/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MU/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MV/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MV/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MW/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MW/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MW/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MX/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MX/area.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MX/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MX/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MX/phonefmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MX/states.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MY/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MY/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MY/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MZ/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MZ/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NA/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NA/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NC/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NC/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NE/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NE/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NF/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NF/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NG/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NG/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NG/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NI/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NI/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NI/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NL/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NL/area.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NL/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NL/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NL/phonefmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NL/states.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NO/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NO/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NO/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NP/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NP/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NR/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NR/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NU/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NU/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NZ/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NZ/area.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NZ/extarea.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NZ/extstates.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NZ/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NZ/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NZ/phonefmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NZ/states.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/OM/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/OM/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/OM/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PA/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PA/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PA/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PE/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PE/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PE/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PF/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PF/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PG/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PG/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PH/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PH/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PH/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PK/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PK/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PK/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PL/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PL/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PL/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PM/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PM/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PN/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PR/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PR/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PS/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PT/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PT/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PT/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PW/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PW/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PY/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PY/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PY/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/QA/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/QA/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/QA/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/QO/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RE/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RE/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RO/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RO/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RO/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RS/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RS/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RS/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RU/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RU/area.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RU/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RU/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RU/phonefmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RU/states.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RW/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RW/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RW/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SA/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SA/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SA/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SB/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SB/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SC/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SC/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SD/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SD/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SD/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SE/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SE/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SE/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SG/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SG/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SG/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SG/phonefmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SG/states.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SH/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SH/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SI/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SI/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SI/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SJ/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SK/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SK/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SK/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SL/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SL/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SL/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SM/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SM/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SN/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SN/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SN/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SO/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SO/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SR/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SR/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SS/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ST/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ST/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SV/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SV/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SV/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SX/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SY/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SY/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SY/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SZ/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SZ/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TA/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TC/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TD/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TD/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TF/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TG/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TG/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TG/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TH/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TH/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TH/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TJ/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TJ/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TK/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TK/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TL/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TL/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TM/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TM/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TN/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TN/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TN/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TO/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TO/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TR/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TR/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TR/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TT/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TV/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TV/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TW/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TW/area.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TW/extarea.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TW/extstates.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TW/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TW/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TW/phonefmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TW/states.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TZ/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TZ/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TZ/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UA/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UA/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UA/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UG/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UG/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UG/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UM/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/US/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/US/area.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/US/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/US/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/US/phonefmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/US/states.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UY/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UY/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UY/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UZ/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UZ/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UZ/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VA/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VA/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VC/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VE/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VE/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VE/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VG/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VI/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VN/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VN/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VN/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VU/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VU/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/WF/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/WF/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/WS/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/WS/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/XX/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/XX/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/XX/states.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/YE/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/YE/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/YE/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/YT/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/YT/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZA/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZA/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZA/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZM/address.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZM/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZM/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZW/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZW/numplan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZZ/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/unr/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/unx/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/IN/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/IN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/PK/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Arab-AF/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Arab/AF/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Arab/AF/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Arab/AF/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Arab/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Cyrl-UZ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Cyrl/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Cyrl/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Latn-UZ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Latn/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Latn/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Latn/UZ/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Latn/UZ/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/Latn-LR/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/Latn/LR/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/Latn/LR/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/Latn/LR/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/Latn/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/Vaii-LR/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/Vaii/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ve/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ve/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ve/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ve/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ve/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ve/ZA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vi/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vi/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vi/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vi/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vi/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vi/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vi/VN/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vo/001/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vo/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vo/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vo/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vo/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vo/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vot/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vun/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vun/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vun/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vun/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vun/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vun/TZ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vun/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wa/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wa/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wae/CH/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wae/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wae/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wae/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wae/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wae/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wak/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wal/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wal/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wal/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/war/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/was/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wen/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wo/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xal/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xcr/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xh/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xh/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xh/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xh/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xlc/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xld/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xog/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xog/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xog/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xog/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xog/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xog/UG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xog/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xpr/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xsa/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xsr/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xum/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yao/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yap/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yav/CM/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yav/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yav/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yav/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yav/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yav/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ybb/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yi/001/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yi/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yi/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yo/BJ/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yo/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yo/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yo/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yo/NG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yo/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yo/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ypk/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yrk/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yue/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/za/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zap/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zbl/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zen/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zgh/MA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zgh/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hans/HK/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hans/HK/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hans/MO/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hans/MO/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hans/SG/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/HK/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/HK/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/HK/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/MO/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/MO/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/MO/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/phoneres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/TW/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/TW/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/US/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/HK/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/HK/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/HK/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/MO/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/MO/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/MY/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/MY/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/phoneres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/TW/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/TW/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/TW/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/US/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/US/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/znd/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Abidjan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Accra.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Addis_Ababa.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Algiers.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Asmara.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Bamako.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Bangui.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Banjul.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Bissau.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Blantyre.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Brazzaville.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Bujumbura.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Cairo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Casablanca.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Ceuta.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Conakry.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Dakar.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Dar_es_Salaam.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Djibouti.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Douala.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/El_Aaiun.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Freetown.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Gaborone.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Harare.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Johannesburg.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Juba.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Kampala.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Khartoum.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Kigali.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Kinshasa.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Lagos.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Libreville.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Lome.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Luanda.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Lubumbashi.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Lusaka.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Malabo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Maputo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Maseru.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Mbabane.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Mogadishu.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Monrovia.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Nairobi.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Ndjamena.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Niamey.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Nouakchott.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Ouagadougou.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Porto-Novo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Sao_Tome.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Timbuktu.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Tripoli.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Tunis.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Windhoek.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Adak.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Anchorage.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Anguilla.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Antigua.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Araguaina.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Argentina.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Aruba.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Asuncion.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Atikokan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Bahia_Banderas.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Bahia.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Barbados.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Belem.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Belize.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Blanc-Sablon.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Boa_Vista.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Bogota.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Boise.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Buenos_Aires.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Cambridge_Bay.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Campo_Grande.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Cancun.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Caracas.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Catamarca.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Cayenne.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Cayman.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Chicago.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Chihuahua.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Coral_Harbour.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Cordoba.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Costa_Rica.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Creston.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Cuiaba.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Curacao.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Danmarkshavn.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Dawson_Creek.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Dawson.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Denver.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Detroit.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Dominica.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Edmonton.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Eirunepe.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/El_Salvador.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Ensenada.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Fort_Wayne.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Fortaleza.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Glace_Bay.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Godthab.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Goose_Bay.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Grand_Turk.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Grenada.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Guadeloupe.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Guatemala.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Guayaquil.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Guyana.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Halifax.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Havana.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Hermosillo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Indiana.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Indianapolis.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Inuvik.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Iqaluit.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Jamaica.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Jujuy.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Juneau.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Kentucky.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Knox_IN.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Kralendijk.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/La_Paz.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Lima.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Los_Angeles.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Louisville.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Lower_Princes.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Maceio.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Managua.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Manaus.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Marigot.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Martinique.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Matamoros.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Mazatlan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Mendoza.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Menominee.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Merida.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Metlakatla.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Mexico_City.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Miquelon.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Moncton.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Monterrey.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Montevideo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Montreal.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Montserrat.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Nassau.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/New_York.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Nipigon.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Nome.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Noronha.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/North_Dakota.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Ojinaga.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Panama.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Pangnirtung.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Paramaribo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Phoenix.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Port_of_Spain.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Port-au-Prince.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Porto_Acre.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Porto_Velho.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Puerto_Rico.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Rainy_River.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Rankin_Inlet.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Recife.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Regina.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Resolute.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Rio_Branco.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Rosario.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Santa_Isabel.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Santarem.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Santiago.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Santo_Domingo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Sao_Paulo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Scoresbysund.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Sitka.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/St_Barthelemy.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/St_Johns.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/St_Kitts.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/St_Lucia.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/St_Thomas.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/St_Vincent.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Swift_Current.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Tegucigalpa.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Thule.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Thunder_Bay.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Tijuana.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Toronto.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Tortola.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Vancouver.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Virgin.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Whitehorse.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Winnipeg.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Yakutat.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Yellowknife.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Casey.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Davis.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/DumontDUrville.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Macquarie.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Mawson.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/McMurdo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Palmer.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Rothera.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/South_Pole.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Syowa.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Troll.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Vostok.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Arctic/Longyearbyen.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Aden.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Almaty.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Amman.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Anadyr.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Aqtau.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Aqtobe.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Ashgabat.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Baghdad.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Bahrain.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Baku.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Bangkok.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Beirut.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Bishkek.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Brunei.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Chita.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Choibalsan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Chongqing.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Chungking.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Colombo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Damascus.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Dhaka.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Dili.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Dubai.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Dushanbe.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Gaza.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Hanoi.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Harbin.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Hebron.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Ho_Chi_Minh.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Hong_Kong.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Hovd.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Irkutsk.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Istanbul.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Jakarta.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Jayapura.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Jerusalem.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Kabul.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Kamchatka.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Karachi.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Kashgar.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Kathmandu.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Khandyga.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Kolkata.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Krasnoyarsk.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Kuala_Lumpur.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Kuching.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Kuwait.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Macau.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Magadan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Makassar.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Manila.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Muscat.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Nicosia.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Novokuznetsk.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Novosibirsk.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Omsk.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Oral.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Phnom_Penh.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Pontianak.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Pyongyang.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Qatar.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Qyzylorda.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Rangoon.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Riyadh.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Saigon.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Sakhalin.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Samarkand.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Seoul.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Shanghai.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Singapore.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Srednekolymsk.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Taipei.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Tashkent.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Tbilisi.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Tehran.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Tel_Aviv.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Thimphu.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Tokyo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Ulaanbaatar.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Ulan_Bator.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Urumqi.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Ust-Nera.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Vientiane.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Vladivostok.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Yakutsk.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Yekaterinburg.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Yerevan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Azores.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Bermuda.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Canary.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Cape_Verde.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Faroe.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Jan_Mayen.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Madeira.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Reykjavik.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/South_Georgia.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/St_Helena.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Stanley.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Adelaide.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Brisbane.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Broken_Hill.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Currie.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Darwin.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Eucla.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Hobart.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Lindeman.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Lord_Howe.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Melbourne.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Perth.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Sydney.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Brazil/Acre.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Brazil/East.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Canada/Central.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Canada/Mountain.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Canada/Newfoundland.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Canada/Pacific.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Canada/Yukon.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/CET.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Chile/Continental.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/CST6CDT.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/EET.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/EST.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/EST5EDT.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-1.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-10.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-11.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-12.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-13.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-14.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-2.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-3.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-4.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-5.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-6.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-7.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-8.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-9.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+1.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+10.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+11.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+12.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+2.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+3.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+4.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+5.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+6.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+7.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+8.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+9.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/UCT.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/UTC.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Amsterdam.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Andorra.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Athens.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Belfast.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Belgrade.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Berlin.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Bratislava.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Brussels.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Bucharest.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Budapest.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Chisinau.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Copenhagen.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Dublin.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Gibraltar.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Guernsey.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Helsinki.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Isle_of_Man.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Istanbul.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Jersey.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Kaliningrad.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Kiev.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Lisbon.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Ljubljana.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/London.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Luxembourg.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Madrid.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Malta.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Mariehamn.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Minsk.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Monaco.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Moscow.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Nicosia.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Oslo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Paris.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Podgorica.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Prague.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Riga.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Rome.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Samara.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/San_Marino.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Sarajevo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Simferopol.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Skopje.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Sofia.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Stockholm.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Tallinn.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Tirane.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Tiraspol.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Uzhgorod.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Vaduz.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Vatican.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Vienna.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Vilnius.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Volgograd.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Warsaw.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Zagreb.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Zaporozhye.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Zurich.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Factory.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/HST.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Iceland.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Antananarivo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Chagos.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Christmas.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Cocos.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Comoro.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Kerguelen.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Mahe.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Maldives.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Mauritius.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Mayotte.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Reunion.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/MET.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Mexico/BajaSur.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Mexico/General.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/MST.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/MST7MDT.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Apia.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Auckland.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Bougainville.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Chatham.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Chuuk.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Easter.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Efate.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Enderbury.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Fakaofo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Fiji.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Funafuti.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Galapagos.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Gambier.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Guadalcanal.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Guam.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Honolulu.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Johnston.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Kiritimati.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Kosrae.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Kwajalein.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Majuro.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Marquesas.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Midway.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Nauru.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Niue.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Norfolk.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Noumea.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Pago_Pago.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Palau.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Pitcairn.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Pohnpei.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Port_Moresby.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Rarotonga.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Saipan.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Tahiti.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Tarawa.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Tongatapu.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Wake.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Wallis.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/PST8PDT.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/US/Alaska.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/US/East-Indiana.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/US/Eastern.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/US/Hawaii.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/US/Indiana-Starke.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/US/Pacific.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/WET.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/zonetab.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zu/ctrynames.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zu/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zu/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zu/plurals.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zu/sysres.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zu/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zu/ZA/unitfmt.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zun/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zxx/Cyrl/pseudomap.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zxx/dateformats.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zxx/Hans/pseudomap.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zxx/Hebr/pseudomap.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zxx/localeinfo.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zxx/name.json": 1434758951000,
      "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zza/localeinfo.json": 1434758951000
    },
    "json": {
      "name": "enyo-ilib",
      "version": "6.0-003",
      "main": "./index.js",
      "description": "iLib plugin for enyo. iLib is a cross-engine library of internationalization (i18n) classes written in pure JS",
      "keywords": [
        "internationalization",
        "i18n",
        "localization",
        "l10n",
        "globalization",
        "g11n",
        "date",
        "time",
        "format",
        "locale",
        "translation"
      ],
      "license": "apache2",
      "files": [
        "packedbuffer.js",
        "zoneinfo.js",
        "nodeglue.js",
        "ilib/js",
        "ilib/locale",
        "README.md"
      ],
      "devAssets": [
        "ilib/locale/**/*.json"
      ]
    },
    "main": "/Users/jason/Git/bootplate/lib/enyo-ilib/index.js",
    "contents": "var\n\tglue = require('./lib/glue'),\n\tilib = require('./ilib/js/ilib-dyn-full').ilib;\n\nilib.enyo = glue(ilib);\nilib.enyo.version = '2.6.0-pre.5-dev';\n\nmodule.exports = ilib;",
    "relPath": "enyo-ilib",
    "requires": [
      "./lib/glue",
      "./ilib/js/ilib-dyn-full"
    ],
    "requests": [],
    "resolved": true,
    "assetEntries": [
      {
        "glob": "ilib/locale/**/*.json",
        "files": [
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aa/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aa/DJ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aa/ER/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aa/ET/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aa/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aa/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ab/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/abq/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ace/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ach/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ada/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ady/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ae/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/NA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/NA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/ZA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/afa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/afh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/agq/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/agq/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/agq/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/agq/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/agq/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/agq/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aii/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ain/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ak/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ak/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ak/GH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ak/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ak/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ak/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ak/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/akk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ale/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/alg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/alt/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/am/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/am/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/am/ET/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/am/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/am/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/am/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/am/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/amo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/an/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ang/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/anp/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/apa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/001/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/AE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/BH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/DJ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/DZ/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/DZ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/DZ/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/DZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/EG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/EH/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/EH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/ER/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/IL/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/IQ/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/IQ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/JO/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/JO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/KM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/KW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/LB/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/LB/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/LY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/MA/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/MA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/MA/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/MA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/MR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/OM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/PS/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/QA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/SA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/SD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/SO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/SS/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/SY/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/SY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/TD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/TN/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/TN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/TN/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/TN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/YE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/arc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/arn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/arp/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/art/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/arw/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/as/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/as/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/as/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/as/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/as/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/as/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/asa/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/asa/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/asa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/asa/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/asa/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/asa/TZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/asa/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ast/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ast/ES/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ast/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ast/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ast/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ast/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/astro.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ath/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aus/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/av/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/awa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ay/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/Cyrl-AZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/Cyrl/AZ/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/Cyrl/AZ/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/Cyrl/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/Latn-AZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/Latn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ba/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bad/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bai/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bal/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ban/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bas/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bas/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bas/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bas/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bas/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bas/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bat/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bax/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bbc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bbj/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/be/BY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/be/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/be/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/be/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/be/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/be/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/be/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bej/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bem/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bem/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bem/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bem/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bem/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bem/ZM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ber/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bez/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bez/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bez/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bez/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bez/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bez/TZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bez/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bfd/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bfq/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bft/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bfy/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bg/BG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bg/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bg/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bg/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bg/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bg/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bg/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bh/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bhb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bho/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bik/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bin/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bjj/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bkm/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bku/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bla/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/blt/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bm/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bm/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bm/Latn-ML/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bm/Latn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bm/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bm/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bm/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/BD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bnt/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bo/CN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bo/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bo/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bo/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bo/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bo/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bqv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/br/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/br/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/br/FR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/br/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/br/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/br/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/br/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bra/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/brx/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/brx/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/brx/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/brx/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/brx/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/brx/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/brx/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/Cyrl-BA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/Cyrl/BA/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/Cyrl/BA/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/Cyrl/BA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/Cyrl/BA/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/Cyrl/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/Latn-BA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/Latn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bss/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/btk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/btv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bua/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/buc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bug/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bum/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bxr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bya/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/byn/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/byn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/byn/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/byv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/AD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/ES-VALENCIA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/ES/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/FR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/IT/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cad/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cai/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/car/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cau/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cay/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cch/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ccp/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ce/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ceb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cel/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cgg/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cgg/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cgg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cgg/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cgg/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cgg/UG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cgg/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ch/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chm/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cho/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chp/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chr/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chr/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chr/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chr/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chr/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chr/US/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chy/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cja/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cjm/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cjs/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ckb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ckb/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ckt/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cmc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/co/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/collation.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cop/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cop/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cop/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cop/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/countries.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cpe/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cpf/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cpp/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/crh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/crk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/crp/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cs/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cs/CZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cs/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cs/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cs/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cs/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cs/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cs/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/csb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ctype_c.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ctype_l.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ctype_m.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ctype_n.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ctype_p.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ctype_s.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ctype_z.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ctype.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/currency.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cus/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cwd/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cy/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cy/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cy/GB/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cy/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cy/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cy/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cy/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/DK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/GL/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dak/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dar/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dav/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dav/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dav/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dav/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dav/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dav/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/day/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/AT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/AT/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/AT/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/BE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/CH/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/CH/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/CH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/collation.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/DE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/LI/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/LI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/LU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/phoneres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/del/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/den/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dgr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/din/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dje/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dje/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dje/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dje/NE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dje/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dje/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dng/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/doi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dra/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dsb/DE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dsb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dsb/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dua/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dua/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dua/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dua/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dua/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dum/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dv/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dyo/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dyo/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dyo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dyo/SN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dyo/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dyo/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dyu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dz/BT/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dz/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dz/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dz/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dz/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dz/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dzg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ebu/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ebu/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ebu/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ebu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ebu/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ebu/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ee/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ee/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ee/GH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ee/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ee/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ee/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ee/TG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ee/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/efi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/egy/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eka/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eky/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/CY/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/CY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/GR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/elx/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/emk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/001/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/150/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/AG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/AI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/AS/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/AU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/BB/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/BE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/BE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/BM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/BS/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/BW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/BZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/CA/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/CA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/CC/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/CK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/CX/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/DG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/DM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/Dsrt/US/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/Dsrt/US/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/ER/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/FJ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/FK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/FM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GB/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GB/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GI/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/HK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/IE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/IE/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/IE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/IM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/IM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/IN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/IO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/JE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/JE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/JM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/KI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/KN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/KY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/LC/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/LR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/LS/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MP/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MS/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MT/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/NA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/NF/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/NG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/NR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/NU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/NZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/PG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/PH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/PK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/PN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/PR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/PW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/RW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SB/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SC/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SL/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SS/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SX/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/TC/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/TK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/TO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/TT/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/TV/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/TZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/UG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/UM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/US-POSIX/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/US/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/US/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/US/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/VC/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/VG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/VI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/VU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/WS/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/ZA/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/ZA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/ZA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/ZM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/ZW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/enm/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eo/001/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eo/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eo/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eo/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eo/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eo/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/419/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/AR/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/AR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/AR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/BO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/BO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CL/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CL/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CL/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/collation.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CU/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/DO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/DO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/EA/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/EA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/EC/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/EC/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/ES/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/ES/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/ES/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/GQ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/GQ/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/GQ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/GT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/GT/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/HN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/HN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/IC/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/IC/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/MX/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/MX/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/NI/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/NI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PH/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PH/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/phoneres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PY/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/SV/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/SV/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/US/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/US/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/US/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/UY/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/UY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/VE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/VE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/collation.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/EE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ett/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eu/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eu/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eu/ES/pseudomap.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eu/ES/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eu/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eu/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eu/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/evn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ewo/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ewo/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ewo/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ewo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ewo/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ewo/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/AF/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/AF/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/AF/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/IR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fan/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fat/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/GN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/MR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/SN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fi/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fi/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fi/FI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fi/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fi/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fi/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fi/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fil/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fil/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fil/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fil/PH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fil/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fil/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fil/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fiu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fj/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fo/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fo/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fo/FO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fo/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fo/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fo/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fon/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/BE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/BE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/BF/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/BI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/BJ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/BL/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CA/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CA/phoneres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CF/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CH/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/DJ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/DZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/FR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/GA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/GF/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/GN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/GP/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/GQ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/HT/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/KM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/LU/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/LU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/MA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/MC/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/MF/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/MG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/ML/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/MQ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/MR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/MU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/NC/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/NE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/PF/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/phoneres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/PM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/RE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/RW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/SC/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/SN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/SY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/TD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/TG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/TN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/VU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/WF/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/YT/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/frm/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fro/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/frr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/frs/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fur/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fur/IT/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fur/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fur/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fur/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fur/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fy/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fy/NL/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fy/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fy/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ga/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ga/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ga/IE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ga/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ga/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ga/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ga/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ga/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gaa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gag/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gay/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gba/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gbm/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gcr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gd/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gd/GB/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gd/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gd/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gd/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gd/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gem/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gez/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gil/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gl/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gl/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gl/ES/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gl/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gl/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gl/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gld/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gmh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/goh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gon/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gor/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/got/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/grb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/grc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/grt/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/CH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/FR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/LI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gu/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gu/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gu/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gu/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gu/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gu/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gu/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/guz/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/guz/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/guz/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/guz/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/guz/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/guz/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gv/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gv/IM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gv/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gv/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gv/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gwi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/Latn-GH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/Latn-NE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/Latn-NG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/Latn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hai/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/haw/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/haw/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/haw/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/haw/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/haw/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/haw/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/haw/US/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/he/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/he/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/he/IL/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/he/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/he/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/he/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/he/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/he/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hi/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hi/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hi/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hi/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hi/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hi/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hi/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hil/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/him/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hit/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hmn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hne/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hnn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ho/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hoc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hoj/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hop/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/BA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/HR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hsb/DE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hsb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hsb/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ht/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hu/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hu/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hu/HU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hu/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hu/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hu/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hup/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hy/AM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hy/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hy/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hy/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hy/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hy/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hz/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ia/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ia/FR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ia/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ia/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ia/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/iba/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ibb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/id/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/id/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/id/ID/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/id/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/id/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/id/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/id/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/idd.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/iddarea.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ie/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ig/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ig/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ig/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ig/NG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ig/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ig/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ii/CN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ii/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ii/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ii/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ii/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ii/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ijo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ik/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ilibmanifest.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ilo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/in/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/inc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ine/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/inh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/io/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ira/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/iro/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/is/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/is/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/is/IS/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/is/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/is/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/is/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/is/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/CH/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/CH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/IT/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/phoneres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/SM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/iu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/iu/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/iw/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ja/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ja/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ja/JP/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ja/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ja/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ja/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ja/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jbo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jgo/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jgo/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jgo/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jgo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jgo/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jgo/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jgo/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ji/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jmc/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jmc/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jmc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jmc/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jmc/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jmc/TZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jmc/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jpr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jrb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jw/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ka/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ka/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ka/GE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ka/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ka/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ka/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kaa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kab/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kab/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kab/DZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kab/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kab/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kab/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kab/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kac/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kaj/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kaj/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kam/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kam/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kam/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kam/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kam/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kam/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kar/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kaw/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kbd/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kbl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kca/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kcg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kcg/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kde/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kde/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kde/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kde/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kde/TZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kde/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kdt/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kea/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kea/CV/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kea/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kea/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kea/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kea/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ken/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kfo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kfr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kha/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/khb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/khi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kho/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/khq/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/khq/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/khq/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/khq/ML/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/khq/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/khq/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kht/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ki/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ki/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ki/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ki/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ki/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ki/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kj/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kjh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/Cyrl-KZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/Cyrl/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kkj/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kkj/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kkj/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kkj/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kkj/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kkj/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kl/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kl/GL/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kl/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kl/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kl/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kln/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kln/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kln/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kln/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kln/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kln/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/km/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/km/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/km/KH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/km/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/km/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/km/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kmb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kmr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kn/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kn/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kn/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kn/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kn/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/KP/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/KR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/phoneres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/koi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kok/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kok/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kok/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kok/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kok/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kos/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kpe/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kpv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kpy/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/krc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kri/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/krl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kro/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kru/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ks/Arab-IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ks/Arab/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ks/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ks/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ks/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ks/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ks/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ks/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksb/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksb/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksb/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksb/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksb/TZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksb/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksf/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksf/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksf/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksf/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksf/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksf/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksh/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksh/DE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksh/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksh/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksh/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ku/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ku/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ku/Latn/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ku/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ku/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ku/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ku/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kum/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kut/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kw/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kw/GB/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kw/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kw/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kw/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kw/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ky/Cyrl-KG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ky/Cyrl/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ky/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ky/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ky/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ky/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ky/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kyu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/la/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lab/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lad/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lag/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lag/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lag/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lag/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lag/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lag/TZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lag/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lah/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lam/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lb/LU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lb/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lb/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lbe/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lcp/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lep/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lez/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lg/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lg/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lg/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lg/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lg/UG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lg/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/li/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lif/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/likelylocales.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lis/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lki/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lkt/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lkt/US/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lmn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/AO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/CD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/CF/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/CG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lo/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lo/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lo/LA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lo/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lo/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lol/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/loz/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/collation.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/LT/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lu/CD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lu/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lu/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lu/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lu/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lua/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lui/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lun/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luo/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luo/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luo/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luo/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luo/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lus/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lut/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luy/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luy/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luy/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luy/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luy/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luy/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/collation.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/LV/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lwl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mad/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/maf/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mag/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mai/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mak/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/man/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/map/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mas/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mas/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mas/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mas/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mas/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mas/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mas/TZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mas/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mde/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mdf/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mdh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mdr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/men/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mer/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mer/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mer/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mer/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mer/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mer/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mfe/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mfe/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mfe/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mfe/MU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mfe/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mfe/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mg/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mg/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mg/MG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mg/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mg/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mg/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mga/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgh/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgh/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgh/MZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgh/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgh/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgo/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgo/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgo/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgo/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgo/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgo/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mic/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/min/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mis/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mk/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mk/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mk/MK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mk/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mk/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mk/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mk/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mkh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ml/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ml/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ml/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ml/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ml/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ml/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ml/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ml/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/Cyrl-MN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/Cyrl/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mnc.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mnc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mni/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mno/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mns/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mnw/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mo/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/moh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mos/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mr/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mr/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mr/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mr/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mr/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mr/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mr/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/BN/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/BN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/Latn-BN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/Latn-MY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/Latn-SG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/Latn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mt/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mt/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mt/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mt/MT/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mt/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mt/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mt/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mua/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mua/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mua/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mua/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mua/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mua/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mul/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mun/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mus/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mwl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mwr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/my/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/my/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/my/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/my/MM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/my/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/my/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mye/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/myn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/myv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/myz/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/na/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nah/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nah/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nai/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nap/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/naq/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/naq/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/naq/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/naq/NA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/naq/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/naq/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/naq/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nativecountries.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/NO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/SJ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nbf/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nd/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nd/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nd/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nd/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nd/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nd/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nd/ZW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nds/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/IN/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/NP/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/new/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/all.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Arab.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Bali.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Beng.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Cakm.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Cyrl.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Deva.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Grek.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Guru.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Hani.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Hebr.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Hira.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Kana.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Knda.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Kthi.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Latn.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Mlym.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Mymr.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Orya.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Sinh.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Taml.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Telu.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Tibt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Zinh.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Zyyy.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/all.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Arab.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Armn.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Cyrl.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Geok.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Grek.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Hang.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Hani.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Hebr.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Hira.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Kana.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Laoo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Latn.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Tfng.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Thai.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Tibt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Zyyy.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ng/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nia/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nic/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/niu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/AW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/BE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/BE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/BQ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/CW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/NL/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/phoneres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/SR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/SX/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nmg/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nmg/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nmg/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nmg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nmg/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nmg/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nn/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nn/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nn/NO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nn/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nn/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nnh/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nnh/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nnh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nnh/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nnh/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nnh/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/no/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/no/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/no/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/no/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nod/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nog/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/non/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/norm.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nqo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nr/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nr/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nr/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nr/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nr/ZA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nso/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nso/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nso/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nso/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nso/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nso/ZA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nub/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nus/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nus/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nus/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nus/SD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nus/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nus/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nwc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ny/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ny/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nym/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nyn/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nyn/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nyn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nyn/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nyn/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nyn/UG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nyn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nyo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nzi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/oc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/oj/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/om/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/om/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/om/ET/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/om/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/om/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/om/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/om/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/om/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/or/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/or/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/or/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/or/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/or/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/or/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/or/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/os/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/os/GE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/os/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/os/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/os/RU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/os/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/os/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/osa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/osc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ota/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/otk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/oto/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/Arab-PK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/Arab/PK/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/Arab/PK/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/Arab/PK/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/Arab/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/Guru-IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/Guru/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/paa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pag/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pal/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pam/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pap/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pap/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pau/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/peo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/phi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/phn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/phoneloc.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pl/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pl/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pl/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pl/PL/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pl/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pl/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pl/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pon/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pra/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/prd/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/prg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pro/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ps/AF/pseudomap.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ps/AF/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ps/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ps/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ps/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ps/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ps/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ps/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pseudomap.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/AO/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/AO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/AO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/BR/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/BR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/CV/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/CV/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/CV/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/GW/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/GW/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/GW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/MO/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/MO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/MO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/MZ/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/MZ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/MZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/PT/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/PT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/PT/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/ST/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/ST/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/ST/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/TL/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/TL/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/TL/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/qu/BO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/qu/EC/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/qu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/qu/PE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/qu/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/raj/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rangeToScript.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rap/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rar/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rcf/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rej/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ril/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rm/CH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rm/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rm/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rm/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rm/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rm/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rm/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rn/BI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rn/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rn/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rn/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/MD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/RO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/roa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rof/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rof/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rof/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rof/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rof/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rof/TZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rof/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rom/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/root/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/BY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/KG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/KZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/MD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/RU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/UA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rup/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rw/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rw/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rw/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rw/RW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rw/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rw/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rwk/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rwk/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rwk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rwk/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rwk/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rwk/TZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rwk/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sad/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sah/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sah/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sah/RU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sah/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sah/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sai/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sal/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sam/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/saq/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/saq/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/saq/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/saq/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/saq/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/saq/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/saq/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sas/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sat/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/saz/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sba/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sbp/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sbp/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sbp/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sbp/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sbp/TZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sbp/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/scn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sco/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/scripts.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/scriptToRange.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sd/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sdh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/se/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/se/FI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/se/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/se/NO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/se/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/se/SE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/se/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/se/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/see/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/seh/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/seh/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/seh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/seh/MZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/seh/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/seh/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/seh/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sel/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sem/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ses/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ses/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ses/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ses/ML/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ses/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ses/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sg/CF/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sg/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sg/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sg/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sg/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sga/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sgn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sh/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/Latn-MA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/Latn/MA/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/Latn/MA/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/Latn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/Tfng-MA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/Tfng/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/si/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/si/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/si/LK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/si/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/si/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/si/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sid/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sio/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sit/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sk/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sk/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sk/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sk/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sk/SK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sk/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sk/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sl/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sl/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sl/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sl/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sl/SI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sl/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sl/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sla/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sm/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sma/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sma/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/smi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/smi/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/smj/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/smj/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/smn/FI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/smn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/smn/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/smn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sms/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sms/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sn/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sn/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sn/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sn/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sn/ZW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/snk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/DJ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/ET/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/SO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sog/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/son/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/AL/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/MK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/XK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Cyrl-BA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Cyrl-ME/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Cyrl-RS/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Cyrl-XK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Cyrl/BA/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Cyrl/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn-BA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn-ME/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn-RS/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn-XK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/BA/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/BA/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/BA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/BA/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/ME/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/ME/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/ME/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/ME/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/RS/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/RS/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/RS/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/RS/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/srn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/srr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ss/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ss/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ss/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ss/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ss/SZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ss/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ss/ZA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ssa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ssy/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ssy/ER/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ssy/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ssy/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ssy/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ssy/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/st/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/st/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/st/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/st/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/su/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/suk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sus/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sux/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/AX/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/FI/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/FI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/SE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/TZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/UG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/swb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/swc/CD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/swc/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/swc/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/swc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/swc/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/swc/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/syc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/syl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/syr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/syr/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/LK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/MY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/SG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tab/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tai/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tbw/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tcy/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tdd/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/te/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/te/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/te/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/te/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/te/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/te/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/te/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/te/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tem/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/teo/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/teo/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/teo/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/teo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/teo/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/teo/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/teo/UG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/teo/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ter/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tet/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tg/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tg/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tg/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/th/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/th/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/th/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/th/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/th/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/th/TH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/th/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/ER/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/ER/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/ER/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/ET/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tig/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tig/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tig/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tig/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tiv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tk/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tkl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tl/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tlh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tli/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tmh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tn/BW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tn/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tn/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tn/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tn/ZA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/to/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/to/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/to/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/to/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/to/TO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/to/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tog/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tpi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tr/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tr/CY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tr/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tr/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tr/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tr/TR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tr/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tru/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/trv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ts/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ts/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ts/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ts/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ts/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ts/ZA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tsg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tsi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tt/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tts/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ttt/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tum/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tup/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tut/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tvl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tw/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/twq/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/twq/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/twq/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/twq/NE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/twq/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/twq/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ty/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tyv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tzm/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tzm/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tzm/Latn-MA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tzm/Latn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tzm/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tzm/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tzm/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tzm/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ude/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/udm/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ug/Arab-CN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ug/Arab/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ug/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ug/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uga/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uk/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uk/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uk/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uk/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uk/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uk/UA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uk/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uli/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/umb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AC/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AD/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AD/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AE/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AE/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AF/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AF/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AF/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AI/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AL/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AL/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AL/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AM/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AM/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AN/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AO/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AO/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AQ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AR/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AR/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AS/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AT/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AT/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AU/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AU/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AU/extarea.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AU/extstates.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AU/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AU/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AU/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AU/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AW/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AW/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AX/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AZ/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AZ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AZ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BA/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BA/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BB/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BD/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BD/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BE/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BE/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BE/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BE/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BE/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BF/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BF/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BF/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BG/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BG/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BH/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BH/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BH/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BI/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BI/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BJ/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BJ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BJ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BL/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BN/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BO/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BO/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BQ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BR/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BR/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BR/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BR/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BR/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BS/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BT/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BV/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BW/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BW/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BY/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BY/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BY/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BZ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BZ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CA/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CC/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CD/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CD/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CD/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CF/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CF/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CF/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CG/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CG/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CH/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CH/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CH/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CI/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CI/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CI/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CK/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CK/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CL/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CL/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CL/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CM/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CM/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CN/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CN/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CN/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CN/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CN/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CO/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CO/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CP/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CR/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CR/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CU/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CU/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CV/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CV/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CV/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CW/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CX/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CY/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CY/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CY/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CZ/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CZ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CZ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DE/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DE/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DE/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DE/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DE/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DJ/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DJ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DJ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DK/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DK/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DK/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DO/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DZ/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DZ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DZ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EC/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EC/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EC/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EE/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EE/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EG/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EG/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EH/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ER/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ER/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ES/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ES/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ES/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ES/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ES/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ES/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ET/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ET/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ET/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EU/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FI/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FI/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FI/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FJ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FJ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FK/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FK/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FM/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FO/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FR/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FR/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FR/extarea.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FR/extstates.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FR/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FR/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FR/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GA/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GA/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GB/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GB/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GB/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GB/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GB/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GB/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GD/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GE/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GE/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GF/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GF/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GH/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GH/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GH/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GI/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GI/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GL/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GL/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GM/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GM/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GN/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GN/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GP/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GP/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GQ/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GQ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GQ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GR/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GR/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GS/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GT/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GT/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GU/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GW/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GW/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GY/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GY/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HK/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HK/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HK/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HK/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HK/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HN/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HN/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HR/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HR/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HT/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HU/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HU/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HU/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IC/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ID/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ID/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ID/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IE/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IE/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IE/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IE/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IE/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IL/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IL/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IL/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IN/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IN/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IN/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IN/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IN/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IQ/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IQ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IQ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IR/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IR/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IS/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IS/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IS/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IT/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IT/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IT/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IT/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IT/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JO/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JO/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JP/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JP/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JP/extarea.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JP/extstates.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JP/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JP/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JP/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JP/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KE/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KE/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KG/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KG/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KH/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KH/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KI/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KI/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KM/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KP/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KP/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KR/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KR/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KR/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KR/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KR/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KW/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KW/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KW/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KY/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KZ/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KZ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KZ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LA/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LB/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LB/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LB/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LC/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LI/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LI/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LK/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LK/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LK/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LR/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LR/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LS/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LS/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LT/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LT/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LU/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LU/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LU/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LU/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LU/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LV/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LV/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LV/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LY/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LY/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LY/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MA/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MA/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MC/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MC/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MD/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MD/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ME/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ME/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ME/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MF/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MG/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MH/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MH/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MK/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MK/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MK/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ML/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ML/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ML/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MM/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MM/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MN/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MN/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MO/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MO/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MP/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MQ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MQ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MR/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MR/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MS/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MT/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MU/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MU/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MV/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MV/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MW/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MW/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MW/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MX/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MX/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MX/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MX/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MX/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MX/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MY/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MY/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MY/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MZ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MZ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NA/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NC/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NC/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NE/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NF/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NF/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NG/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NG/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NI/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NI/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NI/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NL/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NL/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NL/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NL/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NL/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NL/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NO/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NO/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NP/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NP/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NR/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NU/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NU/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NZ/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NZ/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NZ/extarea.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NZ/extstates.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NZ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NZ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NZ/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NZ/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/OM/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/OM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/OM/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PA/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PA/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PE/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PE/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PF/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PF/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PG/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PH/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PH/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PH/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PK/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PK/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PK/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PL/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PL/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PL/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PM/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PR/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PS/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PT/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PT/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PW/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PW/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PY/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PY/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PY/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/QA/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/QA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/QA/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/QO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RE/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RO/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RO/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RS/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RS/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RS/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RU/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RU/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RU/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RU/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RU/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RU/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RW/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RW/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RW/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SA/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SA/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SB/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SB/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SC/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SC/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SD/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SD/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SD/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SE/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SE/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SG/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SG/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SG/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SG/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SH/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SH/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SI/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SI/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SI/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SJ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SK/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SK/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SK/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SL/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SL/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SL/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SM/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SN/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SN/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SO/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SR/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SS/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ST/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ST/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SV/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SV/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SV/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SX/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SY/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SY/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SY/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SZ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SZ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TC/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TD/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TD/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TF/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TG/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TG/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TH/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TH/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TH/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TJ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TJ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TK/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TK/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TL/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TL/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TM/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TN/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TN/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TO/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TR/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TR/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TV/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TV/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TW/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TW/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TW/extarea.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TW/extstates.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TW/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TW/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TW/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TW/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TZ/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TZ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TZ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UA/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UA/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UG/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UG/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/US/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/US/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/US/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/US/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/US/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/US/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UY/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UY/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UY/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UZ/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UZ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UZ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VA/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VC/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VE/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VE/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VI/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VN/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VN/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VU/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VU/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/WF/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/WF/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/WS/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/WS/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/XX/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/XX/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/XX/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/YE/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/YE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/YE/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/YT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/YT/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZA/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZA/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZM/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZM/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZW/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZW/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZZ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/unr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/unx/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/IN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/PK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Arab-AF/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Arab/AF/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Arab/AF/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Arab/AF/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Arab/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Cyrl-UZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Cyrl/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Cyrl/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Latn-UZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Latn/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Latn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Latn/UZ/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Latn/UZ/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/Latn-LR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/Latn/LR/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/Latn/LR/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/Latn/LR/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/Latn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/Vaii-LR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/Vaii/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ve/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ve/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ve/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ve/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ve/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ve/ZA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vi/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vi/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vi/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vi/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vi/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vi/VN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vo/001/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vo/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vo/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vo/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vo/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vot/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vun/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vun/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vun/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vun/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vun/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vun/TZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vun/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wa/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wae/CH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wae/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wae/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wae/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wae/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wae/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wak/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wal/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wal/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wal/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/war/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/was/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wen/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xal/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xcr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xh/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xh/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xh/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xlc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xld/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xog/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xog/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xog/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xog/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xog/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xog/UG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xog/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xpr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xsa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xsr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xum/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yao/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yap/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yav/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yav/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yav/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yav/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yav/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yav/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ybb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yi/001/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yi/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yo/BJ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yo/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yo/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yo/NG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yo/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yo/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ypk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yrk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yue/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/za/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zap/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zbl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zen/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zgh/MA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zgh/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hans/HK/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hans/HK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hans/MO/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hans/MO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hans/SG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/HK/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/HK/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/HK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/MO/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/MO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/MO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/phoneres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/TW/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/TW/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/US/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/HK/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/HK/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/HK/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/MO/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/MO/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/MY/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/MY/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/phoneres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/TW/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/TW/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/TW/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/US/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/US/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/znd/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Abidjan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Accra.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Addis_Ababa.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Algiers.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Asmara.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Bamako.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Bangui.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Banjul.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Bissau.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Blantyre.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Brazzaville.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Bujumbura.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Cairo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Casablanca.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Ceuta.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Conakry.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Dakar.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Dar_es_Salaam.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Djibouti.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Douala.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/El_Aaiun.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Freetown.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Gaborone.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Harare.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Johannesburg.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Juba.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Kampala.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Khartoum.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Kigali.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Kinshasa.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Lagos.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Libreville.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Lome.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Luanda.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Lubumbashi.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Lusaka.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Malabo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Maputo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Maseru.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Mbabane.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Mogadishu.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Monrovia.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Nairobi.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Ndjamena.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Niamey.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Nouakchott.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Ouagadougou.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Porto-Novo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Sao_Tome.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Timbuktu.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Tripoli.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Tunis.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Windhoek.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Adak.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Anchorage.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Anguilla.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Antigua.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Araguaina.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Argentina.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Aruba.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Asuncion.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Atikokan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Bahia_Banderas.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Bahia.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Barbados.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Belem.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Belize.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Blanc-Sablon.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Boa_Vista.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Bogota.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Boise.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Buenos_Aires.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Cambridge_Bay.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Campo_Grande.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Cancun.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Caracas.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Catamarca.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Cayenne.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Cayman.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Chicago.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Chihuahua.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Coral_Harbour.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Cordoba.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Costa_Rica.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Creston.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Cuiaba.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Curacao.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Danmarkshavn.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Dawson_Creek.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Dawson.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Denver.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Detroit.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Dominica.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Edmonton.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Eirunepe.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/El_Salvador.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Ensenada.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Fort_Wayne.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Fortaleza.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Glace_Bay.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Godthab.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Goose_Bay.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Grand_Turk.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Grenada.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Guadeloupe.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Guatemala.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Guayaquil.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Guyana.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Halifax.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Havana.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Hermosillo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Indiana.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Indianapolis.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Inuvik.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Iqaluit.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Jamaica.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Jujuy.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Juneau.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Kentucky.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Knox_IN.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Kralendijk.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/La_Paz.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Lima.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Los_Angeles.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Louisville.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Lower_Princes.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Maceio.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Managua.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Manaus.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Marigot.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Martinique.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Matamoros.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Mazatlan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Mendoza.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Menominee.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Merida.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Metlakatla.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Mexico_City.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Miquelon.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Moncton.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Monterrey.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Montevideo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Montreal.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Montserrat.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Nassau.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/New_York.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Nipigon.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Nome.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Noronha.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/North_Dakota.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Ojinaga.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Panama.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Pangnirtung.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Paramaribo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Phoenix.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Port_of_Spain.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Port-au-Prince.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Porto_Acre.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Porto_Velho.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Puerto_Rico.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Rainy_River.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Rankin_Inlet.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Recife.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Regina.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Resolute.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Rio_Branco.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Rosario.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Santa_Isabel.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Santarem.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Santiago.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Santo_Domingo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Sao_Paulo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Scoresbysund.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Sitka.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/St_Barthelemy.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/St_Johns.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/St_Kitts.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/St_Lucia.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/St_Thomas.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/St_Vincent.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Swift_Current.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Tegucigalpa.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Thule.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Thunder_Bay.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Tijuana.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Toronto.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Tortola.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Vancouver.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Virgin.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Whitehorse.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Winnipeg.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Yakutat.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Yellowknife.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Casey.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Davis.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/DumontDUrville.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Macquarie.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Mawson.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/McMurdo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Palmer.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Rothera.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/South_Pole.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Syowa.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Troll.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Vostok.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Arctic/Longyearbyen.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Aden.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Almaty.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Amman.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Anadyr.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Aqtau.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Aqtobe.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Ashgabat.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Baghdad.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Bahrain.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Baku.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Bangkok.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Beirut.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Bishkek.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Brunei.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Chita.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Choibalsan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Chongqing.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Chungking.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Colombo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Damascus.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Dhaka.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Dili.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Dubai.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Dushanbe.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Gaza.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Hanoi.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Harbin.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Hebron.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Ho_Chi_Minh.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Hong_Kong.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Hovd.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Irkutsk.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Istanbul.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Jakarta.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Jayapura.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Jerusalem.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Kabul.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Kamchatka.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Karachi.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Kashgar.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Kathmandu.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Khandyga.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Kolkata.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Krasnoyarsk.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Kuala_Lumpur.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Kuching.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Kuwait.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Macau.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Magadan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Makassar.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Manila.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Muscat.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Nicosia.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Novokuznetsk.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Novosibirsk.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Omsk.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Oral.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Phnom_Penh.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Pontianak.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Pyongyang.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Qatar.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Qyzylorda.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Rangoon.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Riyadh.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Saigon.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Sakhalin.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Samarkand.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Seoul.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Shanghai.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Singapore.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Srednekolymsk.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Taipei.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Tashkent.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Tbilisi.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Tehran.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Tel_Aviv.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Thimphu.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Tokyo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Ulaanbaatar.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Ulan_Bator.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Urumqi.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Ust-Nera.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Vientiane.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Vladivostok.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Yakutsk.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Yekaterinburg.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Yerevan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Azores.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Bermuda.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Canary.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Cape_Verde.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Faroe.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Jan_Mayen.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Madeira.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Reykjavik.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/South_Georgia.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/St_Helena.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Stanley.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Adelaide.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Brisbane.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Broken_Hill.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Currie.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Darwin.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Eucla.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Hobart.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Lindeman.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Lord_Howe.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Melbourne.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Perth.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Sydney.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Brazil/Acre.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Brazil/East.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Canada/Central.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Canada/Mountain.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Canada/Newfoundland.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Canada/Pacific.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Canada/Yukon.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/CET.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Chile/Continental.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/CST6CDT.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/EET.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/EST.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/EST5EDT.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-1.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-10.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-11.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-12.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-13.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-14.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-2.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-3.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-4.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-5.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-6.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-7.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-8.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-9.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+1.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+10.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+11.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+12.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+2.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+3.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+4.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+5.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+6.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+7.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+8.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+9.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/UCT.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/UTC.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Amsterdam.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Andorra.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Athens.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Belfast.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Belgrade.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Berlin.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Bratislava.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Brussels.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Bucharest.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Budapest.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Chisinau.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Copenhagen.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Dublin.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Gibraltar.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Guernsey.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Helsinki.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Isle_of_Man.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Istanbul.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Jersey.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Kaliningrad.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Kiev.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Lisbon.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Ljubljana.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/London.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Luxembourg.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Madrid.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Malta.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Mariehamn.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Minsk.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Monaco.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Moscow.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Nicosia.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Oslo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Paris.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Podgorica.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Prague.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Riga.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Rome.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Samara.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/San_Marino.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Sarajevo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Simferopol.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Skopje.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Sofia.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Stockholm.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Tallinn.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Tirane.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Tiraspol.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Uzhgorod.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Vaduz.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Vatican.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Vienna.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Vilnius.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Volgograd.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Warsaw.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Zagreb.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Zaporozhye.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Zurich.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Factory.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/HST.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Iceland.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Antananarivo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Chagos.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Christmas.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Cocos.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Comoro.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Kerguelen.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Mahe.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Maldives.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Mauritius.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Mayotte.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Reunion.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/MET.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Mexico/BajaSur.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Mexico/General.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/MST.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/MST7MDT.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Apia.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Auckland.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Bougainville.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Chatham.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Chuuk.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Easter.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Efate.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Enderbury.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Fakaofo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Fiji.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Funafuti.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Galapagos.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Gambier.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Guadalcanal.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Guam.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Honolulu.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Johnston.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Kiritimati.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Kosrae.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Kwajalein.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Majuro.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Marquesas.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Midway.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Nauru.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Niue.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Norfolk.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Noumea.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Pago_Pago.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Palau.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Pitcairn.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Pohnpei.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Port_Moresby.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Rarotonga.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Saipan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Tahiti.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Tarawa.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Tongatapu.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Wake.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Wallis.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/PST8PDT.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/US/Alaska.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/US/East-Indiana.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/US/Eastern.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/US/Hawaii.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/US/Indiana-Starke.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/US/Pacific.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/WET.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/zonetab.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zu/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zu/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zu/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zu/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zu/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zu/ZA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zun/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zxx/Cyrl/pseudomap.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zxx/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zxx/Hans/pseudomap.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zxx/Hebr/pseudomap.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zxx/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zxx/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zza/localeinfo.json"
        ],
        "updated": [
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aa/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aa/DJ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aa/ER/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aa/ET/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aa/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aa/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ab/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/abq/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ace/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ach/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ada/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ady/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ae/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/NA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/NA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/af/ZA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/afa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/afh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/agq/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/agq/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/agq/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/agq/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/agq/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/agq/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aii/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ain/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ak/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ak/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ak/GH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ak/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ak/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ak/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ak/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/akk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ale/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/alg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/alt/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/am/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/am/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/am/ET/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/am/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/am/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/am/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/am/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/amo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/an/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ang/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/anp/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/apa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/001/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/AE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/BH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/DJ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/DZ/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/DZ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/DZ/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/DZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/EG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/EH/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/EH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/ER/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/IL/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/IQ/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/IQ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/JO/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/JO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/KM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/KW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/LB/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/LB/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/LY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/MA/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/MA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/MA/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/MA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/MR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/OM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/PS/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/QA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/SA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/SD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/SO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/SS/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/SY/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/SY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/TD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/TN/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/TN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/TN/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/TN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ar/YE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/arc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/arn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/arp/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/art/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/arw/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/as/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/as/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/as/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/as/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/as/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/as/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/asa/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/asa/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/asa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/asa/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/asa/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/asa/TZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/asa/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ast/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ast/ES/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ast/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ast/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ast/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ast/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/astro.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ath/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/aus/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/av/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/awa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ay/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/Cyrl-AZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/Cyrl/AZ/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/Cyrl/AZ/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/Cyrl/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/Latn-AZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/Latn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/az/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ba/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bad/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bai/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bal/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ban/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bas/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bas/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bas/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bas/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bas/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bas/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bat/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bax/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bbc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bbj/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/be/BY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/be/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/be/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/be/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/be/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/be/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/be/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bej/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bem/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bem/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bem/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bem/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bem/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bem/ZM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ber/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bez/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bez/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bez/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bez/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bez/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bez/TZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bez/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bfd/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bfq/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bft/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bfy/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bg/BG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bg/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bg/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bg/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bg/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bg/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bg/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bh/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bhb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bho/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bik/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bin/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bjj/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bkm/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bku/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bla/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/blt/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bm/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bm/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bm/Latn-ML/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bm/Latn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bm/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bm/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bm/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/BD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bnt/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bo/CN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bo/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bo/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bo/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bo/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bo/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bqv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/br/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/br/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/br/FR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/br/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/br/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/br/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/br/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bra/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/brx/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/brx/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/brx/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/brx/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/brx/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/brx/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/brx/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/Cyrl-BA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/Cyrl/BA/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/Cyrl/BA/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/Cyrl/BA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/Cyrl/BA/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/Cyrl/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/Latn-BA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/Latn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bs/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bss/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/btk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/btv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bua/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/buc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bug/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bum/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bxr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/bya/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/byn/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/byn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/byn/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/byv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/AD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/ES-VALENCIA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/ES/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/FR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/IT/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ca/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cad/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cai/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/car/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cau/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cay/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cch/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ccp/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ce/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ceb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cel/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cgg/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cgg/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cgg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cgg/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cgg/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cgg/UG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cgg/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ch/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chm/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cho/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chp/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chr/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chr/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chr/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chr/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chr/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chr/US/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/chy/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cja/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cjm/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cjs/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ckb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ckb/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ckt/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cmc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/co/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/collation.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cop/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cop/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cop/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cop/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/countries.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cpe/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cpf/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cpp/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/crh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/crk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/crp/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cs/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cs/CZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cs/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cs/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cs/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cs/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cs/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cs/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/csb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ctype_c.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ctype_l.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ctype_m.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ctype_n.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ctype_p.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ctype_s.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ctype_z.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ctype.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/currency.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cus/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cwd/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cy/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cy/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cy/GB/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cy/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cy/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cy/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/cy/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/DK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/GL/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/da/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dak/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dar/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dav/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dav/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dav/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dav/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dav/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dav/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/day/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/AT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/AT/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/AT/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/BE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/CH/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/CH/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/CH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/collation.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/DE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/LI/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/LI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/LU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/phoneres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/de/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/del/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/den/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dgr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/din/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dje/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dje/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dje/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dje/NE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dje/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dje/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dng/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/doi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dra/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dsb/DE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dsb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dsb/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dua/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dua/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dua/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dua/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dua/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dum/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dv/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dyo/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dyo/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dyo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dyo/SN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dyo/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dyo/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dyu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dz/BT/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dz/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dz/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dz/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dz/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dz/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/dzg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ebu/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ebu/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ebu/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ebu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ebu/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ebu/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ee/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ee/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ee/GH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ee/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ee/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ee/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ee/TG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ee/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/efi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/egy/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eka/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eky/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/CY/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/CY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/GR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/el/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/elx/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/emk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/001/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/150/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/AG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/AI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/AS/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/AU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/BB/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/BE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/BE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/BM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/BS/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/BW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/BZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/CA/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/CA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/CC/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/CK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/CX/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/DG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/DM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/Dsrt/US/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/Dsrt/US/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/ER/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/FJ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/FK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/FM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GB/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GB/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GI/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/GY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/HK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/IE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/IE/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/IE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/IM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/IM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/IN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/IO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/JE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/JE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/JM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/KI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/KN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/KY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/LC/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/LR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/LS/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MP/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MS/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MT/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/MY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/NA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/NF/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/NG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/NR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/NU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/NZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/PG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/PH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/PK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/PN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/PR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/PW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/RW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SB/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SC/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SL/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SS/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SX/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/SZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/TC/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/TK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/TO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/TT/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/TV/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/TZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/UG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/UM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/US-POSIX/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/US/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/US/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/US/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/VC/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/VG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/VI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/VU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/WS/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/ZA/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/ZA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/ZA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/ZM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/en/ZW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/enm/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eo/001/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eo/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eo/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eo/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eo/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eo/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/419/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/AR/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/AR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/AR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/BO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/BO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CL/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CL/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CL/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/collation.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CU/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/CU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/DO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/DO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/EA/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/EA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/EC/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/EC/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/ES/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/ES/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/ES/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/GQ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/GQ/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/GQ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/GT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/GT/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/HN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/HN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/IC/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/IC/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/MX/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/MX/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/NI/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/NI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PH/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PH/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/phoneres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PY/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/PY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/SV/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/SV/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/US/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/US/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/US/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/UY/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/UY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/VE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/es/VE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/collation.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/EE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/et/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ett/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eu/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eu/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eu/ES/pseudomap.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eu/ES/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eu/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eu/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/eu/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/evn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ewo/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ewo/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ewo/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ewo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ewo/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ewo/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/AF/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/AF/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/AF/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/IR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fa/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fan/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fat/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/GN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/MR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/SN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ff/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fi/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fi/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fi/FI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fi/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fi/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fi/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fi/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fil/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fil/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fil/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fil/PH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fil/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fil/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fil/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fiu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fj/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fo/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fo/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fo/FO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fo/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fo/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fo/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fon/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/BE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/BE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/BF/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/BI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/BJ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/BL/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CA/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CA/phoneres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CF/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CH/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/DJ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/DZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/FR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/GA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/GF/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/GN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/GP/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/GQ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/HT/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/KM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/LU/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/LU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/MA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/MC/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/MF/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/MG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/ML/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/MQ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/MR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/MU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/NC/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/NE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/PF/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/phoneres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/PM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/RE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/RW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/SC/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/SN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/SY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/TD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/TG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/TN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/VU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/WF/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fr/YT/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/frm/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fro/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/frr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/frs/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fur/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fur/IT/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fur/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fur/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fur/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fur/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fy/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fy/NL/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fy/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/fy/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ga/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ga/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ga/IE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ga/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ga/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ga/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ga/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ga/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gaa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gag/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gay/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gba/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gbm/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gcr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gd/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gd/GB/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gd/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gd/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gd/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gd/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gem/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gez/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gil/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gl/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gl/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gl/ES/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gl/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gl/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gl/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gld/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gmh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/goh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gon/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gor/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/got/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/grb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/grc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/grt/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/CH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/FR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/LI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gsw/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gu/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gu/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gu/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gu/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gu/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gu/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gu/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/guz/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/guz/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/guz/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/guz/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/guz/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/guz/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gv/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gv/IM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gv/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gv/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gv/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/gwi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/Latn-GH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/Latn-NE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/Latn-NG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/Latn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ha/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hai/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/haw/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/haw/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/haw/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/haw/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/haw/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/haw/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/haw/US/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/he/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/he/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/he/IL/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/he/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/he/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/he/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/he/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/he/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hi/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hi/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hi/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hi/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hi/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hi/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hi/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hil/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/him/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hit/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hmn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hne/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hnn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ho/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hoc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hoj/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hop/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/BA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/HR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hr/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hsb/DE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hsb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hsb/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ht/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hu/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hu/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hu/HU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hu/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hu/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hu/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hup/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hy/AM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hy/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hy/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hy/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hy/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hy/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/hz/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ia/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ia/FR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ia/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ia/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ia/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/iba/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ibb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/id/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/id/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/id/ID/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/id/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/id/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/id/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/id/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/idd.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/iddarea.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ie/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ig/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ig/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ig/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ig/NG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ig/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ig/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ii/CN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ii/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ii/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ii/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ii/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ii/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ijo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ik/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ilibmanifest.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ilo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/in/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/inc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ine/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/inh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/io/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ira/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/iro/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/is/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/is/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/is/IS/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/is/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/is/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/is/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/is/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/CH/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/CH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/IT/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/phoneres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/SM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/it/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/iu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/iu/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/iw/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ja/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ja/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ja/JP/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ja/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ja/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ja/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ja/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jbo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jgo/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jgo/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jgo/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jgo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jgo/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jgo/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jgo/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ji/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jmc/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jmc/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jmc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jmc/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jmc/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jmc/TZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jmc/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jpr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jrb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/jw/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ka/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ka/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ka/GE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ka/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ka/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ka/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kaa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kab/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kab/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kab/DZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kab/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kab/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kab/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kab/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kac/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kaj/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kaj/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kam/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kam/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kam/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kam/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kam/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kam/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kar/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kaw/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kbd/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kbl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kca/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kcg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kcg/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kde/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kde/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kde/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kde/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kde/TZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kde/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kdt/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kea/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kea/CV/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kea/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kea/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kea/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kea/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ken/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kfo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kfr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kha/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/khb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/khi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kho/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/khq/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/khq/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/khq/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/khq/ML/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/khq/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/khq/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kht/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ki/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ki/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ki/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ki/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ki/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ki/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kj/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kjh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/Cyrl-KZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/Cyrl/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kk/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kkj/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kkj/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kkj/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kkj/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kkj/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kkj/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kl/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kl/GL/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kl/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kl/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kl/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kln/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kln/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kln/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kln/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kln/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kln/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/km/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/km/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/km/KH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/km/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/km/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/km/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kmb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kmr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kn/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kn/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kn/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kn/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kn/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/KP/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/KR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/phoneres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ko/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/koi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kok/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kok/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kok/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kok/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kok/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kos/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kpe/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kpv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kpy/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/krc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kri/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/krl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kro/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kru/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ks/Arab-IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ks/Arab/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ks/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ks/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ks/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ks/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ks/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ks/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksb/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksb/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksb/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksb/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksb/TZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksb/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksf/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksf/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksf/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksf/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksf/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksf/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksh/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksh/DE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksh/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksh/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ksh/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ku/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ku/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ku/Latn/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ku/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ku/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ku/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ku/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kum/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kut/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kw/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kw/GB/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kw/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kw/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kw/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kw/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ky/Cyrl-KG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ky/Cyrl/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ky/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ky/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ky/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ky/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ky/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/kyu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/la/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lab/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lad/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lag/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lag/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lag/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lag/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lag/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lag/TZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lag/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lah/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lam/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lb/LU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lb/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lb/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lbe/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lcp/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lep/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lez/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lg/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lg/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lg/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lg/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lg/UG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lg/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/li/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lif/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/likelylocales.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lis/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lki/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lkt/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lkt/US/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lmn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/AO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/CD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/CF/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/CG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ln/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lo/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lo/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lo/LA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lo/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lo/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lol/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/loz/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/collation.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/LT/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lt/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lu/CD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lu/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lu/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lu/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lu/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lua/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lui/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lun/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luo/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luo/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luo/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luo/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luo/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lus/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lut/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luy/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luy/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luy/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luy/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luy/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/luy/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/collation.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/LV/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lv/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/lwl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mad/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/maf/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mag/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mai/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mak/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/man/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/map/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mas/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mas/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mas/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mas/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mas/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mas/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mas/TZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mas/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mde/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mdf/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mdh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mdr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/men/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mer/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mer/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mer/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mer/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mer/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mer/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mfe/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mfe/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mfe/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mfe/MU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mfe/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mfe/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mg/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mg/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mg/MG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mg/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mg/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mg/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mga/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgh/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgh/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgh/MZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgh/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgh/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgo/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgo/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgo/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgo/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgo/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mgo/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mic/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/min/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mis/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mk/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mk/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mk/MK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mk/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mk/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mk/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mk/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mkh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ml/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ml/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ml/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ml/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ml/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ml/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ml/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ml/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/Cyrl-MN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/Cyrl/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mnc.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mnc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mni/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mno/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mns/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mnw/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mo/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/moh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mos/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mr/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mr/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mr/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mr/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mr/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mr/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mr/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/BN/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/BN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/Latn-BN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/Latn-MY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/Latn-SG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/Latn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ms/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mt/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mt/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mt/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mt/MT/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mt/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mt/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mt/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mua/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mua/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mua/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mua/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mua/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mua/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mul/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mun/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mus/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mwl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mwr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/my/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/my/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/my/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/my/MM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/my/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/my/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/mye/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/myn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/myv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/myz/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/na/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nah/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nah/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nai/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nap/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/naq/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/naq/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/naq/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/naq/NA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/naq/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/naq/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/naq/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nativecountries.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/NO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/SJ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nb/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nbf/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nd/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nd/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nd/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nd/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nd/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nd/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nd/ZW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nds/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/IN/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/NP/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ne/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/new/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/all.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Arab.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Bali.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Beng.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Cakm.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Cyrl.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Deva.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Grek.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Guru.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Hani.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Hebr.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Hira.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Kana.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Knda.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Kthi.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Latn.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Mlym.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Mymr.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Orya.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Sinh.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Taml.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Telu.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Tibt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Zinh.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfd/Zyyy.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/all.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Arab.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Armn.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Cyrl.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Geok.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Grek.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Hang.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Hani.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Hebr.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Hira.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Kana.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Laoo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Latn.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Tfng.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Thai.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Tibt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nfkd/Zyyy.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ng/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nia/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nic/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/niu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/AW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/BE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/BE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/BQ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/CW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/NL/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/phoneres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/SR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/SX/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nl/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nmg/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nmg/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nmg/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nmg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nmg/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nmg/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nn/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nn/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nn/NO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nn/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nn/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nnh/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nnh/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nnh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nnh/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nnh/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nnh/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/no/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/no/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/no/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/no/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nod/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nog/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/non/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/norm.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nqo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nr/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nr/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nr/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nr/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nr/ZA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nso/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nso/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nso/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nso/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nso/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nso/ZA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nub/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nus/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nus/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nus/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nus/SD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nus/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nus/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nwc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ny/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ny/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nym/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nyn/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nyn/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nyn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nyn/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nyn/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nyn/UG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nyn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nyo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/nzi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/oc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/oj/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/om/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/om/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/om/ET/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/om/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/om/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/om/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/om/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/om/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/or/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/or/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/or/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/or/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/or/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/or/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/or/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/os/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/os/GE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/os/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/os/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/os/RU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/os/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/os/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/osa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/osc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ota/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/otk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/oto/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/Arab-PK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/Arab/PK/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/Arab/PK/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/Arab/PK/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/Arab/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/Guru-IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/Guru/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pa/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/paa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pag/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pal/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pam/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pap/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pap/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pau/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/peo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/phi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/phn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/phoneloc.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pl/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pl/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pl/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pl/PL/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pl/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pl/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pl/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pon/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pra/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/prd/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/prg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pro/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ps/AF/pseudomap.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ps/AF/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ps/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ps/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ps/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ps/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ps/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ps/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pseudomap.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/AO/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/AO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/AO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/BR/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/BR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/CV/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/CV/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/CV/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/GW/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/GW/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/GW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/MO/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/MO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/MO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/MZ/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/MZ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/MZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/PT/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/PT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/PT/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/ST/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/ST/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/ST/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/TL/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/TL/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/TL/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/pt/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/qu/BO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/qu/EC/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/qu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/qu/PE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/qu/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/raj/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rangeToScript.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rap/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rar/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rcf/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rej/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ril/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rm/CH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rm/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rm/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rm/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rm/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rm/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rm/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rn/BI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rn/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rn/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rn/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/MD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/RO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ro/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/roa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rof/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rof/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rof/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rof/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rof/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rof/TZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rof/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rom/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/root/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/BY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/KG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/KZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/MD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/RU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/UA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ru/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rup/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rw/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rw/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rw/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rw/RW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rw/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rw/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rwk/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rwk/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rwk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rwk/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rwk/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rwk/TZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/rwk/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sad/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sah/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sah/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sah/RU/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sah/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sah/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sai/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sal/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sam/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/saq/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/saq/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/saq/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/saq/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/saq/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/saq/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/saq/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sas/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sat/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/saz/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sba/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sbp/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sbp/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sbp/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sbp/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sbp/TZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sbp/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/scn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sco/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/scripts.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/scriptToRange.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sd/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sdh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/se/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/se/FI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/se/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/se/NO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/se/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/se/SE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/se/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/se/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/see/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/seh/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/seh/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/seh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/seh/MZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/seh/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/seh/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/seh/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sel/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sem/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ses/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ses/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ses/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ses/ML/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ses/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ses/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sg/CF/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sg/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sg/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sg/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sg/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sga/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sgn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sh/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/Latn-MA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/Latn/MA/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/Latn/MA/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/Latn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/Tfng-MA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/Tfng/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shi/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/shu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/si/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/si/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/si/LK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/si/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/si/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/si/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sid/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sio/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sit/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sk/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sk/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sk/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sk/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sk/SK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sk/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sk/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sl/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sl/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sl/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sl/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sl/SI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sl/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sl/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sla/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sm/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sma/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sma/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/smi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/smi/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/smj/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/smj/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/smn/FI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/smn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/smn/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/smn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sms/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sms/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sn/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sn/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sn/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sn/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sn/ZW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/snk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/DJ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/ET/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/SO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/so/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sog/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/son/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/AL/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/MK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sq/XK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Cyrl-BA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Cyrl-ME/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Cyrl-RS/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Cyrl-XK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Cyrl/BA/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Cyrl/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn-BA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn-ME/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn-RS/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn-XK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/BA/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/BA/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/BA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/BA/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/ME/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/ME/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/ME/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/ME/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/RS/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/RS/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/RS/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/RS/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/Latn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sr/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/srn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/srr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ss/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ss/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ss/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ss/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ss/SZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ss/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ss/ZA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ssa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ssy/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ssy/ER/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ssy/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ssy/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ssy/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ssy/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/st/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/st/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/st/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/st/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/su/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/suk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sus/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sux/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/AX/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/FI/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/FI/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/SE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sv/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/TZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/UG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sw/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/swb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/swc/CD/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/swc/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/swc/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/swc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/swc/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/swc/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/syc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/syl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/syr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/syr/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/LK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/MY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/SG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ta/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tab/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tai/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tbw/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tcy/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tdd/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/te/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/te/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/te/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/te/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/te/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/te/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/te/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/te/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tem/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/teo/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/teo/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/teo/KE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/teo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/teo/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/teo/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/teo/UG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/teo/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ter/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tet/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tg/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tg/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tg/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/th/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/th/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/th/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/th/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/th/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/th/TH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/th/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/ER/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/ER/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/ER/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/ET/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ti/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tig/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tig/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tig/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tig/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tiv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tk/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tkl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tl/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tlh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tli/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tmh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tn/BW/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tn/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tn/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tn/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tn/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tn/ZA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/to/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/to/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/to/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/to/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/to/TO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/to/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tog/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tpi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tr/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tr/CY/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tr/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tr/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tr/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tr/TR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tr/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tru/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/trv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ts/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ts/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ts/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ts/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ts/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ts/ZA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tsg/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tsi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tt/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tts/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ttt/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tum/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tup/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tut/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tvl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tw/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/twq/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/twq/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/twq/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/twq/NE/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/twq/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/twq/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ty/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tyv/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tzm/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tzm/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tzm/Latn-MA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tzm/Latn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tzm/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tzm/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tzm/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/tzm/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ude/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/udm/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ug/Arab-CN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ug/Arab/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ug/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ug/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uga/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uk/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uk/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uk/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uk/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uk/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uk/UA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uk/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uli/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/umb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AC/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AD/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AD/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AE/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AE/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AF/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AF/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AF/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AI/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AL/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AL/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AL/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AM/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AM/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AN/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AO/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AO/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AQ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AR/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AR/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AS/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AT/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AT/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AU/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AU/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AU/extarea.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AU/extstates.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AU/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AU/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AU/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AU/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AW/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AW/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AX/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AZ/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AZ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/AZ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BA/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BA/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BB/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BD/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BD/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BE/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BE/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BE/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BE/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BE/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BF/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BF/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BF/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BG/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BG/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BH/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BH/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BH/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BI/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BI/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BJ/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BJ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BJ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BL/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BN/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BO/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BO/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BQ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BR/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BR/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BR/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BR/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BR/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BS/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BT/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BV/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BW/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BW/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BY/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BY/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BY/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BZ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/BZ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CA/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CC/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CD/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CD/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CD/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CF/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CF/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CF/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CG/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CG/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CH/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CH/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CH/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CI/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CI/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CI/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CK/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CK/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CL/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CL/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CL/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CM/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CM/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CN/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CN/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CN/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CN/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CN/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CO/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CO/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CP/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CR/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CR/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CU/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CU/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CV/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CV/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CV/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CW/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CX/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CY/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CY/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CY/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CZ/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CZ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/CZ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DE/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DE/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DE/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DE/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DE/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DJ/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DJ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DJ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DK/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DK/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DK/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DO/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DZ/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DZ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/DZ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EC/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EC/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EC/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EE/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EE/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EG/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EG/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EH/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ER/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ER/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ES/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ES/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ES/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ES/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ES/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ES/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ET/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ET/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ET/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/EU/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FI/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FI/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FI/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FJ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FJ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FK/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FK/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FM/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FO/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FR/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FR/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FR/extarea.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FR/extstates.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FR/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FR/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/FR/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GA/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GA/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GB/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GB/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GB/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GB/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GB/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GB/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GD/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GE/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GE/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GF/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GF/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GH/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GH/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GH/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GI/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GI/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GL/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GL/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GM/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GM/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GN/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GN/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GP/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GP/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GQ/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GQ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GQ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GR/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GR/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GS/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GT/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GT/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GU/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GW/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GW/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GY/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/GY/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HK/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HK/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HK/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HK/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HK/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HN/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HN/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HR/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HR/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HT/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HU/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HU/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/HU/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IC/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ID/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ID/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ID/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IE/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IE/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IE/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IE/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IE/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IL/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IL/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IL/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IN/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IN/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IN/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IN/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IN/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IQ/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IQ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IQ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IR/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IR/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IS/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IS/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IS/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IT/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IT/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IT/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IT/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/IT/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JO/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JO/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JP/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JP/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JP/extarea.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JP/extstates.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JP/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JP/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JP/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/JP/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KE/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KE/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KG/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KG/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KH/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KH/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KI/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KI/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KM/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KP/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KP/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KR/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KR/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KR/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KR/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KR/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KW/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KW/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KW/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KY/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KZ/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KZ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/KZ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LA/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LB/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LB/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LB/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LC/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LI/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LI/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LK/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LK/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LK/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LR/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LR/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LS/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LS/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LT/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LT/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LU/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LU/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LU/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LU/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LU/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LV/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LV/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LV/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LY/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LY/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/LY/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MA/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MA/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MC/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MC/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MD/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MD/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ME/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ME/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ME/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MF/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MG/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MH/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MH/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MK/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MK/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MK/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ML/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ML/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ML/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MM/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MM/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MN/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MN/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MO/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MO/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MP/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MQ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MQ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MR/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MR/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MS/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MT/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MU/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MU/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MV/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MV/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MW/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MW/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MW/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MX/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MX/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MX/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MX/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MX/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MX/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MY/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MY/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MY/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MZ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/MZ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NA/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NC/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NC/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NE/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NF/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NF/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NG/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NG/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NI/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NI/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NI/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NL/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NL/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NL/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NL/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NL/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NL/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NO/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NO/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NP/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NP/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NR/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NU/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NU/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NZ/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NZ/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NZ/extarea.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NZ/extstates.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NZ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NZ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NZ/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/NZ/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/OM/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/OM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/OM/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PA/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PA/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PE/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PE/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PF/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PF/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PG/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PH/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PH/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PH/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PK/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PK/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PK/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PL/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PL/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PL/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PM/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PR/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PS/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PT/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PT/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PW/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PW/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PY/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PY/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/PY/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/QA/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/QA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/QA/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/QO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RE/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RO/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RO/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RS/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RS/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RS/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RU/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RU/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RU/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RU/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RU/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RU/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RW/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RW/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/RW/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SA/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SA/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SB/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SB/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SC/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SC/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SD/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SD/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SD/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SE/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SE/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SG/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SG/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SG/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SG/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SH/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SH/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SI/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SI/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SI/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SJ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SK/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SK/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SK/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SL/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SL/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SL/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SM/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SN/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SN/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SO/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SR/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SS/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ST/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ST/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SV/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SV/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SV/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SX/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SY/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SY/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SY/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SZ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/SZ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TC/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TD/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TD/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TF/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TG/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TG/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TH/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TH/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TH/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TJ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TJ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TK/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TK/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TL/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TL/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TM/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TN/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TN/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TO/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TR/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TR/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TR/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TV/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TV/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TW/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TW/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TW/extarea.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TW/extstates.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TW/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TW/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TW/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TW/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TZ/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TZ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/TZ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UA/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UA/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UG/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UG/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/US/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/US/area.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/US/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/US/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/US/phonefmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/US/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UY/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UY/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UY/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UZ/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UZ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/UZ/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VA/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VC/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VE/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VE/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VG/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VI/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VN/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VN/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VU/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/VU/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/WF/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/WF/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/WS/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/WS/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/XX/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/XX/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/XX/states.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/YE/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/YE/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/YE/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/YT/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/YT/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZA/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZA/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZA/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZM/address.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZM/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZM/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZW/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZW/numplan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/und/ZZ/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/unr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/unx/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/IN/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/IN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/PK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ur/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Arab-AF/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Arab/AF/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Arab/AF/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Arab/AF/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Arab/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Cyrl-UZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Cyrl/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Cyrl/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Latn-UZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Latn/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Latn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Latn/UZ/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/Latn/UZ/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/uz/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/Latn-LR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/Latn/LR/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/Latn/LR/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/Latn/LR/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/Latn/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/Vaii-LR/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vai/Vaii/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ve/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ve/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ve/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ve/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ve/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ve/ZA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vi/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vi/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vi/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vi/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vi/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vi/VN/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vo/001/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vo/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vo/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vo/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vo/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vot/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vun/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vun/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vun/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vun/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vun/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vun/TZ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/vun/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wa/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wae/CH/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wae/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wae/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wae/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wae/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wae/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wak/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wal/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wal/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wal/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/war/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/was/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wen/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/wo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xal/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xcr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xh/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xh/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xh/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xlc/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xld/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xog/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xog/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xog/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xog/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xog/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xog/UG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xog/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xpr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xsa/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xsr/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/xum/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yao/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yap/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yav/CM/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yav/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yav/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yav/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yav/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yav/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ybb/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yi/001/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yi/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yi/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yo/BJ/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yo/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yo/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yo/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yo/NG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yo/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yo/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/ypk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yrk/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/yue/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/za/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zap/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zbl/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zen/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zgh/MA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zgh/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hans/HK/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hans/HK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hans/MO/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hans/MO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hans/SG/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/HK/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/HK/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/HK/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/MO/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/MO/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/MO/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/phoneres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/TW/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/TW/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/Hant/US/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/HK/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/HK/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/HK/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/MO/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/MO/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/MY/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/MY/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/phoneres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/TW/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/TW/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/TW/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/US/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zh/US/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/znd/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Abidjan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Accra.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Addis_Ababa.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Algiers.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Asmara.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Bamako.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Bangui.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Banjul.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Bissau.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Blantyre.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Brazzaville.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Bujumbura.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Cairo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Casablanca.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Ceuta.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Conakry.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Dakar.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Dar_es_Salaam.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Djibouti.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Douala.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/El_Aaiun.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Freetown.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Gaborone.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Harare.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Johannesburg.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Juba.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Kampala.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Khartoum.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Kigali.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Kinshasa.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Lagos.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Libreville.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Lome.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Luanda.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Lubumbashi.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Lusaka.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Malabo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Maputo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Maseru.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Mbabane.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Mogadishu.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Monrovia.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Nairobi.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Ndjamena.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Niamey.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Nouakchott.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Ouagadougou.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Porto-Novo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Sao_Tome.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Timbuktu.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Tripoli.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Tunis.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Africa/Windhoek.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Adak.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Anchorage.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Anguilla.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Antigua.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Araguaina.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Argentina.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Aruba.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Asuncion.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Atikokan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Bahia_Banderas.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Bahia.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Barbados.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Belem.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Belize.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Blanc-Sablon.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Boa_Vista.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Bogota.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Boise.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Buenos_Aires.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Cambridge_Bay.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Campo_Grande.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Cancun.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Caracas.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Catamarca.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Cayenne.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Cayman.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Chicago.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Chihuahua.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Coral_Harbour.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Cordoba.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Costa_Rica.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Creston.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Cuiaba.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Curacao.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Danmarkshavn.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Dawson_Creek.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Dawson.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Denver.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Detroit.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Dominica.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Edmonton.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Eirunepe.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/El_Salvador.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Ensenada.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Fort_Wayne.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Fortaleza.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Glace_Bay.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Godthab.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Goose_Bay.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Grand_Turk.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Grenada.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Guadeloupe.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Guatemala.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Guayaquil.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Guyana.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Halifax.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Havana.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Hermosillo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Indiana.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Indianapolis.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Inuvik.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Iqaluit.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Jamaica.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Jujuy.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Juneau.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Kentucky.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Knox_IN.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Kralendijk.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/La_Paz.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Lima.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Los_Angeles.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Louisville.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Lower_Princes.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Maceio.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Managua.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Manaus.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Marigot.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Martinique.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Matamoros.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Mazatlan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Mendoza.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Menominee.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Merida.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Metlakatla.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Mexico_City.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Miquelon.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Moncton.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Monterrey.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Montevideo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Montreal.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Montserrat.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Nassau.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/New_York.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Nipigon.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Nome.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Noronha.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/North_Dakota.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Ojinaga.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Panama.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Pangnirtung.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Paramaribo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Phoenix.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Port_of_Spain.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Port-au-Prince.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Porto_Acre.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Porto_Velho.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Puerto_Rico.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Rainy_River.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Rankin_Inlet.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Recife.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Regina.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Resolute.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Rio_Branco.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Rosario.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Santa_Isabel.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Santarem.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Santiago.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Santo_Domingo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Sao_Paulo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Scoresbysund.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Sitka.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/St_Barthelemy.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/St_Johns.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/St_Kitts.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/St_Lucia.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/St_Thomas.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/St_Vincent.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Swift_Current.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Tegucigalpa.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Thule.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Thunder_Bay.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Tijuana.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Toronto.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Tortola.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Vancouver.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Virgin.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Whitehorse.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Winnipeg.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Yakutat.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/America/Yellowknife.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Casey.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Davis.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/DumontDUrville.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Macquarie.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Mawson.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/McMurdo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Palmer.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Rothera.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/South_Pole.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Syowa.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Troll.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Antarctica/Vostok.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Arctic/Longyearbyen.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Aden.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Almaty.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Amman.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Anadyr.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Aqtau.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Aqtobe.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Ashgabat.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Baghdad.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Bahrain.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Baku.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Bangkok.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Beirut.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Bishkek.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Brunei.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Chita.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Choibalsan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Chongqing.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Chungking.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Colombo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Damascus.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Dhaka.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Dili.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Dubai.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Dushanbe.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Gaza.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Hanoi.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Harbin.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Hebron.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Ho_Chi_Minh.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Hong_Kong.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Hovd.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Irkutsk.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Istanbul.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Jakarta.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Jayapura.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Jerusalem.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Kabul.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Kamchatka.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Karachi.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Kashgar.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Kathmandu.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Khandyga.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Kolkata.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Krasnoyarsk.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Kuala_Lumpur.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Kuching.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Kuwait.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Macau.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Magadan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Makassar.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Manila.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Muscat.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Nicosia.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Novokuznetsk.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Novosibirsk.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Omsk.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Oral.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Phnom_Penh.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Pontianak.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Pyongyang.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Qatar.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Qyzylorda.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Rangoon.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Riyadh.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Saigon.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Sakhalin.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Samarkand.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Seoul.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Shanghai.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Singapore.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Srednekolymsk.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Taipei.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Tashkent.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Tbilisi.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Tehran.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Tel_Aviv.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Thimphu.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Tokyo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Ulaanbaatar.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Ulan_Bator.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Urumqi.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Ust-Nera.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Vientiane.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Vladivostok.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Yakutsk.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Yekaterinburg.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Asia/Yerevan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Azores.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Bermuda.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Canary.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Cape_Verde.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Faroe.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Jan_Mayen.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Madeira.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Reykjavik.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/South_Georgia.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/St_Helena.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Atlantic/Stanley.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Adelaide.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Brisbane.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Broken_Hill.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Currie.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Darwin.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Eucla.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Hobart.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Lindeman.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Lord_Howe.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Melbourne.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Perth.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Australia/Sydney.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Brazil/Acre.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Brazil/East.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Canada/Central.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Canada/Mountain.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Canada/Newfoundland.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Canada/Pacific.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Canada/Yukon.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/CET.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Chile/Continental.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/CST6CDT.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/EET.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/EST.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/EST5EDT.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-1.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-10.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-11.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-12.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-13.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-14.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-2.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-3.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-4.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-5.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-6.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-7.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-8.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT-9.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+1.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+10.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+11.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+12.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+2.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+3.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+4.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+5.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+6.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+7.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+8.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/GMT+9.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/UCT.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Etc/UTC.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Amsterdam.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Andorra.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Athens.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Belfast.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Belgrade.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Berlin.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Bratislava.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Brussels.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Bucharest.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Budapest.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Chisinau.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Copenhagen.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Dublin.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Gibraltar.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Guernsey.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Helsinki.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Isle_of_Man.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Istanbul.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Jersey.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Kaliningrad.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Kiev.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Lisbon.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Ljubljana.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/London.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Luxembourg.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Madrid.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Malta.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Mariehamn.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Minsk.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Monaco.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Moscow.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Nicosia.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Oslo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Paris.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Podgorica.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Prague.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Riga.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Rome.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Samara.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/San_Marino.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Sarajevo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Simferopol.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Skopje.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Sofia.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Stockholm.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Tallinn.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Tirane.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Tiraspol.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Uzhgorod.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Vaduz.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Vatican.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Vienna.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Vilnius.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Volgograd.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Warsaw.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Zagreb.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Zaporozhye.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Europe/Zurich.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Factory.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/HST.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Iceland.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Antananarivo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Chagos.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Christmas.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Cocos.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Comoro.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Kerguelen.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Mahe.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Maldives.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Mauritius.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Mayotte.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Indian/Reunion.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/MET.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Mexico/BajaSur.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Mexico/General.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/MST.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/MST7MDT.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Apia.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Auckland.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Bougainville.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Chatham.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Chuuk.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Easter.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Efate.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Enderbury.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Fakaofo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Fiji.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Funafuti.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Galapagos.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Gambier.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Guadalcanal.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Guam.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Honolulu.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Johnston.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Kiritimati.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Kosrae.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Kwajalein.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Majuro.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Marquesas.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Midway.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Nauru.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Niue.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Norfolk.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Noumea.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Pago_Pago.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Palau.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Pitcairn.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Pohnpei.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Port_Moresby.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Rarotonga.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Saipan.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Tahiti.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Tarawa.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Tongatapu.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Wake.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/Pacific/Wallis.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/PST8PDT.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/US/Alaska.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/US/East-Indiana.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/US/Eastern.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/US/Hawaii.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/US/Indiana-Starke.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/US/Pacific.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/WET.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zoneinfo/zonetab.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zu/ctrynames.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zu/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zu/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zu/plurals.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zu/sysres.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zu/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zu/ZA/unitfmt.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zun/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zxx/Cyrl/pseudomap.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zxx/dateformats.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zxx/Hans/pseudomap.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zxx/Hebr/pseudomap.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zxx/localeinfo.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zxx/name.json",
          "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/locale/zza/localeinfo.json"
        ]
      }
    ]
  },
  {
    "path": "./lib/glue",
    "base": "/Users/jason/Git/bootplate/lib/enyo-ilib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo-ilib",
    "libName": "enyo-ilib",
    "relName": "enyo-ilib/glue",
    "name": "enyo-ilib/glue",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo-ilib/lib/glue.js",
    "contents": "/*\n * glue.js - glue code to fit ilib into enyo\n *\n * Copyright © 2013-2014 LG Electronics, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar\n\tdom = require('enyo/dom'),\n\ti18n = require('enyo/i18n'),\n\tplatform = require('enyo/platform'),\n\tutils = require('enyo/utils'),\n\tAjax = require('enyo/Ajax'),\n\tControl = require('enyo/Control');\n\nvar\n\tZoneInfoFile = require('./zoneinfo');\n\nmodule.exports = function (ilib) {\n\n\tvar enyoLoader = function() {\n\t\tthis.base = \"ilib/\";\n\t\tif (platform.platformName === \"webos\") {\n\t\t\tthis.webos = true;\n\t\t}\n\t};\n\n\tenyoLoader.prototype = new ilib.Loader();\n\tenyoLoader.prototype.constructor = enyoLoader;\n\n\tenyoLoader.prototype._createZoneFile = function (path) {\n\t\tvar zone = path.substring(path.indexOf(\"zoneinfo\"));\n\n\t\t// remove the .json suffix to get the name of the zone\n\t\tzone = zone.substring(0, zone.length-5);\n\n\t\ttry {\n\t\t\tvar zif = new ZoneInfoFile(\"/usr/share/\" + zone);\n\n\t\t\t// only get the info for this year. Later we can get the info\n\t\t\t// for any historical or future year too\n\t\t\treturn zif.getIlibZoneInfo(new Date());\n\t\t} catch (e) {\n\t\t\t// no file, so just return nothing\n\t\t\treturn undefined;\n\t\t}\n\t};\n\n\tenyoLoader.prototype._pathjoin = function (root, subpath) {\n\t\tif (!root || !root.length) {\n\t\t\treturn subpath;\n\t\t}\n\t\tif (!subpath || !subpath.length) {\n\t\t\treturn root;\n\t\t}\n\t\treturn root + (root.charAt(root.length-1) !== '/' ? '/' : \"\") + subpath;\n\t};\n\n\t/**\n\t * Load the list of files asynchronously. This uses recursion in\n\t * order to create a queue of files that will be loaded serially.\n\t * Each layer, starting at the bottom, loads a file and then loads\n\t * the layer on top of it. The very top file on the stack will have\n\t * zero files to load, so instead it will be the one to call the\n\t * callback to notify the caller that all the content is loaded.\n\t *\n\t * @param {Object} context function to call this method in the context of\n\t * @param {Array.<string>} paths array of strings containing relative paths for required locale data files\n\t * @param {Array} results empty array in which to place the resulting json when it is loaded from a file\n\t * @param {Object} params An object full of parameters that the caller is passing to this function to help load the files\n\t * @param {function(Array.<Object>)} callback callback to call when this function is finished attempting\n\t * to load all the files that exist and can be loaded\n\t */\n\tenyoLoader.prototype._loadFilesAsync = function (context, paths, results, params, callback) {\n\t\tvar root = \"resources\";\n\t\tif (params && typeof(params.root) !== \"undefined\") {\n\t\t\troot = params.root;\n\t\t}\n\t\tif (paths.length > 0) {\n\t\t\tvar path = paths.shift(),\n\t\t\t\turl = undefined;\n\n\t\t\tif (this.webos && path.indexOf(\"zoneinfo\") !== -1) {\n\t\t\t\tresults.push(this._createZoneFile(path));\n\t\t\t} else {\n\t\t\t\tif (this.isAvailable(root, path)) {\n\t\t\t\t\turl = this._pathjoin(root, path);\n\t\t\t\t} else if (this.isAvailable(this.base + \"locale\", path)) {\n\t\t\t\t\turl = this._pathjoin(this._pathjoin(this.base, \"locale\"), path)\n\t\t\t\t}\n\n\t\t\t\tvar resultFunc = function(inSender, json) {\n\t                // console.log(\"enyo-ilib/glue: \" + (!inSender.failed && json ? \"success\" : \"failed\"));\n\t\t\t\t\tresults.push(!inSender.failed && (typeof(json) === 'object') ? json : undefined);\n\t\t\t\t\tif (paths.length > 0) {\n\t\t\t\t\t\tthis._loadFilesAsync(context, paths, results, params, callback);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// only the bottom item on the stack will call\n\t\t\t\t\t\t// the callback\n\t\t\t\t\t\tcallback.call(context, results);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tif (url) {\n\t\t\t\t\tvar ajax = new Ajax({\n\t\t\t\t\t\turl: url,\n\t\t\t\t\t\tcacheBust: false\n\t\t\t\t\t});\n\t\t\t\t\t// console.log(\"enyo-ilib/glue: browser/async: attempting to load \" + url);\n\t\t\t\t\tajax.response(this, resultFunc);\n\t\t\t\t\tajax.error(this, resultFunc);\n\t\t\t\t\tajax.go();\n\t\t\t\t} else {\n\t\t\t\t\t// nothing to load, so go to the next file\n\t\t\t\t\tresultFunc({}, undefined);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tenyoLoader.prototype.loadFiles = function(paths, sync, params, callback) {\n\t\tif (sync) {\n\t\t\tvar ret = [];\n\t\t\tvar root = \"resources\";\n\t\t\tvar locdata = this._pathjoin(this.base, \"locale\");\n\t\t\tif (params && typeof(params.root) !== \"undefined\") {\n\t\t\t\troot = params.root;\n\t\t\t}\n\t\t\t// synchronous\n\t\t\tutils.forEach(paths, function (path) {\n\t\t\t\tif (this.webos && path.indexOf(\"zoneinfo\") !== -1) {\n\t\t\t\t\tret.push(this._createZoneFile(path));\n\t\t\t\t} else {\n\t\t\t\t\tvar found = false;\n\n\t\t\t\t\tvar handler = function(inSender, json) {\n\t                    // console.log((!inSender.failed && json ? \"success\" : \"failed\"));\n\t\t\t\t\t\tif (!inSender.failed && typeof(json) === 'object') {\n\t\t\t\t\t\t\tret.push(json);\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// console.log(\"browser/sync: attempting to load lib/enyo-ilib/ilib/locale/\" + path);\n\t\t\t\t\tif (this.isAvailable(root, path)) {\n\t\t\t\t\t\tvar ajax = new Ajax({\n\t\t\t\t\t\t\turl: this._pathjoin(root, path),\n\t\t\t\t\t\t\tsync: true,\n\t\t\t\t\t\t\tcacheBust: false\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tajax.response(this, handler);\n\t\t\t\t\t\tajax.error(this, handler);\n\t\t\t\t\t\tajax.go();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!found && this.isAvailable(locdata, path)) {\n\t\t\t\t\t\tvar ajax = new Ajax({\n\t\t\t\t\t\t\turl: this._pathjoin(locdata, path),\n\t\t\t\t\t\t\tsync: true,\n\t\t\t\t\t\t\tcacheBust: false\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tajax.response(this, handler);\n\t\t\t\t\t\tajax.error(this, handler);\n\t\t\t\t\t\tajax.go();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!found) {\n\t\t\t\t\t\t// not there, so fill in a blank entry in the array\n\t\t\t\t\t\tret.push(undefined);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, this);\n\n\t\t\tif (typeof(callback) === 'function') {\n\t\t\t\tcallback.call(this, ret);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t\t// asynchronous\n\t\tvar results = [];\n\t\tthis._loadFilesAsync(this, paths, results, params, callback);\n\t};\n\n\tenyoLoader.prototype._loadManifest = function (root, subpath) {\n\t\tif (!this.manifest) {\n\t\t\tthis.manifest = {};\n\t\t}\n\n\t\tvar dirpath = this._pathjoin(root, subpath);\n\t\tvar filepath = this._pathjoin(dirpath, \"ilibmanifest.json\");\n\n\t\t// util.print(\"enyo loader: loading manifest \" + filepath + \"\\n\");\n\t\tvar ajax = new Ajax({\n\t\t\turl: filepath,\n\t\t\tsync: true,\n\t\t\tcacheBust: false,\n\t\t\thandleAs: \"json\"\n\t\t});\n\n\t\tvar handler = function(inSender, json) {\n\t        // console.log((!inSender.failed && json ? \"success\" : \"failed\"));\n\t\t\t// star indicates there was no ilibmanifest.json, so always try to load files from that dir\n\t\t\tthis.manifest[dirpath] = (!inSender.failed && typeof(json) === 'object') ? json.files : \"*\";\n\t\t};\n\n\t\tajax.response(this, handler);\n\t\tajax.error(this, handler);\n\t\tajax.go();\n\t},\n\n\tenyoLoader.prototype._loadStandardManifests = function() {\n\t\t// util.print(\"enyo loader: load manifests\\n\");\n\t\tif (!this.manifest) {\n\t\t\tthis._loadManifest(this.base, \"locale\"); // standard ilib locale data\n\t\t\tthis._loadManifest(\"\", \"resources\");     // the app's resources dir\n\t\t}\n\t};\n\tenyoLoader.prototype.listAvailableFiles = function() {\n\t\t// util.print(\"enyo loader: list available files called\\n\");\n\t\tthis._loadStandardManifests();\n\t\treturn this.manifest;\n\t};\n\tenyoLoader.prototype.isAvailable = function(root, path) {\n\t\tthis._loadStandardManifests();\n\n\t\tif (!this.manifest[root]) {\n\t\t\t// maybe it's a custom root? If so, try to load\n\t\t\t// the manifest file first in case it is there\n\t\t\tthis._loadManifest(root, \"\");\n\t\t}\n\n\t\t// util.print(\"enyo loader: isAvailable \" + path + \"? \");\n\t\t// star means attempt to load everything because there was no manifest in that dir\n\t\tif (this.manifest[root] === \"*\" || ilib.indexOf(this.manifest[root], path) !== -1) {\n\t\t\t// util.print(\"true\\n\");\n\t\t\treturn true;\n\t\t}\n\n\t\t// util.print(\"false\\n\");\n\t\treturn false;\n\t};\n\n\tilib.setLoaderCallback(new enyoLoader());\n\n\tif (typeof(window.UILocale) !== 'undefined') {\n\t\t// this is a hack until GF-1581 is fixed\n\t\tilib.setLocale(window.UILocale);\n\t}\n\n\t/*\n\t * Tell whether or not the given locale is considered a non-Latin locale for webOS purposes. This controls\n\t * which fonts are used in various places to show the various languages. An undefined spec parameter means\n\t * to test the current locale.\n\t *\n\t * @param {ilib.Locale|string|undefined} spec locale specifier or locale object of the locale to test, or undefined\n\t * to test the current locale\n\t */\n\tfunction isNonLatinLocale (spec) {\n\t\tvar li = new ilib.LocaleInfo(spec),\n\t\t\tlocale = li.getLocale();\n\n\t    // We use the non-latin fonts for these languages (even though their scripts are technically considered latin)\n\t    var nonLatinLanguageOverrides = [\"bs\", \"cs\", \"ha\", \"hr\", \"hu\", \"lv\", \"lt\", \"pl\", \"ro\", \"sr\", \"sl\", \"tr\", \"vi\"];\n\t    // We use the latin fonts (with non-Latin fallback) for these languages (even though their scripts are non-latin)\n\t    var latinLanguageOverrides = [\"ko\"];\n\t\treturn ((li.getScript() !== \"Latn\" || utils.indexOf(locale.getLanguage(), nonLatinLanguageOverrides) !== -1) &&\n\t\t\t(utils.indexOf(locale.getLanguage(), latinLanguageOverrides) < 0));\n\t};\n\n\t// enyo.updateI18NClasses should be called after every setLocale, but there isn't such a callback in current version\n\tfunction updateI18NClasses () {\n\t    var li = new ilib.LocaleInfo(); // for the current locale\n\t    var locale = li.getLocale();\n\t\tvar base = \"enyo-locale-\";\n\n\t    // Remove old style definitions (hack style becouse enyo.dom doesn't have methods like enyo.dom.getBodyClasses, enyo.dom.removeBodyClass)\n\t    if (document && document.body && document.body.className && document.body.className) {\n\t        document.body.className = document.body.className.replace(new RegExp('(^|\\\\s)'+ base +'[^\\\\s]*', 'g'), '');\n\t    }\n\n\t\tif (isNonLatinLocale(locale)) {\n\t\t\t// allow enyo to define other fonts for non-Latin languages, or for certain\n\t\t\t// Latin-based languages where the characters with some accents don't appear in the\n\t\t\t// regular fonts, creating a strange \"ransom note\" look with a mix of fonts in the\n\t\t\t// same word. So, treat it like a non-Latin language in order to get all the characters\n\t\t\t// to display with the same font.\n\t\t\tdom.addBodyClass(base + \"non-latin\");\n\t\t}\n\n\t\tvar scriptName = li.getScript();\n\t\tif (scriptName !== 'Latn' && scriptName !== 'Cyrl' && scriptName !== 'Grek') {\n\t\t\t// GF-45884: allow enyo to avoid setting italic fonts for those scripts that do not\n\t\t\t// commonly use italics\n\t\t\tdom.addBodyClass(base + \"non-italic\");\n\t\t}\n\n\t\t// allow enyo to apply right-to-left styles to the app and widgets if necessary\n\t\tvar script = new ilib.ScriptInfo(scriptName);\n\t\tif (script.getScriptDirection() === \"rtl\") {\n\t\t\tdom.addBodyClass(base + \"right-to-left\");\n\t\t\tControl.prototype.rtl = true;\n\t\t} else {\n\t\t\tControl.prototype.rtl = false;\n\t\t}\n\n\t\t// allow enyo or the apps to give CSS classes that are specific to the language, country, or script\n\t\tif (locale.getLanguage()) {\n\t\t\tdom.addBodyClass(base + locale.getLanguage());\n\t\t\tif (locale.getScript()) {\n\t\t\t\tdom.addBodyClass(base + locale.getLanguage() + \"-\" + locale.getScript());\n\t\t\t\tif (locale.getRegion()) {\n\t\t\t\t\tdom.addBodyClass(base + locale.getLanguage() + \"-\" + locale.getScript() + \"-\" + locale.getRegion());\n\t\t\t\t}\n\t\t\t} else if (locale.getRegion()) {\n\t\t\t\tdom.addBodyClass(base + locale.getLanguage() + \"-\" + locale.getRegion());\n\t\t\t}\n\t\t}\n\t\tif (locale.getScript()) {\n\t\t\tdom.addBodyClass(base + locale.getScript());\n\t\t}\n\t\tif (locale.getRegion()) {\n\t\t\tdom.addBodyClass(base + locale.getRegion());\n\t\t}\n\t\t// Recreate the case mappers to use the just-recently-set locale\n\t \tsetCaseMappers();\n\t};\n\n\t// The ilib.ResBundle for the active locale used by $L\n\tvar resBundle;\n\n\t/*\n\t * Reset the $L function to use ilib instead of the dummy function that enyo\n\t * comes with by default.\n\t */\n\ti18n.$L.extend(function (sup) {\n\t\treturn function (string) {\n\t\t\tvar str;\n\t\t\tif (!resBundle) setLocale();\n\t\t\tif (typeof(string) === 'string') {\n\t\t\t\tstr = resBundle ? resBundle.getString(string) : string;\n\t\t\t} else if (typeof(string) === 'object') {\n\t\t\t\tif (typeof(string.key) !== 'undefined' && typeof(string.value) !== 'undefined') {\n\t\t\t\t\tstr = resBundle ? resBundle.getString(string.value, string.key) : string.value;\n\t\t\t\t} else {\n\t\t\t\t\tstr = \"\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstr = string;\n\t\t\t}\n\t\t\treturn sup.call(this, str.toString());\n\t\t};\n\t});\n\n\t/**\n\t * Set the locale for the strings that $L loads. This may reload the\n\t * string resources if necessary.\n\t * @param {string} spec the locale specifier\n\t */\n\tfunction setLocale (spec) {\n\t\tvar locale = new ilib.Locale(spec);\n\t\tif (!resBundle || spec !== resBundle.getLocale().getSpec()) {\n\t\t\tresBundle = new ilib.ResBundle({\n\t\t\t\tlocale: locale,\n\t\t\t\ttype: \"html\",\n\t\t\t\tname: \"strings\",\n\t\t\t\tsync: true,\n\t\t\t\tlengthen: true\t\t// if pseudo-localizing, this tells it to lengthen strings\n\t\t\t});\n\t\t}\n\t};\n\n\tvar toLowerCaseMapper, toUpperCaseMapper;\n\n\t/**\n\t * Set CaseMapper object references to ilib's current locale (its most recently set, by default)\n\t */\n\tfunction setCaseMappers () {\n\t\ttoLowerCaseMapper = new ilib.CaseMapper({direction: \"tolower\"});\n\t\ttoUpperCaseMapper = new ilib.CaseMapper({direction: \"toupper\"});\n\t};\n\n\t/**\n\t * Override Enyo's toLowerCase and toUpperCase methods with these fancy ones\n\t * that call iLib's locale-safe case mapper.\n\t */\n\tutils.toLowerCase.extend(function (sup) {\n\t\treturn function (inString) {\n\t\t\tif (inString != null) {\n\t\t\t\treturn toLowerCaseMapper.map(inString.toString());\n\t\t\t}\n\t\t\treturn inString;\n\t\t};\n\t});\n\tutils.toUpperCase.extend(function (sup) {\n\t\treturn function (inString) {\n\t\t\tif (inString != null) {\n\t\t\t\treturn toUpperCaseMapper.map(inString.toString());\n\t\t\t}\n\t\t\treturn inString;\n\t\t};\n\t});\n\n\t/**\n\t * This Enyo hook lets us know that the system locale has changed and gives\n\t * us a chance to update the iLib locale before Enyo broadcasts its\n\t * `onlocalechange` signal.\n\t * Provide an inLocale string, like \"en-US\" or \"ja-JP\", to conveniently set\n\t * that locale immediately. Provide nothing, and reset the locale back to the\n\t * browser's default language.\n\t */\n\ti18n.updateLocale.extend(function (sup) {\n\t\treturn function(inLocale) {\n\t\t\t// blow away the cache to force it to reload the manifest files for the new app\n\t\t\tif (ilib._load) ilib._load.manifest = undefined;\n\t\t\tilib.setLocale(inLocale || ilib.getLocale());\n\t\t\tsetLocale(inLocale || ilib.getLocale());\n\t\t\tupdateI18NClasses();\n\t\t\tsup.call(this);\n\t\t};\n\t});\n\n\t// we go ahead and run this once during loading of iLib settings are valid\n\t// during the loads of later libraries.\n\ti18n.updateLocale(null, true);\n\n\treturn {\n\t\tupdateI18NClasses: updateI18NClasses,\n\t\tisNonLatinLocale: isNonLatinLocale\n\t};\n};",
    "mtime": 1434758951000,
    "relPath": "enyo-ilib/glue",
    "requires": [
      "enyo/dom",
      "enyo/i18n",
      "enyo/platform",
      "enyo/utils",
      "enyo/Ajax",
      "enyo/Control",
      "./zoneinfo"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./zoneinfo",
    "base": "/Users/jason/Git/bootplate/lib/enyo-ilib/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo-ilib",
    "libName": "enyo-ilib",
    "relName": "enyo-ilib/zoneinfo",
    "name": "enyo-ilib/zoneinfo",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo-ilib/lib/zoneinfo.js",
    "contents": "/*\n * zoneinfo.js - represent a binary zone info file\n *\n * Copyright © 2014 LG Electronics, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * The portion of this code that parses the zone info file format is derived\n * from the code in the node-zoneinfo project by Gregory McWhirter licensed\n * under the MIT license:\n *\n * Copyright (c) 2013 Gregory McWhirter\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject\n * to the following conditions:\n\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nvar\n\tPackedBuffer = require(\"./packedbuffer.js\");\n\nvar _platform = \"unknown\";\n\n(function () {\n\tif (typeof(enyo) !== 'undefined') {\n\t\t_platform = \"enyo\";\n\t} else if (typeof(environment) !== 'undefined') {\n\t\t_platform = \"rhino\";\n\t} else if (typeof(process) !== 'undefined' || typeof(require) !== 'undefined') {\n\t\t_platform = \"nodejs\";\n\t} else if (typeof(window) !== 'undefined') {\n\t\t_platform = (typeof(PalmSystem) !== 'undefined') ? \"webos\" : \"browser\";\n\t}\n})();\n\n/**\n * @constructor\n * Represents a binary zone info file of the sort that the Unix Zone Info Compiler\n * produces.\n * @param {string} path path to the file to be loaded\n * @param {number} year year of the zone info rules needed\n */\nvar ZoneInfoFile = function (path) {\n\tvar that = this;\n\tswitch (_platform) {\n\t\t/*\n\t\tUncomment and use this when enyo works for binary load.\n\t\tcase \"enyo\":\n\t\t\tvar ajax = new enyo.Ajax({\n\t\t\t\txhrFields: {\n\t\t\t\t\tresponseType:\"arraybuffer\"\n\t\t\t\t},\n\t\t\t\tcacheBust: false,\n\t\t\t\tsync: true,\n\t\t\t\thandleAs: \"binary\",\n\t\t\t\turl: \"file://\" + path\n\t\t\t});\n\t\t\tajax.response(this, function(s, r) {\n\t\t\t\tvar byteArray = new Uint8Array(r);\n\t\t\t\t// console.log(\"ZoneInfoFile bytes received: \" + byteArray.length);\n\t\t\t\tthat._parseInfo(byteArray);\n\t\t\t});\n\t\t\t//ajax.error(this, function(s, r) {\n\t\t\t//\tconsole.log(\"ZoneInfoFile: failed to load files \" + JSON.stringify(s) + \" \" + r);\n\t\t\t//});\n\t\t\tajax.go();\n\t\t\tbreak;\n\t\t*/\n\t\t\n\t\tcase \"nodejs\":\n\t\t\t// console.log(\"ZoneInfoFile: loading zoneinfo path \" + path + \"\\n\");\n\t\t\tvar fs = require(\"fs\");\n\t\t\tvar bytes = new Buffer(fs.readFileSync(path));\n\t\t\tvar byteArray = new Uint8Array(bytes);\n\t\t\tthis._parseInfo(byteArray);\n\t\t\tbreak;\n\t\t\t\n\t\tdefault:\n\t\t\t// use normal web techniques\n\t\t\tvar req = new XMLHttpRequest();\n\t\t\treq.open(\"GET\", \"file:\" + path, false);\n\t\t\treq.responseType = \"arraybuffer\";\n\t\t\treq.onload = function(e) {\n\t\t\t\tvar byteArray = new Uint8Array(req.response);\n\t\t\t\t// console.log(\"ZoneInfoFile bytes received: \" + byteArray.length);\n\t\t\t\tthat._parseInfo(byteArray);\n\t\t\t};\n\t\t\treq.onerror = function(e) {\n\t\t\t\tthrow \"Cannot load file \" + path;\n\t\t\t};\n\t\t\treq.send();\n\t\t\tbreak;\n\t}\n};\n\n/**\n * @private\n * Parse the binary buffer to find the zone info\n * @param buffer\n */\nZoneInfoFile.prototype._parseInfo = function(buffer) {\n\tvar packed = new PackedBuffer(buffer);\n\n\t// The time zone information files used by tzset(3)\n\t// begin with the magic characters \"TZif\" to identify\n\t// them as time zone information files, followed by\n\t// sixteen bytes reserved for future use, followed by\n\t// six four-byte values of type long, written in a\n\t// ''standard'' byte order (the high-order byte\n\t// of the value is written first).\n\tif (packed.getString(4) != \"TZif\") {\n\t\tthrow \"file format not recognized\";\n\t} else {\n\t\t// ignore 16 bytes\n\t\tpacked.skip(16);\n\n\t\t// The number of UTC/local indicators stored in the file.\n\t\tvar tzh_ttisgmtcnt = packed.getLong();\n\t\t// The number of standard/wall indicators stored in the file.\n\t\tvar tzh_ttisstdcnt = packed.getLong();\n\t\t// The number of leap seconds for which data is stored in the file.\n\t\tvar tzh_leapcnt = packed.getLong();\n\t\t// The number of \"transition times\" for which data is stored in the file.\n\t\tvar tzh_timecnt = packed.getLong();\n\t\t// The number of \"local time types\" for which data is stored in the file (must not be zero).\n\t\tvar tzh_typecnt = packed.getLong();\n\t\t// The number of characters of \"time zone abbreviation strings\" stored in the file.\n\t\tvar tzh_charcnt = packed.getLong();\n\n\t\tthis.transitionTimes = tzh_timecnt ? packed.getLongs(tzh_timecnt) : [];\n\n\t\tthis.transitionTimes = this.transitionTimes.map(function (item) {\n\t\t\treturn item * 1000;\n\t\t});\n\n\t\t// these are indexes into the zonesInfo that correspond to each transition time\n\t\tthis.ruleIndex = tzh_timecnt ? packed.getUnsignedBytes(tzh_timecnt) : [];\n\n\t\tthis.zoneInfo = [];\n\t\tfor (var i = 0; i < tzh_typecnt; i++) {\n\t\t\tthis.zoneInfo.push({\n\t\t\t\toffset: Math.floor(packed.getLong()/60),  // offset in seconds, so convert to minutes\n\t\t\t\tisdst: !!packed.getByte(),\n\t\t\t\tabbreviationIndex: packed.getByte()\n\t\t\t});\n\t\t}\n\n\t\tvar allAbbreviations = packed.getString(tzh_charcnt);\n\n\t\tfor (var i = 0; i < tzh_typecnt; i++) {\n\t\t\tvar abbreviation = allAbbreviations.substring(this.zoneInfo[i].abbreviationIndex);\n\t\t\tthis.zoneInfo[i].abbreviation = abbreviation.substring(0, abbreviation.indexOf('\\x00'));\n\t\t}\n\n\t\t// ignore the leap seconds\n\t\tif (tzh_leapcnt) {\n\t\t\tpacked.skip(tzh_leapcnt * 2);\n\t\t}\n\n\t\t// skip the standard/wall time indicators\n\t\tif (tzh_ttisstdcnt) {\n\t\t\tpacked.skip(tzh_ttisstdcnt);\n\t\t}\n\n\t\t// ignore the UTC/local time indicators -- everything should be UTC\n\t\tif (tzh_ttisgmtcnt) {\n\t\t\tpacked.skip(tzh_ttisgmtcnt);\n\t\t}\n\n\t\t// finished reading\n\n\t\t// Replace ttinfo indexes for ttinfo objects.\n\t\tvar that = this;\n\t\tthis.ruleIndex = this.ruleIndex.map(function (item) {\n\t\t\treturn {\n\t\t\t\toffset: that.zoneInfo[item].offset,\n\t\t\t\tisdst: that.zoneInfo[item].isdst,\n\t\t\t\tabbreviation: that.zoneInfo[item].abbreviation\n\t\t\t};\n\t\t});\n\n\t\t// calculate the dst savings for each daylight time\n\t\tfor (var i = 0; i < tzh_timecnt; i++) {\n\t\t\tif (i > 0 && this.ruleIndex[i].isdst) {\n\t\t\t\tthis.ruleIndex[i].savings = this.ruleIndex[i].offset - this.ruleIndex[i-1].offset;\n\t\t\t}\n\t\t}\n\n\t\t// Set standard, dst, and before ttinfos. before will be\n\t\t// used when a given time is before any transitions,\n\t\t// and will be set to the first non-dst ttinfo, or to\n\t\t// the first dst, if all of them are dst.\n\t\tif (!this.transitionTimes.length) {\n\t\t\tthis.standardTime = this.zoneInfo[0];\n\t\t} else {\n\t\t\tfor (var j = tzh_timecnt - 1; j > -1; j--) {\n\t\t\t\tvar tti = this.ruleIndex[j];\n\t\t\t\tif (!this.standardTime && !tti.isdst) {\n\t\t\t\t\tthis.standardTime = tti;\n\t\t\t\t} else if (!this.daylightTime && tti.isdst) {\n\t\t\t\t\tthis.daylightTime = tti;\n\t\t\t\t}\n\n\t\t\t\tif (this.daylightTime && this.standardTime)\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (this.daylightTime && !this.standardTime) {\n\t\t\t\tthis.standardTime = this.daylightTime;\n\t\t\t}\n\n\t\t\tfor (var k = this.zoneInfo.length-1; k > 0; k--) {\n\t\t\t\tif (!this.zoneInfo[k].isdst) {\n\t\t\t\t\tthis.defaultTime = this.zoneInfo[k];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!this.defaultTime) {\n\t\t\tthis.defaultTime = this.zoneInfo[this.zoneInfo.length-1];\n\t\t}\n\t}\n};\n\n/**\n * Binary search a sorted array of numbers for a particular target value.\n * If the exact value is not found, it returns the index of the largest\n * entry that is smaller than the given target value.<p>\n *\n * @param {number} target element being sought\n * @param {Array} arr the array being searched\n * @return the index of the array into which the value would fit if\n * inserted, or -1 if given array is not an array or the target is not\n * a number\n */\nZoneInfoFile.prototype.bsearch = function(target, arr) {\n\tif (typeof(arr) === 'undefined' || !arr || typeof(target) === 'undefined' || target < arr[0]) {\n\t\treturn -1;\n\t}\n\n\t// greater than the end of the array\n\tif (target > arr[arr.length-1]) {\n\t\treturn arr.length - 1;\n\t}\n\n\tvar high = arr.length - 1,\n\t\tlow = 0,\n\t\tmid = 0,\n\t\tvalue;\n\n\twhile (low <= high) {\n\t\tmid = Math.floor((high+low)/2);\n\t\tvalue = arr[mid] - target;\n\t\tif (value > 0) {\n\t\t\thigh = mid - 1;\n\t\t} else if (value < 0) {\n\t\t\tlow = mid + 1;\n\t\t} else {\n\t\t\treturn mid;\n\t\t}\n\t}\n\n\treturn high;\n};\n\n/**\n * Return whether or not this zone uses DST in the given year.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {boolean} true if the zone uses DST in the given year\n */\nZoneInfoFile.prototype.usesDST = function(date) {\n\tvar thisYear = date.getTime();\n\tvar nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year\n\n\t// search for the zone that was effective Jan 1 of this year\n\t// to Jan 1 of next year, and if any of the infos is DST, then\n\t// this zone supports DST in the given year.\n\n\tvar index = this.bsearch(thisYear, this.transitionTimes);\n\tif (index !== -1) {\n\t\twhile (index < this.transitionTimes.length && this.transitionTimes[index] < nextYear) {\n\t\t\tif (this.ruleIndex[index++].isdst) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false;\n};\n\n/**\n * Return the raw offset from UTC that this zone uses at the given time.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {number} offset from from UTC in number of minutes. Negative\n * numbers are west of Greenwich, positive are east of Greenwich\n */\nZoneInfoFile.prototype.getRawOffset = function(date) {\n\tvar thisYear = date.getTime();\n\tvar nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year\n\n\tvar index = this.bsearch(thisYear, this.transitionTimes);\n\n\tvar offset = this.defaultTime.offset;\n\tif (index > -1) {\n\t\twhile (index < this.transitionTimes.length && this.ruleIndex[index].isdst && this.transitionTimes[index+1] < nextYear) {\n\t\t\tindex++;\n\t\t}\n\n\t\tif (index < this.transitionTimes.length && !this.ruleIndex[index].isdst) {\n\t\t\toffset = this.ruleIndex[index].offset;\n\t\t}\n\t}\n\n\treturn offset;\n};\n\n/**\n * If this zone uses DST in the given year, return the DST savings\n * in use. If the zone does not use DST in the given year, this\n * method will return 0.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {number} number of minutes in DST savings if the zone\n * uses DST in the given year, or zero otherwise\n */\nZoneInfoFile.prototype.getDSTSavings = function(date) {\n\tvar thisYear = date.getTime();\n\tvar nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year\n\n\t// search for all transitions between now and one year \n\t// from now, and calculate the difference in DST (if any)\n\n\tvar index = this.bsearch(thisYear, this.transitionTimes);\n\tvar savings = 0;\n\tif (index > -1) {\n\t\twhile (index < this.transitionTimes.length && !this.ruleIndex[index].isdst && this.transitionTimes[index+1] < nextYear) {\n\t\t\tindex++;\n\t\t}\n\n\t\tif (index < this.transitionTimes.length && this.ruleIndex[index].isdst) {\n\t\t\tsavings = this.ruleIndex[index].savings;\n\t\t}\n\t}\n\n\treturn savings;\n};\n\n/**\n * Return the start date/time of DST if this zone uses\n * DST in the given year.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {number} unixtime representation of the start\n * of DST in the given year, or -1 if the zone does not\n * use DST in the given year\n */\nZoneInfoFile.prototype.getDSTStartDate = function(date) {\n\tvar year = date.getFullYear();\n\tvar thisYear = new Date(year, 0, 1).getTime();\n\tvar nextYear = new Date(year+1, 0, 1).getTime();\n\n\t// search for all transitions between Jan 1 of this year\n\t// to Jan 1 of next year, and calculate the difference\n\t// in DST (if any)\n\n\tvar index = this.bsearch(thisYear, this.transitionTimes);\n\tvar startDate = -1;\n\tif (index > -1) {\n\t\tif (this.transitionTimes[index] < thisYear) {\n\t\t\tindex++; // start in this year instead of the previous year\n\t\t}\n\t\twhile (index < this.transitionTimes.length && !this.ruleIndex[index].isdst && this.transitionTimes[index+1] < nextYear) {\n\t\t\tindex++;\n\t\t}\n\n\t\tif (index < this.transitionTimes.length && this.ruleIndex[index].isdst) {\n\t\t\tstartDate = this.transitionTimes[index];\n\t\t}\n\t}\n\n\treturn startDate;\n};\n\n/**\n * Return the end date/time of DST if this zone uses\n * DST in the given year.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {number} unixtime representation of the end\n * of DST in the given year, or -1 if the zone does not\n * use DST in the given year\n */\nZoneInfoFile.prototype.getDSTEndDate = function(date) {\n\tvar year = date.getFullYear();\n\tvar thisYear = new Date(year, 0, 1).getTime();\n\tvar nextYear = new Date(year+1, 0, 1).getTime();\n\n\t// search for all transitions between Jan 1 of this year\n\t// to Jan 1 of next year, and calculate the difference\n\t// in DST (if any)\n\n\tvar index = this.bsearch(thisYear, this.transitionTimes);\n\tvar endDate = -1;\n\tif (index > -1) {\n\t\tif (this.transitionTimes[index] < thisYear) {\n\t\t\tindex++; // start in this year instead of the previous year\n\t\t}\n\t\twhile (index < this.transitionTimes.length && this.ruleIndex[index].isdst && this.transitionTimes[index+1] < nextYear) {\n\t\t\tindex++;\n\t\t}\n\n\t\tif (index < this.transitionTimes.length && !this.ruleIndex[index].isdst) {\n\t\t\tendDate = this.transitionTimes[index];\n\t\t}\n\t}\n\n\treturn endDate;\n};\n\n/**\n * Return the abbreviation used by this zone in standard\n * time.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {string} a string representing the abbreviation\n * used in this time zone during standard time\n */\nZoneInfoFile.prototype.getAbbreviation = function(date) {\n\tvar thisYear = date.getTime();\n\tvar nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year\n\n\t// search for all transitions between now and one year from now, and calculate the difference\n\t// in DST (if any)\n\tvar abbr;\n\tif (this.transitionTimes.length > 0) {\n\t\tvar index = this.bsearch(thisYear, this.transitionTimes);\n\t\tabbr = this.ruleIndex[index].abbreviation;\n\t\tif (index > -1) {\n\t\t\twhile (index < this.transitionTimes.length && this.ruleIndex[index].isdst && this.transitionTimes[index+1] < nextYear) {\n\t\t\t\tindex++;\n\t\t\t}\n\n\t\t\tif (index < this.transitionTimes.length && !this.ruleIndex[index].isdst) {\n\t\t\t\tabbr = this.ruleIndex[index].abbreviation;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tabbr = this.standardTime.abbreviation;\n\t}\n\n\treturn abbr;\n};\n\n/**\n * Return the abbreviation used by this zone in daylight\n * time. If the zone does not use DST in the given year,\n * this returns the same thing as getAbbreviation().\n *\n * @param {Date} date the Gregorian date to test\n * @returns {string} a string representing the abbreviation\n * used in this time zone during daylight time\n */\nZoneInfoFile.prototype.getDSTAbbreviation = function(date) {\n\tvar thisYear = date.getTime();\n\tvar nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year\n\n\t// search for all transitions between now and one year from now, and calculate the difference\n\t// in DST (if any)\n\n\tvar abbr;\n\tif (this.transitionTimes.length > 0) {\n\t\tvar index = this.bsearch(thisYear, this.transitionTimes);\n\t\tabbr = this.ruleIndex[index].abbreviation;\n\t\tif (index > -1) {\n\t\t\twhile (index < this.transitionTimes.length && !this.ruleIndex[index].isdst && this.transitionTimes[index+1] < nextYear) {\n\t\t\t\tindex++;\n\t\t\t}\n\n\t\t\tif (index < this.transitionTimes.length && this.ruleIndex[index].isdst) {\n\t\t\t\tabbr = this.ruleIndex[index].abbreviation;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tabbr = this.standardTime.abbreviation;\n\t}\n\n\treturn abbr;\n};\n\n/**\n * Return the zone information for the given date in ilib\n * format.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {Object} an object containing the zone information\n * for the given date in the format that ilib can use directly\n */\nZoneInfoFile.prototype.getIlibZoneInfo = function(date) {\n\tfunction minutesToStr(min) {\n\t\tvar hours = Math.floor(min / 60);\n\t\tvar minutes = min - hours * 60;\n\n\t\treturn hours + \":\" + minutes;\n\t}\n\n\tfunction unixtimeToJD(millis) {\n\t\treturn 2440587.5 + millis / 86400000;\n\t}\n\tvar res = {\n\t\t\"o\": minutesToStr(this.getRawOffset(date))\n\t};\n\tif (this.usesDST(date)) {\n\t\tres.f = \"{c}\";\n\t\tres.e = {\n\t\t\t\"c\": this.getAbbreviation(date),\n\t\t\t\"j\": unixtimeToJD(this.getDSTEndDate(date))\n\t\t};\n\t\tres.s = {\n\t\t\t\"c\": this.getDSTAbbreviation(date),\n\t\t\t\"j\": unixtimeToJD(this.getDSTStartDate(date)),\n\t\t\t\"v\": minutesToStr(this.getDSTSavings(date))\n\t\t};\n\t} else {\n\t\tres.f = this.getAbbreviation(date);\n\t}\n\n\treturn res;\n};\n\nmodule.exports.ZoneInfoFile = ZoneInfoFile;",
    "mtime": 1434758951000,
    "relPath": "enyo-ilib/zoneinfo",
    "requires": [
      "./packedbuffer.js",
      "fs"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./ilib/js/ilib-dyn-full",
    "base": "/Users/jason/Git/bootplate/lib/enyo-ilib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo-ilib",
    "libName": "enyo-ilib",
    "relName": "ilib/js/ilib-dyn-full",
    "name": "ilib/js/ilib-dyn-full",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo-ilib/ilib/js/ilib-dyn-full.js",
    "contents": "/*\n * ilibglobal.js - define the ilib name space\n *\n * Copyright © 2012-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @namespace The global namespace that contains all ilib functions and classes.\n */\nvar ilib = ilib || {};\n\n/**\n * Return the current version of ilib.\n *\n * @static\n * @return {string} a version string for this instance of ilib\n */\nilib.getVersion = function () {\n    // increment this for each release\n    return \"10.0\"\n    ;\n};\n\n/**\n * Place where resources and such are eventually assigned.\n */\nilib.data = {\n    norm: {\n        nfc: {},\n        nfd: {},\n        nfkd: {},\n        ccc: {}\n    },\n    zoneinfo: {\n        \"Etc/UTC\":{\"o\":\"0:0\",\"f\":\"UTC\"},\n        \"local\":{\"f\":\"local\"}\n    },\n    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype: null,\n    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype_c: null,\n    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype_l: null,\n    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype_m: null,\n    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype_p: null,\n    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype_z: null,\n    /** @type {null|Object.<string,Array.<Array.<number>>>} */ scriptToRange: null,\n    /** @type {null|Object.<string,string|Object.<string|Object.<string,string>>>} */ dateformats: null\n};\n\nif (typeof(window) !== 'undefined') {\n    window[\"ilib\"] = ilib;\n}\n\n// export ilib for use as a module in nodejs\nif (typeof(exports) !== 'undefined') {\n    exports.ilib = ilib;\n}\n\nilib.pseudoLocales = [\"zxx-XX\"];\n\n/**\n * Sets the pseudo locale. Pseudolocalization (or pseudo-localization) is used for testing\n * internationalization aspects of software. Instead of translating the text of the software\n * into a foreign language, as in the process of localization, the textual elements of an application\n * are replaced with an altered version of the original language.These specific alterations make\n * the original words appear readable, but include the most problematic characteristics of\n * the world's languages: varying length of text or characters, language direction, and so on.\n * Regular Latin pseudo locale: eu-ES and RTL pseudo locale: ps-AF\n *\n * @param {string|undefined|null} localename the locale specifier for the pseudo locale\n */\nilib.setAsPseudoLocale = function (localename) {\n   if (localename) {\n\t   ilib.pseudoLocales.push(localename)\n   }\n};\n\n/**\n * Reset the list of pseudo locales back to the default single locale of zxx-XX.\n */\nilib.clearPseudoLocales = function() {\n\tilib.pseudoLocales = [\"zxx-XX\"];\n};\n\n/**\n * Return the name of the platform\n * @private\n * @static\n * @return {string} string naming the platform\n */\nilib._getPlatform = function () {\n    if (!ilib._platform) {\n        if (typeof(environment) !== 'undefined') {\n            ilib._platform = \"rhino\";\n        } else if (typeof(process) !== 'undefined' || typeof(require) !== 'undefined') {\n            ilib._platform = \"nodejs\";\n        } else if (typeof(window) !== 'undefined') {\n            ilib._platform = (typeof(PalmSystem) !== 'undefined') ? \"webos\" : \"browser\";\n        } else {\n            ilib._platform = \"unknown\";\n        }\n    }\n    return ilib._platform;\n};\n\n/**\n * If this ilib is running in a browser, return the name of that browser.\n * @private\n * @static\n * @return {string|undefined} the name of the browser that this is running in (\"firefox\", \"chrome\", \"ie\",\n * \"safari\", or \"opera\"), or undefined if this is not running in a browser or if\n * the browser name could not be determined\n */\nilib._getBrowser = function () {\n\tvar browser = undefined;\n\tif (ilib._getPlatform() === \"browser\") {\n\t\tif (navigator && navigator.userAgent) {\n\t\t\tif (navigator.userAgent.indexOf(\"Firefox\") > -1) {\n\t\t\t\tbrowser = \"firefox\";\n\t\t\t}\n\t\t\tif (navigator.userAgent.indexOf(\"Opera\") > -1) {\n\t\t\t\tbrowser = \"opera\";\n\t\t\t}\n\t\t\tif (navigator.userAgent.indexOf(\"Chrome\") > -1) {\n\t\t\t\tbrowser = \"chrome\";\n\t\t\t}\n\t\t\tif (navigator.userAgent.indexOf(\" .NET\") > -1) {\n\t\t\t\tbrowser = \"ie\";\n\t\t\t}\n\t\t\tif (navigator.userAgent.indexOf(\"Safari\") > -1) {\n\t\t\t\t// chrome also has the string Safari in its userAgent, but the chrome case is\n\t\t\t\t// already taken care of above\n\t\t\t\tbrowser = \"safari\";\n\t\t\t}\n\t\t}\n\t}\n\treturn browser;\n};\n\n/**\n * Return true if the global variable is defined on this platform.\n * @private\n * @static\n * @return {boolean} true if the global variable is defined on this platform, false otherwise\n */\nilib._isGlobal = function(name) {\n    switch (ilib._getPlatform()) {\n        case \"rhino\":\n            var top = (function() {\n              return (typeof global === 'object') ? global : this;\n            })();\n            return typeof(top[name]) !== undefined;\n        case \"nodejs\":\n            var root = typeof(global) !== 'undefined' ? global : this;\n            return root && typeof(root[name]) !== undefined;\n\n        default:\n            return typeof(window[name]) !== undefined;\n    }\n};\n\n/**\n * Sets the default locale for all of ilib. This locale will be used\n * when no explicit locale is passed to any ilib class. If the default\n * locale is not set, ilib will attempt to use the locale of the\n * environment it is running in, if it can find that. If not, it will\n * default to the locale \"en-US\". If a type of parameter is string,\n * ilib will take only well-formed BCP-47 tag  <p>\n *\n * Depends directive: !depends ilibglobal.js\n *\n * @static\n * @param {string|undefined|null} spec the locale specifier for the default locale\n */\nilib.setLocale = function (spec) {\n    if (typeof(spec) === 'string' || !spec) {\n        ilib.locale = spec;\n    }\n    // else ignore other data types, as we don't have the dependencies\n    // to look into them to find a locale\n};\n\n/**\n * Return the default locale for all of ilib if one has been set. This\n * locale will be used when no explicit locale is passed to any ilib\n * class. If the default\n * locale is not set, ilib will attempt to use the locale of the\n * environment it is running in, if it can find that. If not, it will\n * default to the locale \"en-US\".<p>\n *\n * Depends directive: !depends ilibglobal.js\n *\n * @static\n * @return {string} the locale specifier for the default locale\n */\nilib.getLocale = function () {\n    if (typeof(ilib.locale) !== 'string') {\n        if (typeof(navigator) !== 'undefined' && typeof(navigator.language) !== 'undefined') {\n            // running in a browser\n            ilib.locale = navigator.language.substring(0,3) + navigator.language.substring(3,5).toUpperCase();  // FF/Opera/Chrome/Webkit\n            if (!ilib.locale) {\n                // IE on Windows\n                var lang = typeof(navigator.browserLanguage) !== 'undefined' ?\n                    navigator.browserLanguage :\n                    (typeof(navigator.userLanguage) !== 'undefined' ?\n                        navigator.userLanguage :\n                        (typeof(navigator.systemLanguage) !== 'undefined' ?\n                            navigator.systemLanguage :\n                            undefined));\n                if (typeof(lang) !== 'undefined' && lang) {\n                    // for some reason, MS uses lower case region tags\n                    ilib.locale = lang.substring(0,3) + lang.substring(3,5).toUpperCase();\n                }\n            }\n        } else if (typeof(PalmSystem) !== 'undefined' && typeof(PalmSystem.locales) !== 'undefined') {\n            // webOS\n            if (typeof(PalmSystem.locales.UI) != 'undefined' && PalmSystem.locales.UI.length > 0) {\n                ilib.locale = PalmSystem.locales.UI;\n            }\n        } else if (typeof(environment) !== 'undefined' && typeof(environment.user) !== 'undefined') {\n            // running under rhino\n            if (typeof(environment.user.language) === 'string' && environment.user.language.length > 0) {\n                ilib.locale = environment.user.language;\n                if (typeof(environment.user.country) === 'string' && environment.user.country.length > 0) {\n                    ilib.locale += '-' + environment.user.country;\n                }\n            }\n        } else if (typeof(process) !== 'undefined' && typeof(process.env) !== 'undefined') {\n            // running under nodejs\n            var lang = process.env.LANG || process.env.LC_ALL;\n            // the LANG variable on unix is in the form \"lang_REGION.CHARSET\"\n            // where language and region are the correct ISO codes separated by\n            // an underscore. This translate it back to the BCP-47 form.\n            if (lang && lang !== 'undefined') {\n                ilib.locale = lang.substring(0,2).toLowerCase() + '-' + lang.substring(3,5).toUpperCase();\n            }\n        }\n\n        ilib.locale = typeof(ilib.locale) === 'string' ? ilib.locale : 'en-US';\n    }\n    return ilib.locale;\n};\n\n/**\n * Sets the default time zone for all of ilib. This time zone will be used when\n * no explicit time zone is passed to any ilib class. If the default time zone\n * is not set, ilib will attempt to use the time zone of the\n * environment it is running in, if it can find that. If not, it will\n * default to the the UTC zone \"Etc/UTC\".<p>\n *\n * Depends directive: !depends ilibglobal.js\n *\n * @static\n * @param {string} tz the name of the time zone to set as the default time zone\n */\nilib.setTimeZone = function (tz) {\n    ilib.tz = tz || ilib.tz;\n};\n\n/**\n * Return the default time zone for all of ilib if one has been set. This\n * time zone will be used when no explicit time zone is passed to any ilib\n * class. If the default time zone\n * is not set, ilib will attempt to use the locale of the\n * environment it is running in, if it can find that. If not, it will\n * default to the the zone \"local\".<p>\n *\n * Depends directive: !depends ilibglobal.js\n *\n * @static\n * @return {string} the default time zone for ilib\n */\nilib.getTimeZone = function() {\n    if (typeof(ilib.tz) === 'undefined') {\n        if (typeof(navigator) !== 'undefined' && typeof(navigator.timezone) !== 'undefined') {\n            // running in a browser\n            if (navigator.timezone.length > 0) {\n                ilib.tz = navigator.timezone;\n            }\n        } else if (typeof(PalmSystem) !== 'undefined' && typeof(PalmSystem.timezone) !== 'undefined') {\n            // running in webkit on webOS\n            if (PalmSystem.timezone.length > 0) {\n                ilib.tz = PalmSystem.timezone;\n            }\n        } else if (typeof(environment) !== 'undefined' && typeof(environment.user) !== 'undefined') {\n            // running under rhino\n            if (typeof(environment.user.timezone) !== 'undefined' && environment.user.timezone.length > 0) {\n                ilib.tz = environment.user.timezone;\n            }\n        } else if (typeof(process) !== 'undefined' && typeof(process.env) !== 'undefined') {\n            // running in nodejs\n            if (process.env.TZ && process.env.TZ !== \"undefined\") {\n                ilib.tz = process.env.TZ;\n            }\n        }\n\n        ilib.tz = ilib.tz || \"local\";\n    }\n\n    return ilib.tz;\n};\n\n/**\n * @class\n * Defines the interface for the loader class for ilib. The main method of the\n * loader object is loadFiles(), which loads a set of requested locale data files\n * from where-ever it is stored.\n * @interface\n */\nilib.Loader = function() {};\n\n/**\n * Load a set of files from where-ever it is stored.<p>\n *\n * This is the main function define a callback function for loading missing locale\n * data or resources.\n * If this copy of ilib is assembled without including the required locale data\n * or resources, then that data can be lazy loaded dynamically when it is\n * needed by calling this method. Each ilib class will first\n * check for the existence of data under ilib.data, and if it is not there,\n * it will attempt to load it by calling this method of the laoder, and then place\n * it there.<p>\n *\n * Suggested implementations of this method might load files\n * directly from disk under nodejs or rhino, or within web pages, to load\n * files from the server with XHR calls.<p>\n *\n * The first parameter to this method, paths, is an array of relative paths within\n * the ilib dir structure for the\n * requested data. These paths will already have the locale spec integrated\n * into them, so no further tweaking needs to happen to load the data. Simply\n * load the named files. The second\n * parameter tells the loader whether to load the files synchronously or asynchronously.\n * If the sync parameters is false, then the onLoad function must also be specified.\n * The third parameter gives extra parameters to the loader passed from the calling\n * code. This may contain any property/value pairs.  The last parameter, callback,\n * is a callback function to call when all of the data is finishing loading. Make\n * sure to call the callback with the context of \"this\" so that the caller has their\n * context back again.<p>\n *\n * The loader function must be able to operate either synchronously or asychronously.\n * If the loader function is called with an undefined callback function, it is\n * expected to load the data synchronously, convert it to javascript\n * objects, and return the array of json objects as the return value of the\n * function. If the loader\n * function is called with a callback function, it may load the data\n * synchronously or asynchronously (doesn't matter which) as long as it calls\n * the callback function with the data converted to a javascript objects\n * when it becomes available. If a particular file could not be loaded, the\n * loader function should put undefined into the corresponding entry in the\n * results array.\n * Note that it is important that all the data is loaded before the callback\n * is called.<p>\n *\n * An example implementation for nodejs might be:\n *\n * <pre>\n * var fs = require(\"fs\");\n *\n * var myLoader = function() {};\n * myLoader.prototype = new ilib.Loader();\n * myLoader.prototype.constructor = myLoader;\n * myLoader.prototype.loadFiles = function(paths, sync, params, callback) {\n *    if (sync) {\n *        var ret = [];\n *        // synchronous load -- just return the result\n *        paths.forEach(function (path) {\n *            var json = fs.readFileSync(path, \"utf-8\");\n *            ret.push(json ? JSON.parse(json) : undefined);\n *        });\n *\n *        return ret;\n *    }\n *    this.callback = callback;\n *\n *    // asynchronous\n *    this.results = [];\n *    this._loadFilesAsync(paths);\n * }\n * myLoader.prototype._loadFilesAsync = function (paths) {\n *    if (paths.length > 0) {\n *        var file = paths.shift();\n *        fs.readFile(file, \"utf-8\", function(err, json) {\n *            this.results.push(err ? undefined : JSON.parse(json));\n *            // call self recursively so that the callback is only called at the end\n *            // when all the files are loaded sequentially\n *            if (paths.length > 0) {\n *                this._loadFilesAsync(paths);\n *            } else {\n *                this.callback(this.results);\n *            }\n *        });\n *     }\n * }\n *\n * // bind to \"this\" so that \"this\" is relative to your own instance\n * ilib.setLoaderCallback(new myLoader());\n * </pre>\n\n * @param {Array.<string>} paths An array of paths to load from wherever the files are stored\n * @param {Boolean} sync if true, load the files synchronously, and false means asynchronously\n * @param {Object} params an object with any extra parameters for the loader. These can be\n * anything. The caller of the ilib class passes these parameters in. Presumably, the code that\n * calls ilib and the code that provides the loader are together and can have a private\n * agreement between them about what the parameters should contain.\n * @param {function(Object)} callback function to call when the files are all loaded. The\n * parameter of the callback function is the contents of the files.\n */\nilib.Loader.prototype.loadFiles = function (paths, sync, params, callback) {};\n\n/**\n * Return all files available for loading using this loader instance.\n * This method returns an object where the properties are the paths to\n * directories where files are loaded from and the values are an array\n * of strings containing the relative paths under the directory of each\n * file that can be loaded.<p>\n *\n * Example:\n *  <pre>\n *  {\n *      \"/usr/share/javascript/ilib/locale\": [\n *          \"dateformats.json\",\n *          \"aa/dateformats.json\",\n *          \"af/dateformats.json\",\n *          \"agq/dateformats.json\",\n *          \"ak/dateformats.json\",\n *          ...\n *          \"zxx/dateformats.json\"\n *      ]\n *  }\n *  </pre>\n * @returns {Object} a hash containing directory names and\n * paths to file that can be loaded by this loader\n */\nilib.Loader.prototype.listAvailableFiles = function() {};\n\n/**\n * Return true if the file in the named path is available for loading using\n * this loader. The path may be given as an absolute path, in which case\n * only that file is checked, or as a relative path, in which case, the\n * relative path may appear underneath any of the directories that the loader\n * knows about.\n * @returns {boolean} true if the file in the named path is available for loading, and\n * false otherwise\n */\nilib.Loader.prototype.isAvailable = function(path) {};\n\n/**\n * Set the custom loader used to load ilib's locale data in your environment.\n * The instance passed in must implement the ilib.Loader interface. See the\n * ilib.Loader class documentation for more information about loaders.\n *\n * @static\n * @param {ilib.Loader} loader class to call to access the requested data.\n * @return {boolean} true if the loader was installed correctly, or false\n * if not\n */\nilib.setLoaderCallback = function(loader) {\n    // only a basic check\n    if ((typeof(loader) === 'object' && loader instanceof ilib.Loader) ||\n            typeof(loader) === 'function' || typeof(loader) === 'undefined') {\n        // console.log(\"setting callback loader to \" + (loader ? loader.name : \"undefined\"));\n        ilib._load = loader;\n        return true;\n    }\n    return false;\n};\n\n/*\n * locale.js - Locale specifier definition\n *\n * Copyright © 2012-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ilibglobal.js\n\n/**\n * @class\n * Create a new locale instance. Locales are specified either with a specifier string\n * that follows the BCP-47 convention (roughly: \"language-region-script-variant\") or\n * with 4 parameters that specify the language, region, variant, and script individually.<p>\n *\n * The language is given as an ISO 639-1 two-letter, lower-case language code. You\n * can find a full list of these codes at\n * <a href=\"http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\">http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes</a><p>\n *\n * The region is given as an ISO 3166-1 two-letter, upper-case region code. You can\n * find a full list of these codes at\n * <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2</a>.<p>\n *\n * The variant is any string that does not contain a dash which further differentiates\n * locales from each other.<p>\n *\n * The script is given as the ISO 15924 four-letter script code. In some locales,\n * text may be validly written in more than one script. For example, Serbian is often\n * written in both Latin and Cyrillic, though not usually mixed together. You can find a\n * full list of these codes at\n * <a href=\"http://en.wikipedia.org/wiki/ISO_15924#List_of_codes\">http://en.wikipedia.org/wiki/ISO_15924#List_of_codes</a>.<p>\n *\n * As an example in ilib, the script can be used in the date formatter. Dates formatted\n * in Serbian could have day-of-week names or month names written in the Latin\n * or Cyrillic script. Often one script is default such that sr-SR-Latn is the same\n * as sr-SR so the script code \"Latn\" can be left off of the locale spec.<p>\n *\n * Each part is optional, and an empty string in the specifier before or after a\n * dash or as a parameter to the constructor denotes an unspecified value. In this\n * case, many of the ilib functions will treat the locale as generic. For example\n * the locale \"en-\" is equivalent to \"en\" and to \"en--\" and denotes a locale\n * of \"English\" with an unspecified region and variant, which typically matches\n * any region or variant.<p>\n *\n * Without any arguments to the constructor, this function returns the locale of\n * the host Javascript engine.<p>\n *\n * Depends directive: !depends locale.js\n *\n * @constructor\n * @param {?string|ilib.Locale=} language the ISO 639 2-letter code for the language, or a full\n * locale spec in BCP-47 format, or another ilib.Locale instance to copy from\n * @param {string=} region the ISO 3166 2-letter code for the region\n * @param {string=} variant the name of the variant of this locale, if any\n * @param {string=} script the ISO 15924 code of the script for this locale, if any\n */\nilib.Locale = function(language, region, variant, script) {\n\tif (typeof(region) === 'undefined') {\n\t\tvar spec = language || ilib.getLocale();\n\n\t\tif (typeof(spec) === 'string') {\n\t\t\tvar parts = spec.split('-');\n\n\n\t        for ( var i = 0; i < parts.length; i++ ) {\n\t        \tif (ilib.Locale._isLanguageCode(parts[i])) {\n\t    \t\t\t/**\n\t    \t\t\t * @private\n\t    \t\t\t * @type {string|undefined}\n\t    \t\t\t */\n\t        \t\tthis.language = parts[i];\n\t        \t} else if (ilib.Locale._isRegionCode(parts[i])) {\n\t    \t\t\t/**\n\t    \t\t\t * @private\n\t    \t\t\t * @type {string|undefined}\n\t    \t\t\t */\n\t        \t\tthis.region = parts[i];\n\t        \t} else if (ilib.Locale._isScriptCode(parts[i])) {\n\t    \t\t\t/**\n\t    \t\t\t * @private\n\t    \t\t\t * @type {string|undefined}\n\t    \t\t\t */\n\t        \t\tthis.script = parts[i];\n\t        \t} else {\n\t    \t\t\t/**\n\t    \t\t\t * @private\n\t    \t\t\t * @type {string|undefined}\n\t    \t\t\t */\n\t        \t\tthis.variant = parts[i];\n\t        \t}\n\t        }\n\t        this.language = this.language || undefined;\n\t        this.region = this.region || undefined;\n\t        this.script = this.script || undefined;\n\t        this.variant = this.variant || undefined;\n\t\t} else if (typeof(spec) === 'object') {\n\t        this.language = spec.language || undefined;\n\t        this.region = spec.region || undefined;\n\t        this.script = spec.script || undefined;\n\t        this.variant = spec.variant || undefined;\n\t\t}\n\t} else {\n\t\tif (language) {\n\t\t\tlanguage = language.trim();\n\t\t\tthis.language = language.length > 0 ? language.toLowerCase() : undefined;\n\t\t} else {\n\t\t\tthis.language = undefined;\n\t\t}\n\t\tif (region) {\n\t\t\tregion = region.trim();\n\t\t\tthis.region = region.length > 0 ? region.toUpperCase() : undefined;\n\t\t} else {\n\t\t\tthis.region = undefined;\n\t\t}\n\t\tif (variant) {\n\t\t\tvariant = variant.trim();\n\t\t\tthis.variant = variant.length > 0 ? variant : undefined;\n\t\t} else {\n\t\t\tthis.variant = undefined;\n\t\t}\n\t\tif (script) {\n\t\t\tscript = script.trim();\n\t\t\tthis.script = script.length > 0 ? script : undefined;\n\t\t} else {\n\t\t\tthis.script = undefined;\n\t\t}\n\t}\n\tthis._genSpec();\n};\n\n// from http://en.wikipedia.org/wiki/ISO_3166-1\nilib.Locale.a2toa3regmap = {\n\t\"AF\": \"AFG\",\n\t\"AX\": \"ALA\",\n\t\"AL\": \"ALB\",\n\t\"DZ\": \"DZA\",\n\t\"AS\": \"ASM\",\n\t\"AD\": \"AND\",\n\t\"AO\": \"AGO\",\n\t\"AI\": \"AIA\",\n\t\"AQ\": \"ATA\",\n\t\"AG\": \"ATG\",\n\t\"AR\": \"ARG\",\n\t\"AM\": \"ARM\",\n\t\"AW\": \"ABW\",\n\t\"AU\": \"AUS\",\n\t\"AT\": \"AUT\",\n\t\"AZ\": \"AZE\",\n\t\"BS\": \"BHS\",\n\t\"BH\": \"BHR\",\n\t\"BD\": \"BGD\",\n\t\"BB\": \"BRB\",\n\t\"BY\": \"BLR\",\n\t\"BE\": \"BEL\",\n\t\"BZ\": \"BLZ\",\n\t\"BJ\": \"BEN\",\n\t\"BM\": \"BMU\",\n\t\"BT\": \"BTN\",\n\t\"BO\": \"BOL\",\n\t\"BQ\": \"BES\",\n\t\"BA\": \"BIH\",\n\t\"BW\": \"BWA\",\n\t\"BV\": \"BVT\",\n\t\"BR\": \"BRA\",\n\t\"IO\": \"IOT\",\n\t\"BN\": \"BRN\",\n\t\"BG\": \"BGR\",\n\t\"BF\": \"BFA\",\n\t\"BI\": \"BDI\",\n\t\"KH\": \"KHM\",\n\t\"CM\": \"CMR\",\n\t\"CA\": \"CAN\",\n\t\"CV\": \"CPV\",\n\t\"KY\": \"CYM\",\n\t\"CF\": \"CAF\",\n\t\"TD\": \"TCD\",\n\t\"CL\": \"CHL\",\n\t\"CN\": \"CHN\",\n\t\"CX\": \"CXR\",\n\t\"CC\": \"CCK\",\n\t\"CO\": \"COL\",\n\t\"KM\": \"COM\",\n\t\"CG\": \"COG\",\n\t\"CD\": \"COD\",\n\t\"CK\": \"COK\",\n\t\"CR\": \"CRI\",\n\t\"CI\": \"CIV\",\n\t\"HR\": \"HRV\",\n\t\"CU\": \"CUB\",\n\t\"CW\": \"CUW\",\n\t\"CY\": \"CYP\",\n\t\"CZ\": \"CZE\",\n\t\"DK\": \"DNK\",\n\t\"DJ\": \"DJI\",\n\t\"DM\": \"DMA\",\n\t\"DO\": \"DOM\",\n\t\"EC\": \"ECU\",\n\t\"EG\": \"EGY\",\n\t\"SV\": \"SLV\",\n\t\"GQ\": \"GNQ\",\n\t\"ER\": \"ERI\",\n\t\"EE\": \"EST\",\n\t\"ET\": \"ETH\",\n\t\"FK\": \"FLK\",\n\t\"FO\": \"FRO\",\n\t\"FJ\": \"FJI\",\n\t\"FI\": \"FIN\",\n\t\"FR\": \"FRA\",\n\t\"GF\": \"GUF\",\n\t\"PF\": \"PYF\",\n\t\"TF\": \"ATF\",\n\t\"GA\": \"GAB\",\n\t\"GM\": \"GMB\",\n\t\"GE\": \"GEO\",\n\t\"DE\": \"DEU\",\n\t\"GH\": \"GHA\",\n\t\"GI\": \"GIB\",\n\t\"GR\": \"GRC\",\n\t\"GL\": \"GRL\",\n\t\"GD\": \"GRD\",\n\t\"GP\": \"GLP\",\n\t\"GU\": \"GUM\",\n\t\"GT\": \"GTM\",\n\t\"GG\": \"GGY\",\n\t\"GN\": \"GIN\",\n\t\"GW\": \"GNB\",\n\t\"GY\": \"GUY\",\n\t\"HT\": \"HTI\",\n\t\"HM\": \"HMD\",\n\t\"VA\": \"VAT\",\n\t\"HN\": \"HND\",\n\t\"HK\": \"HKG\",\n\t\"HU\": \"HUN\",\n\t\"IS\": \"ISL\",\n\t\"IN\": \"IND\",\n\t\"ID\": \"IDN\",\n\t\"IR\": \"IRN\",\n\t\"IQ\": \"IRQ\",\n\t\"IE\": \"IRL\",\n\t\"IM\": \"IMN\",\n\t\"IL\": \"ISR\",\n\t\"IT\": \"ITA\",\n\t\"JM\": \"JAM\",\n\t\"JP\": \"JPN\",\n\t\"JE\": \"JEY\",\n\t\"JO\": \"JOR\",\n\t\"KZ\": \"KAZ\",\n\t\"KE\": \"KEN\",\n\t\"KI\": \"KIR\",\n\t\"KP\": \"PRK\",\n\t\"KR\": \"KOR\",\n\t\"KW\": \"KWT\",\n\t\"KG\": \"KGZ\",\n\t\"LA\": \"LAO\",\n\t\"LV\": \"LVA\",\n\t\"LB\": \"LBN\",\n\t\"LS\": \"LSO\",\n\t\"LR\": \"LBR\",\n\t\"LY\": \"LBY\",\n\t\"LI\": \"LIE\",\n\t\"LT\": \"LTU\",\n\t\"LU\": \"LUX\",\n\t\"MO\": \"MAC\",\n\t\"MK\": \"MKD\",\n\t\"MG\": \"MDG\",\n\t\"MW\": \"MWI\",\n\t\"MY\": \"MYS\",\n\t\"MV\": \"MDV\",\n\t\"ML\": \"MLI\",\n\t\"MT\": \"MLT\",\n\t\"MH\": \"MHL\",\n\t\"MQ\": \"MTQ\",\n\t\"MR\": \"MRT\",\n\t\"MU\": \"MUS\",\n\t\"YT\": \"MYT\",\n\t\"MX\": \"MEX\",\n\t\"FM\": \"FSM\",\n\t\"MD\": \"MDA\",\n\t\"MC\": \"MCO\",\n\t\"MN\": \"MNG\",\n\t\"ME\": \"MNE\",\n\t\"MS\": \"MSR\",\n\t\"MA\": \"MAR\",\n\t\"MZ\": \"MOZ\",\n\t\"MM\": \"MMR\",\n\t\"NA\": \"NAM\",\n\t\"NR\": \"NRU\",\n\t\"NP\": \"NPL\",\n\t\"NL\": \"NLD\",\n\t\"NC\": \"NCL\",\n\t\"NZ\": \"NZL\",\n\t\"NI\": \"NIC\",\n\t\"NE\": \"NER\",\n\t\"NG\": \"NGA\",\n\t\"NU\": \"NIU\",\n\t\"NF\": \"NFK\",\n\t\"MP\": \"MNP\",\n\t\"NO\": \"NOR\",\n\t\"OM\": \"OMN\",\n\t\"PK\": \"PAK\",\n\t\"PW\": \"PLW\",\n\t\"PS\": \"PSE\",\n\t\"PA\": \"PAN\",\n\t\"PG\": \"PNG\",\n\t\"PY\": \"PRY\",\n\t\"PE\": \"PER\",\n\t\"PH\": \"PHL\",\n\t\"PN\": \"PCN\",\n\t\"PL\": \"POL\",\n\t\"PT\": \"PRT\",\n\t\"PR\": \"PRI\",\n\t\"QA\": \"QAT\",\n\t\"RE\": \"REU\",\n\t\"RO\": \"ROU\",\n\t\"RU\": \"RUS\",\n\t\"RW\": \"RWA\",\n\t\"BL\": \"BLM\",\n\t\"SH\": \"SHN\",\n\t\"KN\": \"KNA\",\n\t\"LC\": \"LCA\",\n\t\"MF\": \"MAF\",\n\t\"PM\": \"SPM\",\n\t\"VC\": \"VCT\",\n\t\"WS\": \"WSM\",\n\t\"SM\": \"SMR\",\n\t\"ST\": \"STP\",\n\t\"SA\": \"SAU\",\n\t\"SN\": \"SEN\",\n\t\"RS\": \"SRB\",\n\t\"SC\": \"SYC\",\n\t\"SL\": \"SLE\",\n\t\"SG\": \"SGP\",\n\t\"SX\": \"SXM\",\n\t\"SK\": \"SVK\",\n\t\"SI\": \"SVN\",\n\t\"SB\": \"SLB\",\n\t\"SO\": \"SOM\",\n\t\"ZA\": \"ZAF\",\n\t\"GS\": \"SGS\",\n\t\"SS\": \"SSD\",\n\t\"ES\": \"ESP\",\n\t\"LK\": \"LKA\",\n\t\"SD\": \"SDN\",\n\t\"SR\": \"SUR\",\n\t\"SJ\": \"SJM\",\n\t\"SZ\": \"SWZ\",\n\t\"SE\": \"SWE\",\n\t\"CH\": \"CHE\",\n\t\"SY\": \"SYR\",\n\t\"TW\": \"TWN\",\n\t\"TJ\": \"TJK\",\n\t\"TZ\": \"TZA\",\n\t\"TH\": \"THA\",\n\t\"TL\": \"TLS\",\n\t\"TG\": \"TGO\",\n\t\"TK\": \"TKL\",\n\t\"TO\": \"TON\",\n\t\"TT\": \"TTO\",\n\t\"TN\": \"TUN\",\n\t\"TR\": \"TUR\",\n\t\"TM\": \"TKM\",\n\t\"TC\": \"TCA\",\n\t\"TV\": \"TUV\",\n\t\"UG\": \"UGA\",\n\t\"UA\": \"UKR\",\n\t\"AE\": \"ARE\",\n\t\"GB\": \"GBR\",\n\t\"US\": \"USA\",\n\t\"UM\": \"UMI\",\n\t\"UY\": \"URY\",\n\t\"UZ\": \"UZB\",\n\t\"VU\": \"VUT\",\n\t\"VE\": \"VEN\",\n\t\"VN\": \"VNM\",\n\t\"VG\": \"VGB\",\n\t\"VI\": \"VIR\",\n\t\"WF\": \"WLF\",\n\t\"EH\": \"ESH\",\n\t\"YE\": \"YEM\",\n\t\"ZM\": \"ZMB\",\n\t\"ZW\": \"ZWE\"\n};\n\n\nilib.Locale.a1toa3langmap = {\n\t\"ab\": \"abk\",\n\t\"aa\": \"aar\",\n\t\"af\": \"afr\",\n\t\"ak\": \"aka\",\n\t\"sq\": \"sqi\",\n\t\"am\": \"amh\",\n\t\"ar\": \"ara\",\n\t\"an\": \"arg\",\n\t\"hy\": \"hye\",\n\t\"as\": \"asm\",\n\t\"av\": \"ava\",\n\t\"ae\": \"ave\",\n\t\"ay\": \"aym\",\n\t\"az\": \"aze\",\n\t\"bm\": \"bam\",\n\t\"ba\": \"bak\",\n\t\"eu\": \"eus\",\n\t\"be\": \"bel\",\n\t\"bn\": \"ben\",\n\t\"bh\": \"bih\",\n\t\"bi\": \"bis\",\n\t\"bs\": \"bos\",\n\t\"br\": \"bre\",\n\t\"bg\": \"bul\",\n\t\"my\": \"mya\",\n\t\"ca\": \"cat\",\n\t\"ch\": \"cha\",\n\t\"ce\": \"che\",\n\t\"ny\": \"nya\",\n\t\"zh\": \"zho\",\n\t\"cv\": \"chv\",\n\t\"kw\": \"cor\",\n\t\"co\": \"cos\",\n\t\"cr\": \"cre\",\n\t\"hr\": \"hrv\",\n\t\"cs\": \"ces\",\n\t\"da\": \"dan\",\n\t\"dv\": \"div\",\n\t\"nl\": \"nld\",\n\t\"dz\": \"dzo\",\n\t\"en\": \"eng\",\n\t\"eo\": \"epo\",\n\t\"et\": \"est\",\n\t\"ee\": \"ewe\",\n\t\"fo\": \"fao\",\n\t\"fj\": \"fij\",\n\t\"fi\": \"fin\",\n\t\"fr\": \"fra\",\n\t\"ff\": \"ful\",\n\t\"gl\": \"glg\",\n\t\"ka\": \"kat\",\n\t\"de\": \"deu\",\n\t\"el\": \"ell\",\n\t\"gn\": \"grn\",\n\t\"gu\": \"guj\",\n\t\"ht\": \"hat\",\n\t\"ha\": \"hau\",\n\t\"he\": \"heb\",\n\t\"hz\": \"her\",\n\t\"hi\": \"hin\",\n\t\"ho\": \"hmo\",\n\t\"hu\": \"hun\",\n\t\"ia\": \"ina\",\n\t\"id\": \"ind\",\n\t\"ie\": \"ile\",\n\t\"ga\": \"gle\",\n\t\"ig\": \"ibo\",\n\t\"ik\": \"ipk\",\n\t\"io\": \"ido\",\n\t\"is\": \"isl\",\n\t\"it\": \"ita\",\n\t\"iu\": \"iku\",\n\t\"ja\": \"jpn\",\n\t\"jv\": \"jav\",\n\t\"kl\": \"kal\",\n\t\"kn\": \"kan\",\n\t\"kr\": \"kau\",\n\t\"ks\": \"kas\",\n\t\"kk\": \"kaz\",\n\t\"km\": \"khm\",\n\t\"ki\": \"kik\",\n\t\"rw\": \"kin\",\n\t\"ky\": \"kir\",\n\t\"kv\": \"kom\",\n\t\"kg\": \"kon\",\n\t\"ko\": \"kor\",\n\t\"ku\": \"kur\",\n\t\"kj\": \"kua\",\n\t\"la\": \"lat\",\n\t\"lb\": \"ltz\",\n\t\"lg\": \"lug\",\n\t\"li\": \"lim\",\n\t\"ln\": \"lin\",\n\t\"lo\": \"lao\",\n\t\"lt\": \"lit\",\n\t\"lu\": \"lub\",\n\t\"lv\": \"lav\",\n\t\"gv\": \"glv\",\n\t\"mk\": \"mkd\",\n\t\"mg\": \"mlg\",\n\t\"ms\": \"msa\",\n\t\"ml\": \"mal\",\n\t\"mt\": \"mlt\",\n\t\"mi\": \"mri\",\n\t\"mr\": \"mar\",\n\t\"mh\": \"mah\",\n\t\"mn\": \"mon\",\n\t\"na\": \"nau\",\n\t\"nv\": \"nav\",\n\t\"nb\": \"nob\",\n\t\"nd\": \"nde\",\n\t\"ne\": \"nep\",\n\t\"ng\": \"ndo\",\n\t\"nn\": \"nno\",\n\t\"no\": \"nor\",\n\t\"ii\": \"iii\",\n\t\"nr\": \"nbl\",\n\t\"oc\": \"oci\",\n\t\"oj\": \"oji\",\n\t\"cu\": \"chu\",\n\t\"om\": \"orm\",\n\t\"or\": \"ori\",\n\t\"os\": \"oss\",\n\t\"pa\": \"pan\",\n\t\"pi\": \"pli\",\n\t\"fa\": \"fas\",\n\t\"pl\": \"pol\",\n\t\"ps\": \"pus\",\n\t\"pt\": \"por\",\n\t\"qu\": \"que\",\n\t\"rm\": \"roh\",\n\t\"rn\": \"run\",\n\t\"ro\": \"ron\",\n\t\"ru\": \"rus\",\n\t\"sa\": \"san\",\n\t\"sc\": \"srd\",\n\t\"sd\": \"snd\",\n\t\"se\": \"sme\",\n\t\"sm\": \"smo\",\n\t\"sg\": \"sag\",\n\t\"sr\": \"srp\",\n\t\"gd\": \"gla\",\n\t\"sn\": \"sna\",\n\t\"si\": \"sin\",\n\t\"sk\": \"slk\",\n\t\"sl\": \"slv\",\n\t\"so\": \"som\",\n\t\"st\": \"sot\",\n\t\"az\": \"azb\",\n\t\"es\": \"spa\",\n\t\"su\": \"sun\",\n\t\"sw\": \"swa\",\n\t\"ss\": \"ssw\",\n\t\"sv\": \"swe\",\n\t\"ta\": \"tam\",\n\t\"te\": \"tel\",\n\t\"tg\": \"tgk\",\n\t\"th\": \"tha\",\n\t\"ti\": \"tir\",\n\t\"bo\": \"bod\",\n\t\"tk\": \"tuk\",\n\t\"tl\": \"tgl\",\n\t\"tn\": \"tsn\",\n\t\"to\": \"ton\",\n\t\"tr\": \"tur\",\n\t\"ts\": \"tso\",\n\t\"tt\": \"tat\",\n\t\"tw\": \"twi\",\n\t\"ty\": \"tah\",\n\t\"ug\": \"uig\",\n\t\"uk\": \"ukr\",\n\t\"ur\": \"urd\",\n\t\"uz\": \"uzb\",\n\t\"ve\": \"ven\",\n\t\"vi\": \"vie\",\n\t\"vo\": \"vol\",\n\t\"wa\": \"wln\",\n\t\"cy\": \"cym\",\n\t\"wo\": \"wol\",\n\t\"fy\": \"fry\",\n\t\"xh\": \"xho\",\n\t\"yi\": \"yid\",\n\t\"yo\": \"yor\",\n\t\"za\": \"zha\",\n\t\"zu\": \"zul\"\n};\n\n/**\n * Tell whether or not the str does not start with a lower case ASCII char.\n * @private\n * @param {string} str the char to check\n * @return {boolean} true if the char is not a lower case ASCII char\n */\nilib.Locale._notLower = function(str) {\n\t// do this with ASCII only so we don't have to depend on the CType functions\n\tvar ch = str.charCodeAt(0);\n\treturn ch < 97 || ch > 122;\n};\n\n/**\n * Tell whether or not the str does not start with an upper case ASCII char.\n * @private\n * @param {string} str the char to check\n * @return {boolean} true if the char is a not an upper case ASCII char\n */\nilib.Locale._notUpper = function(str) {\n\t// do this with ASCII only so we don't have to depend on the CType functions\n\tvar ch = str.charCodeAt(0);\n\treturn ch < 65 || ch > 90;\n};\n\n/**\n * Tell whether or not the str does not start with a digit char.\n * @private\n * @param {string} str the char to check\n * @return {boolean} true if the char is a not an upper case ASCII char\n */\nilib.Locale._notDigit = function(str) {\n\t// do this with ASCII only so we don't have to depend on the CType functions\n\tvar ch = str.charCodeAt(0);\n\treturn ch < 48 || ch > 57;\n};\n\n/**\n * Tell whether or not the given string has the correct syntax to be\n * an ISO 639 language code.\n *\n * @private\n * @param {string} str the string to parse\n * @return {boolean} true if the string could syntactically be a language code.\n */\nilib.Locale._isLanguageCode = function(str) {\n\tif (typeof(str) === 'undefined' || str.length < 2 || str.length > 3) {\n\t\treturn false;\n\t}\n\n\tfor (var i = 0; i < str.length; i++) {\n\t\tif (ilib.Locale._notLower(str.charAt(i))) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n\n/**\n * Tell whether or not the given string has the correct syntax to be\n * an ISO 3166 2-letter region code or M.49 3-digit region code.\n *\n * @private\n * @param {string} str the string to parse\n * @return {boolean} true if the string could syntactically be a language code.\n */\nilib.Locale._isRegionCode = function (str) {\n\tif (typeof(str) === 'undefined' || str.length < 2 || str.length > 3) {\n\t\treturn false;\n\t}\n\n\tif (str.length === 2) {\n\t\tfor (var i = 0; i < str.length; i++) {\n\t\t\tif (ilib.Locale._notUpper(str.charAt(i))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor (var i = 0; i < str.length; i++) {\n\t\t\tif (ilib.Locale._notDigit(str.charAt(i))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n};\n\n/**\n * Tell whether or not the given string has the correct syntax to be\n * an ISO 639 language code.\n *\n * @private\n * @param {string} str the string to parse\n * @return {boolean} true if the string could syntactically be a language code.\n */\nilib.Locale._isScriptCode = function(str)\n{\n\tif (typeof(str) === 'undefined' || str.length !== 4 || ilib.Locale._notUpper(str.charAt(0))) {\n\t\treturn false;\n\t}\n\n\tfor (var i = 1; i < 4; i++) {\n\t\tif (ilib.Locale._notLower(str.charAt(i))) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n\n/**\n * Return the ISO-3166 alpha3 equivalent region code for the given ISO 3166 alpha2\n * region code. If the given alpha2 code is not found, this function returns its\n * argument unchanged.\n * @static\n * @param {string|undefined} alpha2 the alpha2 code to map\n * @return {string|undefined} the alpha3 equivalent of the given alpha2 code, or the alpha2\n * parameter if the alpha2 value is not found\n */\nilib.Locale.regionAlpha2ToAlpha3 = function(alpha2) {\n\treturn ilib.Locale.a2toa3regmap[alpha2] || alpha2;\n};\n\n/**\n * Return the ISO-639 alpha3 equivalent language code for the given ISO 639 alpha1\n * language code. If the given alpha1 code is not found, this function returns its\n * argument unchanged.\n * @static\n * @param {string|undefined} alpha1 the alpha1 code to map\n * @return {string|undefined} the alpha3 equivalent of the given alpha1 code, or the alpha1\n * parameter if the alpha1 value is not found\n */\nilib.Locale.languageAlpha1ToAlpha3 = function(alpha1) {\n\treturn ilib.Locale.a1toa3langmap[alpha1] || alpha1;\n};\n\nilib.Locale.prototype = {\n\t/**\n\t * @private\n\t */\n\t_genSpec: function () {\n\t\tthis.spec = this.language || \"\";\n\n\t\tif (this.script) {\n\t\t\tif (this.spec.length > 0) {\n\t\t\t\tthis.spec += \"-\";\n\t\t\t}\n\t\t\tthis.spec += this.script;\n\t\t}\n\n\t\tif (this.region) {\n\t\t\tif (this.spec.length > 0) {\n\t\t\t\tthis.spec += \"-\";\n\t\t\t}\n\t\t\tthis.spec += this.region;\n\t\t}\n\n\t\tif (this.variant) {\n\t\t\tif (this.spec.length > 0) {\n\t\t\t\tthis.spec += \"-\";\n\t\t\t}\n\t\t\tthis.spec += this.variant;\n\t\t}\n\t},\n\n\t/**\n\t * Return the ISO 639 language code for this locale.\n\t * @return {string|undefined} the language code for this locale\n\t */\n\tgetLanguage: function() {\n\t\treturn this.language;\n\t},\n\n\t/**\n\t * Return the language of this locale as an ISO-639-alpha3 language code\n\t * @return {string|undefined} the alpha3 language code of this locale\n\t */\n\tgetLanguageAlpha3: function() {\n\t\treturn ilib.Locale.languageAlpha1ToAlpha3(this.language);\n\t},\n\n\t/**\n\t * Return the ISO 3166 region code for this locale.\n\t * @return {string|undefined} the region code of this locale\n\t */\n\tgetRegion: function() {\n\t\treturn this.region;\n\t},\n\n\t/**\n\t * Return the region of this locale as an ISO-3166-alpha3 region code\n\t * @return {string|undefined} the alpha3 region code of this locale\n\t */\n\tgetRegionAlpha3: function() {\n\t\treturn ilib.Locale.regionAlpha2ToAlpha3(this.region);\n\t},\n\n\t/**\n\t * Return the ISO 15924 script code for this locale\n\t * @return {string|undefined} the script code of this locale\n\t */\n\tgetScript: function () {\n\t\treturn this.script;\n\t},\n\n\t/**\n\t * Return the variant code for this locale\n\t * @return {string|undefined} the variant code of this locale, if any\n\t */\n\tgetVariant: function() {\n\t\treturn this.variant;\n\t},\n\n\t/**\n\t * Return the whole locale specifier as a string.\n\t * @return {string} the locale specifier\n\t */\n\tgetSpec: function() {\n\t\treturn this.spec;\n\t},\n\n\t/**\n\t * Express this locale object as a string. Currently, this simply calls the getSpec\n\t * function to represent the locale as its specifier.\n\t *\n\t * @return {string} the locale specifier\n\t */\n\ttoString: function() {\n\t\treturn this.getSpec();\n\t},\n\n\t/**\n\t * Return true if the the other locale is exactly equal to the current one.\n\t * @return {boolean} whether or not the other locale is equal to the current one\n\t */\n\tequals: function(other) {\n\t\treturn this.language === other.language &&\n\t\t\tthis.region === other.region &&\n\t\t\tthis.script === other.script &&\n\t\t\tthis.variant === other.variant;\n\t},\n\n\t/**\n\t * Return true if the current locale is the special pseudo locale.\n\t * @return {boolean} true if the current locale is the special pseudo locale\n\t */\n\tisPseudo: function () {\n\t\tvar localeName = this.language + \"-\" + this.region;\n\t\treturn ilib.pseudoLocales.indexOf(localeName) > -1;\n\t}\n};\n\n// static functions\n/**\n * @private\n */\nilib.Locale.locales = [\n\n];\n\n/**\n * Return the list of available locales that this iLib file was assembled\n * with. The list that this file was assembled with may be much smaller\n * than the list of all available locales in the iLib repository. The\n * assembly tool will automatically fill in the list.\n *\n * @return {Array.<string>} this is an array of locale specs for which\n * this iLib file has locale data for\n */\nilib.Locale.getAvailableLocales = function () {\n\treturn ilib.Locale.locales;\n};\n\n/*\n * localeinfo.js - Encode locale-specific defaults\n *\n * Copyright © 2012-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ilibglobal.js locale.js\n\n// !data localeinfo\n\n/**\n * @class\n * Create a new locale info instance. Locale info instances give information about\n * the default settings for a particular locale. These settings may be overridden\n * by various parts of the code, and should be used as a fall-back setting of last\n * resort. <p>\n *\n * The optional options object holds extra parameters if they are necessary. The\n * current list of supported options are:\n *\n * <ul>\n * <li><i>onLoad</i> - a callback function to call when the locale info object is fully\n * loaded. When the onLoad option is given, the localeinfo object will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the\n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n *\n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the\n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object\n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n *\n * If this copy of ilib is pre-assembled and all the data is already available,\n * or if the data was already previously loaded, then this constructor will call\n * the onLoad callback immediately when the initialization is done.\n * If the onLoad option is not given, this class will only attempt to load any\n * missing locale data synchronously.\n *\n * Depends directive: !depends localeinfo.js\n *\n * @constructor\n * @see {ilib.setLoaderCallback} for information about registering a loader callback\n * function\n * @param {ilib.Locale|string=} locale the locale for which the info is sought, or undefined for\n * @param {Object=} options the locale for which the info is sought, or undefined for\n * the current locale\n */\nilib.LocaleInfo = function(locale, options) {\n\tvar sync = true,\n\t    loadParams = undefined;\n\n\t/* these are all the defaults. Essentially, en-US */\n\t/**\n\t  @private\n\t  @type {{\n\t\tscripts:Array.<string>,\n\t\ttimezone:string,\n\t\tunits:string,\n\t\tcalendar:string,\n\t\tclock:string,\n\t\tcurrency:string,\n\t\tfirstDayOfWeek:number,\n\t\tweekendStart:number,\n\t\tweekendEnd:number,\n\t\tmeridiems:string,\n\t\tunitfmt: {long:string,short:string},\n\t\tnumfmt:Object.<{\n\t\t\tcurrencyFormats:Object.<{common:string,commonNegative:string,iso:string,isoNegative:string}>,\n\t\t\tscript:string,\n\t\t\tdecimalChar:string,\n\t\t\tgroupChar:string,\n\t\t\tprigroupSize:number,\n\t\t\tsecgroupSize:number,\n\t\t\tnegativenumFmt:string,\n\t\t\tpctFmt:string,\n\t\t\tnegativepctFmt:string,\n\t\t\tpctChar:string,\n\t\t\troundingMode:string,\n\t\t\texponential:string,\n\t\t\tdigits:string\n\t\t}>\n\t  }}\n\t*/\n\tthis.info = ilib.LocaleInfo.defaultInfo;\n\n\tswitch (typeof(locale)) {\n\t\tcase \"string\":\n\t\t\tthis.locale = new ilib.Locale(locale);\n\t\t\tbreak;\n\t\tdefault:\n\t\tcase \"undefined\":\n\t\t\tthis.locale = new ilib.Locale();\n\t\t\tbreak;\n\t\tcase \"object\":\n\t\t\tthis.locale = locale;\n\t\t\tbreak;\n\t}\n\n\tif (options) {\n\t\tif (typeof(options.sync) !== 'undefined') {\n\t\t\tsync = (options.sync == true);\n\t\t}\n\n\t\tif (typeof(options.loadParams) !== 'undefined') {\n\t\t\tloadParams = options.loadParams;\n\t\t}\n\t}\n\n\tif (!ilib.LocaleInfo.cache) {\n\t\tilib.LocaleInfo.cache = {};\n\t}\n\n\tilib.loadData({\n\t\tobject: ilib.LocaleInfo,\n\t\tlocale: this.locale,\n\t\tname: \"localeinfo.json\",\n\t\tsync: sync,\n\t\tloadParams: loadParams,\n\t\tcallback: ilib.bind(this, function (info) {\n\t\t\tif (!info) {\n\t\t\t\tinfo = ilib.LocaleInfo.defaultInfo;\n\t\t\t\tvar spec = this.locale.getSpec().replace(/-/g, \"_\");\n\t\t\t\tilib.LocaleInfo.cache[spec] = info;\n\t\t\t}\n\t\t\tthis.info = info;\n\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\toptions.onLoad(this);\n\t\t\t}\n\t\t})\n\t});\n};\n\nilib.LocaleInfo.defaultInfo = /** @type {{\n\tscripts:Array.<string>,\n\ttimezone:string,\n\tunits:string,\n\tcalendar:string,\n\tclock:string,\n\tcurrency:string,\n\tfirstDayOfWeek:number,\n\tweekendStart:number,\n\tweekendEnd:number,\n\tmeridiems:string,\n\tunitfmt: {long:string,short:string},\n\tnumfmt:Object.<{\n\t\tcurrencyFormats:Object.<{\n\t\t\tcommon:string,\n\t\t\tcommonNegative:string,\n\t\t\tiso:string,\n\t\t\tisoNegative:string\n\t\t}>,\n\t\tscript:string,\n\t\tdecimalChar:string,\n\t\tgroupChar:string,\n\t\tprigroupSize:number,\n\t\tsecgroupSize:number,\n\t\tnegativenumFmt:string,\n\t\tpctFmt:string,\n\t\tnegativepctFmt:string,\n\t\tpctChar:string,\n\t\troundingMode:string,\n\t\texponential:string,\n\t\tdigits:string\n\t}>\n}}*/ ilib.data.localeinfo;\nilib.LocaleInfo.defaultInfo = ilib.LocaleInfo.defaultInfo || {\n\t\"scripts\": [\"Latn\"],\n    \"timezone\": \"Etc/UTC\",\n    \"units\": \"metric\",\n    \"calendar\": \"gregorian\",\n    \"clock\": \"24\",\n    \"currency\": \"USD\",\n    \"firstDayOfWeek\": 1,\n    \"meridiems\": \"gregorian\",\n    \"numfmt\": {\n        \"currencyFormats\": {\n            \"common\": \"{s}{n}\",\n            \"commonNegative\": \"{s}-{n}\",\n            \"iso\": \"{s}{n}\",\n            \"isoNegative\": \"{s}-{n}\"\n        },\n        \"script\": \"Latn\",\n        \"decimalChar\": \",\",\n        \"groupChar\": \".\",\n        \"prigroupSize\": 3,\n        \"secgroupSize\": 0,\n        \"pctFmt\": \"{n}%\",\n        \"negativepctFmt\": \"-{n}%\",\n        \"pctChar\": \"%\",\n        \"roundingMode\": \"halfdown\",\n        \"exponential\": \"e\",\n        \"digits\": \"\"\n    }\n};\n\nilib.LocaleInfo.prototype = {\n    /**\n     * Return the name of the locale's language in English.\n     * @returns {string} the name of the locale's language in English\n     */\n    getLanguageName: function () {\n    \treturn this.info[\"language.name\"];\n    },\n\n    /**\n     * Return the name of the locale's region in English. If the locale\n     * has no region, this returns undefined.\n     *\n     * @returns {string|undefined} the name of the locale's region in English\n     */\n    getRegionName: function () {\n    \treturn this.info[\"region.name\"];\n    },\n\n    /**\n\t * Return whether this locale commonly uses the 12- or the 24-hour clock.\n\t *\n\t * @returns {string} \"12\" if the locale commonly uses a 12-hour clock, or \"24\"\n\t * if the locale commonly uses a 24-hour clock.\n\t */\n\tgetClock: function() {\n\t\treturn this.info.clock;\n\t},\n\n\t/**\n\t * Return the locale that this info object was created with.\n\t * @returns {ilib.Locale} The locale spec of the locale used to construct this info instance\n\t */\n\tgetLocale: function () {\n\t\treturn this.locale;\n\t},\n\n\t/**\n\t * Return the name of the measuring system that is commonly used in the given locale.\n\t * Valid values are \"uscustomary\", \"imperial\", and \"metric\".\n\t *\n\t * @returns {string} The name of the measuring system commonly used in the locale\n\t */\n\tgetUnits: function () {\n\t\treturn this.info.units;\n\t},\n\n        getUnitFormat: function () {\n                return this.info.unitfmt;\n        },\n\n\t/**\n\t * Return the name of the calendar that is commonly used in the given locale.\n\t *\n\t * @returns {string} The name of the calendar commonly used in the locale\n\t */\n\tgetCalendar: function () {\n\t\treturn this.info.calendar;\n\t},\n\n\t/**\n\t * Return the day of week that starts weeks in the current locale. Days are still\n\t * numbered the standard way with 0 for Sunday through 6 for Saturday, but calendars\n\t * should be displayed and weeks calculated with the day of week returned from this\n\t * function as the first day of the week.\n\t *\n\t * @returns {number} the day of the week that starts weeks in the current locale.\n\t */\n\tgetFirstDayOfWeek: function () {\n\t\treturn this.info.firstDayOfWeek;\n\t},\n\n\t/**\n\t * Return the day of week that starts weekend in the current locale. Days are still\n\t * numbered the standard way with 0 for Sunday through 6 for Saturday.\n\t *\n\t * @returns {number} the day of the week that starts weeks in the current locale.\n\t */\n\tgetWeekEndStart: function () {\n\t\treturn this.info.weekendStart;\n\t},\n\n\t/**\n\t * Return the day of week that starts weekend in the current locale. Days are still\n\t * numbered the standard way with 0 for Sunday through 6 for Saturday.\n\t *\n\t * @returns {number} the day of the week that starts weeks in the current locale.\n\t */\n\tgetWeekEndEnd: function () {\n\t\treturn this.info.weekendEnd;\n\t},\n\n\t/**\n\t * Return the default time zone for this locale. Many locales span across multiple\n\t * time zones. In this case, the time zone with the largest population is chosen\n\t * to represent the locale. This is obviously not that accurate, but then again,\n\t * this method's return value should only be used as a default anyways.\n\t * @returns {string} the default time zone for this locale.\n\t */\n\tgetTimeZone: function () {\n\t\treturn this.info.timezone;\n\t},\n\n\t/**\n\t * Return the decimal separator for formatted numbers in this locale.\n\t * @returns {string} the decimal separator char\n\t */\n\tgetDecimalSeparator: function () {\n\t\treturn this.info.numfmt.decimalChar;\n\t},\n\n\t/**\n\t * Return the decimal separator for formatted numbers in this locale for native script.\n\t * @returns {string} the decimal separator char\n\t */\n\tgetNativeDecimalSeparator: function () {\n\t\treturn (this.info.native_numfmt && this.info.native_numfmt.decimalChar) || this.info.numfmt.decimalChar;\n\t},\n\n\t/**\n\t * Return the separator character used to separate groups of digits on the\n\t * integer side of the decimal character.\n\t * @returns {string} the grouping separator char\n\t */\n\tgetGroupingSeparator: function () {\n\t\treturn this.info.numfmt.groupChar;\n\t},\n\n\t/**\n\t * Return the separator character used to separate groups of digits on the\n\t * integer side of the decimal character for the native script if present other than the default script.\n\t * @returns {string} the grouping separator char\n\t */\n\tgetNativeGroupingSeparator: function () {\n\t\treturn (this.info.native_numfmt && this.info.native_numfmt.groupChar) || this.info.numfmt.groupChar;\n\t},\n\n\t/**\n\t * Return the minimum number of digits grouped together on the integer side\n\t * for the first (primary) group.\n\t * In western European cultures, groupings are in 1000s, so the number of digits\n\t * is 3.\n\t * @returns {number} the number of digits in a primary grouping, or 0 for no grouping\n\t */\n\tgetPrimaryGroupingDigits: function () {\n\t\treturn (typeof(this.info.numfmt.prigroupSize) !== 'undefined' && this.info.numfmt.prigroupSize) || 0;\n\t},\n\n\t/**\n\t * Return the minimum number of digits grouped together on the integer side\n\t * for the second or more (secondary) group.<p>\n\t *\n\t * In western European cultures, all groupings are by 1000s, so the secondary\n\t * size should be 0 because there is no secondary size. In general, if this\n\t * method returns 0, then all groupings are of the primary size.<p>\n\t *\n\t * For some other cultures, the first grouping (primary)\n\t * is 3 and any subsequent groupings (secondary) are two. So, 100000 would be\n\t * written as: \"1,00,000\".\n\t *\n\t * @returns {number} the number of digits in a secondary grouping, or 0 for no\n\t * secondary grouping.\n\t */\n\tgetSecondaryGroupingDigits: function () {\n\t\treturn this.info.numfmt.secgroupSize || 0;\n\t},\n\n\t/**\n\t * Return the format template used to format percentages in this locale.\n\t * @returns {string} the format template for formatting percentages\n\t */\n\tgetPercentageFormat: function () {\n\t\treturn this.info.numfmt.pctFmt;\n\t},\n\n\t/**\n\t * Return the format template used to format percentages in this locale\n\t * with negative amounts.\n\t * @returns {string} the format template for formatting percentages\n\t */\n\tgetNegativePercentageFormat: function () {\n\t\treturn this.info.numfmt.negativepctFmt;\n\t},\n\n\t/**\n\t * Return the symbol used for percentages in this locale.\n\t * @returns {string} the symbol used for percentages in this locale\n\t */\n\tgetPercentageSymbol: function () {\n\t\treturn this.info.numfmt.pctChar || \"%\";\n\t},\n\n\t/**\n\t * Return the symbol used for exponential in this locale.\n\t * @returns {string} the symbol used for exponential in this locale\n\t */\n\tgetExponential: function () {\n\t\treturn this.info.numfmt.exponential;\n\t},\n\n\t/**\n\t * Return the symbol used for exponential in this locale for native script.\n\t * @returns {string} the symbol used for exponential in this locale for native script\n\t */\n\tgetNativeExponential: function () {\n\t\treturn (this.info.native_numfmt && this.info.native_numfmt.exponential) || this.info.numfmt.exponential;\n\t},\n\n\t/**\n\t * Return the symbol used for percentages in this locale for native script.\n\t * @returns {string} the symbol used for percentages in this locale for native script\n\t */\n\tgetNativePercentageSymbol: function () {\n\t\treturn (this.info.native_numfmt && this.info.native_numfmt.pctChar) || this.info.numfmt.pctChar || \"%\";\n\n\t},\n\t/**\n\t * Return the format template used to format negative numbers in this locale.\n\t * @returns {string} the format template for formatting negative numbers\n\t */\n\tgetNegativeNumberFormat: function () {\n\t\treturn this.info.numfmt.negativenumFmt;\n\t},\n\n\t/**\n\t * Return an object containing the format templates for formatting currencies\n\t * in this locale. The object has a number of properties in it that each are\n\t * a particular style of format. Normally, this contains a \"common\" and an \"iso\"\n\t * style, but may contain others in the future.\n\t * @returns {Object} an object containing the format templates for currencies\n\t */\n\tgetCurrencyFormats: function () {\n\t\treturn this.info.numfmt.currencyFormats;\n\t},\n\n\t/**\n\t * Return the currency that is legal in the locale, or which is most commonly\n\t * used in regular commerce.\n\t * @returns {string} the ISO 4217 code for the currency of this locale\n\t */\n\tgetCurrency: function () {\n\t\treturn this.info.currency;\n\t},\n\n\t/**\n\t * Return a string that describes the style of digits used by this locale.\n\t * Possible return values are:\n\t * <ul>\n\t * <li><i>western</i> - uses the regular western 10-based digits 0 through 9\n\t * <li><i>optional</i> - native 10-based digits exist, but in modern usage,\n\t * this locale most often uses western digits\n\t * <li><i>native</i> - native 10-based native digits exist and are used\n\t * regularly by this locale\n\t * <li><i>custom</i> - uses native digits by default that are not 10-based\n\t * </ul>\n\t * @returns {string} string that describes the style of digits used in this locale\n\t */\n\tgetDigitsStyle: function () {\n\t\tif (this.info.numfmt.useNative) {\n\t\t\treturn \"native\";\n\t\t}\n\t\tif (typeof(this.info.native_numfmt) !== 'undefined') {\n\t\t\treturn \"optional\";\n\t\t}\n\t\treturn \"western\";\n\t},\n\n\t/**\n\t * Return the digits of the default script if they are defined.\n\t * If not defined, the default should be the regular \"Arabic numerals\"\n\t * used in the Latin script. (0-9)\n\t * @returns {string|undefined} the digits used in the default script\n\t */\n\tgetDigits: function () {\n\t\treturn this.info.numfmt.digits;\n\t},\n\n\t/**\n\t * Return the digits of the native script if they are defined.\n\t * @returns {string|undefined} the digits used in the default script\n\t */\n\tgetNativeDigits: function () {\n\t\treturn (this.info.numfmt.useNative && this.info.numfmt.digits) || (this.info.native_numfmt && this.info.native_numfmt.digits);\n\t},\n\n\t/**\n\t * If this locale typically uses a different type of rounding for numeric\n\t * formatting other than halfdown, especially for currency, then it can be\n\t * specified in the localeinfo. If the locale uses the default, then this\n\t * method returns undefined. The locale's rounding method overrides the\n\t * rounding method for the currency itself, which can sometimes shared\n\t * between various locales so it is less specific.\n\t * @returns {string} the name of the rounding mode typically used in this\n\t * locale, or \"halfdown\" if the locale does not override the default\n\t */\n\tgetRoundingMode: function () {\n\t\treturn this.info.numfmt.roundingMode;\n\t},\n\n\t/**\n\t * Return the default script used to write text in the language of this\n\t * locale. Text for most languages is written in only one script, but there\n\t * are some languages where the text can be written in a number of scripts,\n\t * depending on a variety of things such as the region, ethnicity, religion,\n\t * etc. of the author. This method returns the default script for the\n\t * locale, in which the language is most commonly written.<p>\n\t *\n\t * The script is returned as an ISO 15924 4-letter code.\n\t *\n\t * @returns {string} the ISO 15924 code for the default script used to write\n\t * text in this locale\n\t */\n\tgetDefaultScript: function() {\n\t\treturn (this.info.scripts) ? this.info.scripts[0] : \"Latn\";\n\t},\n\n\t/**\n\t * Return the script used for the current locale. If the current locale\n\t * explicitly defines a script, then this script is returned. If not, then\n\t * the default script for the locale is returned.\n\t *\n\t * @see ilib.LocaleInfo.getDefaultScript\n\t * @returns {string} the ISO 15924 code for the script used to write\n\t * text in this locale\n\t */\n\tgetScript: function() {\n\t\treturn this.locale.getScript() || this.getDefaultScript();\n\t},\n\n\t/**\n\t * Return an array of script codes which are used to write text in the current\n\t * language. Text for most languages is written in only one script, but there\n\t * are some languages where the text can be written in a number of scripts,\n\t * depending on a variety of things such as the region, ethnicity, religion,\n\t * etc. of the author. This method returns an array of script codes in which\n\t * the language is commonly written.\n\t *\n\t * @returns {Array.<string>} an array of ISO 15924 codes for the scripts used\n\t * to write text in this language\n\t */\n\tgetAllScripts: function() {\n\t\treturn this.info.scripts || [\"Latn\"];\n\t},\n\n\t/**\n\t * Return the default style of meridiems used in this locale. Meridiems are\n\t * times of day like AM/PM. In a few locales with some calendars, for example\n\t * Amharic/Ethiopia using the Ethiopic calendar, the times of day may be\n\t * split into different segments than simple AM/PM as in the Gregorian\n\t * calendar. Only a few locales are like that. For most locales, formatting\n\t * a Gregorian date will use the regular Gregorian AM/PM meridiems.\n\t *\n\t * @returns {string} the default meridiems style used in this locale. Possible\n\t * values are \"gregorian\", \"chinese\", and \"ethiopic\"\n\t */\n\tgetMeridiemsStyle: function () {\n\t\treturn this.info.meridiems || \"gregorian\";\n\t}\n};\n\n/*\n * date.js - Represent a date in any calendar. This class is subclassed for each calendar.\n *\n * Copyright © 2012-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends ilibglobal.js localeinfo.js */\n\n/**\n * @class\n * Construct a new date object. Each parameter is a numeric value, but its\n * accepted range can vary depending on the subclass of this date. For example,\n * Gregorian months can be from 1 to 12, whereas months in the Hebrew calendar\n * can be from 1 to 13.<p>\n *\n * Note that this really calls the newInstance factory method underneath in\n * order to instantiate the correct subclass of ilib.Date.\n *\n * Depends directive: !depends date.js\n *\n * @constructor\n * @param {Object=} options The date components to initialize this date with\n */\nilib.Date = function(options) {\n\tif (!options || typeof(options.noinstance) === 'undefined') {\n\t\treturn ilib.Date.newInstance(options);\n\t}\n};\n\n/**\n * Factory method to create a new instance of a date subclass.<p>\n *\n * The options parameter can be an object that contains the following\n * properties:\n *\n * <ul>\n * <li><i>type</i> - specify the type/calendar of the date desired. The\n * list of valid values changes depending on which calendars are\n * defined. When assembling your iliball.js, include those date type\n * you wish to use in your program or web page, and they will register\n * themselves with this factory method. The \"gregorian\",\n * and \"julian\" calendars are all included by default, as they are the\n * standard calendars for much of the world. If not specified, the type\n * of the date returned is the one that is appropriate for the locale.\n * This property may also be given as \"calendar\" instead of \"type\".\n * </ul>\n *\n * The options object is also passed down to the date constructor, and\n * thus can contain the the properties as the date object being instantiated.\n * See the documentation for {@link ilib.Date.GregDate}, and other\n * subclasses for more details on other parameter that may be passed in.<p>\n *\n * Please note that if you do not give the type parameter, this factory\n * method will create a date object that is appropriate for the calendar\n * that is most commonly used in the specified or current ilib locale.\n * For example, in Thailand, the most common calendar is the Thai solar\n * calendar. If the current locale is \"th-TH\" (Thai for Thailand) and you\n * use this factory method to construct a new date without specifying the\n * type, it will automatically give you back an instance of\n * {@link ilib.Date.ThaiSolarDate}. This is convenient because you do not\n * need to know which locales use which types of dates. In fact, you\n * should always use this factory method to make new date instances unless\n * you know that you specifically need a date in a particular calendar.<p>\n *\n * Also note that when you pass in the date components such as year, month,\n * day, etc., these components should be appropriate for the given date\n * being instantiated. That is, in our Thai example in the previous\n * paragraph, the year and such should be given as a Thai solar year, not\n * the Gregorian year that you get from the Javascript Date class. In\n * order to initialize a date instance when you don't know what subclass\n * will be instantiated for the locale, use a parameter such as \"unixtime\"\n * or \"julianday\" which are unambiguous and based on UTC time, instead of\n * the year/month/date date components. The date components for that UTC\n * time will be calculated and the time zone offset will be automatically\n * factored in.\n *\n * @param {Object=} options options controlling the construction of this instance, or\n * undefined to use the default options\n * @return {ilib.Date} an instance of a calendar object of the appropriate type\n */\nilib.Date.newInstance = function(options) {\n\tvar locale = options && options.locale,\n\t\ttype = options && (options.type || options.calendar),\n\t\tcons;\n\n\tif (!locale) {\n\t\tlocale = new ilib.Locale();\t// default locale\n\t}\n\n\tif (!type) {\n\t\tvar info = new ilib.LocaleInfo(locale);\n\t\ttype = info.getCalendar();\n\t}\n\n\tcons = ilib.Date._constructors[type];\n\n\t// pass the same options through to the constructor so the subclass\n\t// has the ability to do something with if it needs to\n\treturn cons && new cons(options);\n};\n\n/**\n * Convert JavaScript Date objects and other types into native ilib Dates. This accepts any\n * string or number that can be translated by the JavaScript Date class,\n * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse)\n * any JavaScript Date classed object, any ilib.Date subclass, an ilib.JulianDay object, an object\n * containing the normal options to initialize an ilib.Date instance, or null (will\n * return null or undefined if input is null or undefined). Normal output is\n * a standard native subclass of the ilib Date object as appropriate for the locale.\n *\n * @static\n * @private\n * @param  {ilib.Date|Object|ilib.JulianDay|Date|string|number=} inDate The input date object, string or Number.\n * @param  {ilib.String|string=} timezone timezone to use if a new date object is created\n * @return {ilib.Date|null|undefined} an ilib.Date subclass equivalent to the given inDate\n */\nilib.Date._dateToIlib = function(inDate, timezone) {\n\tif (typeof(inDate) === 'undefined' || inDate === null) {\n\t\treturn inDate;\n\t}\n\tif (inDate instanceof ilib.Date) {\n\t\treturn inDate;\n\t}\n\tif (inDate instanceof Date) {\n\t\treturn ilib.Date.newInstance({\n\t\t\tunixtime: inDate.getTime(),\n\t\t\ttimezone: timezone\n\t\t});\n\t}\n\tif (inDate instanceof ilib.JulianDay) {\n\t\treturn ilib.Date.newInstance({\n\t\t\tjd: inDate,\n\t\t\ttimezone: timezone\n\t\t});\n\t}\n\tif (typeof(inDate) === 'number') {\n\t\treturn ilib.Date.newInstance({\n\t\t\tunixtime: inDate,\n\t\t\ttimezone: timezone\n\t\t});\n\t}\n\tif (typeof(inDate) === 'object') {\n\t\treturn ilib.Date.newInstance(inDate);\n\t}\n\tif (typeof(inDate) === 'string') {\n\t\tinDate = new Date(inDate);\n\t}\n\treturn ilib.Date.newInstance({\n\t\tunixtime: inDate.getTime(),\n\t\ttimezone: timezone\n\t});\n};\n\n/* place for the subclasses to put their constructors so that the factory method\n * can find them. Do this to add your date after it's defined:\n * ilib.Date._constructors[\"mytype\"] = ilib.Date.MyTypeConstructor;\n */\nilib.Date._constructors = {};\n\nilib.Date.prototype = {\n\tgetType: function() {\n\t\treturn \"ilib.Date\";\n\t},\n\n\t/**\n\t * Return the unix time equivalent to this date instance. Unix time is\n\t * the number of milliseconds since midnight on Jan 1, 1970 UTC (Gregorian). This\n\t * method only returns a valid number for dates between midnight,\n\t * Jan 1, 1970 UTC (Gregorian) and Jan 19, 2038 at 3:14:07am UTC (Gregorian) when\n\t * the unix time runs out. If this instance encodes a date outside of that range,\n\t * this method will return -1. For date types that are not Gregorian, the point\n\t * in time represented by this date object will only give a return value if it\n\t * is in the correct range in the Gregorian calendar as given previously.\n\t *\n\t * @return {number} a number giving the unix time, or -1 if the date is outside the\n\t * valid unix time range\n\t */\n\tgetTime: function() {\n\t\treturn this.rd.getTime();\n\t},\n\n\t/**\n\t * Return the extended unix time equivalent to this Gregorian date instance. Unix time is\n\t * the number of milliseconds since midnight on Jan 1, 1970 UTC. Traditionally unix time\n\t * (or the type \"time_t\" in C/C++) is only encoded with an unsigned 32 bit integer, and thus\n\t * runs out on Jan 19, 2038. However, most Javascript engines encode numbers well above\n\t * 32 bits and the Date object allows you to encode up to 100 million days worth of time\n\t * after Jan 1, 1970, and even more interestingly, 100 million days worth of time before\n\t * Jan 1, 1970 as well. This method returns the number of milliseconds in that extended\n\t * range. If this instance encodes a date outside of that range, this method will return\n\t * NaN.\n\t *\n\t * @return {number} a number giving the extended unix time, or Nan if the date is outside\n\t * the valid extended unix time range\n\t */\n\tgetTimeExtended: function() {\n\t\treturn this.rd.getTimeExtended();\n\t},\n\n\t/**\n\t * Set the time of this instance according to the given unix time. Unix time is\n\t * the number of milliseconds since midnight on Jan 1, 1970.\n\t *\n\t * @param {number} millis the unix time to set this date to in milliseconds\n\t */\n\tsetTime: function(millis) {\n\t\tthis.rd = this.newRd({\n\t\t\tunixtime: millis,\n\t\t\tcal: this.cal\n\t\t});\n\t\tthis._calcDateComponents();\n\t},\n\n\tgetDays: function() {\n\t\treturn this.day;\n\t},\n\tgetMonths: function() {\n\t\treturn this.month;\n\t},\n\tgetYears: function() {\n\t\treturn this.year;\n\t},\n\tgetHours: function() {\n\t\treturn this.hour;\n\t},\n\tgetMinutes: function() {\n\t\treturn this.minute;\n\t},\n\tgetSeconds: function() {\n\t\treturn this.second;\n\t},\n\tgetMilliseconds: function() {\n\t\treturn this.millisecond;\n\t},\n\n\tsetDays: function(day) {\n\t\tthis.day = parseInt(day, 10) || 1;\n\t\tthis.rd._setDateComponents(this);\n\t},\n\tsetMonths: function(month) {\n\t\tthis.month = parseInt(month, 10) || 1;\n\t\tthis.rd._setDateComponents(this);\n\t},\n\tsetYears: function(year) {\n\t\tthis.year = parseInt(year, 10) || 0;\n\t\tthis.rd._setDateComponents(this);\n\t},\n\n\tsetHours: function(hour) {\n\t\tthis.hour = parseInt(hour, 10) || 0;\n\t\tthis.rd._setDateComponents(this);\n\t},\n\tsetMinutes: function(minute) {\n\t\tthis.minute = parseInt(minute, 10) || 0;\n\t\tthis.rd._setDateComponents(this);\n\t},\n\tsetSeconds: function(second) {\n\t\tthis.second = parseInt(second, 10) || 0;\n\t\tthis.rd._setDateComponents(this);\n\t},\n\tsetMilliseconds: function(milli) {\n\t\tthis.millisecond = parseInt(milli, 10) || 0;\n\t\tthis.rd._setDateComponents(this);\n\t},\n\n\t/**\n\t * Return a new date instance in the current calendar that represents the first instance\n\t * of the given day of the week before the current date. The day of the week is encoded\n\t * as a number where 0 = Sunday, 1 = Monday, etc.\n\t *\n\t * @param {number} dow the day of the week before the current date that is being sought\n\t * @return {ilib.Date} the date being sought\n\t */\n\tbefore: function (dow) {\n\t\treturn this.cal.newDateInstance({\n\t\t\trd: this.rd.before(dow, this.offset),\n\t\t\ttimezone: this.timezone\n\t\t});\n\t},\n\n\t/**\n\t * Return a new date instance in the current calendar that represents the first instance\n\t * of the given day of the week after the current date. The day of the week is encoded\n\t * as a number where 0 = Sunday, 1 = Monday, etc.\n\t *\n\t * @param {number} dow the day of the week after the current date that is being sought\n\t * @return {ilib.Date} the date being sought\n\t */\n\tafter: function (dow) {\n\t\treturn this.cal.newDateInstance({\n\t\t\trd: this.rd.after(dow, this.offset),\n\t\t\ttimezone: this.timezone\n\t\t});\n\t},\n\n\t/**\n\t * Return a new Gregorian date instance that represents the first instance of the\n\t * given day of the week on or before the current date. The day of the week is encoded\n\t * as a number where 0 = Sunday, 1 = Monday, etc.\n\t *\n\t * @param {number} dow the day of the week on or before the current date that is being sought\n\t * @return {ilib.Date} the date being sought\n\t */\n\tonOrBefore: function (dow) {\n\t\treturn this.cal.newDateInstance({\n\t\t\trd: this.rd.onOrBefore(dow, this.offset),\n\t\t\ttimezone: this.timezone\n\t\t});\n\t},\n\n\t/**\n\t * Return a new Gregorian date instance that represents the first instance of the\n\t * given day of the week on or after the current date. The day of the week is encoded\n\t * as a number where 0 = Sunday, 1 = Monday, etc.\n\t *\n\t * @param {number} dow the day of the week on or after the current date that is being sought\n\t * @return {ilib.Date} the date being sought\n\t */\n\tonOrAfter: function (dow) {\n\t\treturn this.cal.newDateInstance({\n\t\t\trd: this.rd.onOrAfter(dow, this.offset),\n\t\t\ttimezone: this.timezone\n\t\t});\n\t},\n\n\t/**\n\t * Return a Javascript Date object that is equivalent to this date\n\t * object.\n\t *\n\t * @return {Date|undefined} a javascript Date object\n\t */\n\tgetJSDate: function() {\n\t\tvar unix = this.rd.getTimeExtended();\n\t\treturn isNaN(unix) ? undefined : new Date(unix);\n\t},\n\n\t/**\n\t * Return the Rata Die (fixed day) number of this date.\n\t *\n\t * @protected\n\t * @return {number} the rd date as a number\n\t */\n\tgetRataDie: function() {\n\t\treturn this.rd.getRataDie();\n\t},\n\n\t/**\n\t * Set the date components of this instance based on the given rd.\n\t * @protected\n\t * @param {number} rd the rata die date to set\n\t */\n\tsetRd: function (rd) {\n\t\tthis.rd = this.newRd({\n\t\t\trd: rd,\n\t\t\tcal: this.cal\n\t\t});\n\t\tthis._calcDateComponents();\n\t},\n\n\t/**\n\t * Return the Julian Day equivalent to this calendar date as a number.\n\t *\n\t * @return {number} the julian date equivalent of this date\n\t */\n\tgetJulianDay: function() {\n\t\treturn this.rd.getJulianDay();\n\t},\n\n\t/**\n\t * Set the date of this instance using a Julian Day.\n\t * @param {number|ilib.JulianDay} date the Julian Day to use to set this date\n\t */\n\tsetJulianDay: function (date) {\n\t\tthis.rd = this.newRd({\n\t\t\tjulianday: (typeof(date) === 'object') ? date.getDate() : date,\n\t\t\tcal: this.cal\n\t\t});\n\t\tthis._calcDateComponents();\n\t},\n\n\t/**\n\t * Return the time zone associated with this date, or\n\t * undefined if none was specified in the constructor.\n\t *\n\t * @return {string|undefined} the name of the time zone for this date instance\n\t */\n\tgetTimeZone: function() {\n\t\treturn this.timezone || \"local\";\n\t},\n\n\t/**\n\t * Set the time zone associated with this date.\n\t * @param {string=} tzName the name of the time zone to set into this date instance,\n\t * or \"undefined\" to unset the time zone\n\t */\n\tsetTimeZone: function (tzName) {\n\t\tif (!tzName || tzName === \"\") {\n\t\t\t// same as undefining it\n\t\t\tthis.timezone = undefined;\n\t\t\tthis.tz = undefined;\n\t\t} else if (typeof(tzName) === 'string') {\n\t\t\tthis.timezone = tzName;\n\t\t\tthis.tz = undefined;\n\t\t\t// assuming the same UTC time, but a new time zone, now we have to\n\t\t\t// recalculate what the date components are\n\t\t\tthis._calcDateComponents();\n\t\t}\n\t},\n\n\t/**\n\t * Return the rd number of the first Sunday of the given ISO year.\n\t * @protected\n\t * @param {number} year the year for which the first Sunday is being sought\n\t * @return {number} the rd of the first Sunday of the ISO year\n\t */\n\tfirstSunday: function (year) {\n\t\tvar firstDay = this.newRd({\n\t\t\tyear: year,\n\t\t\tmonth: 1,\n\t\t\tday: 1,\n\t\t\thour: 0,\n\t\t\tminute: 0,\n\t\t\tsecond: 0,\n\t\t\tmillisecond: 0,\n\t\t\tcal: this.cal\n\t\t});\n\t\tvar firstThu = this.newRd({\n\t\t\trd: firstDay.onOrAfter(4),\n\t\t\tcal: this.cal\n\t\t});\n\t\treturn firstThu.before(0);\n\t},\n\n\t/**\n\t * Return the ISO 8601 week number in the current year for the current date. The week\n\t * number ranges from 0 to 55, as some years have 55 weeks assigned to them in some\n\t * calendars.\n\t *\n\t * @return {number} the week number for the current date\n\t */\n\tgetWeekOfYear: function() {\n\t\tvar rd = Math.floor(this.rd.getRataDie());\n\t\tvar year = this._calcYear(rd + this.offset);\n\t\tvar yearStart = this.firstSunday(year);\n\t\tvar nextYear;\n\n\t\t// if we have a January date, it may be in this ISO year or the previous year\n\t\tif (rd < yearStart) {\n\t\t\tyearStart = this.firstSunday(year-1);\n\t\t} else {\n\t\t\t// if we have a late December date, it may be in this ISO year, or the next year\n\t\t\tnextYear = this.firstSunday(year+1);\n\t\t\tif (rd >= nextYear) {\n\t\t\t\tyearStart = nextYear;\n\t\t\t}\n\t\t}\n\n\t\treturn Math.floor((rd-yearStart)/7) + 1;\n\t},\n\n\t/**\n\t * Return the ordinal number of the week within the month. The first week of a month is\n\t * the first one that contains 4 or more days in that month. If any days precede this\n\t * first week, they are marked as being in week 0. This function returns values from 0\n\t * through 6.<p>\n\t *\n\t * The locale is a required parameter because different locales that use the same\n\t * Gregorian calendar consider different days of the week to be the beginning of\n\t * the week. This can affect the week of the month in which some days are located.\n\t *\n\t * @param {ilib.Locale|string} locale the locale or locale spec to use when figuring out\n\t * the first day of the week\n\t * @return {number} the ordinal number of the week within the current month\n\t */\n\tgetWeekOfMonth: function(locale) {\n\t\tvar li = new ilib.LocaleInfo(locale);\n\n\t\tvar first = this.newRd({\n\t\t\tyear: this._calcYear(this.rd.getRataDie()+this.offset),\n\t\t\tmonth: this.getMonths(),\n\t\t\tday: 1,\n\t\t\thour: 0,\n\t\t\tminute: 0,\n\t\t\tsecond: 0,\n\t\t\tmillisecond: 0,\n\t\t\tcal: this.cal\n\t\t});\n\t\tvar weekStart = first.onOrAfter(li.getFirstDayOfWeek());\n\n\t\tif (weekStart - first.getRataDie() > 3) {\n\t\t\t// if the first week has 4 or more days in it of the current month, then consider\n\t\t\t// that week 1. Otherwise, it is week 0. To make it week 1, move the week start\n\t\t\t// one week earlier.\n\t\t\tweekStart -= 7;\n\t\t}\n\t\treturn Math.floor((this.rd.getRataDie() - weekStart) / 7) + 1;\n\t}\n};\n\n/*\n * util/utils.js - Core utility routines\n *\n * Copyright © 2012-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ilibglobal.js\n\n/**\n * If Function.prototype.bind does not exist in this JS engine, this\n * function reimplements it in terms of older JS functions.\n * bind() doesn't exist in many older browsers.\n *\n * @param {Object} scope object that the method should operate on\n * @param {function(...)} method method to call\n * @return {function(...)|undefined} function that calls the given method\n * in the given scope with all of its arguments properly attached, or\n * undefined if there was a problem with the arguments\n */\nilib.bind = function(scope, method/*, bound arguments*/){\n\tif (!scope || !method) {\n\t\treturn undefined;\n\t}\n\n\t/** @protected\n\t * @param {Arguments} inArrayLike\n\t * @param {number=} inOffset\n\t */\n\tfunction cloneArray(inArrayLike, inOffset) {\n\t\tvar arr = [];\n\t\tfor(var i = inOffset || 0, l = inArrayLike.length; i<l; i++){\n\t\t\tarr.push(inArrayLike[i]);\n\t\t}\n\t\treturn arr;\n\t}\n\n\tif (typeof(method) === 'function') {\n\t\tvar func, args = cloneArray(arguments, 2);\n\t\tif (typeof(method.bind) === 'function') {\n\t\t\tfunc = method.bind.apply(method, [scope].concat(args));\n\t\t} else {\n\t\t\tfunc = function() {\n\t\t\t\tvar nargs = cloneArray(arguments);\n\t\t\t\t// invoke with collected args\n\t\t\t\treturn method.apply(scope, args.concat(nargs));\n\t\t\t};\n\t\t}\n\t\treturn func;\n\t}\n\treturn undefined;\n};\n\n/**\n * Merge the properties of object2 into object1 in a deep manner and return a merged\n * object. If the property exists in both objects, the value in object2 will overwrite\n * the value in object1. If a property exists in object1, but not in object2, its value\n * will not be touched. If a property exists in object2, but not in object1, it will be\n * added to the merged result.<p>\n *\n * Name1 and name2 are for creating debug output only. They are not necessary.<p>\n *\n * Depends directive: !depends utils.js\n *\n * @param {*} object1 the object to merge into\n * @param {*} object2 the object to merge\n * @param {boolean=} replace if true, replace the array elements in object1 with those in object2.\n * If false, concatenate array elements in object1 with items in object2.\n * @param {string=} name1 name of the object being merged into\n * @param {string=} name2 name of the object being merged in\n * @return {Object} the merged object\n */\nilib.merge = function (object1, object2, replace, name1, name2) {\n\tvar prop = undefined,\n\t\tnewObj = {};\n\tfor (prop in object1) {\n\t\tif (prop && typeof(object1[prop]) !== 'undefined') {\n\t\t\tnewObj[prop] = object1[prop];\n\t\t}\n\t}\n\tfor (prop in object2) {\n\t\tif (prop && typeof(object2[prop]) !== 'undefined') {\n\t\t\tif (object1[prop] instanceof Array && object2[prop] instanceof Array) {\n\t\t\t\tif (typeof(replace) !== 'boolean' || !replace) {\n\t\t\t\t\tnewObj[prop] = new Array();\n\t\t\t\t\tnewObj[prop] = newObj[prop].concat(object1[prop]);\n\t\t\t\t\tnewObj[prop] = newObj[prop].concat(object2[prop]);\n\t\t\t\t} else {\n\t\t\t\t\tnewObj[prop] = object2[prop];\n\t\t\t\t}\n\t\t\t} else if (typeof(object1[prop]) === 'object' && typeof(object2[prop]) === 'object') {\n\t\t\t\tnewObj[prop] = ilib.merge(object1[prop], object2[prop], replace);\n\t\t\t} else {\n\t\t\t\t// for debugging. Used to determine whether or not json files are overriding their parents unnecessarily\n\t\t\t\tif (name1 && name2 && newObj[prop] == object2[prop]) {\n\t\t\t\t\tconsole.log(\"Property \" + prop + \" in \" + name1 + \" is being overridden by the same value in \" + name2);\n\t\t\t\t}\n\t\t\t\tnewObj[prop] = object2[prop];\n\t\t\t}\n\t\t}\n\t}\n\treturn newObj;\n};\n\n/**\n * Find and merge all the locale data for a particular prefix in the given locale\n * and return it as a single javascript object. This merges the data in the\n * correct order:\n *\n * <ol>\n * <li>shared data (usually English)\n * <li>data for language\n * <li>data for language + region\n * <li>data for language + region + script\n * <li>data for language + region + script + variant\n * </ol>\n *\n * It is okay for any of the above to be missing. This function will just skip the\n * missing data. However, if everything except the shared data is missing, this\n * function returns undefined, allowing the caller to go and dynamically load the\n * data instead.\n *\n * @param {string} prefix prefix under ilib.data of the data to merge\n * @param {ilib.Locale} locale locale of the data being sought\n * @param {boolean=} replaceArrays if true, replace the array elements in object1 with those in object2.\n * If false, concatenate array elements in object1 with items in object2.\n * @param {boolean=} returnOne if true, only return the most locale-specific data. If false,\n * merge all the relevant locale data together.\n * @return {Object?} the merged locale data\n */\nilib.mergeLocData = function (prefix, locale, replaceArrays, returnOne) {\n\tvar data = undefined;\n\tvar loc = locale || new ilib.Locale();\n\tvar foundLocaleData = false;\n\tvar property = prefix;\n\tvar mostSpecific;\n\n\tdata = ilib.data[prefix] || {};\n\n\tmostSpecific = data;\n\n\tif (loc.getLanguage()) {\n\t\tproperty = prefix + '_' + loc.getLanguage();\n\t\tif (ilib.data[property]) {\n\t\t\tfoundLocaleData = true;\n\t\t\tdata = ilib.merge(data, ilib.data[property], replaceArrays);\n\t\t\tmostSpecific = ilib.data[property];\n\t\t}\n\t}\n\n\tif (loc.getRegion()) {\n\t\tproperty = prefix + '_' + loc.getRegion();\n\t\tif (ilib.data[property]) {\n\t\t\tfoundLocaleData = true;\n\t\t\tdata = ilib.merge(data, ilib.data[property], replaceArrays);\n\t\t\tmostSpecific = ilib.data[property];\n\t\t}\n\t}\n\n\tif (loc.getLanguage()) {\n\t\tproperty = prefix + '_' + loc.getLanguage();\n\n\t\tif (loc.getScript()) {\n\t\t\tproperty = prefix + '_' + loc.getLanguage() + '_' + loc.getScript();\n\t\t\tif (ilib.data[property]) {\n\t\t\t\tfoundLocaleData = true;\n\t\t\t\tdata = ilib.merge(data, ilib.data[property], replaceArrays);\n\t\t\t\tmostSpecific = ilib.data[property];\n\t\t\t}\n\t\t}\n\n\t\tif (loc.getRegion()) {\n\t\t\tproperty = prefix + '_' + loc.getLanguage() + '_' + loc.getRegion();\n\t\t\tif (ilib.data[property]) {\n\t\t\t\tfoundLocaleData = true;\n\t\t\t\tdata = ilib.merge(data, ilib.data[property], replaceArrays);\n\t\t\t\tmostSpecific = ilib.data[property];\n\t\t\t}\n\t\t}\n\t}\n\n\tif (loc.getRegion() && loc.getVariant()) {\n\t\tproperty = prefix + '_' + loc.getLanguage() + '_' + loc.getVariant();\n\t\tif (ilib.data[property]) {\n\t\t\tfoundLocaleData = true;\n\t\t\tdata = ilib.merge(data, ilib.data[property], replaceArrays);\n\t\t\tmostSpecific = ilib.data[property];\n\t\t}\n\t}\n\n\tif (loc.getLanguage() && loc.getScript() && loc.getRegion()) {\n\t\tproperty = prefix + '_' + loc.getLanguage() + '_' + loc.getScript() + '_' + loc.getRegion();\n\t\tif (ilib.data[property]) {\n\t\t\tfoundLocaleData = true;\n\t\t\tdata = ilib.merge(data, ilib.data[property], replaceArrays);\n\t\t\tmostSpecific = ilib.data[property];\n\t\t}\n\t}\n\n\tif (loc.getLanguage() && loc.getRegion() && loc.getVariant()) {\n\t\tproperty = prefix + '_' + loc.getLanguage() + '_' + loc.getRegion() + '_' + loc.getVariant();\n\t\tif (ilib.data[property]) {\n\t\t\tfoundLocaleData = true;\n\t\t\tdata = ilib.merge(data, ilib.data[property], replaceArrays);\n\t\t\tmostSpecific = ilib.data[property];\n\t\t}\n\t}\n\n\tif (loc.getLanguage() && loc.getScript() && loc.getRegion() && loc.getVariant()) {\n\t\tproperty = prefix + '_' + loc.getLanguage() + '_' + loc.getScript() + '_' + loc.getRegion() + '_' + loc.getVariant();\n\t\tif (ilib.data[property]) {\n\t\t\tfoundLocaleData = true;\n\t\t\tdata = ilib.merge(data, ilib.data[property], replaceArrays);\n\t\t\tmostSpecific = ilib.data[property];\n\t\t}\n\t}\n\n\treturn foundLocaleData ? (returnOne ? mostSpecific : data) : undefined;\n};\n\n/**\n * Return an array of relative path names for the\n * files that represent the data for the given locale.<p>\n *\n * Note that to prevent the situation where a directory for\n * a language exists next to the directory for a region where\n * the language code and region code differ only by case, the\n * plain region directories are located under the special\n * \"undefined\" language directory which has the ISO code \"und\".\n * The reason is that some platforms have case-insensitive\n * file systems, and you cannot have 2 directories with the\n * same name which only differ by case. For example, \"es\" is\n * the ISO 639 code for the language \"Spanish\" and \"ES\" is\n * the ISO 3166 code for the region \"Spain\", so both the\n * directories cannot exist underneath \"locale\". The region\n * therefore will be loaded from \"und/ES\" instead.<p>\n *\n * <h4>Variations</h4>\n *\n * With only language and region specified, the following\n * sequence of paths will be generated:<p>\n *\n * <pre>\n * language\n * und/region\n * language/region\n * </pre>\n *\n * With only language and script specified:<p>\n *\n * <pre>\n * language\n * language/script\n * </pre>\n *\n * With only script and region specified:<p>\n *\n * <pre>\n * und/region\n * </pre>\n *\n * With only region and variant specified:<p>\n *\n * <pre>\n * und/region\n * region/variant\n * </pre>\n *\n * With only language, script, and region specified:<p>\n *\n * <pre>\n * language\n * und/region\n * language/script\n * language/region\n * language/script/region\n * </pre>\n *\n * With only language, region, and variant specified:<p>\n *\n * <pre>\n * language\n * und/region\n * language/region\n * region/variant\n * language/region/variant\n * </pre>\n *\n * With all parts specified:<p>\n *\n * <pre>\n * language\n * und/region\n * language/script\n * language/region\n * region/variant\n * language/script/region\n * language/region/variant\n * language/script/region/variant\n * </pre>\n *\n * @param {ilib.Locale} locale load the files for this locale\n * @param {string?} name the file name of each file to load without\n * any path\n * @return {Array.<string>} An array of relative path names\n * for the files that contain the locale data\n */\nilib.getLocFiles = function(locale, name) {\n\tvar dir = \"\";\n\tvar files = [];\n\tvar filename = name || \"resources.json\";\n\tvar loc = locale || new ilib.Locale();\n\n\tvar language = loc.getLanguage();\n\tvar region = loc.getRegion();\n\tvar script = loc.getScript();\n\tvar variant = loc.getVariant();\n\n\tfiles.push(filename); // generic shared file\n\n\tif (language) {\n\t\tdir = language + \"/\";\n\t\tfiles.push(dir + filename);\n\t}\n\n\tif (region) {\n\t\tdir = \"und/\" + region + \"/\";\n\t\tfiles.push(dir + filename);\n\t}\n\n\tif (language) {\n\t\tif (script) {\n\t\t\tdir = language + \"/\" + script + \"/\";\n\t\t\tfiles.push(dir + filename);\n\t\t}\n\t\tif (region) {\n\t\t\tdir = language + \"/\" + region + \"/\";\n\t\t\tfiles.push(dir + filename);\n\t\t}\n\t}\n\n\tif (region && variant) {\n\t\tdir = \"und/\" + region + \"/\" + variant + \"/\";\n\t\tfiles.push(dir + filename);\n\t}\n\n\tif (language && script && region) {\n\t\tdir = language + \"/\" + script + \"/\" + region + \"/\";\n\t\tfiles.push(dir + filename);\n\t}\n\n\tif (language && region && variant) {\n\t\tdir = language + \"/\" + region + \"/\" + variant + \"/\";\n\t\tfiles.push(dir + filename);\n\t}\n\n\tif (language && script && region && variant) {\n\t\tdir = language + \"/\" + script + \"/\" + region + \"/\" + variant + \"/\";\n\t\tfiles.push(dir + filename);\n\t}\n\n\treturn files;\n};\n\n/**\n * Return true if the given object has no properties.<p>\n *\n * Depends directive: !depends utils.js\n *\n * @param {Object} obj the object to check\n * @return {boolean} true if the given object has no properties, false otherwise\n */\nilib.isEmpty = function (obj) {\n\tvar prop = undefined;\n\n\tif (!obj) {\n\t\treturn true;\n\t}\n\n\tfor (prop in obj) {\n\t\tif (prop && typeof(obj[prop]) !== 'undefined') {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n};\n\n\n/**\n * @private\n */\nilib.hashCode = function(obj) {\n\tvar hash = 0;\n\n\tfunction addHash(hash, newValue) {\n\t\t// co-prime numbers creates a nicely distributed hash\n\t\thash *= 65543;\n\t\thash += newValue;\n\t\thash %= 2147483647;\n\t\treturn hash;\n\t}\n\n\tfunction stringHash(str) {\n\t\tvar hash = 0;\n\t\tfor (var i = 0; i < str.length; i++) {\n\t\t\thash = addHash(hash, str.charCodeAt(i));\n\t\t}\n\t\treturn hash;\n\t}\n\n\tswitch (typeof(obj)) {\n\t\tcase 'undefined':\n\t\t\thash = 0;\n\t\t\tbreak;\n\t\tcase 'string':\n\t\t\thash = stringHash(obj);\n\t\t\tbreak;\n\t\tcase 'function':\n\t\tcase 'number':\n\t\tcase 'xml':\n\t\t\thash = stringHash(String(obj));\n\t\t\tbreak;\n\t\tcase 'boolean':\n\t\t\thash = obj ? 1 : 0;\n\t\t\tbreak;\n\t\tcase 'object':\n\t\t\tvar props = [];\n\t\t\tfor (var p in obj) {\n\t\t\t\tif (obj.hasOwnProperty(p)) {\n\t\t\t\t\tprops.push(p);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// make sure the order of the properties doesn't matter\n\t\t\tprops.sort();\n\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\thash = addHash(hash, stringHash(props[i]));\n\t\t\t\thash = addHash(hash, ilib.hashCode(obj[props[i]]));\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\treturn hash;\n};\n\n\n/**\n * Load data using the new loader object or via the old function callback.\n * @private\n */\nilib._callLoadData = function (files, sync, params, callback) {\n\t// console.log(\"ilib._callLoadData called\");\n\tif (typeof(ilib._load) === 'function') {\n\t\t// console.log(\"ilib._callLoadData: calling as a regular function\");\n\t\treturn ilib._load(files, sync, params, callback);\n\t} else if (typeof(ilib._load) === 'object' && ilib._load instanceof ilib.Loader) {\n\t\t// console.log(\"ilib._callLoadData: calling as an object\");\n\t\treturn ilib._load.loadFiles(files, sync, params, callback);\n\t}\n\n\t// console.log(\"ilib._callLoadData: not calling. Type is \" + typeof(ilib._load) + \" and instanceof says \" + (ilib._load instanceof ilib.Loader));\n\treturn undefined;\n};\n\n/**\n * Find locale data or load it in. If the data with the given name is preassembled, it will\n * find the data in ilib.data. If the data is not preassembled but there is a loader function,\n * this function will call it to load the data. Otherwise, the callback will be called with\n * undefined as the data. This function will create a cache under the given class object.\n * If data was successfully loaded, it will be set into the cache so that future access to\n * the same data for the same locale is much quicker.<p>\n *\n * The parameters can specify any of the following properties:<p>\n *\n * <ul>\n * <li><i>name</i> - String. The name of the file being loaded. Default: resources.json\n * <li><i>object</i> - Object. The class attempting to load data. The cache is stored inside of here.\n * <li><i>locale</i> - ilib.Locale. The locale for which data is loaded. Default is the current locale.\n * <li><i>nonlocale</i> - boolean. If true, the data being loaded is not locale-specific.\n * <li><i>type</i> - String. Type of file to load. This can be \"json\" or \"other\" type. Default: \"json\"\n * <li><i>replace</i> - boolean. When merging json objects, this parameter controls whether to merge arrays\n * or have arrays replace each other. If true, arrays in child objects replace the arrays in parent\n * objects. When false, the arrays in child objects are concatenated with the arrays in parent objects.\n * <li><i>loadParams</i> - Object. An object with parameters to pass to the loader function\n * <li><i>sync</i> - boolean. Whether or not to load the data synchronously\n * <li><i>callback</i> - function(?)=. callback Call back function to call when the data is available.\n * Data is not returned from this method, so a callback function is mandatory.\n * </ul>\n *\n * @param {Object} params Parameters configuring how to load the files (see above)\n */\nilib.loadData = function(params) {\n\tvar name = \"resources.json\",\n\t\tobject = undefined,\n\t\tlocale = new ilib.Locale(ilib.getLocale()),\n\t\tsync = false,\n\t\ttype = undefined,\n\t\tloadParams = {},\n\t\tcallback = undefined,\n\t\tnonlocale = false,\n\t\treplace = false,\n\t\tbasename;\n\n\tif (!params || typeof(params.callback) !== 'function') {\n\t\treturn;\n\t}\n\n\tif (params.name) {\n\t\tname = params.name;\n\t}\n\tif (params.object) {\n\t\tobject = params.object;\n\t}\n\tif (params.locale) {\n\t\tlocale = (typeof(params.locale) === 'string') ? new ilib.Locale(params.locale) : params.locale;\n\t}\n\tif (params.type) {\n\t\ttype = params.type;\n\t}\n\tif (params.loadParams) {\n\t\tloadParams = params.loadParams;\n\t}\n\tif (params.sync) {\n\t\tsync = params.sync;\n\t}\n\tif (params.nonlocale) {\n\t\tnonlocale = !!params.nonlocale;\n\t}\n\tif (typeof(params.replace) === 'boolean') {\n\t\treplace = params.replace;\n\t}\n\n\tcallback = params.callback;\n\n\tif (object && !object.cache) {\n\t\tobject.cache = {};\n\t}\n\n\tif (!type) {\n\t\tvar dot = name.lastIndexOf(\".\");\n\t\ttype = (dot !== -1) ? name.substring(dot+1) : \"text\";\n\t}\n\n\tvar spec = ((!nonlocale && locale.getSpec().replace(/-/g, '_')) || \"root\") + \",\" + name + \",\" + String(ilib.hashCode(loadParams));\n\tif (!object || typeof(object.cache[spec]) === 'undefined') {\n\t\tvar data, returnOne = (loadParams && loadParams.returnOne);\n\n\t\tif (type === \"json\") {\n\t\t\t// console.log(\"type is json\");\n\t\t\tbasename = name.substring(0, name.lastIndexOf(\".\"));\n\t\t\tif (nonlocale) {\n\t\t\t\tbasename = basename.replace(/\\//g, '.').replace(/[\\\\\\+\\-]/g, \"_\");\n\t\t\t\tdata = ilib.data[basename];\n\t\t\t} else {\n\t\t\t\tdata = ilib.mergeLocData(basename, locale, replace, returnOne);\n\t\t\t}\n\t\t\tif (data) {\n\t\t\t\t// console.log(\"found assembled data\");\n\t\t\t\tif (object) {\n\t\t\t\t\tobject.cache[spec] = data;\n\t\t\t\t}\n\t\t\t\tcallback(data);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// console.log(\"ilib._load is \" + typeof(ilib._load));\n\t\tif (typeof(ilib._load) !== 'undefined') {\n\t\t\t// the data is not preassembled, so attempt to load it dynamically\n\t\t\tvar files = nonlocale ? [ name || \"resources.json\" ] : ilib.getLocFiles(locale, name);\n\t\t\tif (type !== \"json\") {\n\t\t\t\tloadParams.returnOne = true;\n\t\t\t}\n\n\t\t\tilib._callLoadData(files, sync, loadParams, ilib.bind(this, function(arr) {\n\t\t\t\tif (type === \"json\") {\n\t\t\t\t\tdata = ilib.data[basename] || {};\n\t\t\t\t\tfor (var i = 0; i < arr.length; i++) {\n\t\t\t\t\t\tif (typeof(arr[i]) !== 'undefined') {\n\t\t\t\t\t\t\tdata = loadParams.returnOne ? arr[i] : ilib.merge(data, arr[i], replace);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (object) {\n\t\t\t\t\t\tobject.cache[spec] = data;\n\t\t\t\t\t}\n\t\t\t\t\tcallback(data);\n\t\t\t\t} else {\n\t\t\t\t\tvar i = arr.length-1;\n\t\t\t\t\twhile (i > -1 && !arr[i]) {\n\t\t\t\t\t\ti--;\n\t\t\t\t\t}\n\t\t\t\t\tif (i > -1) {\n\t\t\t\t\t\tif (object) {\n\t\t\t\t\t\t\tobject.cache[spec] = arr[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcallback(arr[i]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcallback(undefined);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t} else {\n\t\t\t// no data other than the generic shared data\n\t\t\tif (type === \"json\") {\n\t\t\t\tdata = ilib.data[basename];\n\t\t\t}\n\t\t\tif (object && data) {\n\t\t\t\tobject.cache[spec] = data;\n\t\t\t}\n\t\t\tcallback(data);\n\t\t}\n\t} else {\n\t\tcallback(object.cache[spec]);\n\t}\n};\n\n/*\n * util/math.js - Misc math utility routines\n *\n * Copyright © 2013, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ilibglobal.js\n\n/**\n * Return the sign of the given number. If the sign is negative, this function\n * returns -1. If the sign is positive or zero, this function returns 1.\n * @static\n * @param {number} num the number to test\n * @return {number} -1 if the number is negative, and 1 otherwise\n */\nilib.signum = function (num) {\n\tvar n = num;\n\tif (typeof(num) === 'string') {\n\t\tn = parseInt(num, 10);\n\t} else if (typeof(num) !== 'number') {\n\t\treturn 1;\n\t}\n\treturn (n < 0) ? -1 : 1;\n};\n\n\n/**\n * @protected\n */\nilib._roundFnc = {\n\t/**\n\t * @static\n\t * @protected\n\t * @param {number} num number to round\n\t * @return {number} rounded number\n\t */\n\tfloor: function (num) {\n\t\treturn Math.floor(num);\n\t},\n\n\t/**\n\t * @static\n\t * @protected\n\t * @param {number} num number to round\n\t * @return {number} rounded number\n\t */\n\tceiling: function (num) {\n\t\treturn Math.ceil(num);\n\t},\n\n\t/**\n\t * @static\n\t * @protected\n\t * @param {number} num number to round\n\t * @return {number} rounded number\n\t */\n\tdown: function (num) {\n\t\treturn (num < 0) ? Math.ceil(num) : Math.floor(num);\n\t},\n\n\t/**\n\t * @static\n\t * @protected\n\t * @param {number} num number to round\n\t * @return {number} rounded number\n\t */\n\tup: function (num) {\n\t\treturn (num < 0) ? Math.floor(num) : Math.ceil(num);\n\t},\n\n\t/**\n\t * @static\n\t * @protected\n\t * @param {number} num number to round\n\t * @return {number} rounded number\n\t */\n\thalfup: function (num) {\n\t\treturn (num < 0) ? Math.ceil(num - 0.5) : Math.floor(num + 0.5);\n\t},\n\n\t/**\n\t * @static\n\t * @protected\n\t * @param {number} num number to round\n\t * @return {number} rounded number\n\t */\n\thalfdown: function (num) {\n\t\treturn (num < 0) ? Math.floor(num + 0.5) : Math.ceil(num - 0.5);\n\t},\n\n\t/**\n\t * @static\n\t * @protected\n\t * @param {number} num number to round\n\t * @return {number} rounded number\n\t */\n\thalfeven: function (num) {\n\t\treturn (Math.floor(num) % 2 === 0) ? Math.ceil(num - 0.5) : Math.floor(num + 0.5);\n\t},\n\n\t/**\n\t * @static\n\t * @protected\n\t * @param {number} num number to round\n\t * @return {number} rounded number\n\t */\n\thalfodd: function (num) {\n\t\treturn (Math.floor(num) % 2 !== 0) ? Math.ceil(num - 0.5) : Math.floor(num + 0.5);\n\t}\n};\n\n/**\n * Do a proper modulo function. The Javascript % operator will give the truncated\n * division algorithm, but for calendrical calculations, we need the Euclidean\n * division algorithm where the remainder of any division, whether the dividend\n * is negative or not, is always a positive number in the range [0, modulus).<p>\n *\n * Depends directive: !depends utils.js\n *\n * @param {number} dividend the number being divided\n * @param {number} modulus the number dividing the dividend. This should always be a positive number.\n * @return the remainder of dividing the dividend by the modulus.\n */\nilib.mod = function (dividend, modulus) {\n\tif (modulus == 0) {\n\t\treturn 0;\n\t}\n\tvar x = dividend % modulus;\n\treturn (x < 0) ? x + modulus : x;\n};\n\n/**\n * Do a proper adjusted modulo function. The Javascript % operator will give the truncated\n * division algorithm, but for calendrical calculations, we need the Euclidean\n * division algorithm where the remainder of any division, whether the dividend\n * is negative or not, is always a positive number in the range (0, modulus]. The adjusted\n * modulo function differs from the regular modulo function in that when the remainder is\n * zero, the modulus should be returned instead.<p>\n *\n * Depends directive: !depends utils.js\n *\n * @param {number} dividend the number being divided\n * @param {number} modulus the number dividing the dividend. This should always be a positive number.\n * @return the remainder of dividing the dividend by the modulus.\n */\nilib.amod = function (dividend, modulus) {\n\tif (modulus == 0) {\n\t\treturn 0;\n\t}\n\tvar x = dividend % modulus;\n\treturn (x <= 0) ? x + modulus : x;\n};\n\n/*\n * strings.js - ilib string subclass definition\n *\n * Copyright © 2012-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ilibglobal.js util/utils.js locale.js util/math.js\n\n// !data plurals\n\n/**\n * @class\n * Create a new string instance. This string inherits from the Javascript\n * String class, and adds two more methods, fmt and fmtChoice. It can be\n * used anywhere that a normal Javascript string is used. The formatting\n * methods are of course most useful when localizing strings in an app\n * or web site in combination with the ilib.ResBundle class.<p>\n *\n * Depends directive: !depends strings.js\n *\n * @constructor\n * @param {string|ilib.String=} string initialize this instance with this string\n */\nilib.String = function (string) {\n\tif (typeof(string) === 'object') {\n\t\tif (string instanceof ilib.String) {\n\t\t\tthis.str = string.str;\n\t\t} else {\n\t\t\tthis.str = string.toString();\n\t\t}\n\t} else if (typeof(string) === 'string') {\n\t\tthis.str = new String(string);\n\t} else {\n\t\tthis.str = \"\";\n\t}\n\tthis.length = this.str.length;\n\tthis.cpLength = -1;\n\tthis.localeSpec = ilib.getLocale();\n};\n\n/**\n * Return true if the given character is a Unicode surrogate character,\n * either high or low.\n *\n * @private\n * @static\n * @param {string} ch character to check\n * @return {boolean} true if the character is a surrogate\n */\nilib.String._isSurrogate = function (ch) {\n\tvar n = ch.charCodeAt(0);\n\treturn ((n >= 0xDC00 && n <= 0xDFFF) || (n >= 0xD800 && n <= 0xDBFF));\n};\n\n/**\n * Convert a UCS-4 code point to a Javascript string. The codepoint can be any valid\n * UCS-4 Unicode character, including supplementary characters. Standard Javascript\n * only supports supplementary characters using the UTF-16 encoding, which has\n * values in the range 0x0000-0xFFFF. String.fromCharCode() will only\n * give you a string containing 16-bit characters, and will not properly convert\n * the code point for a supplementary character (which has a value > 0xFFFF) into\n * two UTF-16 surrogate characters. Instead, it will just just give you whatever\n * single character happens to be the same as your code point modulo 0x10000, which\n * is almost never what you want.<p>\n *\n * Similarly, that means if you use String.charCodeAt()\n * you will only retrieve a 16-bit value, which may possibly be a single\n * surrogate character that is part of a surrogate pair representing a character\n * in the supplementary plane. It will not give you a code point. Use\n * ilib.String.codePointAt() to access code points in a string, or use\n * an iterator to walk through the code points in a string.\n *\n * @static\n * @param {number} codepoint UCS-4 code point to convert to a character\n * @return {string} a string containing the character represented by the codepoint\n */\nilib.String.fromCodePoint = function (codepoint) {\n\tif (codepoint < 0x10000) {\n\t\treturn String.fromCharCode(codepoint);\n\t} else {\n\t\tvar high = Math.floor(codepoint / 0x10000) - 1;\n\t\tvar low = codepoint & 0xFFFF;\n\n\t\treturn String.fromCharCode(0xD800 | ((high & 0x000F) << 6) |  ((low & 0xFC00) >> 10)) +\n\t\t\tString.fromCharCode(0xDC00 | (low & 0x3FF));\n\t}\n};\n\n/**\n * Convert the character or the surrogate pair at the given\n * index into the intrinsic Javascript string to a Unicode\n * UCS-4 code point.\n *\n * @param {string} str string to get the code point from\n * @param {number} index index into the string\n * @return {number} code point of the character at the\n * given index into the string\n */\nilib.String.toCodePoint = function(str, index) {\n\tif (!str || str.length === 0) {\n\t\treturn -1;\n\t}\n\tvar code = -1, high = str.charCodeAt(index);\n\tif (high >= 0xD800 && high <= 0xDBFF) {\n\t\tif (str.length > index+1) {\n\t\t\tvar low = str.charCodeAt(index+1);\n\t\t\tif (low >= 0xDC00 && low <= 0xDFFF) {\n\t\t\t\tcode = (((high & 0x3C0) >> 6) + 1) << 16 |\n\t\t\t\t\t(((high & 0x3F) << 10) | (low & 0x3FF));\n\t\t\t}\n\t\t}\n\t} else {\n\t\tcode = high;\n\t}\n\n\treturn code;\n};\n\n/**\n * Load the plural the definitions of plurals for the locale.\n * @param {boolean=} sync\n * @param {ilib.Locale|string=} locale\n * @param {Object=} loadParams\n * @param {function(*)=} onLoad\n */\nilib.String.loadPlurals = function (sync, locale, loadParams, onLoad) {\n\tvar loc;\n\tif (locale) {\n\t\tloc = (typeof(locale) === 'string') ? new ilib.Locale(locale) : locale;\n\t} else {\n\t\tloc = new ilib.Locale(ilib.getLocale());\n\t}\n\tvar spec = loc.getLanguage();\n\tif (!ilib.data[\"plurals_\" + spec]) {\n\t\tilib.loadData({\n\t\t\tname: \"plurals.json\",\n\t\t\tobject: ilib.String,\n\t\t\tlocale: loc,\n\t\t\tsync: sync,\n\t\t\tloadParams: loadParams,\n\t\t\tcallback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(plurals) {\n\t\t\t\tif (!plurals) {\n\t\t\t\t\tilib.String.cache[spec] = {};\n\t\t\t\t}\n\t\t\t\tilib.data[\"plurals_\" + spec] = plurals || {};\n\t\t\t\tif (onLoad && typeof(onLoad) === 'function') {\n\t\t\t\t\tonLoad(ilib.data[\"plurals_\" + spec]);\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t} else {\n\t\tif (onLoad && typeof(onLoad) === 'function') {\n\t\t\tonLoad(ilib.data[\"plurals_\" + spec]);\n\t\t}\n\t}\n};\n\n/**\n * @private\n * @static\n */\nilib.String._fncs = {\n\t/**\n\t * @private\n\t * @param {Object} obj\n\t * @return {string|undefined}\n\t */\n\tfirstProp: function (obj) {\n\t\tfor (var p in obj) {\n\t\t\tif (p && obj[p]) {\n\t\t\t\treturn p;\n\t\t\t}\n\t\t}\n\t\treturn undefined; // should never get here\n\t},\n\n\t/**\n\t * @private\n\t * @param {Object} obj\n\t * @param {number} n\n\t * @return {?}\n\t */\n\tgetValue: function (obj, n) {\n\t\tif (typeof(obj) === 'object') {\n\t\t\tvar subrule = ilib.String._fncs.firstProp(obj);\n\t\t\treturn ilib.String._fncs[subrule](obj[subrule], n);\n\t\t} else if (typeof(obj) === 'string') {\n\t\t\treturn n;\n\t\t} else {\n\t\t\treturn obj;\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t * @param {number} n\n\t * @param {Array.<number|Array.<number>>} range\n\t * @return {boolean}\n\t */\n\tmatchRangeContinuous: function(n, range) {\n\t\tfor (var num in range) {\n\t\t\tif (typeof(num) !== 'undefined' && typeof(range[num]) !== 'undefined') {\n\t\t\t\tvar obj = /** @type {Object|null|undefined} */ range[num];\n\t\t\t\tif (typeof(obj) === 'number') {\n\t\t\t\t\tif (n === range[num]) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t} else if (Object.prototype.toString.call(obj) === '[object Array]') {\n\t\t\t\t\tif (n >= obj[0] && n <= obj[1]) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t},\n\n\t/**\n\t * @private\n\t * @param {number} n\n\t * @param {Array.<number|Array.<number>>} range\n\t * @return {boolean}\n\t */\n\tmatchRange: function(n, range) {\n\t\tif (Math.floor(n) !== n) {\n\t\t\treturn false;\n\t\t}\n\t\treturn ilib.String._fncs.matchRangeContinuous(n, range);\n\t},\n\n\t/**\n\t * @private\n\t * @param {Object} rule\n\t * @param {number} n\n\t * @return {boolean}\n\t */\n\tis: function(rule, n) {\n\t\tvar left = ilib.String._fncs.getValue(rule[0], n);\n\t\tvar right = ilib.String._fncs.getValue(rule[1], n);\n\t\treturn left == right;\n\t\t// return ilib.String._fncs.getValue(rule[0]) == ilib.String._fncs.getValue(rule[1]);\n\t},\n\n\t/**\n\t * @private\n\t * @param {Object} rule\n\t * @param {number} n\n\t * @return {boolean}\n\t */\n\tisnot: function(rule, n) {\n\t\treturn ilib.String._fncs.getValue(rule[0], n) != ilib.String._fncs.getValue(rule[1], n);\n\t},\n\n\t/**\n\t * @private\n\t * @param {Object} rule\n\t * @param {number} n\n\t * @return {boolean}\n\t */\n\tinrange: function(rule, n) {\n\t\treturn ilib.String._fncs.matchRange(ilib.String._fncs.getValue(rule[0], n), rule[1]);\n\t},\n\n\t/**\n\t * @private\n\t * @param {Object} rule\n\t * @param {number} n\n\t * @return {boolean}\n\t */\n\tnotin: function(rule, n) {\n\t\treturn !ilib.String._fncs.matchRange(ilib.String._fncs.getValue(rule[0], n), rule[1]);\n\t},\n\n\t/**\n\t * @private\n\t * @param {Object} rule\n\t * @param {number} n\n\t * @return {boolean}\n\t */\n\twithin: function(rule, n) {\n\t\treturn ilib.String._fncs.matchRangeContinuous(ilib.String._fncs.getValue(rule[0], n), rule[1]);\n\t},\n\n\t/**\n\t * @private\n\t * @param {Object} rule\n\t * @param {number} n\n\t * @return {number}\n\t */\n\tmod: function(rule, n) {\n\t\treturn ilib.mod(ilib.String._fncs.getValue(rule[0], n), ilib.String._fncs.getValue(rule[1], n));\n\t},\n\n\t/**\n\t * @private\n\t * @param {Object} rule\n\t * @param {number} n\n\t * @return {number}\n\t */\n\tn: function(rule, n) {\n\t\treturn n;\n\t},\n\n\t/**\n\t * @private\n\t * @param {Object} rule\n\t * @param {number} n\n\t * @return {boolean}\n\t */\n\tor: function(rule, n) {\n\t\treturn ilib.String._fncs.getValue(rule[0], n) || ilib.String._fncs.getValue(rule[1], n);\n\t},\n\n\t/**\n\t * @private\n\t * @param {Object} rule\n\t * @param {number} n\n\t * @return {boolean}\n\t */\n\tand: function(rule, n) {\n\t\treturn ilib.String._fncs.getValue(rule[0], n) && ilib.String._fncs.getValue(rule[1], n);\n\t}\n};\n\nilib.String.prototype = {\n\t/**\n\t * Return the length of this string in characters. This function defers to the regular\n\t * Javascript string class in order to perform the length function. Please note that this\n\t * method is a real method, whereas the length property of Javascript strings is\n\t * implemented by native code and appears as a property.<p>\n\t *\n\t * Example:\n\t *\n\t * <pre>\n\t * var str = new ilib.String(\"this is a string\");\n\t * console.log(\"String is \" + str._length() + \" characters long.\");\n\t * </pre>\n\t * @private\n\t */\n\t_length: function () {\n\t\treturn this.str.length;\n\t},\n\n\t/**\n\t * Format this string instance as a message, replacing the parameters with\n\t * the given values.<p>\n\t *\n\t * The string can contain any text that a regular Javascript string can\n\t * contain. Replacement parameters have the syntax:\n\t *\n\t * <pre>\n\t * {name}\n\t * </pre>\n\t *\n\t * Where \"name\" can be any string surrounded by curly brackets. The value of\n\t * \"name\" is taken from the parameters argument.<p>\n\t *\n\t * Example:\n\t *\n\t * <pre>\n\t * var str = new ilib.String(\"There are {num} objects.\");\n\t * console.log(str.format({\n\t *   num: 12\n\t * });\n\t * </pre>\n\t *\n\t * Would give the output:\n\t *\n\t * <pre>\n\t * There are 12 objects.\n\t * </pre>\n\t *\n\t * If a property is missing from the parameter block, the replacement\n\t * parameter substring is left untouched in the string, and a different\n\t * set of parameters may be applied a second time. This way, different\n\t * parts of the code may format different parts of the message that they\n\t * happen to know about.<p>\n\t *\n\t * Example:\n\t *\n\t * <pre>\n\t * var str = new ilib.String(\"There are {num} objects in the {container}.\");\n\t * console.log(str.format({\n\t *   num: 12\n\t * });\n\t * </pre>\n\t *\n\t * Would give the output:<p>\n\t *\n\t * <pre>\n\t * There are 12 objects in the {container}.\n\t * </pre>\n\t *\n\t * The result can then be formatted again with a different parameter block that\n\t * specifies a value for the container property.\n\t *\n\t * @param params a Javascript object containing values for the replacement\n\t * parameters in the current string\n\t * @return a new ilib.String instance with as many replacement parameters filled\n\t * out as possible with real values.\n\t */\n\tformat: function (params) {\n\t\tvar formatted = this.str;\n\t\tif (params) {\n\t\t\tvar regex;\n\t\t\tfor (var p in params) {\n\t\t\t\tif (typeof(params[p]) !== 'undefined') {\n\t\t\t\t\tregex = new RegExp(\"\\{\"+p+\"\\}\", \"g\");\n\t\t\t\t\tformatted = formatted.replace(regex, params[p]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn formatted.toString();\n\t},\n\n\t/**\n\t * Format a string as one of a choice of strings dependent on the value of\n\t * a particular argument index.<p>\n\t *\n\t * The syntax of the choice string is as follows. The string contains a\n\t * series of choices separated by a vertical bar character \"|\". Each choice\n\t * has a value or range of values to match followed by a hash character \"#\"\n\t * followed by the string to use if the variable matches the criteria.<p>\n\t *\n\t * Example string:\n\t *\n\t * <pre>\n\t * var num = 2;\n\t * var str = new ilib.String(\"0#There are no objects.|1#There is one object.|2#There are {number} objects.\");\n\t * console.log(str.formatChoice(num, {\n\t *   number: num\n\t * }));\n\t * </pre>\n\t *\n\t * Gives the output:\n\t *\n\t * <pre>\n\t * \"There are 2 objects.\"\n\t * </pre>\n\t *\n\t * The strings to format may contain replacement variables that will be formatted\n\t * using the format() method above and the params argument as a source of values\n\t * to use while formatting those variables.<p>\n\t *\n\t * If the criterion for a particular choice is empty, that choice will be used\n\t * as the default one for use when none of the other choice's criteria match.<p>\n\t *\n\t * Example string:\n\t *\n\t * <pre>\n\t * var num = 22;\n\t * var str = new ilib.String(\"0#There are no objects.|1#There is one object.|#There are {number} objects.\");\n\t * console.log(str.formatChoice(num, {\n\t *   number: num\n\t * }));\n\t * </pre>\n\t *\n\t * Gives the output:\n\t *\n\t * <pre>\n\t * \"There are 22 objects.\"\n\t * </pre>\n\t *\n\t * If multiple choice patterns can match a given argument index, the first one\n\t * encountered in the string will be used. If no choice patterns match the\n\t * argument index, then the default choice will be used. If there is no default\n\t * choice defined, then this method will return an empty string.<p>\n\t *\n\t * <b>Special Syntax</b><p>\n\t *\n\t * For any choice format string, all of the patterns in the string should be\n\t * of a single type: numeric, boolean, or string/regexp. The type of the\n\t * patterns is determined by the type of the argument index parameter.<p>\n\t *\n\t * If the argument index is numeric, then some special syntax can be used\n\t * in the patterns to match numeric ranges.<p>\n\t *\n\t * <ul>\n\t * <li><i>&gt;x</i> - match any number that is greater than x\n\t * <li><i>&gt;=x</i> - match any number that is greater than or equal to x\n\t * <li><i>&lt;x</i> - match any number that is less than x\n\t * <li><i>&lt;=x</i> - match any number that is less than or equal to x\n\t * <li><i>start-end</i> - match any number in the range [start,end)\n\t * <li><i>zero</i> - match any number in the class \"zero\". (See below for\n\t * a description of number classes.)\n\t * <li><i>one</i> - match any number in the class \"one\"\n\t * <li><i>two</i> - match any number in the class \"two\"\n\t * <li><i>few</i> - match any number in the class \"few\"\n\t * <li><i>many</i> - match any number in the class \"many\"\n\t * </ul>\n\t *\n\t * A number class defines a set of numbers that receive a particular syntax\n\t * in the strings. For example, in Slovenian, integers ending in the digit\n\t * \"1\" are in the \"one\" class, including 1, 21, 31, ... 101, 111, etc.\n\t * Similarly, integers ending in the digit \"2\" are in the \"two\" class.\n\t * Integers ending in the digits \"3\" or \"4\" are in the \"few\" class, and\n\t * every other integer is handled by the default string.<p>\n\t *\n\t * The definition of what numbers are included in a class is locale-dependent.\n\t * They are defined in the data file plurals.json. If your string is in a\n\t * different locale than the default for ilib, you should call the setLocale()\n\t * method of the string instance before calling this method.<p>\n\t *\n\t * <b>Other Pattern Types</b><p>\n\t *\n\t * If the argument index is a boolean, the string values \"true\" and \"false\"\n\t * may appear as the choice patterns.<p>\n\t *\n\t * If the argument index is of type string, then the choice patterns may contain\n\t * regular expressions, or static strings as degenerate regexps.\n\t *\n\t * @param {*} argIndex The index into the choice array of the current parameter\n\t * @param {Object} params The hash of parameter values that replace the replacement\n\t * variables in the string\n\t * @throws \"syntax error in choice format pattern: \" if there is a syntax error\n\t * @return {string} the formatted string\n\t */\n\tformatChoice: function(argIndex, params) {\n\t\tvar choices = this.str.split(\"|\");\n\t\tvar type = typeof(argIndex);\n\t\tvar limits = [];\n\t\tvar strings = [];\n\t\tvar i;\n\t\tvar parts;\n\t\tvar limit;\n\t\tvar arg;\n\t\tvar result = undefined;\n\t\tvar defaultCase = \"\";\n\n\t\tif (this.str.length === 0) {\n\t\t\t// nothing to do\n\t\t\treturn \"\";\n\t\t}\n\n\t\t// first parse all the choices\n\t\tfor (i = 0; i < choices.length; i++) {\n\t\t\tparts = choices[i].split(\"#\");\n\t\t\tif (parts.length > 2) {\n\t\t\t\tlimits[i] = parts[0];\n\t\t\t\tparts = parts.shift();\n\t\t\t\tstrings[i] = parts.join(\"#\");\n\t\t\t} else if (parts.length === 2) {\n\t\t\t\tlimits[i] = parts[0];\n\t\t\t\tstrings[i] = parts[1];\n\t\t\t} else {\n\t\t\t\t// syntax error\n\t\t\t\tthrow \"syntax error in choice format pattern: \" + choices[i];\n\t\t\t}\n\t\t}\n\n\t\t// then apply the argument index\n\t\tfor (i = 0; i < limits.length; i++) {\n\t\t\tif (limits[i].length === 0) {\n\t\t\t\t// this is default case\n\t\t\t\tdefaultCase = new ilib.String(strings[i]);\n\t\t\t} else {\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'number':\n\t\t\t\t\t\targ = parseInt(argIndex, 10);\n\n\t\t\t\t\t\tif (limits[i].substring(0,2) === \"<=\") {\n\t\t\t\t\t\t\tlimit = parseFloat(limits[i].substring(2));\n\t\t\t\t\t\t\tif (arg <= limit) {\n\t\t\t\t\t\t\t\tresult = new ilib.String(strings[i]);\n\t\t\t\t\t\t\t\ti = limits.length;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (limits[i].substring(0,2) === \">=\") {\n\t\t\t\t\t\t\tlimit = parseFloat(limits[i].substring(2));\n\t\t\t\t\t\t\tif (arg >= limit) {\n\t\t\t\t\t\t\t\tresult = new ilib.String(strings[i]);\n\t\t\t\t\t\t\t\ti = limits.length;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (limits[i].charAt(0) === \"<\") {\n\t\t\t\t\t\t\tlimit = parseFloat(limits[i].substring(1));\n\t\t\t\t\t\t\tif (arg < limit) {\n\t\t\t\t\t\t\t\tresult = new ilib.String(strings[i]);\n\t\t\t\t\t\t\t\ti = limits.length;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (limits[i].charAt(0) === \">\") {\n\t\t\t\t\t\t\tlimit = parseFloat(limits[i].substring(1));\n\t\t\t\t\t\t\tif (arg > limit) {\n\t\t\t\t\t\t\t\tresult = new ilib.String(strings[i]);\n\t\t\t\t\t\t\t\ti = limits.length;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.locale = this.locale || new ilib.Locale(this.localeSpec);\n\t\t\t\t\t\t\tswitch (limits[i]) {\n\t\t\t\t\t\t\t\tcase \"zero\":\n\t\t\t\t\t\t\t\tcase \"one\":\n\t\t\t\t\t\t\t\tcase \"two\":\n\t\t\t\t\t\t\t\tcase \"few\":\n\t\t\t\t\t\t\t\tcase \"many\":\n\t\t\t\t\t\t\t\t\t// CLDR locale-dependent number classes\n\t\t\t\t\t\t\t\t\tvar ruleset = ilib.data[\"plurals_\" + this.locale.getLanguage()];\n\t\t\t\t\t\t\t\t\tif (ruleset) {\n\t\t\t\t\t\t\t\t\t\tvar rule = ruleset[limits[i]];\n\t\t\t\t\t\t\t\t\t\tif (ilib.String._fncs.getValue(rule, arg)) {\n\t\t\t\t\t\t\t\t\t\t\tresult = new ilib.String(strings[i]);\n\t\t\t\t\t\t\t\t\t\t\ti = limits.length;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tvar dash = limits[i].indexOf(\"-\");\n\t\t\t\t\t\t\t\t\tif (dash !== -1) {\n\t\t\t\t\t\t\t\t\t\t// range\n\t\t\t\t\t\t\t\t\t\tvar start = limits[i].substring(0, dash);\n\t\t\t\t\t\t\t\t\t\tvar end = limits[i].substring(dash+1);\n\t\t\t\t\t\t\t\t\t\tif (arg >= parseInt(start, 10) && arg <= parseInt(end, 10)) {\n\t\t\t\t\t\t\t\t\t\t\tresult = new ilib.String(strings[i]);\n\t\t\t\t\t\t\t\t\t\t\ti = limits.length;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else if (arg === parseInt(limits[i], 10)) {\n\t\t\t\t\t\t\t\t\t\t// exact amount\n\t\t\t\t\t\t\t\t\t\tresult = new ilib.String(strings[i]);\n\t\t\t\t\t\t\t\t\t\ti = limits.length;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'boolean':\n\t\t\t\t\t\tif (limits[i] === \"true\" && argIndex === true) {\n\t\t\t\t\t\t\tresult = new ilib.String(strings[i]);\n\t\t\t\t\t\t\ti = limits.length;\n\t\t\t\t\t\t} else if (limits[i] === \"false\" && argIndex === false) {\n\t\t\t\t\t\t\tresult = new ilib.String(strings[i]);\n\t\t\t\t\t\t\ti = limits.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'string':\n\t\t\t\t\t\tvar regexp = new RegExp(limits[i], \"i\");\n\t\t\t\t\t\tif (regexp.test(argIndex)) {\n\t\t\t\t\t\t\tresult = new ilib.String(strings[i]);\n\t\t\t\t\t\t\ti = limits.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'object':\n\t\t\t\t\t\tthrow \"syntax error: fmtChoice parameter for the argument index cannot be an object\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!result) {\n\t\t\tresult = defaultCase || new ilib.String(\"\");\n\t\t}\n\n\t\tresult = result.format(params);\n\n\t\treturn result.toString();\n\t},\n\n\t// delegates\n\t/**\n\t * Same as String.toString()\n\t * @return {string} this instance as regular Javascript string\n\t */\n\ttoString: function () {\n\t\treturn this.str.toString();\n\t},\n\n\t/**\n\t * Same as String.valueOf()\n\t * @return {string} this instance as a regular Javascript string\n\t */\n\tvalueOf: function () {\n\t\treturn this.str.valueOf();\n\t},\n\n\t/**\n\t * Same as String.charAt()\n\t * @param {number} index the index of the character being sought\n\t * @return {ilib.String} the character at the given index\n\t */\n\tcharAt: function(index) {\n\t\treturn new ilib.String(this.str.charAt(index));\n\t},\n\n\t/**\n\t * Same as String.charCodeAt(). This only reports on\n\t * 2-byte UCS-2 Unicode values, and does not take into\n\t * account supplementary characters encoded in UTF-16.\n\t * If you would like to take account of those characters,\n\t * use codePointAt() instead.\n\t * @param {number} index the index of the character being sought\n\t * @return {number} the character code of the character at the\n\t * given index in the string\n\t */\n\tcharCodeAt: function(index) {\n\t\treturn this.str.charCodeAt(index);\n\t},\n\n\t/**\n\t * Same as String.concat()\n\t * @param {string} strings strings to concatenate to the current one\n\t * @return {ilib.String} a concatenation of the given strings\n\t */\n\tconcat: function(strings) {\n\t\treturn new ilib.String(this.str.concat(strings));\n\t},\n\n\t/**\n\t * Same as String.indexOf()\n\t * @param {string} searchValue string to search for\n\t * @param {number} start index into the string to start searching, or\n\t * undefined to search the entire string\n\t * @return {number} index into the string of the string being sought,\n\t * or -1 if the string is not found\n\t */\n\tindexOf: function(searchValue, start) {\n\t\treturn this.str.indexOf(searchValue, start);\n\t},\n\n\t/**\n\t * Same as String.lastIndexOf()\n\t * @param {string} searchValue string to search for\n\t * @param {number} start index into the string to start searching, or\n\t * undefined to search the entire string\n\t * @return {number} index into the string of the string being sought,\n\t * or -1 if the string is not found\n\t */\n\tlastIndexOf: function(searchValue, start) {\n\t\treturn this.str.lastIndexOf(searchValue, start);\n\t},\n\n\t/**\n\t * Same as String.match()\n\t * @param {string} regexp the regular expression to match\n\t * @return {Array.<string>} an array of matches\n\t */\n\tmatch: function(regexp) {\n\t\treturn this.str.match(regexp);\n\t},\n\n\t/**\n\t * Same as String.replace()\n\t * @param {string} searchValue a regular expression to search for\n\t * @param {string} newValue the string to replace the matches with\n\t * @return {ilib.String} a new string with all the matches replaced\n\t * with the new value\n\t */\n\treplace: function(searchValue, newValue) {\n\t\treturn new ilib.String(this.str.replace(searchValue, newValue));\n\t},\n\n\t/**\n\t * Same as String.search()\n\t * @param {string} regexp the regular expression to search for\n\t * @return {number} position of the match, or -1 for no match\n\t */\n\tsearch: function(regexp) {\n\t\treturn this.str.search(regexp);\n\t},\n\n\t/**\n\t * Same as String.slice()\n\t * @param {number} start first character to include in the string\n\t * @param {number} end include all characters up to, but not including\n\t * the end character\n\t * @return {ilib.String} a slice of the current string\n\t */\n\tslice: function(start, end) {\n\t\treturn new ilib.String(this.str.slice(start, end));\n\t},\n\n\t/**\n\t * Same as String.split()\n\t * @param {string} separator regular expression to match to find\n\t * separations between the parts of the text\n\t * @param {number} limit maximum number of items in the final\n\t * output array. Any items beyond that limit will be ignored.\n\t * @return {Array.<string>} the parts of the current string split\n\t * by the separator\n\t */\n\tsplit: function(separator, limit) {\n\t\treturn this.str.split(separator, limit);\n\t},\n\n\t/**\n\t * Same as String.substr()\n\t * @param {number} start the index of the character that should\n\t * begin the returned substring\n\t * @param {number} length the number of characters to return after\n\t * the start character.\n\t * @return {ilib.String} the requested substring\n\t */\n\tsubstr: function(start, length) {\n\t\treturn new ilib.String(this.str.substr(start, length));\n\t},\n\n\t/**\n\t * Same as String.substring()\n\t * @param {number} from the index of the character that should\n\t * begin the returned substring\n\t * @param {number} to the index where to stop the extraction. If\n\t * omitted, extracts the rest of the string\n\t * @return {ilib.String} the requested substring\n\t */\n\tsubstring: function(from, to) {\n\t\treturn this.str.substring(from, to);\n\t},\n\n\t/**\n\t * Same as String.toLowerCase(). Note that this method is\n\t * not locale-sensitive.\n\t * @return {ilib.String} a string with the first character\n\t * lower-cased\n\t */\n\ttoLowerCase: function() {\n\t\treturn this.str.toLowerCase();\n\t},\n\n\t/**\n\t * Same as String.toUpperCase(). Note that this method is\n\t * not locale-sensitive. Use toLocaleUpperCase() instead\n\t * to get locale-sensitive behaviour.\n\t * @return {ilib.String} a string with the first character\n\t * upper-cased\n\t */\n\ttoUpperCase: function() {\n\t\treturn this.str.toUpperCase();\n\t},\n\n\t/**\n\t * Convert the character or the surrogate pair at the given\n\t * index into the string to a Unicode UCS-4 code point.\n\t * @protected\n\t * @param {number} index index into the string\n\t * @return {number} code point of the character at the\n\t * given index into the string\n\t */\n\t_toCodePoint: function (index) {\n\t\treturn ilib.String.toCodePoint(this.str, index);\n\t},\n\n\t/**\n\t * Call the callback with each character in the string one at\n\t * a time, taking care to step through the surrogate pairs in\n\t * the UTF-16 encoding properly.<p>\n\t *\n\t * The standard Javascript String's charAt() method only\n\t * returns a particular 16-bit character in the\n\t * UTF-16 encoding scheme.\n\t * If the index to charAt() is pointing to a low- or\n\t * high-surrogate character,\n\t * it will return the surrogate character rather\n\t * than the the character\n\t * in the supplementary planes that the two surrogates together\n\t * encode. This function will call the callback with the full\n\t * character, making sure to join two\n\t * surrogates into one character in the supplementary planes\n\t * where necessary.<p>\n\t *\n\t * @param {function(string)} callback a callback function to call with each\n\t * full character in the current string\n\t */\n\tforEach: function(callback) {\n\t\tif (typeof(callback) === 'function') {\n\t\t\tvar it = this.charIterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tcallback(it.next());\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Call the callback with each numeric code point in the string one at\n\t * a time, taking care to step through the surrogate pairs in\n\t * the UTF-16 encoding properly.<p>\n\t *\n\t * The standard Javascript String's charCodeAt() method only\n\t * returns information about a particular 16-bit character in the\n\t * UTF-16 encoding scheme.\n\t * If the index to charCodeAt() is pointing to a low- or\n\t * high-surrogate character,\n\t * it will return the code point of the surrogate character rather\n\t * than the code point of the character\n\t * in the supplementary planes that the two surrogates together\n\t * encode. This function will call the callback with the full\n\t * code point of each character, making sure to join two\n\t * surrogates into one code point in the supplementary planes.<p>\n\t *\n\t * @param {function(string)} callback a callback function to call with each\n\t * code point in the current string\n\t */\n\tforEachCodePoint: function(callback) {\n\t\tif (typeof(callback) === 'function') {\n\t\t\tvar it = this.iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tcallback(it.next());\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Return an iterator that will step through all of the characters\n\t * in the string one at a time and return their code points, taking\n\t * care to step through the surrogate pairs in UTF-16 encoding\n\t * properly.<p>\n\t *\n\t * The standard Javascript String's charCodeAt() method only\n\t * returns information about a particular 16-bit character in the\n\t * UTF-16 encoding scheme.\n\t * If the index is pointing to a low- or high-surrogate character,\n\t * it will return a code point of the surrogate character rather\n\t * than the code point of the character\n\t * in the supplementary planes that the two surrogates together\n\t * encode.<p>\n\t *\n\t * The iterator instance returned has two methods, hasNext() which\n\t * returns true if the iterator has more code points to iterate through,\n\t * and next() which returns the next code point as a number.<p>\n\t *\n\t * @return {Object} an iterator\n\t * that iterates through all the code points in the string\n\t */\n\titerator: function() {\n\t\t/**\n\t\t * @constructor\n\t\t */\n\t\tfunction _iterator (istring) {\n\t\t\tthis.index = 0;\n\t\t\tthis.hasNext = function () {\n\t\t\t\treturn (this.index < istring.str.length);\n\t\t\t};\n\t\t\tthis.next = function () {\n\t\t\t\tif (this.index < istring.str.length) {\n\t\t\t\t\tvar num = istring._toCodePoint(this.index);\n\t\t\t\t\tthis.index += ((num > 0xFFFF) ? 2 : 1);\n\t\t\t\t} else {\n\t\t\t\t\tnum = -1;\n\t\t\t\t}\n\t\t\t\treturn num;\n\t\t\t};\n\t\t};\n\t\treturn new _iterator(this);\n\t},\n\n\t/**\n\t * Return an iterator that will step through all of the characters\n\t * in the string one at a time, taking\n\t * care to step through the surrogate pairs in UTF-16 encoding\n\t * properly.<p>\n\t *\n\t * The standard Javascript String's charAt() method only\n\t * returns information about a particular 16-bit character in the\n\t * UTF-16 encoding scheme.\n\t * If the index is pointing to a low- or high-surrogate character,\n\t * it will return that surrogate character rather\n\t * than the surrogate pair which represents a character\n\t * in the supplementary planes.<p>\n\t *\n\t * The iterator instance returned has two methods, hasNext() which\n\t * returns true if the iterator has more characters to iterate through,\n\t * and next() which returns the next character.<p>\n\t *\n\t * @return {Object} an iterator\n\t * that iterates through all the characters in the string\n\t */\n\tcharIterator: function() {\n\t\t/**\n\t\t * @constructor\n\t\t */\n\t\tfunction _chiterator (istring) {\n\t\t\tthis.index = 0;\n\t\t\tthis.hasNext = function () {\n\t\t\t\treturn (this.index < istring.str.length);\n\t\t\t};\n\t\t\tthis.next = function () {\n\t\t\t\tvar ch;\n\t\t\t\tif (this.index < istring.str.length) {\n\t\t\t\t\tch = istring.str.charAt(this.index);\n\t\t\t\t\tif (ilib.String._isSurrogate(ch) &&\n\t\t\t\t\t\t\tthis.index+1 < istring.str.length &&\n\t\t\t\t\t\t\tilib.String._isSurrogate(istring.str.charAt(this.index+1))) {\n\t\t\t\t\t\tthis.index++;\n\t\t\t\t\t\tch += istring.str.charAt(this.index);\n\t\t\t\t\t}\n\t\t\t\t\tthis.index++;\n\t\t\t\t}\n\t\t\t\treturn ch;\n\t\t\t};\n\t\t};\n\t\treturn new _chiterator(this);\n\t},\n\n\t/**\n\t * Return the code point at the given index when the string is viewed\n\t * as an array of code points. If the index is beyond the end of the\n\t * array of code points or if the index is negative, -1 is returned.\n\t * @param {number} index index of the code point\n\t * @return {number} code point of the character at the given index into\n\t * the string\n\t */\n\tcodePointAt: function (index) {\n\t\tif (index < 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tvar count,\n\t\t\tit = this.iterator(),\n\t\t\tch;\n\t\tfor (count = index; count >= 0 && it.hasNext(); count--) {\n\t\t\tch = it.next();\n\t\t}\n\t\treturn (count < 0) ? ch : -1;\n\t},\n\n\t/**\n\t * Set the locale to use when processing choice formats. The locale\n\t * affects how number classes are interpretted. In some cultures,\n\t * the limit \"few\" maps to \"any integer that ends in the digits 2 to 9\" and\n\t * in yet others, \"few\" maps to \"any integer that ends in the digits\n\t * 3 or 4\".\n\t * @param {ilib.Locale|string} locale locale to use when processing choice\n\t * formats with this string\n\t * @param {boolean=} sync [optional] whether to load the locale data synchronously\n\t * or not\n\t * @param {Object=} loadParams [optional] parameters to pass to the loader function\n\t * @param {function(*)=} onLoad [optional] function to call when the loading is done\n\t */\n\tsetLocale: function (locale, sync, loadParams, onLoad) {\n\t\tif (typeof(locale) === 'object') {\n\t\t\tthis.locale = locale;\n\t\t} else {\n\t\t\tthis.localeSpec = locale;\n\t\t\tthis.locale = new ilib.Locale(locale);\n\t\t}\n\n\t\tilib.String.loadPlurals(typeof(sync) !== 'undefined' ? sync : true, this.locale, loadParams, onLoad);\n\t},\n\n\t/**\n\t * Return the locale to use when processing choice formats. The locale\n\t * affects how number classes are interpretted. In some cultures,\n\t * the limit \"few\" maps to \"any integer that ends in the digits 2 to 9\" and\n\t * in yet others, \"few\" maps to \"any integer that ends in the digits\n\t * 3 or 4\".\n\t * @return {string} localespec to use when processing choice\n\t * formats with this string\n\t */\n\tgetLocale: function () {\n\t\treturn (this.locale ? this.locale.getSpec() : this.localeSpec) || ilib.getLocale();\n\t},\n\n\t/**\n\t * Return the number of code points in this string. This may be different\n\t * than the number of characters, as the UTF-16 encoding that Javascript\n\t * uses for its basis returns surrogate pairs separately. Two 2-byte\n\t * surrogate characters together make up one character/code point in\n\t * the supplementary character planes. If your string contains no\n\t * characters in the supplementary planes, this method will return the\n\t * same thing as the length() method.\n\t * @return {number} the number of code points in this string\n\t */\n\tcodePointLength: function () {\n\t\tif (this.cpLength === -1) {\n\t\t\tvar it = this.iterator();\n\t\t\tthis.cpLength = 0;\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tthis.cpLength++;\n\t\t\t\tit.next();\n\t\t\t};\n\t\t}\n\t\treturn this.cpLength;\n\t}\n};\n/*\n * calendar.js - Represent a calendar object.\n *\n * Copyright © 2012, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\nilibglobal.js\nlocale.js\nlocaleinfo.js\n*/\n\n/**\n * Interface that all calendars must implement.\n *\n * Depends directive: !depends calendar.js\n *\n * @interface\n * @protected\n */\nilib.Cal = function() {\n};\n\n/**\n * Factory method to create a new instance of a calendar subclass.<p>\n *\n * The options parameter can be an object that contains the following\n * properties:\n *\n * <ul>\n * <li><i>type</i> - specify the type of the calendar desired. The\n * list of valid values changes depending on which calendars are\n * defined. When assembling your iliball.js, include those calendars\n * you wish to use in your program or web page, and they will register\n * themselves with this factory method. The \"official\", \"gregorian\",\n * and \"julian\" calendars are all included by default, as they are the\n * standard calendars for much of the world.\n * <li><i>locale</i> - some calendars vary depending on the locale.\n * For example, the \"official\" calendar transitions from a Julian-style\n * calendar to a Gregorian-style calendar on a different date for\n * each country, as the governments of those countries decided to\n * adopt the Gregorian calendar at different times.\n * </ul>\n *\n * If a locale is specified, but no type, then the calendar that is default for\n * the locale will be instantiated and returned. If neither the type nor\n * the locale are specified, then the calendar for the default locale will\n * be used.\n *\n * @param {Object=} options options controlling the construction of this instance, or\n * undefined to use the default options\n * @return {ilib.Cal} an instance of a calendar object of the appropriate type\n */\nilib.Cal.newInstance = function (options) {\n\tvar locale = options && options.locale,\n\ttype = options && options.type,\n\tcons;\n\n\tif (!locale) {\n\t\tlocale = new ilib.Locale();\t// default locale\n\t}\n\n\tif (!type) {\n\t\tvar info = new ilib.LocaleInfo(locale);\n\t\ttype = info.getCalendar();\n\t}\n\n\tcons = ilib.Cal._constructors[type];\n\n\t// pass the same options through to the constructor so the subclass\n\t// has the ability to do something with if it needs to\n\treturn cons && new cons(options);\n};\n\n/* place for the subclasses to put their constructors so that the factory method\n * can find them. Do this to add your calendar after it's defined:\n * ilib.Cal._constructors[\"mytype\"] = ilib.Cal.MyTypeConstructor;\n */\nilib.Cal._constructors = {};\n\n/**\n * Return an array of known calendar types that the factory method can instantiate.\n *\n * @return {Array.<string>} an array of calendar types\n */\nilib.Cal.getCalendars = function () {\n\tvar arr = [],\n\t\tc;\n\n\tfor (c in ilib.Cal._constructors) {\n\t\tif (c && ilib.Cal._constructors[c]) {\n\t\t\tarr.push(c); // code like a pirate\n\t\t}\n\t}\n\n\treturn arr;\n};\n\nilib.Cal.prototype = {\n\t/**\n\t * Return the type of this calendar.\n\t *\n\t * @return {string} the name of the type of this calendar\n\t */\n\tgetType: function() {\n\t\tthrow \"Cannot call methods of abstract class ilib.Cal\";\n\t},\n\n\t/**\n\t * Return the number of months in the given year. The number of months in a year varies\n\t * for some luni-solar calendars because in some years, an extra month is needed to extend the\n\t * days in a year to an entire solar year. The month is represented as a 1-based number\n\t * where 1=first month, 2=second month, etc.\n\t *\n\t * @param {number} year a year for which the number of months is sought\n\t * @return {number} The number of months in the given year\n\t */\n\tgetNumMonths: function(year) {\n\t\tthrow \"Cannot call methods of abstract class ilib.Cal\";\n\t},\n\n\t/**\n\t * Return the number of days in a particular month in a particular year. This function\n\t * can return a different number for a month depending on the year because of things\n\t * like leap years.\n\t *\n\t * @param {number} month the month for which the length is sought\n\t * @param {number} year the year within which that month can be found\n\t * @return {number} the number of days within the given month in the given year\n\t */\n\tgetMonLength: function(month, year) {\n\t\tthrow \"Cannot call methods of abstract class ilib.Cal\";\n\t},\n\n\t/**\n\t * Return true if the given year is a leap year in this calendar.\n\t * The year parameter may be given as a number.\n\t *\n\t * @param {number} year the year for which the leap year information is being sought\n\t * @return {boolean} true if the given year is a leap year\n\t */\n\tisLeapYear: function(year) {\n\t\tthrow \"Cannot call methods of abstract class ilib.Cal\";\n\t}\n};\n\n/*\n * julianday.js - A Julian date object.\n *\n * Copyright © 2012-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends locale.js */\n\n/**\n * @class\n * A Julian Day class. A Julian Day is a date based on the Julian Day count\n * of time invented by Joseph Scaliger in 1583 for use with astronomical calculations.\n * Do not confuse it with a date in the Julian calendar, which it has very\n * little in common with. The naming is unfortunately close, and comes from history.<p>\n *\n * Depends directive: !depends julianday.js\n *\n * @constructor\n * @param {number} num the Julian Day expressed as a floating point number\n */\nilib.JulianDay = function(num) {\n\tthis.jd = num;\n\tthis.days = Math.floor(this.jd);\n\tthis.frac = num - this.days;\n};\n\nilib.JulianDay.prototype = {\n\t/**\n\t * Return the integral portion of this Julian Day instance. This corresponds to\n\t * the number of days since the beginning of the epoch.\n\t *\n\t * @return {number} the integral portion of this Julian Day\n\t */\n\tgetDays: function() {\n\t\treturn this.days;\n\t},\n\n\t/**\n\t * Set the date of this Julian Day instance.\n\t *\n\t * @param {number} days the julian date expressed as a floating point number\n\t */\n\tsetDays: function(days) {\n\t\tthis.days = Math.floor(days);\n\t\tthis.jd = this.days + this.frac;\n\t},\n\n\t/**\n\t * Return the fractional portion of this Julian Day instance. This portion\n\t * corresponds to the time of day for the instance.\n\t */\n\tgetDayFraction: function() {\n\t\treturn this.frac;\n\t},\n\n\t/**\n\t * Set the fractional part of the Julian Day. The fractional part represents\n\t * the portion of a fully day. Julian dates start at noon, and proceed until\n\t * noon of the next day. That would mean midnight is represented as a fractional\n\t * part of 0.5.\n\t *\n\t * @param {number} fraction The fractional part of the Julian date\n\t */\n\tsetDayFraction: function(fraction) {\n\t\tvar t = Math.floor(fraction);\n\t\tthis.frac = fraction - t;\n\t\tthis.jd = this.days + this.frac;\n\t},\n\n\t/**\n\t * Return the Julian Day expressed as a floating point number.\n\t * @return {number} the Julian Day as a number\n\t */\n\tgetDate: function () {\n\t\treturn this.jd;\n\t},\n\n\t/**\n\t * Set the date of this Julian Day instance.\n\t *\n\t * @param {number} num the numeric Julian Day to set into this instance\n\t */\n\tsetDate: function (num) {\n\t\tthis.jd = num;\n\t},\n\n\t/**\n\t * Add an offset to the current date instance. The offset should be expressed in\n\t * terms of Julian days. That is, each integral unit represents one day of time, and\n\t * fractional part represents a fraction of a regular 24-hour day.\n\t *\n\t * @param {number} offset an amount to add (or subtract) to the current result instance.\n\t */\n\taddDate: function(offset) {\n\t\tif (typeof(offset) === 'number') {\n\t\t\tthis.jd += offset;\n\t\t\tthis.days = Math.floor(this.jd);\n\t\t\tthis.frac = this.jd - this.days;\n\t\t}\n\t}\n};\n\n/*\n * gregorian.js - Represent a Gregorian calendar object.\n *\n * Copyright © 2012-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/* !depends calendar.js locale.js date.js julianday.js util/utils.js util/math.js */\n\n/**\n * @class\n * Construct a new Gregorian calendar object. This class encodes information about\n * a Gregorian calendar.<p>\n *\n * Depends directive: !depends gregorian.js\n *\n * @constructor\n * @implements ilib.Cal\n */\nilib.Cal.Gregorian = function() {\n\tthis.type = \"gregorian\";\n};\n\n/**\n * the lengths of each month\n * @private\n * @const\n * @type Array.<number>\n */\nilib.Cal.Gregorian.monthLengths = [\n\t31,  /* Jan */\n\t28,  /* Feb */\n\t31,  /* Mar */\n\t30,  /* Apr */\n\t31,  /* May */\n\t30,  /* Jun */\n\t31,  /* Jul */\n\t31,  /* Aug */\n\t30,  /* Sep */\n\t31,  /* Oct */\n\t30,  /* Nov */\n\t31   /* Dec */\n];\n\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for some luni-solar calendars because in some years, an extra month is needed to extend the\n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=first month, 2=second month, etc.\n *\n * @param {number} year a year for which the number of months is sought\n * @return {number} The number of months in the given year\n */\nilib.Cal.Gregorian.prototype.getNumMonths = function(year) {\n\treturn 12;\n};\n\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of things\n * like leap years.\n *\n * @param {number} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @return {number} the number of days within the given month in the given year\n */\nilib.Cal.Gregorian.prototype.getMonLength = function(month, year) {\n\tif (month !== 2 || !this.isLeapYear(year)) {\n\t\treturn ilib.Cal.Gregorian.monthLengths[month-1];\n\t} else {\n\t\treturn 29;\n\t}\n};\n\n/**\n * Return true if the given year is a leap year in the Gregorian calendar.\n * The year parameter may be given as a number, or as a GregDate object.\n * @param {number|ilib.Date.GregDate} year the year for which the leap year information is being sought\n * @return {boolean} true if the given year is a leap year\n */\nilib.Cal.Gregorian.prototype.isLeapYear = function(year) {\n\tvar y = (typeof(year) === 'number' ? year : year.getYears());\n\tvar centuries = ilib.mod(y, 400);\n\treturn (ilib.mod(y, 4) === 0 && centuries !== 100 && centuries !== 200 && centuries !== 300);\n};\n\n/**\n * Return the type of this calendar.\n *\n * @return {string} the name of the type of this calendar\n */\nilib.Cal.Gregorian.prototype.getType = function() {\n\treturn this.type;\n};\n\n/**\n * Return a date instance for this calendar type using the given\n * options.\n * @param {Object} options options controlling the construction of\n * the date instance\n * @return {ilib.Date} a date appropriate for this calendar type\n */\nilib.Cal.Gregorian.prototype.newDateInstance = function (options) {\n\treturn new ilib.Date.GregDate(options);\n};\n\n/* register this calendar for the factory method */\nilib.Cal._constructors[\"gregorian\"] = ilib.Cal.Gregorian;\n\n/*\n * ratadie.js - Represent the RD date number in the calendar\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\nutil/utils.js\nutil/math.js\njulianday.js\n*/\n\n/**\n * @class\n * Construct a new RD date number object. The constructor parameters can\n * contain any of the following properties:\n *\n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n *\n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n *\n * <li><i>cycle</i> - any integer giving the number of 60-year cycle in which the date is located.\n * If the cycle is not given but the year is, it is assumed that the year parameter is a fictitious\n * linear count of years since the beginning of the epoch, much like other calendars. This linear\n * count is never used. If both the cycle and year are given, the year is wrapped to the range 0\n * to 60 and treated as if it were a year in the regular 60-year cycle.\n *\n * <li><i>year</i> - any integer, including 0\n *\n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n *\n * <li><i>day</i> - 1 to 31\n *\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n *\n * <li><i>minute</i> - 0 to 59\n *\n * <li><i>second</i> - 0 to 59\n *\n * <li><i>millisecond</i> - 0 to 999\n *\n * <li><i>parts</i> - 0 to 1079. Specify the halaqim parts of an hour. Either specify\n * the parts or specify the minutes, seconds, and milliseconds, but not both. This is only used\n * in the Hebrew calendar.\n *\n * <li><i>minute</i> - 0 to 59\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above are present, then the RD is calculate based on\n * the current date at the time of instantiation. <p>\n *\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n *\n * Depends directive: !depends ratadie.js\n *\n * @private\n * @constructor\n * @param {Object=} params parameters that govern the settings and behaviour of this RD date\n */\nilib.Date.RataDie = function(params) {\n\tif (params) {\n\t\tif (typeof(params.date) !== 'undefined') {\n\t\t\t// accept JS Date classes or strings\n\t\t\tvar date = params.date;\n\t\t\tif (!(date instanceof Date)) {\n\t\t\t\tdate = new Date(date); // maybe a string initializer?\n\t\t\t}\n\t\t\tthis._setTime(date.getTime());\n\t\t} else if (typeof(params.unixtime) !== 'undefined') {\n\t\t\tthis._setTime(parseInt(params.unixtime, 10));\n\t\t} else if (typeof(params.julianday) !== 'undefined') {\n\t\t\t// JD time is defined to be UTC\n\t\t\tthis._setJulianDay(parseFloat(params.julianday));\n\t\t} else if (params.year || params.month || params.day || params.hour ||\n\t\t\t\tparams.minute || params.second || params.millisecond || params.parts || params.cycle) {\n\t\t\tthis._setDateComponents(params);\n\t\t} else if (typeof(params.rd) !== 'undefined') {\n\t\t\tthis.rd = (typeof(params.rd) === 'object' && params.rd instanceof ilib.Date.RataDie) ? params.rd.rd : params.rd;\n\t\t}\n\t}\n\n\t/**\n\t * @type {number} the Rata Die number of this date for this calendar type\n\t */\n\tif (typeof(this.rd) === 'undefined') {\n\t\tvar now = new Date();\n\t\tthis._setTime(now.getTime());\n\t}\n};\n\n/**\n * @private\n * @const\n * @type {number}\n */\nilib.Date.RataDie.gregorianEpoch = 1721424.5;\n\nilib.Date.RataDie.prototype = {\n\t/**\n\t * @protected\n\t * @const\n\t * @type {number}\n\t * the difference between a zero Julian day and the zero Gregorian date.\n\t */\n\tepoch: ilib.Date.RataDie.gregorianEpoch,\n\n\t/**\n\t * Set the RD of this instance according to the given unix time. Unix time is\n\t * the number of milliseconds since midnight on Jan 1, 1970.\n\t *\n\t * @protected\n\t * @param {number} millis the unix time to set this date to in milliseconds\n\t */\n\t_setTime: function(millis) {\n\t\t// 2440587.5 is the julian day of midnight Jan 1, 1970, UTC (Gregorian)\n\t\tthis._setJulianDay(2440587.5 + millis / 86400000);\n\t},\n\n\t/**\n\t * Set the date of this instance using a Julian Day.\n\t * @protected\n\t * @param {number} date the Julian Day to use to set this date\n\t */\n\t_setJulianDay: function (date) {\n\t\tvar jd = (typeof(date) === 'number') ? new ilib.JulianDay(date) : date;\n\t\t// round to the nearest millisecond\n\t\tthis.rd = ilib._roundFnc.halfup((jd.getDate() - this.epoch) * 86400000) / 86400000;\n\t},\n\n\t/**\n\t * Return the rd number of the particular day of the week on or before the\n\t * given rd. eg. The Sunday on or before the given rd.\n\t * @protected\n\t * @param {number} rd the rata die date of the reference date\n\t * @param {number} dayOfWeek the day of the week that is being sought relative\n\t * to the current date\n\t * @return {number} the rd of the day of the week\n\t */\n\t_onOrBefore: function(rd, dayOfWeek) {\n\t\treturn rd - ilib.mod(Math.floor(rd) - dayOfWeek - 2, 7);\n\t},\n\n\t/**\n\t * Return the rd number of the particular day of the week on or before the current rd.\n\t * eg. The Sunday on or before the current rd. If the offset is given, the calculation\n\t * happens in wall time instead of UTC. UTC time may be a day before or day behind\n\t * wall time, so it it would give the wrong day of the week if this calculation was\n\t * done in UTC time when the caller really wanted wall time. Even though the calculation\n\t * may be done in wall time, the return value is nonetheless always given in UTC.\n\t * @param {number} dayOfWeek the day of the week that is being sought relative\n\t * to the current date\n\t * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is\n\t * not given\n\t * @return {number} the rd of the day of the week\n\t */\n\tonOrBefore: function(dayOfWeek, offset) {\n\t\toffset = offset || 0;\n\t\treturn this._onOrBefore(this.rd + offset, dayOfWeek) - offset;\n\t},\n\n\t/**\n\t * Return the rd number of the particular day of the week on or before the current rd.\n\t * eg. The Sunday on or before the current rd. If the offset is given, the calculation\n\t * happens in wall time instead of UTC. UTC time may be a day before or day behind\n\t * wall time, so it it would give the wrong day of the week if this calculation was\n\t * done in UTC time when the caller really wanted wall time. Even though the calculation\n\t * may be done in wall time, the return value is nonetheless always given in UTC.\n\t * @param {number} dayOfWeek the day of the week that is being sought relative\n\t * to the reference date\n\t * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is\n\t * not given\n\t * @return {number} the day of the week\n\t */\n\tonOrAfter: function(dayOfWeek, offset) {\n\t\toffset = offset || 0;\n\t\treturn this._onOrBefore(this.rd+6+offset, dayOfWeek) - offset;\n\t},\n\n\t/**\n\t * Return the rd number of the particular day of the week before the current rd.\n\t * eg. The Sunday before the current rd. If the offset is given, the calculation\n\t * happens in wall time instead of UTC. UTC time may be a day before or day behind\n\t * wall time, so it it would give the wrong day of the week if this calculation was\n\t * done in UTC time when the caller really wanted wall time. Even though the calculation\n\t * may be done in wall time, the return value is nonetheless always given in UTC.\n\t * @param {number} dayOfWeek the day of the week that is being sought relative\n\t * to the reference date\n\t * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is\n\t * not given\n\t * @return {number} the day of the week\n\t */\n\tbefore: function(dayOfWeek, offset) {\n\t\toffset = offset || 0;\n\t\treturn this._onOrBefore(this.rd-1+offset, dayOfWeek) - offset;\n\t},\n\n\t/**\n\t * Return the rd number of the particular day of the week after the current rd.\n\t * eg. The Sunday after the current rd. If the offset is given, the calculation\n\t * happens in wall time instead of UTC. UTC time may be a day before or day behind\n\t * wall time, so it it would give the wrong day of the week if this calculation was\n\t * done in UTC time when the caller really wanted wall time. Even though the calculation\n\t * may be done in wall time, the return value is nonetheless always given in UTC.\n\t * @param {number} dayOfWeek the day of the week that is being sought relative\n\t * to the reference date\n\t * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is\n\t * not given\n\t * @return {number} the day of the week\n\t */\n\tafter: function(dayOfWeek, offset) {\n\t\toffset = offset || 0;\n\t\treturn this._onOrBefore(this.rd+7+offset, dayOfWeek) - offset;\n\t},\n\n\t/**\n\t * Return the unix time equivalent to this Gregorian date instance. Unix time is\n\t * the number of milliseconds since midnight on Jan 1, 1970 UTC. This method only\n\t * returns a valid number for dates between midnight, Jan 1, 1970 and\n\t * Jan 19, 2038 at 3:14:07am when the unix time runs out. If this instance\n\t * encodes a date outside of that range, this method will return -1.\n\t *\n\t * @return {number} a number giving the unix time, or -1 if the date is outside the\n\t * valid unix time range\n\t */\n\tgetTime: function() {\n\t\t// earlier than Jan 1, 1970\n\t\t// or later than Jan 19, 2038 at 3:14:07am\n\t\tvar jd = this.getJulianDay();\n\t\tif (jd < 2440587.5 || jd > 2465442.634803241) {\n\t\t\treturn -1;\n\t\t}\n\n\t\t// avoid the rounding errors in the floating point math by only using\n\t\t// the whole days from the rd, and then calculating the milliseconds directly\n\t\treturn Math.round((jd - 2440587.5) * 86400000);\n\t},\n\n\t/**\n\t * Return the extended unix time equivalent to this Gregorian date instance. Unix time is\n\t * the number of milliseconds since midnight on Jan 1, 1970 UTC. Traditionally unix time\n\t * (or the type \"time_t\" in C/C++) is only encoded with a unsigned 32 bit integer, and thus\n\t * runs out on Jan 19, 2038. However, most Javascript engines encode numbers well above\n\t * 32 bits and the Date object allows you to encode up to 100 million days worth of time\n\t * after Jan 1, 1970, and even more interestingly 100 million days worth of time before\n\t * Jan 1, 1970 as well. This method returns the number of milliseconds in that extended\n\t * range. If this instance encodes a date outside of that range, this method will return\n\t * NaN.\n\t *\n\t * @return {number} a number giving the extended unix time, or NaN if the date is outside\n\t * the valid extended unix time range\n\t */\n\tgetTimeExtended: function() {\n\t\tvar jd = this.getJulianDay();\n\n\t\t// test if earlier than Jan 1, 1970 - 100 million days\n\t\t// or later than Jan 1, 1970 + 100 million days\n\t\tif (jd < -97559412.5 || jd > 102440587.5) {\n\t\t\treturn NaN;\n\t\t}\n\n\t\t// avoid the rounding errors in the floating point math by only using\n\t\t// the whole days from the rd, and then calculating the milliseconds directly\n\t\treturn Math.round((jd - 2440587.5) * 86400000);\n\t},\n\n\t/**\n\t * Return the Julian Day equivalent to this calendar date as a number.\n\t * This returns the julian day in UTC.\n\t *\n\t * @return {number} the julian date equivalent of this date\n\t */\n\tgetJulianDay: function() {\n\t\treturn this.rd + this.epoch;\n\t},\n\n\t/**\n\t * Return the Rata Die (fixed day) number of this RD date.\n\t *\n\t * @return {number} the rd date as a number\n\t */\n\tgetRataDie: function() {\n\t\treturn this.rd;\n\t}\n};\n\n/*\n * gregratadie.js - Represent the RD date number in the Gregorian calendar\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\ndate.js\ncalendar/gregorian.js\ncalendar/ratadie.js\nutil/utils.js\nutil/math.js\njulianday.js\n*/\n\n/**\n * @class\n * Construct a new Gregorian RD date number object. The constructor parameters can\n * contain any of the following properties:\n *\n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n *\n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n *\n * <li><i>year</i> - any integer, including 0\n *\n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n *\n * <li><i>day</i> - 1 to 31\n *\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n *\n * <li><i>minute</i> - 0 to 59\n *\n * <li><i>second</i> - 0 to 59\n *\n * <li><i>millisecond</i> - 0 to 999\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Gregorian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above are present, then the RD is calculate based on\n * the current date at the time of instantiation. <p>\n *\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n *\n * Depends directive: !depends gregratadie.js\n *\n * @private\n * @constructor\n * @extends ilib.Date.RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Gregorian RD date\n */\nilib.Date.GregRataDie = function(params) {\n\tthis.cal = params && params.cal || new ilib.Cal.Gregorian();\n\t/** @type {number|undefined} */\n\tthis.rd = undefined;\n\tilib.Date.RataDie.call(this, params);\n};\n\nilib.Date.GregRataDie.prototype = new ilib.Date.RataDie();\nilib.Date.GregRataDie.prototype.parent = ilib.Date.RataDie;\nilib.Date.GregRataDie.prototype.constructor = ilib.Date.GregRataDie;\n\n/**\n * the cumulative lengths of each month, for a non-leap year\n * @private\n * @const\n * @type Array.<number>\n */\nilib.Date.GregRataDie.cumMonthLengths = [\n    0,   /* Jan */\n\t31,  /* Feb */\n\t59,  /* Mar */\n\t90,  /* Apr */\n\t120, /* May */\n\t151, /* Jun */\n\t181, /* Jul */\n\t212, /* Aug */\n\t243, /* Sep */\n\t273, /* Oct */\n\t304, /* Nov */\n\t334, /* Dec */\n\t365\n];\n\n/**\n * the cumulative lengths of each month, for a leap year\n * @private\n * @const\n * @type Array.<number>\n */\nilib.Date.GregRataDie.cumMonthLengthsLeap = [\n\t0,   /* Jan */\n\t31,  /* Feb */\n\t60,  /* Mar */\n\t91,  /* Apr */\n\t121, /* May */\n\t152, /* Jun */\n\t182, /* Jul */\n\t213, /* Aug */\n\t244, /* Sep */\n\t274, /* Oct */\n\t305, /* Nov */\n\t335, /* Dec */\n\t366\n];\n\n/**\n * Calculate the Rata Die (fixed day) number of the given date.\n *\n * @private\n * @param {Object} date the date components to calculate the RD from\n */\nilib.Date.GregRataDie.prototype._setDateComponents = function(date) {\n\tvar year = parseInt(date.year, 10) || 0;\n\tvar month = parseInt(date.month, 10) || 1;\n\tvar day = parseInt(date.day, 10) || 1;\n\tvar hour = parseInt(date.hour, 10) || 0;\n\tvar minute = parseInt(date.minute, 10) || 0;\n\tvar second = parseInt(date.second, 10) || 0;\n\tvar millisecond = parseInt(date.millisecond, 10) || 0;\n\n\tvar years = 365 * (year - 1) +\n\t\tMath.floor((year-1)/4) -\n\t\tMath.floor((year-1)/100) +\n\t\tMath.floor((year-1)/400);\n\n\tvar dayInYear = (month > 1 ? ilib.Date.GregRataDie.cumMonthLengths[month-1] : 0) +\n\t\tday +\n\t\t(ilib.Cal.Gregorian.prototype.isLeapYear.call(this.cal, year) && month > 2 ? 1 : 0);\n\tvar rdtime = (hour * 3600000 +\n\t\tminute * 60000 +\n\t\tsecond * 1000 +\n\t\tmillisecond) /\n\t\t86400000;\n\t/*\n\tdebug(\"getRataDie: converting \" +  JSON.stringify(this));\n\tdebug(\"getRataDie: year is \" +  years);\n\tdebug(\"getRataDie: day in year is \" +  dayInYear);\n\tdebug(\"getRataDie: rdtime is \" +  rdtime);\n\tdebug(\"getRataDie: rd is \" +  (years + dayInYear + rdtime));\n\t*/\n\n\t/**\n\t * @type {number|undefined} the RD number of this Gregorian date\n\t */\n\tthis.rd = years + dayInYear + rdtime;\n};\n\n/**\n * Return the rd number of the particular day of the week on or before the\n * given rd. eg. The Sunday on or before the given rd.\n * @private\n * @param {number} rd the rata die date of the reference date\n * @param {number} dayOfWeek the day of the week that is being sought relative\n * to the current date\n * @return {number} the rd of the day of the week\n */\nilib.Date.GregRataDie.prototype._onOrBefore = function(rd, dayOfWeek) {\n\treturn rd - ilib.mod(Math.floor(rd) - dayOfWeek, 7);\n};\n\n/*\n * timezone.js - Definition of a time zone class\n *\n * Copyright © 2012-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n!depends\nilibglobal.js\nlocale.js\nlocaleinfo.js\nutil/utils.js\nutil/math.js\ncalendar/gregratadie.js\n*/\n\n// !data localeinfo zoneinfo\n\n/**\n * @class\n * Create a time zone instance.\n *\n * This class reports and transforms\n * information about particular time zones.<p>\n *\n * The options parameter may contain any of the following properties:\n *\n * <ul>\n * <li><i>id</i> - The id of the requested time zone such as \"Europe/London\" or\n * \"America/Los_Angeles\". These are taken from the IANA time zone database. (See\n * http://www.iana.org/time-zones for more information.) <p>\n *\n * There is one special\n * time zone that is not taken from the IANA database called simply \"local\". In\n * this case, this class will attempt to discover the current time zone and\n * daylight savings time settings by calling standard Javascript classes to\n * determine the offsets from UTC.\n *\n * <li><i>locale</i> - The locale for this time zone.\n *\n * <li><i>offset</i> - Choose the time zone based on the offset from UTC given in\n * number of minutes (negative is west, positive is east).\n *\n * <li><i>onLoad</i> - a callback function to call when the data is fully\n * loaded. When the onLoad option is given, this class will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the data is loaded, the onLoad function is called with the current\n * instance as a parameter.\n *\n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the\n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object\n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n *\n * There is currently no way in the ECMAscript\n * standard to tell which exact time zone is currently in use. Choosing the\n * id \"locale\" or specifying an explicit offset will not give a specific time zone,\n * as it is impossible to tell with certainty which zone the offsets\n * match.<p>\n *\n * When the id \"local\" is given or the offset option is specified, this class will\n * have the following behaviours:\n * <ul>\n * <li>The display name will always be given as the RFC822 style, no matter what\n * style is requested\n * <li>The id will also be returned as the RFC822 style display name\n * <li>When the offset is explicitly given, this class will assume the time zone\n * does not support daylight savings time, and the offsets will be calculated\n * the same way year round.\n * <li>When the offset is explicitly given, the inDaylightSavings() method will\n * always return false.\n * <li>When the id \"local\" is given, this class will attempt to determine the\n * daylight savings time settings by examining the offset from UTC on Jan 1\n * and June 1 of the current year. If they are different, this class assumes\n * that the local time zone uses DST. When the offset for a particular date is\n * requested, it will use the built-in Javascript support to determine the\n * offset for that date.\n * </ul>\n *\n * If a more specific time zone is\n * needed with display names and known start/stop times for DST, use the \"id\"\n * property instead to specify the time zone exactly. You can perhaps ask the\n * user which time zone they prefer so that your app does not need to guess.<p>\n *\n * If the id and the offset are both not given, the default time zone for the\n * locale is retrieved from\n * the locale info. If the locale is not specified, the default locale for the\n * library is used.<p>\n *\n * Because this class was designed for use in web sites, and the vast majority\n * of dates and times being formatted are recent date/times, this class is simplified\n * by not implementing historical time zones. That is, when governments change the\n * time zone rules for a particular zone, only the latest such rule is implemented\n * in this class. That means that determining the offset for a date that is prior\n * to the last change may give the wrong result. Historical time zone calculations\n * may be implemented in a later version of iLib if there is enough demand for it,\n * but it would entail a much larger set of time zone data that would have to be\n * loaded.\n *\n * Depends directive: !depends timezone.js\n *\n * @constructor\n * @param {Object} options Options guiding the construction of this time zone instance\n */\nilib.TimeZone = function(options) {\n\tthis.sync = true;\n\tthis.locale = new ilib.Locale();\n\tthis.isLocal = false;\n\n\tif (options) {\n\t\tif (options.locale) {\n\t\t\tthis.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;\n\t\t}\n\n\t\tif (options.id) {\n\t\t\tvar id = options.id.toString();\n\t\t\tif (id === 'local') {\n\t\t\t\tthis.isLocal = true;\n\n\t\t\t\t// use standard Javascript Date to figure out the time zone offsets\n\t\t\t\tvar now = new Date(),\n\t\t\t\t\tjan1 = new Date(now.getFullYear(), 0, 1),  // months in std JS Date object are 0-based\n\t\t\t\t\tjun1 = new Date(now.getFullYear(), 5, 1);\n\n\t\t\t\t// Javascript's method returns the offset backwards, so we have to\n\t\t\t\t// take the negative to get the correct offset\n\t\t\t\tthis.offsetJan1 = -jan1.getTimezoneOffset();\n\t\t\t\tthis.offsetJun1 = -jun1.getTimezoneOffset();\n\t\t\t\t// the offset of the standard time for the time zone is always the one that is closest\n\t\t\t\t// to negative infinity of the two, no matter whether you are in the northern or southern\n\t\t\t\t// hemisphere, east or west\n\t\t\t\tthis.offset = Math.min(this.offsetJan1, this.offsetJun1);\n\t\t\t}\n\t\t\tthis.id = id;\n\t\t} else if (options.offset) {\n\t\t\tthis.offset = (typeof(options.offset) === 'string') ? parseInt(options.offset, 10) : options.offset;\n\t\t\tthis.id = this.getDisplayName(undefined, undefined);\n\t\t}\n\n\t\tif (typeof(options.sync) !== 'undefined') {\n\t\t\tthis.sync = !!options.sync;\n\t\t}\n\n\t\tthis.loadParams = options.loadParams;\n\t\tthis.onLoad = options.onLoad;\n\t}\n\n\t//console.log(\"timezone: locale is \" + this.locale);\n\n\tif (!this.id) {\n\t\tnew ilib.LocaleInfo(this.locale, {\n\t\t\tsync: this.sync,\n\t\t\tonLoad: ilib.bind(this, function (li) {\n\t\t\t\tthis.id = li.getTimeZone() || \"Etc/UTC\";\n\t\t\t\tthis._loadtzdata();\n\t\t\t})\n\t\t});\n\t} else {\n\t\tthis._loadtzdata();\n\t}\n\n\t//console.log(\"localeinfo is: \" + JSON.stringify(this.locinfo));\n\t//console.log(\"id is: \" + JSON.stringify(this.id));\n};\n\n/*\n * Explanation of the compressed time zone info properties.\n * {\n *     \"o\": \"8:0\",      // offset from UTC\n *     \"f\": \"W{c}T\",    // standard abbreviation. For time zones that observe DST, the {c} replacement is replaced with the\n *                      // letter in the e.c or s.c properties below\n *     \"e\": {           // info about the end of DST\n *         \"j\": 78322.5 // Julian day when the transition happens. Either specify the \"j\" property or all of the \"m\", \"r\", and\n *                      // \"t\" properties, but not both sets.\n *         \"m\": 3,      // month that it ends\n *         \"r\": \"l0\",   // rule for the day it ends \"l\" = \"last\", numbers are Sun=0 through Sat=6. Other syntax is \"0>7\".\n *                      // This means the 0-day (Sun) after the 7th of the month. Other possible operators are <, >, <=, >=\n *         \"t\": \"2:0\",  // time of day that the DST turns off, hours:minutes\n *         \"c\": \"S\"     // character to replace into the abbreviation for standard time\n *     },\n *     \"s\": {           // info about the start of DST\n *         \"j\": 78189.5 // Julian day when the transition happens. Either specify the \"j\" property or all of the \"m\", \"r\", and\n *                      // \"t\" properties, but not both sets.\n *         \"m\": 10,     // month that it starts\n *         \"r\": \"l0\",   // rule for the day it starts \"l\" = \"last\", numbers are Sun=0 through Sat=6. Other syntax is \"0>7\".\n *                      // This means the 0-day (Sun) after the 7th of the month. Other possible operators are <, >, <=, >=\n *         \"t\": \"2:0\",  // time of day that the DST turns on, hours:minutes\n *         \"v\": \"1:0\",  // amount of time saved in hours:minutes\n *         \"c\": \"D\"     // character to replace into the abbreviation for daylight time\n *     },\n *     \"c\": \"AU\",       // ISO code for the country that contains this time zone\n *     \"n\": \"W. Australia {c} Time\"\n *                      // long English name of the zone. The {c} replacement is for the word \"Standard\" or \"Daylight\" as appropriate\n * }\n */\nilib.TimeZone.prototype._loadtzdata = function () {\n\t// console.log(\"id is: \" + JSON.stringify(this.id));\n\t// console.log(\"zoneinfo is: \" + JSON.stringify(ilib.data.zoneinfo[this.id]));\n\tif (!ilib.data.zoneinfo[this.id] && typeof(this.offset) === 'undefined') {\n\t\tilib.loadData({\n\t\t\tobject: ilib.TimeZone,\n\t\t\tnonlocale: true,\t// locale independent\n\t\t\tname: \"zoneinfo/\" + this.id + \".json\",\n\t\t\tsync: this.sync,\n\t\t\tloadParams: this.loadParams,\n\t\t\tcallback: ilib.bind(this, function (tzdata) {\n\t\t\t\tif (tzdata && !ilib.isEmpty(tzdata)) {\n\t\t\t\t\tilib.data.zoneinfo[this.id] = tzdata;\n\t\t\t\t}\n\t\t\t\tthis._initZone();\n\t\t\t})\n\t\t});\n\t} else {\n\t\tthis._initZone();\n\t}\n};\n\nilib.TimeZone.prototype._initZone = function() {\n\t/**\n\t * @private\n\t * @type {{o:string,f:string,e:Object.<{m:number,r:string,t:string,z:string}>,s:Object.<{m:number,r:string,t:string,z:string,v:string,c:string}>,c:string,n:string}}\n\t */\n\tthis.zone = ilib.data.zoneinfo[this.id];\n\tif (!this.zone && typeof(this.offset) === 'undefined') {\n\t\tthis.id = \"Etc/UTC\";\n\t\tthis.zone = ilib.data.zoneinfo[this.id];\n\t}\n\n\tthis._calcDSTSavings();\n\n\tif (typeof(this.offset) === 'undefined' && this.zone.o) {\n\t\tvar offsetParts = this._offsetStringToObj(this.zone.o);\n\t\t/**\n\t\t * @private\n\t\t * @type {number} raw offset from UTC without DST, in minutes\n\t\t */\n\t\tthis.offset = (Math.abs(offsetParts.h || 0) * 60 + (offsetParts.m || 0)) * ilib.signum(offsetParts.h || 0);\n\t}\n\n\tif (this.onLoad && typeof(this.onLoad) === 'function') {\n\t\tthis.onLoad(this);\n\t}\n};\n\nilib.data.timezone = {};\n\n/**\n * Return an array of available zone ids that the constructor knows about.\n * The country parameter is optional. If it is not given, all time zones will\n * be returned. If it specifies a country code, then only time zones for that\n * country will be returned.\n *\n * @param {string} country country code for which time zones are being sought\n * @return {Array.<string>} an array of zone id strings\n */\nilib.TimeZone.getAvailableIds = function (country) {\n\tvar tz, ids = [];\n\n\tif (!ilib.data.timezone.list) {\n\t\tilib.data.timezone.list = [];\n\t\tif (ilib._load instanceof ilib.Loader) {\n\t\t\tvar hash = ilib._load.listAvailableFiles();\n\t\t\tfor (var dir in hash) {\n\t\t\t\tvar files = hash[dir];\n\t\t\t\tif (typeof(files) === 'object' && files instanceof Array) {\n\t\t\t\t\tfiles.forEach(function (filename) {\n\t\t\t\t\t\tif (filename && filename.match(/^zoneinfo/)) {\n\t\t\t\t\t\t\tilib.data.timezone.list.push(filename.replace(/^zoneinfo\\//, \"\").replace(/\\.json$/, \"\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (tz in ilib.data.zoneinfo) {\n\t\t\t\tif (ilib.data.zoneinfo[tz]) {\n\t\t\t\t\tilib.data.timezone.list.push(tz);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!country) {\n\t\t// special zone meaning \"the local time zone according to the JS engine we are running upon\"\n\t\tids.push(\"local\");\n\t\tfor (tz in ilib.data.timezone.list) {\n\t\t\tif (ilib.data.timezone.list[tz]) {\n\t\t\t\tids.push(ilib.data.timezone.list[tz]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif (!ilib.data.zoneinfo.zonetab) {\n\t\t\tilib.loadData({\n\t\t\t\tobject: ilib.TimeZone,\n\t\t\t\tnonlocale: true,\t// locale independent\n\t\t\t\tname: \"zoneinfo/zonetab.json\",\n\t\t\t\tsync: true,\n\t\t\t\tcallback: ilib.bind(this, function (tzdata) {\n\t\t\t\t\tif (tzdata) {\n\t\t\t\t\t\tilib.data.zoneinfo.zonetab = tzdata;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\tids = ilib.data.zoneinfo.zonetab[country];\n\t}\n\n\treturn ids;\n};\n\n/**\n * Return the id used to uniquely identify this time zone.\n * @return {string} a unique id for this time zone\n */\nilib.TimeZone.prototype.getId = function () {\n\treturn this.id.toString();\n};\n\n/**\n * Return the abbreviation that is used for the current time zone on the given date.\n * The date may be in DST or during standard time, and many zone names have different\n * abbreviations depending on whether or not the date is falls within DST.<p>\n *\n * There are two styles that are supported:\n *\n * <ol>\n * <li>standard - returns the 3 to 5 letter abbreviation of the time zone name such\n * as \"CET\" for \"Central European Time\" or \"PDT\" for \"Pacific Daylight Time\"\n * <li>rfc822 - returns an RFC 822 style time zone specifier, which specifies more\n * explicitly what the offset is from UTC\n * <li>long - returns the long name of the zone in English\n * </ol>\n *\n * @param {ilib.Date=} date a date to determine if it is in daylight time or standard time\n * @param {string=} style one of \"standard\" or \"rfc822\". Default if not specified is \"standard\"\n * @return {string} the name of the time zone, abbreviated according to the style\n */\nilib.TimeZone.prototype.getDisplayName = function (date, style) {\n\tstyle = (this.isLocal || typeof(this.zone) === 'undefined') ? \"rfc822\" : (style || \"standard\");\n\tswitch (style) {\n\t\tdefault:\n\t\tcase 'standard':\n\t\t\tif (this.zone.f && this.zone.f !== \"zzz\") {\n\t\t\t\tif (this.zone.f.indexOf(\"{c}\") !== -1) {\n\t\t\t\t\tvar letter = \"\";\n\t\t\t\t\tletter = this.inDaylightTime(date) ? this.zone.s && this.zone.s.c : this.zone.e && this.zone.e.c;\n\t\t\t\t\tvar temp = new ilib.String(this.zone.f);\n\t\t\t\t\treturn temp.format({c: letter || \"\"});\n\t\t\t\t}\n\t\t\t\treturn this.zone.f;\n\t\t\t}\n\t\t\tvar temp = \"GMT\" + this.zone.o;\n\t\t\tif (this.inDaylightTime(date)) {\n\t\t\t\ttemp += \"+\" + this.zone.s.v;\n\t\t\t}\n\t\t\treturn temp;\n\t\t\tbreak;\n\t\tcase 'rfc822':\n\t\t\tvar offset = this.getOffset(date), // includes the DST if applicable\n\t\t\t\tret = \"UTC\",\n\t\t\t\thour = offset.h || 0,\n\t\t\t\tminute = offset.m || 0;\n\n\t\t\tif (hour !== 0) {\n\t\t\t\tret += (hour > 0) ? \"+\" : \"-\";\n\t\t\t\tif (Math.abs(hour) < 10) {\n\t\t\t\t\tret += \"0\";\n\t\t\t\t}\n\t\t\t\tret += (hour < 0) ? -hour : hour;\n\t\t\t\tif (minute < 10) {\n\t\t\t\t\tret += \"0\";\n\t\t\t\t}\n\t\t\t\tret += minute;\n\t\t\t}\n\t\t\treturn ret;\n\t\tcase 'long':\n\t\t\tif (this.zone.n) {\n\t\t\t\tif (this.zone.n.indexOf(\"{c}\") !== -1) {\n\t\t\t\t\tvar str = this.inDaylightTime(date) ? \"Daylight\" : \"Standard\";\n\t\t\t\t\tvar temp = new ilib.String(this.zone.n);\n\t\t\t\t\treturn temp.format({c: str || \"\"});\n\t\t\t\t}\n\t\t\t\treturn this.zone.n;\n\t\t\t}\n\t\t\tvar temp = \"GMT\" + this.zone.o;\n\t\t\tif (this.inDaylightTime(date)) {\n\t\t\t\ttemp += \"+\" + this.zone.s.v;\n\t\t\t}\n\t\t\treturn temp;\n\t\t\tbreak;\n\t}\n};\n\n/**\n * Convert the offset string to an object with an h, m, and possibly s property\n * to indicate the hours, minutes, and seconds.\n *\n * @private\n * @param {string} str the offset string to convert to an object\n * @return {Object.<{h:number,m:number,s:number}>} an object giving the offset for the zone at\n * the given date/time, in hours, minutes, and seconds\n */\nilib.TimeZone.prototype._offsetStringToObj = function (str) {\n\tvar offsetParts = (typeof(str) === 'string') ? str.split(\":\") : [],\n\t\tret = {h:0},\n\t\ttemp;\n\n\tif (offsetParts.length > 0) {\n\t\tret.h = parseInt(offsetParts[0], 10);\n\t\tif (offsetParts.length > 1) {\n\t\t\ttemp = parseInt(offsetParts[1], 10);\n\t\t\tif (temp) {\n\t\t\t\tret.m = temp;\n\t\t\t}\n\t\t\tif (offsetParts.length > 2) {\n\t\t\t\ttemp = parseInt(offsetParts[2], 10);\n\t\t\t\tif (temp) {\n\t\t\t\t\tret.s = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn ret;\n};\n\n/**\n * Returns the offset of this time zone from UTC at the given date/time. If daylight saving\n * time is in effect at the given date/time, this method will return the offset value\n * adjusted by the amount of daylight saving.\n * @param {ilib.Date=} date the date for which the offset is needed\n * @return {Object.<{h:number,m:number}>} an object giving the offset for the zone at\n * the given date/time, in hours, minutes, and seconds\n */\nilib.TimeZone.prototype.getOffset = function (date) {\n\tif (!date) {\n\t\treturn this.getRawOffset();\n\t}\n\tvar offset = this.getOffsetMillis(date)/60000;\n\n\tvar hours = ilib._roundFnc.down(offset/60),\n\t\tminutes = Math.abs(offset) - Math.abs(hours)*60;\n\n\tvar ret = {\n\t\th: hours\n\t};\n\tif (minutes != 0) {\n\t\tret.m = minutes;\n\t}\n\treturn ret;\n};\n\n/**\n * Returns the offset of this time zone from UTC at the given date/time expressed in\n * milliseconds. If daylight saving\n * time is in effect at the given date/time, this method will return the offset value\n * adjusted by the amount of daylight saving. Negative numbers indicate offsets west\n * of UTC and conversely, positive numbers indicate offset east of UTC.\n *\n * @param {ilib.Date=} date the date for which the offset is needed, or null for the\n * present date\n * @return {number} the number of milliseconds of offset from UTC that the given date is\n */\nilib.TimeZone.prototype.getOffsetMillis = function (date) {\n\tvar ret;\n\n\t// check if the dst property is defined -- the intrinsic JS Date object doesn't work so\n\t// well if we are in the overlap time at the end of DST\n\tif (this.isLocal && typeof(date.dst) === 'undefined') {\n\t\tvar d = (!date) ? new Date() : new Date(date.getTimeExtended());\n\t\treturn -d.getTimezoneOffset() * 60000;\n\t}\n\n\tret = this.offset;\n\n\tif (date && this.inDaylightTime(date)) {\n\t\tret += this.dstSavings;\n\t}\n\n\treturn ret * 60000;\n};\n\n/**\n * Return the offset in milliseconds when the date has an RD number in wall\n * time rather than in UTC time.\n * @protected\n * @param date the date to check in wall time\n * @returns {number} the number of milliseconds of offset from UTC that the given date is\n */\nilib.TimeZone.prototype._getOffsetMillisWallTime = function (date) {\n\tvar ret;\n\n\tret = this.offset;\n\n\tif (date && this.inDaylightTime(date, true)) {\n\t\tret += this.dstSavings;\n\t}\n\n\treturn ret * 60000;\n};\n\n/**\n * Returns the offset of this time zone from UTC at the given date/time. If daylight saving\n * time is in effect at the given date/time, this method will return the offset value\n * adjusted by the amount of daylight saving.\n * @param {ilib.Date=} date the date for which the offset is needed\n * @return {string} the offset for the zone at the given date/time as a string in the\n * format \"h:m:s\"\n */\nilib.TimeZone.prototype.getOffsetStr = function (date) {\n\tvar offset = this.getOffset(date),\n\t\tret;\n\n\tret = offset.h;\n\tif (typeof(offset.m) !== 'undefined') {\n\t\tret += \":\" + offset.m;\n\t\tif (typeof(offset.s) !== 'undefined') {\n\t\t\tret += \":\" + offset.s;\n\t\t}\n\t} else {\n\t\tret += \":0\";\n\t}\n\n\treturn ret;\n};\n\n/**\n * Gets the offset from UTC for this time zone.\n * @return {Object.<{h:number,m:number,s:number}>} an object giving the offset from\n * UTC for this time zone, in hours, minutes, and seconds\n */\nilib.TimeZone.prototype.getRawOffset = function () {\n\tvar hours = ilib._roundFnc.down(this.offset/60),\n\t\tminutes = Math.abs(this.offset) - Math.abs(hours)*60;\n\n\tvar ret = {\n\t\th: hours\n\t};\n\tif (minutes != 0) {\n\t\tret.m = minutes;\n\t}\n\treturn ret;\n};\n\n/**\n * Gets the offset from UTC for this time zone expressed in milliseconds. Negative numbers\n * indicate zones west of UTC, and positive numbers indicate zones east of UTC.\n *\n * @return {number} an number giving the offset from\n * UTC for this time zone in milliseconds\n */\nilib.TimeZone.prototype.getRawOffsetMillis = function () {\n\treturn this.offset * 60000;\n};\n\n/**\n * Gets the offset from UTC for this time zone without DST savings.\n * @return {string} the offset from UTC for this time zone, in the format \"h:m:s\"\n */\nilib.TimeZone.prototype.getRawOffsetStr = function () {\n\tvar off = this.getRawOffset();\n\treturn off.h + \":\" + (off.m || \"0\");\n};\n\n/**\n * Return the amount of time in hours:minutes that the clock is advanced during\n * daylight savings time.\n * @return {Object.<{h:number,m:number,s:number}>} the amount of time that the\n * clock advances for DST in hours, minutes, and seconds\n */\nilib.TimeZone.prototype.getDSTSavings = function () {\n\tif (this.isLocal) {\n\t\t// take the absolute because the difference in the offsets may be positive or\n\t\t// negative, depending on the hemisphere\n\t\tvar savings = Math.abs(this.offsetJan1 - this.offsetJun1);\n\t\tvar hours = ilib._roundFnc.down(savings/60),\n\t\t\tminutes = savings - hours*60;\n\t\treturn {\n\t\t\th: hours,\n\t\t\tm: minutes\n\t\t};\n\t} else if (this.zone && this.zone.s) {\n\t\treturn this._offsetStringToObj(this.zone.s.v);\t// this.zone.start.savings\n\t}\n\treturn {h:0};\n};\n\n/**\n * Return the amount of time in hours:minutes that the clock is advanced during\n * daylight savings time.\n * @return {string} the amount of time that the clock advances for DST in the\n * format \"h:m:s\"\n */\nilib.TimeZone.prototype.getDSTSavingsStr = function () {\n\tif (this.isLocal) {\n\t\tvar savings = this.getDSTSavings();\n\t\treturn savings.h + \":\" + savings.m;\n\t} else if (typeof(this.offset) !== 'undefined' && this.zone && this.zone.s) {\n\t\treturn this.zone.s.v;\t// this.zone.start.savings\n\t}\n\treturn \"0:0\";\n};\n\n/**\n * return the rd of the start of DST transition for the given year\n * @protected\n * @param {Object} rule set of rules\n * @param {number} year year to check\n * @return {number} the rd of the start of DST for the year\n */\nilib.TimeZone.prototype._calcRuleStart = function (rule, year) {\n\tvar type = \"=\",\n\t\tweekday = 0,\n\t\tday,\n\t\trefDay,\n\t\tcal,\n\t\thour = 0,\n\t\tminute = 0,\n\t\tsecond = 0,\n\t\ttime,\n\t\ti;\n\n\tif (typeof(rule.j) !== 'undefined') {\n\t\trefDay = new ilib.Date.GregRataDie({\n\t\t\tjulianday: rule.j\n\t\t});\n\t} else {\n\t\tif (rule.r.charAt(0) == 'l' || rule.r.charAt(0) == 'f') {\n\t\t\tcal = ilib.Cal.newInstance({type: \"gregorian\"});\n\t\t\ttype = rule.r.charAt(0);\n\t\t\tweekday = parseInt(rule.r.substring(1), 10);\n\t\t\tday = (type === 'l') ? cal.getMonLength(rule.m, year) : 1;\n\t\t\t//console.log(\"_calcRuleStart: Calculating the \" +\n\t\t\t//\t\t(rule.r.charAt(0) == 'f' ? \"first \" : \"last \") + weekday +\n\t\t\t//\t\t\" of month \" + rule.m);\n\t\t} else {\n\t\t\ti = rule.r.indexOf('<');\n\t\t\tif (i == -1) {\n\t\t\t\ti = rule.r.indexOf('>');\n\t\t\t}\n\n\t\t\tif (i != -1) {\n\t\t\t\ttype = rule.r.charAt(i);\n\t\t\t\tweekday = parseInt(rule.r.substring(0, i), 10);\n\t\t\t\tday = parseInt(rule.r.substring(i+1), 10);\n\t\t\t\t//console.log(\"_calcRuleStart: Calculating the \" + weekday +\n\t\t\t\t//\t\ttype + day + \" of month \" + rule.m);\n\t\t\t} else {\n\t\t\t\tday = parseInt(rule.r, 10);\n\t\t\t\t//console.log(\"_calcRuleStart: Calculating the \" + day + \" of month \" + rule.m);\n\t\t\t}\n\t\t}\n\n\t\tif (rule.t) {\n\t\t\ttime = rule.t.split(\":\");\n\t\t\thour = parseInt(time[0], 10);\n\t\t\tif (time.length > 1) {\n\t\t\t\tminute = parseInt(time[1], 10);\n\t\t\t\tif (time.length > 2) {\n\t\t\t\t\tsecond = parseInt(time[2], 10);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//console.log(\"calculating rd of \" + year + \"/\" + rule.m + \"/\" + day);\n\t\trefDay = new ilib.Date.GregRataDie({\n\t\t\tyear: year,\n\t\t\tmonth: rule.m,\n\t\t\tday: day,\n\t\t\thour: hour,\n\t\t\tminute: minute,\n\t\t\tsecond: second\n\t\t});\n\t}\n\t//console.log(\"refDay is \" + JSON.stringify(refDay));\n\tvar d = refDay.getRataDie();\n\n\tswitch (type) {\n\t\tcase 'l':\n\t\tcase '<':\n\t\t\t//console.log(\"returning \" + refDay.onOrBefore(rd, weekday));\n\t\t\td = refDay.onOrBefore(weekday);\n\t\t\tbreak;\n\t\tcase 'f':\n\t\tcase '>':\n\t\t\t//console.log(\"returning \" + refDay.onOrAfterRd(rd, weekday));\n\t\t\td = refDay.onOrAfter(weekday);\n\t\t\tbreak;\n\t}\n\treturn d;\n};\n\n/**\n * @private\n */\nilib.TimeZone.prototype._calcDSTSavings = function () {\n\tvar saveParts = this.getDSTSavings();\n\n\t/**\n\t * @private\n\t * @type {number} savings in minutes when DST is in effect\n\t */\n\tthis.dstSavings = (Math.abs(saveParts.h || 0) * 60 + (saveParts.m || 0)) * ilib.signum(saveParts.h || 0);\n};\n\n/**\n * @private\n */\nilib.TimeZone.prototype._getDSTStartRule = function (year) {\n\t// TODO: update this when historic/future zones are supported\n\treturn this.zone.s;\n};\n\n/**\n * @private\n */\nilib.TimeZone.prototype._getDSTEndRule = function (year) {\n\t// TODO: update this when historic/future zones are supported\n\treturn this.zone.e;\n};\n\n/**\n * Returns whether or not the given date is in daylight saving time for the current\n * zone. Note that daylight savings time is observed for the summer. Because\n * the seasons are reversed, daylight savings time in the southern hemisphere usually\n * runs from the end of the year through New Years into the first few months of the\n * next year. This method will correctly calculate the start and end of DST for any\n * location.\n *\n * @param {ilib.Date=} date a date for which the info about daylight time is being sought,\n * or undefined to tell whether we are currently in daylight savings time\n * @param {boolean=} wallTime if true, then the given date is in wall time. If false or\n * undefined, it is in the usual UTC time.\n * @return {boolean} true if the given date is in DST for the current zone, and false\n * otherwise.\n */\nilib.TimeZone.prototype.inDaylightTime = function (date, wallTime) {\n\tvar rd, startRd, endRd;\n\n\tif (this.isLocal) {\n\t\t// check if the dst property is defined -- the intrinsic JS Date object doesn't work so\n\t\t// well if we are in the overlap time at the end of DST, so we have to work around that\n\t\t// problem by adding in the savings ourselves\n\t\tvar offset = 0;\n\t\tif (typeof(date.dst) !== 'undefined' && !date.dst) {\n\t\t\toffset = this.dstSavings * 60000;\n\t\t}\n\n\t\tvar d = new Date(date ? date.getTimeExtended() + offset: undefined);\n\t\t// the DST offset is always the one that is closest to positive infinity, no matter\n\t\t// if you are in the northern or southern hemisphere, east or west\n\t\tvar dst = Math.max(this.offsetJan1, this.offsetJun1);\n\t\treturn (-d.getTimezoneOffset() === dst);\n\t}\n\n\tif (!date) {\n\t\tdate = new ilib.Date.GregDate(); // right now\n\t} else if (!(date instanceof ilib.Date.GregDate)) {\n\t\t// convert to Gregorian so that we can tell if it is in DST or not\n\t\tdate = new ilib.Date.GregDate({\n\t\t\tjulianday: date.getJulianDay(),\n\t\t\ttimezone: date.getTimeZone()\n\t\t});\n\t}\n\n\t// if we aren't using daylight time in this zone for the given year, then we are\n\t// not in daylight time\n\tif (!this.useDaylightTime(date.year)) {\n\t\treturn false;\n\t}\n\n\t// this should be a Gregorian RD number now, in UTC\n\trd = date.rd.getRataDie();\n\n\t// these calculate the start/end in local wall time\n\tvar startrule = this._getDSTStartRule(date.year);\n\tvar endrule = this._getDSTEndRule(date.year);\n\tstartRd = this._calcRuleStart(startrule, date.year);\n\tendRd = this._calcRuleStart(endrule, date.year);\n\n\tif (wallTime) {\n\t\t// rd is in wall time, so we have to make sure to skip the missing time\n\t\t// at the start of DST when standard time ends and daylight time begins\n\t\tstartRd += this.dstSavings/1440;\n\t} else {\n\t\t// rd is in UTC, so we have to convert the start/end to UTC time so\n\t\t// that they can be compared directly to the UTC rd number of the date\n\n\t\t// when DST starts, time is standard time already, so we only have\n\t\t// to subtract the offset to get to UTC and not worry about the DST savings\n\t\tstartRd -= this.offset/1440;\n\n\t\t// when DST ends, time is in daylight time already, so we have to\n\t\t// subtract the DST savings to get back to standard time, then the\n\t\t// offset to get to UTC\n\t\tendRd -= (this.offset + this.dstSavings)/1440;\n\t}\n\n\t// In the northern hemisphere, the start comes first some time in spring (Feb-Apr),\n\t// then the end some time in the fall (Sept-Nov). In the southern\n\t// hemisphere, it is the other way around because the seasons are reversed. Standard\n\t// time is still in the winter, but the winter months are May-Aug, and daylight\n\t// savings time usually starts Aug-Oct of one year and runs through Mar-May of the\n\t// next year.\n\tif (rd < endRd && endRd - rd <= this.dstSavings/1440 && typeof(date.dst) === 'boolean') {\n\t\t// take care of the magic overlap time at the end of DST\n\t\treturn date.dst;\n\t}\n\tif (startRd < endRd) {\n\t\t// northern hemisphere\n\t\treturn (rd >= startRd && rd < endRd) ? true : false;\n\t}\n\t// southern hemisphere\n\treturn (rd >= startRd || rd < endRd) ? true : false;\n};\n\n/**\n * Returns true if this time zone switches to daylight savings time at some point\n * in the year, and false otherwise.\n * @param {number} year Whether or not the time zone uses daylight time in the given year. If\n * this parameter is not given, the current year is assumed.\n * @return {boolean} true if the time zone uses daylight savings time\n */\nilib.TimeZone.prototype.useDaylightTime = function (year) {\n\n\t// this zone uses daylight savings time iff there is a rule defining when to start\n\t// and when to stop the DST\n\treturn (this.isLocal && this.offsetJan1 !== this.offsetJun1) ||\n\t\t(typeof(this.zone) !== 'undefined' &&\n\t\ttypeof(this.zone.s) !== 'undefined' &&\n\t\ttypeof(this.zone.e) !== 'undefined');\n};\n\n/**\n * Returns the ISO 3166 code of the country for which this time zone is defined.\n * @return {string} the ISO 3166 code of the country for this zone\n */\nilib.TimeZone.prototype.getCountry = function () {\n\treturn this.zone.c;\n};\n/*\n * resources.js - Resource bundle definition\n *\n * Copyright © 2012-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ilibglobal.js locale.js localeinfo.js strings.js util/utils.js\n\n// !data pseudomap\n\n/**\n * @class\n * Create a new resource bundle instance. The resource bundle loads strings\n * appropriate for a particular locale and provides them via the getString\n * method.<p>\n *\n * The options object may contain any (or none) of the following properties:\n *\n * <ul>\n * <li><i>locale</i> - The locale of the strings to load. If not specified, the default\n * locale is the the default for the web page or app in which the bundle is\n * being loaded.\n *\n * <li><i>name</i> - Base name of the resource bundle to load. If not specified the default\n * base name is \"resources\".\n *\n * <li><i>type</i> - Name the type of strings this bundle contains. Valid values are\n * \"xml\", \"html\", \"text\", or \"raw\". The default is \"text\". If the type is \"xml\" or \"html\",\n * then XML/HTML entities and tags are not pseudo-translated. During a real translation,\n * HTML character entities are translated to their corresponding characters in a source\n * string before looking that string up in the translations. Also, the characters \"<\", \">\",\n * and \"&\" are converted to entities again in the output, but characters are left as they\n * are. If the type is \"xml\", \"html\", or \"text\" types, then the replacement parameter names\n * are not pseudo-translated as well so that the output can be used for formatting with\n * the ilib.String class. If the type is raw, all characters are pseudo-translated,\n * including replacement parameters as well as XML/HTML tags and entities.\n *\n * <li><i>lengthen</i> - when pseudo-translating the string, tell whether or not to\n * automatically lengthen the string to simulate \"long\" languages such as German\n * or French. This is a boolean value. Default is false.\n *\n * <li><i>missing</i> - what to do when a resource is missing. The choices are:\n * <ul>\n *   <li><i>source</i> - return the source string unchanged\n *   <li><i>pseudo</i> - return the pseudo-translated source string, translated to the\n *   script of the locale if the mapping is available, or just the default Latin\n *   pseudo-translation if not\n *   <li><i>empty</i> - return the empty string\n * </ul>\n * The default behaviour is the same as before, which is to return the source string\n * unchanged.\n *\n * <li><i>onLoad</i> - a callback function to call when the resources are fully\n * loaded. When the onLoad option is given, this class will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the\n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n *\n * <li>sync - tell whether to load any missing locale data synchronously or\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the\n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object\n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n *\n * The locale option may be given as a locale spec string or as an\n * ilib.Locale object. If the locale option is not specified, then strings for\n * the default locale will be loaded.<p>\n *\n * The name option can be used to put groups of strings together in a\n * single bundle. The strings will then appear together in a JS object in\n * a JS file that can be included before the ilib.<p>\n *\n * A resource bundle with a particular name is actually a set of bundles\n * that are each specific to a language, a language plus a region, etc.\n * All bundles with the same base name should\n * contain the same set of source strings, but with different translations for\n * the given locale. The user of the bundle does not need to be aware of\n * the locale of the bundle, as long as it contains values for the strings\n * it needs.<p>\n *\n * Strings in bundles for a particular locale are inherited from parent bundles\n * that are more generic. In general, the hierarchy is as follows (from\n * least locale-specific to most locale-specific):\n *\n * <ol>\n * <li> language\n * <li> region\n * <li> language_script\n * <li> language_region\n * <li> region_variant\n * <li> language_script_region\n * <li> language_region_variant\n * <li> language_script_region_variant\n * </ol>\n *\n * That is, if the translation for a string does not exist in the current\n * locale, the more-generic parent locale is searched for the string. In the\n * worst case scenario, the string is not found in the base locale's strings.\n * In this case, the missing option guides this class on what to do. If\n * the missing option is \"source\", then the original source is returned as\n * the translation. If it is \"empty\", the empty string is returned. If it\n * is \"pseudo\", then the pseudo-translated string that is appropriate for\n * the default script of the locale is returned.<p>\n *\n * This allows developers to create code with new or changed strings in it and check in that\n * code without waiting for the translations to be done first. The translated\n * version of the app or web site will still function properly, but will show\n * a spurious untranslated string here and there until the translations are\n * done and also checked in.<p>\n *\n * The base is whatever language your developers use to code in. For\n * a German web site, strings in the source code may be written in German\n * for example. Often this base is English, as many web sites are coded in\n * English, but that is not required.<p>\n *\n * The strings can be extracted with the ilib localization tool (which will be\n * shipped at some future time.) Once the strings\n * have been translated, the set of translated files can be generated with the\n * same tool. The output from the tool can be used as input to the ResBundle\n * object. It is up to the web page or app to make sure the JS file that defines\n * the bundle is included before creating the ResBundle instance.<p>\n *\n * A special locale \"zxx-XX\" is used as the pseudo-translation locale because\n * zxx means \"no linguistic information\" in the ISO 639 standard, and the region\n * code XX is defined to be user-defined in the ISO 3166 standard.\n * Pseudo-translation is a locale where the translations are generated on\n * the fly based on the contents of the source string. Characters in the source\n * string are replaced with other characters and returned.\n *\n * Example. If the source string is:\n *\n * <pre>\n * \"This is a string\"\n * </pre>\n *\n * then the pseudo-translated version might look something like this:\n *\n * <pre>\n * \"Ţħïş ïş á şţřïñĝ\"\n * </pre>\n * <p>\n *\n * Pseudo-translation can be used to test that your app or web site is translatable\n * before an actual translation has happened. These bugs can then be fixed\n * before the translation starts, avoiding an explosion of bugs later when\n * each language's tester registers the same bug complaining that the same\n * string is not translated. When pseudo-localizing with\n * the Latin script, this allows the strings to be readable in the UI in the\n * source language (if somewhat funky-looking),\n * so that a tester can easily verify that the string is properly externalized\n * and loaded from a resource bundle without the need to be able to read a\n * foreign language.<p>\n *\n * If one of a list of script tags is given in the pseudo-locale specifier, then the\n * pseudo-localization can map characters to very rough transliterations of\n * characters in the given script. For example, zxx-Hebr-XX maps strings to\n * Hebrew characters, which can be used to test your UI in a right-to-left\n * language to catch bidi bugs before a translation is done. Currently, the\n * list of target scripts includes Hebrew (Hebr), Chinese Simplified Han (Hans),\n * and Cyrillic (Cyrl) with more to be added later. If no script is explicitly\n * specified in the locale spec, or if the script is not supported,\n * then the default mapping maps Latin base characters to accented versions of\n * those Latin characters as in the example above.\n *\n * When the \"lengthen\" property is set to true in the options, the\n * pseudotranslation code will add digits to the end of the string to simulate\n * the lengthening that occurs when translating to other languages. The above\n * example will come out like this:\n *\n * <pre>\n * \"Ţħïş ïş á şţřïñĝ76543210\"\n * </pre>\n *\n * The string is lengthened according to the length of the source string. If\n * the source string is less than 20 characters long, the string is lengthened\n * by 50%. If the source string is 20-40\n * characters long, the string is lengthened by 33%. If te string is greater\n * than 40 characters long, the string is lengthened by 20%.<p>\n *\n * The pseudotranslation always ends a string with the digit \"0\". If you do\n * not see the digit \"0\" in the UI for your app, you know that truncation\n * has occurred, and the number you see at the end of the string tells you\n * how many characters were truncated.<p>\n *\n * Depends directive: !depends resources.js\n *\n * @constructor\n * @param {?Object} options Options controlling how the bundle is created\n */\nilib.ResBundle = function (options) {\n\tvar lookupLocale, spec;\n\n\tthis.locale = new ilib.Locale();\t// use the default locale\n\tthis.baseName = \"strings\";\n\tthis.type = \"text\";\n\tthis.loadParams = {};\n\tthis.missing = \"source\";\n\tthis.sync = true;\n\n\tif (options) {\n\t\tif (options.locale) {\n\t\t\tthis.locale = (typeof(options.locale) === 'string') ?\n\t\t\t\t\tnew ilib.Locale(options.locale) :\n\t\t\t\t\toptions.locale;\n\t\t}\n\t\tif (options.name) {\n\t\t\tthis.baseName = options.name;\n\t\t}\n\t\tif (options.type) {\n\t\t\tthis.type = options.type;\n\t\t}\n\t\tthis.lengthen = options.lengthen || false;\n\n\t\tif (typeof(options.sync) !== 'undefined') {\n\t\t\tthis.sync = (options.sync == true);\n\t\t}\n\n\t\tif (typeof(options.loadParams) !== 'undefined') {\n\t\t\tthis.loadParams = options.loadParams;\n\t\t}\n\t\tif (typeof(options.missing) !== 'undefined') {\n\t\t\tif (options.missing === \"pseudo\" || options.missing === \"empty\") {\n\t\t\t\tthis.missing = options.missing;\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.map = {};\n\n\tif (!ilib.ResBundle[this.baseName]) {\n\t\tilib.ResBundle[this.baseName] = {};\n\t}\n\n\tlookupLocale = this.locale.isPseudo() ? new ilib.Locale(\"en-US\") : this.locale;\n\n\tilib.loadData({\n\t\tobject: ilib.ResBundle[this.baseName],\n\t\tlocale: lookupLocale,\n\t\tname: this.baseName + \".json\",\n\t\tsync: this.sync,\n\t\tloadParams: this.loadParams,\n\t\tcallback: ilib.bind(this, function (map) {\n\t\t\tif (!map) {\n\t\t\t\tmap = ilib.data[this.baseName] || {};\n\t\t\t\tspec = lookupLocale.getSpec().replace(/-/g, '_');\n\t\t\t\tilib.ResBundle[this.baseName].cache[spec] = map;\n\t\t\t}\n\t\t\tthis.map = map;\n\t\t\tif (this.locale.isPseudo()) {\n\t\t\t\tif (!ilib.ResBundle.pseudomap) {\n\t\t\t\t\tilib.ResBundle.pseudomap = {};\n\t\t\t\t}\n\n\t\t\t\tthis._loadPseudo(this.locale, options.onLoad);\n\t\t\t} else if (this.missing === \"pseudo\") {\n\t\t\t\tif (!ilib.ResBundle.pseudomap) {\n\t\t\t\t\tilib.ResBundle.pseudomap = {};\n\t\t\t\t}\n\n\t\t\t\tnew ilib.LocaleInfo(this.locale, {\n\t\t\t\t\tsync: this.sync,\n\t\t\t\t\tloadParams: this.loadParams,\n\t\t\t\t\tonLoad: ilib.bind(this, function (li) {\n\t\t\t\t\t\tvar pseudoLocale = new ilib.Locale(\"zxx\", \"XX\", undefined, li.getDefaultScript());\n\t\t\t\t\t\tthis._loadPseudo(pseudoLocale, options.onLoad);\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\t\toptions.onLoad(this);\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t});\n\n\t// console.log(\"Merged resources \" + this.locale.toString() + \" are: \" + JSON.stringify(this.map));\n\t//if (!this.locale.isPseudo() && ilib.isEmpty(this.map)) {\n\t//\tconsole.log(\"Resources for bundle \" + this.baseName + \" locale \" + this.locale.toString() + \" are not available.\");\n\t//}\n};\n\nilib.ResBundle.defaultPseudo = ilib.data.pseudomap || {\n\t\"a\": \"à\",\n\t\"e\": \"ë\",\n\t\"i\": \"í\",\n\t\"o\": \"õ\",\n\t\"u\": \"ü\",\n\t\"y\": \"ÿ\",\n\t\"A\": \"Ã\",\n\t\"E\": \"Ë\",\n\t\"I\": \"Ï\",\n\t\"O\": \"Ø\",\n\t\"U\": \"Ú\",\n\t\"Y\": \"Ŷ\"\n};\n\nilib.ResBundle.prototype = {\n    /**\n     * @protected\n     */\n    _loadPseudo: function (pseudoLocale, onLoad) {\n\t\tilib.loadData({\n\t\t\tobject: ilib.ResBundle.pseudomap,\n\t\t\tlocale: pseudoLocale,\n\t\t\tname: \"pseudomap.json\",\n\t\t\tsync: this.sync,\n\t\t\tloadParams: this.loadParams,\n\t\t\tcallback: ilib.bind(this, function (map) {\n\t\t\t\tif (!map || ilib.isEmpty(map)) {\n\t\t\t\t\tmap = ilib.ResBundle.defaultPseudo;\n\t\t\t\t\tvar spec = pseudoLocale.getSpec().replace(/-/g, '_');\n\t\t\t\t\tilib.ResBundle.pseudomap.cache[spec] = map;\n\t\t\t\t}\n\t\t\t\tthis.pseudomap = map;\n\t\t\t\tif (typeof(onLoad) === 'function') {\n\t\t\t\t\tonLoad(this);\n\t\t\t\t}\n\t\t\t})\n\t\t});\n    },\n\n\t/**\n\t * Return the locale of this resource bundle.\n\t * @return {ilib.Locale} the locale of this resource bundle object\n\t */\n\tgetLocale: function () {\n\t\treturn this.locale;\n\t},\n\n\t/**\n\t * Return the name of this resource bundle. This corresponds to the name option\n\t * given to the constructor.\n\t * @return {string} name of the the current instance\n\t */\n\tgetName: function () {\n\t\treturn this.baseName;\n\t},\n\n\t/**\n\t * Return the type of this resource bundle. This corresponds to the type option\n\t * given to the constructor.\n\t * @return {string} type of the the current instance\n\t */\n\tgetType: function () {\n\t\treturn this.type;\n\t},\n\n\t/*\n\t * @private\n\t * Pseudo-translate a string\n\t */\n\tpseudo: function (str) {\n\t\tif (!str) {\n\t\t\treturn undefined;\n\t\t}\n\t\tvar ret = \"\", i;\n\t\tfor (i = 0; i < str.length; i++) {\n\t\t\tif (this.type !== \"raw\") {\n\t\t\t\tif (this.type === \"html\" || this.type === \"xml\") {\n\t\t\t\t\tif (str.charAt(i) === '<') {\n\t\t\t\t\t\tret += str.charAt(i++);\n\t\t\t\t\t\twhile (i < str.length && str.charAt(i) !== '>') {\n\t\t\t\t\t\t\tret += str.charAt(i++);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (i < str.length) {\n\t\t\t\t\t\t\tret += str.charAt(i++);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (str.charAt(i) === '&') {\n\t\t\t\t\t\tret += str.charAt(i++);\n\t\t\t\t\t\twhile (i < str.length && str.charAt(i) !== ';' && str.charAt(i) !== ' ') {\n\t\t\t\t\t\t\tret += str.charAt(i++);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (i < str.length) {\n\t\t\t\t\t\t\tret += str.charAt(i++);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (i < str.length) {\n\t\t\t\t\tif (str.charAt(i) === '{') {\n\t\t\t\t\t\tret += str.charAt(i++);\n\t\t\t\t\t\twhile (i < str.length && str.charAt(i) !== '}') {\n\t\t\t\t\t\t\tret += str.charAt(i++);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (i < str.length) {\n\t\t\t\t\t\t\tret += str.charAt(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tret += this.pseudomap[str.charAt(i)] || str.charAt(i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tret += this.pseudomap[str.charAt(i)] || str.charAt(i);\n\t\t\t}\n\t\t}\n\t\tif (this.lengthen) {\n\t\t\tvar add;\n\t\t\tif (ret.length <= 20) {\n\t\t\t\tadd = Math.round(ret.length / 2);\n\t\t\t} else if (ret.length > 20 && ret.length <= 40) {\n\t\t\t\tadd = Math.round(ret.length / 3);\n\t\t\t} else {\n\t\t\t\tadd = Math.round(ret.length / 5);\n\t\t\t}\n\t\t\tfor (i = add-1; i >= 0; i--) {\n\t\t\t\tret += (i % 10);\n\t\t\t}\n\t\t}\n\t\tif (this.locale.getScript() === \"Hans\" || this.locale.getScript() === \"Hant\" ||\n\t\t\t\tthis.locale.getScript() === \"Hani\" ||\n\t\t\t\tthis.locale.getScript() === \"Hrkt\" || this.locale.getScript() === \"Jpan\" ||\n\t\t\t\tthis.locale.getScript() === \"Hira\" || this.locale.getScript() === \"Kana\" ) {\n\t\t\t// simulate Asian languages by getting rid of all the spaces\n\t\t\tret = ret.replace(/ /g, \"\");\n\t\t}\n\t\treturn ret;\n\t},\n\n\t/*\n\t * @private\n\t * Escape html characters in the output.\n\t */\n\tescapeXml: function (str) {\n\t\tstr = str.replace(/&/g, '&amp;');\n\t\tstr = str.replace(/</g, '&lt;');\n\t\tstr = str.replace(/>/g, '&gt;');\n\t\treturn str;\n\t},\n\n\t/*\n\t * @private\n\t * @param {string} str the string to unescape\n\t */\n\tunescapeXml: function (str) {\n\t\tstr = str.replace(/&amp;/g, '&');\n\t\tstr = str.replace(/&lt;/g, '<');\n\t\tstr = str.replace(/&gt;/g, '>');\n\t\treturn str;\n\t},\n\n\t/*\n\t * @private\n\t * Create a key name out of a source string. All this does so far is\n\t * compress sequences of white space into a single space on the assumption\n\t * that this doesn't really change the meaning of the string, and therefore\n\t * all such strings that compress to the same thing should share the same\n\t * translation.\n\t * @param {string} source the source string to make a key out of\n\t */\n\tmakeKey: function (source) {\n\t\tvar key = source.replace(/\\s+/gm, ' ');\n\t\treturn (this.type === \"xml\" || this.type === \"html\") ? this.unescapeXml(key) : key;\n\t},\n\n\t/**\n\t * Return a localized string. If the string is not found in the loaded set of\n\t * resources, the original source string is returned. If the key is not given,\n\t * then the source string itself is used as the key. In the case where the\n\t * source string is used as the key, the whitespace is compressed down to 1 space\n\t * each, and the whitespace at the beginning and end of the string is trimmed.<p>\n\t *\n\t * The escape mode specifies what type of output you are escaping the returned\n\t * string for. Modes are similar to the types:\n\t *\n\t * <ul>\n\t * <li>\"html\" -- prevents HTML injection by escaping the characters &lt &gt; and &amp;\n\t * <li>\"xml\" -- currently same as \"html\" mode\n\t * <li>\"js\" -- prevents breaking Javascript syntax by backslash escaping all quote and\n\t * double-quote characters\n\t * <li>\"attribute\" -- meant for HTML attribute values. Currently this is the same as\n\t * \"js\" escape mode.\n\t * <li>\"default\" -- use the type parameter from the constructor as the escape mode as well\n\t * <li>\"none\" or undefined -- no escaping at all.\n\t * </ul>\n\t *\n\t * The type parameter of the constructor specifies what type of strings this bundle\n\t * is operating upon. This allows pseudo-translation and automatic key generation\n\t * to happen properly by telling this class how to parse the string. The escape mode\n\t * for this method is different in that it specifies how this string will be used in\n\t * the calling code and therefore how to escape it properly.<p>\n\t *\n\t * For example, a section of Javascript code may be constructing an HTML snippet in a\n\t * string to add to the web page. In this case, the type parameter in the constructor should\n\t * be \"html\" so that the source string can be parsed properly, but the escape mode should\n\t * be \"js\" so that the output string can be used in Javascript without causing syntax\n\t * errors.\n\t *\n\t * @param {?string=} source the source string to translate\n\t * @param {?string=} key optional name of the key, if any\n\t * @param {?string=} escapeMode escape mode, if any\n\t * @return {ilib.String|undefined} the translation of the given source/key or undefined\n\t * if the translation is not found and the source is undefined\n\t */\n\tgetString: function (source, key, escapeMode) {\n\t\tif (!source && !key) return new ilib.String(\"\");\n\n\t\tvar trans;\n\t\tif (this.locale.isPseudo()) {\n\t\t\tvar str = source ? source : this.map[key];\n\t\t\ttrans = this.pseudo(str || key);\n\t\t} else {\n\t\t\tvar keyName = key || this.makeKey(source);\n\t\t\tif (typeof(this.map[keyName]) !== 'undefined') {\n\t\t\t\ttrans = this.map[keyName];\n\t\t\t} else if (this.missing === \"pseudo\") {\n\t\t\t\ttrans = this.pseudo(source || key);\n\t\t\t} else if (this.missing === \"empty\") {\n\t\t\t\ttrans = \"\";\n\t\t\t} else {\n\t\t\t\ttrans = source;\n\t\t\t}\n\t\t}\n\n\t\tif (escapeMode && escapeMode !== \"none\") {\n\t\t\tif (escapeMode == \"default\") {\n\t\t\t\tescapeMode = this.type;\n\t\t\t}\n\t\t\tif (escapeMode === \"xml\" || escapeMode === \"html\") {\n\t\t\t\ttrans = this.escapeXml(trans);\n\t\t\t} else if (escapeMode == \"js\" || escapeMode === \"attribute\") {\n\t\t\t\ttrans = trans.replace(/'/g, \"\\\\\\'\").replace(/\"/g, \"\\\\\\\"\");\n\t\t\t}\n\t\t}\n\t\tif (trans === undefined) {\n\t\t\treturn undefined;\n\t\t} else {\n\t\t\tvar ret = new ilib.String(trans);\n\t\t\tret.setLocale(this.locale.getSpec(), true, this.loadParams); // no callback\n\t\t\treturn ret;\n\t\t}\n\t},\n\n\t/**\n\t * Return a localized string as a Javascript object. This does the same thing as\n\t * the getString() method, but it returns a regular Javascript string instead of\n\t * and ilib.String instance. This means it cannot be formatted with the format()\n\t * method without being wrapped in an ilib.String instance first.\n\t *\n\t * @param {?string=} source the source string to translate\n\t * @param {?string=} key optional name of the key, if any\n\t * @param {?string=} escapeMode escape mode, if any\n\t * @return {string|undefined} the translation of the given source/key or undefined\n\t * if the translation is not found and the source is undefined\n\t */\n\tgetStringJS: function(source, key, escapeMode) {\n\t\treturn this.getString(source, key, escapeMode).toString();\n\t},\n\n\t/**\n\t * Return true if the current bundle contains a translation for the given key and\n\t * source. The\n\t * getString method will always return a string for any given key and source\n\t * combination, so it cannot be used to tell if a translation exists. Either one\n\t * or both of the source and key must be specified. If both are not specified,\n\t * this method will return false.\n\t *\n\t * @param {?string=} source source string to look up\n\t * @param {?string=} key key to look up\n\t * @return {boolean} true if this bundle contains a translation for the key, and\n\t * false otherwise\n\t */\n\tcontainsKey: function(source, key) {\n\t\tif (typeof(source) === 'undefined' && typeof(key) === 'undefined') {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar keyName = key || this.makeKey(source);\n\t\treturn typeof(this.map[keyName]) !== 'undefined';\n\t},\n\n\t/**\n\t * Return the merged resources as an entire object. When loading resources for a\n\t * locale that are not just a set of translated strings, but instead an entire\n\t * structured javascript object, you can gain access to that object via this call. This method\n\t * will ensure that all the of the parts of the object are correct for the locale.<p>\n\t *\n\t * For pre-assembled data, it starts by loading <i>ilib.data[name]</i>, where\n\t * <i>name</i> is the base name for this set of resources. Then, it successively\n\t * merges objects in the base data using progressively more locale-specific data.\n\t * It loads it in this order from <i>ilib.data</i>:\n\t *\n\t * <ol>\n\t * <li> language\n\t * <li> region\n\t * <li> language_script\n\t * <li> language_region\n\t * <li> region_variant\n\t * <li> language_script_region\n\t * <li> language_region_variant\n\t * <li> language_script_region_variant\n\t * </ol>\n\t *\n\t * For dynamically loaded data, the code attempts to load the same sequence as\n\t * above, but with slash path separators instead of underscores.<p>\n\t *\n\t * Loading the resources this way allows the program to share resources between all\n\t * locales that share a common language, region, or script. As a\n\t * general rule-of-thumb, resources should be as generic as possible in order to\n\t * cover as many locales as possible.\n\t *\n\t * @return {Object} returns the object that is the basis for this resources instance\n\t */\n\tgetResObj: function () {\n\t\treturn this.map;\n\t}\n};\n\n/*\n * util/jsutils.js - Misc utilities to work around Javascript engine differences\n *\n * Copyright © 2013-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ilibglobal.js\n\n/**\n * Perform a shallow copy of the source object to the target object. This only\n * copies the assignments of the source properties to the target properties,\n * but not recursively from there.<p>\n *\n * Depends directive: !depends utils.js\n *\n * @static\n * @param {Object} source the source object to copy properties from\n * @param {Object} target the target object to copy properties into\n */\nilib.shallowCopy = function (source, target) {\n\tvar prop = undefined;\n\tif (source && target) {\n\t\tfor (prop in source) {\n\t\t\tif (prop !== undefined && typeof(source[prop]) !== 'undefined') {\n\t\t\t\ttarget[prop] = source[prop];\n\t\t\t}\n\t\t}\n\t}\n};\n\n/** [Need Comment]\n *\n */\nilib.deepCopy = function(from, to) {\n\tvar prop;\n\n\tfor (prop in from) {\n\t\tif (prop) {\n\t\t\tif (typeof(from[prop]) === 'object') {\n\t\t\t\tto[prop] ={};\n\t\t\t\tilib.deepCopy(from[prop], to[prop]);\n\t\t\t} else {\n\t\t\t\tto[prop] = from[prop];\n\t\t\t}\n\t\t}\n\t}\n\treturn to;\n};\n\n/**\n * Map a string to the given set of alternate characters. If the target set\n * does not contain a particular character in the input string, then that\n * character will be copied to the output unmapped.\n *\n * @static\n * @param {string} str a string to map to an alternate set of characters\n * @param {Array.<string>|Object} map a mapping to alternate characters\n * @return {string} the source string where each character is mapped to alternate characters\n */\nilib.mapString = function (str, map) {\n\tvar mapped = \"\";\n\tif (map && str) {\n\t\tfor (var i = 0; i < str.length; i++) {\n\t\t\tvar c = str.charAt(i); // TODO use a char iterator?\n\t\t\tmapped += map[c] || c;\n\t\t}\n\t} else {\n\t\tmapped = str;\n\t}\n\treturn mapped;\n};\n\n/**\n * Check if an object is a member of the given array. If this javascript engine\n * support indexOf, it is used directly. Otherwise, this function implements it\n * itself. The idea is to make sure that you can use the quick indexOf if it is\n * available, but use a slower implementation in older engines as well.\n *\n * @static\n * @param {Array.<Object>} array array to search\n * @param {Object} obj object being sought. This should be of the same type as the\n * members of the array being searched. If not, this function will not return\n * any results.\n * @return {number} index of the object in the array, or -1 if it is not in the array.\n */\nilib.indexOf = function(array, obj) {\n\tif (!array || !obj) {\n\t\treturn -1;\n\t}\n\tif (typeof(array.indexOf) === 'function') {\n\t\treturn array.indexOf(obj);\n\t} else {\n\t\tfor (var i = 0; i < array.length; i++) {\n\t        if (array[i] === obj) {\n\t            return i;\n\t        }\n\t    }\n\t    return -1;\n\t}\n};\n\n/**\n * @static\n * Convert a string into the hexadecimal representation\n * of the Unicode characters in that string.\n *\n * @param {string} string The string to convert\n * @param {number=} limit the number of digits to use to represent the character (1 to 8)\n * @return {string} a hexadecimal representation of the\n * Unicode characters in the input string\n */\nilib.toHexString = function(string, limit) {\n\tvar i,\n\t\tresult = \"\",\n\t\tlim = (limit && limit < 9) ? limit : 4;\n\n\tif (!string) {\n\t\treturn \"\";\n\t}\n\tfor (i = 0; i < string.length; i++) {\n\t\tvar ch = string.charCodeAt(i).toString(16);\n\t\tresult += \"00000000\".substring(0, lim-ch.length) + ch;\n\t}\n\treturn result.toUpperCase();\n};\n\n/*\n * datefmt.js - Date formatter definition\n *\n * Copyright © 2012-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n!depends\nilibglobal.js\nlocale.js\ndate.js\nstrings.js\nresources.js\ncalendar.js\nlocaleinfo.js\ntimezone.js\ncalendar/gregorian.js\nutil/jsutils.js\n*/\n\n// !data dateformats sysres\n\n/**\n * @class\n * Create a new date formatter instance. The date formatter is immutable once\n * it is created, but can format as many different dates as needed with the same\n * options. Create different date formatter instances for different purposes\n * and then keep them cached for use later if you have more than one date to\n * format.<p>\n *\n * The options may contain any of the following properties:\n *\n * <ul>\n * <li><i>locale</i> - locale to use when formatting the date/time. If the locale is\n * not specified, then the default locale of the app or web page will be used.\n *\n * <li><i>calendar</i> - the type of calendar to use for this format. The value should\n * be a sting containing the name of the calendar. Currently, the supported\n * types are \"gregorian\", \"julian\", \"arabic\", \"hebrew\", or \"chinese\". If the\n * calendar is not specified, then the default calendar for the locale is used. When the\n * calendar type is specified, then the format method must be called with an instance of\n * the appropriate date type. (eg. Gregorian calendar means that the format method must\n * be called with a GregDate instance.)\n *\n * <li><i>timezone</i> - time zone to use when formatting times. This may be a time zone\n * instance or a time zone specifier from the IANA list of time zone database names\n * (eg. \"America/Los_Angeles\"),\n * the string \"local\", or a string specifying the offset in RFC 822 format. The IANA\n * list of time zone names can be viewed at\n * <a href=\"http://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">this page</a>.\n * If the time zone is given as \"local\", the offset from UTC as given by\n * the Javascript system is used. If the offset is given as an RFC 822 style offset\n * specifier, it will parse that string and use the resulting offset. If the time zone\n * is not specified, the\n * default time zone for the locale is used. If both the date object and this formatter\n * instance contain time zones and those time zones are different from each other, the\n * formatter will calculate the offset between the time zones and subtract it from the\n * date before formatting the result for the current time zone. The theory is that a date\n * object that contains a time zone specifies a specific instant in time that is valid\n * around the world, whereas a date object without one is a local time and can only be\n * used for doing things in the local time zone of the user.\n *\n * <li><i>type</i> - Specify whether this formatter should format times only, dates only, or\n * both times and dates together. Valid values are \"time\", \"date\", and \"datetime\". Note that\n * in some locales, the standard format uses the order \"time followed by date\" and in others,\n * the order is exactly opposite, so it is better to create a single \"datetime\" formatter\n * than it is to create a time formatter and a date formatter separately and concatenate the\n * results. A \"datetime\" formatter will get the order correct for the locale.<p>\n *\n * The default type if none is specified in with the type option is \"date\".\n *\n * <li><i>length</i> - Specify the length of the format to use. The length is the approximate size of the\n * formatted string.\n *\n * <ul>\n * <li><i>short</i> - use a short representation of the time. This is the most compact format possible for the locale.\n * <li><i>medium</i> - use a medium length representation of the time. This is a slightly longer format.\n * <li><i>long</i> - use a long representation of the time. This is a fully specified format, but some of the textual\n * components may still be abbreviated\n * <li><i>full</i> - use a full representation of the time. This is a fully specified format where all the textual\n * components are spelled out completely\n * </ul>\n *\n * eg. The \"short\" format for an en_US date may be \"MM/dd/yy\", whereas the long format might be \"d MMM, yyyy\". In the long\n * format, the month name is textual instead of numeric and is longer, the year is 4 digits instead of 2, and the format\n * contains slightly more spaces and formatting characters.<p>\n *\n * Note that the length parameter does not specify which components are to be formatted. Use the \"date\" and the \"time\"\n * properties to specify the components. Also, very few of the components of a time format differ according to the length,\n * so this property has little to no affect on time formatting.\n *\n * <li><i>date</i> - This property tells\n * which components of a date format to use. For example,\n * sometimes you may wish to format a date that only contains the month and date\n * without the year, such as when displaying a person's yearly birthday. The value\n * of this property allows you to specify only those components you want to see in the\n * final output, ordered correctly for the locale. <p>\n *\n * Valid values are:\n *\n * <ul>\n * <li><i>dmwy</i> - format all components, weekday, date, month, and year\n * <li><i>dmy</i> - format only date, month, and year\n * <li><i>dmw</i> - format only weekday, date, and month\n * <li><i>dm</i> - format only date and month\n * <li><i>my</i> - format only month and year\n * <li><i>dw</i> - format only the weekday and date\n * <li><i>d</i> - format only the date\n * <li><i>m</i> - format only the month, in numbers for shorter lengths, and letters for\n * longer lengths\n * <li><i>n</i> - format only the month, in letters only for all lengths\n * <li><i>y</i> - format only the year\n * </ul>\n * Default components, if this property is not specified, is \"dmy\". This property may be specified\n * but has no affect if the current formatter is for times only.\n *\n * <li><i>time</i> - This property gives which components of a time format to use. The time will be formatted\n * correctly for the locale with only the time components requested. For example, a clock might only display\n * the hour and minute and not need the seconds or the am/pm component. In this case, the time property should be set\n * to \"hm\". <p>\n *\n * Valid values for this property are:\n *\n * <ul>\n * <li><i>ahmsz</i> - format the hours, minutes, seconds, am/pm (if using a 12 hour clock), and the time zone\n * <li><i>ahms</i> - format the hours, minutes, seconds, and am/pm (if using a 12 hour clock)\n * <li><i>hmsz</i> - format the hours, minutes, seconds, and the time zone\n * <li><i>hms</i> - format the hours, minutes, and seconds\n * <li><i>ahmz</i> - format the hours, minutes, am/pm (if using a 12 hour clock), and the time zone\n * <li><i>ahm</i> - format the hours, minutes, and am/pm (if using a 12 hour clock)\n * <li><i>hmz</i> - format the hours, minutes, and the time zone\n * <li><i>ah</i> - format only the hours and am/pm if using a 12 hour clock\n * <li><i>hm</i> - format only the hours and minutes\n * <li><i>ms</i> - format only the minutes and seconds\n * <li><i>h</i> - format only the hours\n * <li><i>m</i> - format only the minutes\n * <li><i>s</i> - format only the seconds\n * </ul>\n *\n * If you want to format a length of time instead of a particular instant\n * in time, use the duration formatter object (ilib.DurFmt) instead because this\n * formatter is geared towards instants. A date formatter will make sure that each component of the\n * time is within the normal range\n * for that component. That is, the minutes will always be between 0 and 59, no matter\n * what is specified in the date to format. A duration format will allow the number\n * of minutes to exceed 59 if, for example, you were displaying the length of\n * a movie of 198 minutes.<p>\n *\n * Default value if this property is not specified is \"hma\".\n *\n * <li><i>clock</i> - specify that the time formatter should use a 12 or 24 hour clock.\n * Valid values are \"12\" and \"24\".<p>\n *\n * In some locales, both clocks are used. For example, in en_US, the general populace uses\n * a 12 hour clock with am/pm, but in the US military or in nautical or aeronautical or\n * scientific writing, it is more common to use a 24 hour clock. This property allows you to\n * construct a formatter that overrides the default for the locale.<p>\n *\n * If this property is not specified, the default is to use the most widely used convention\n * for the locale.\n *\n * <li><i>template</i> - use the given template string as a fixed format when formatting\n * the date/time. Valid codes to use in a template string are as follows:\n *\n * <ul>\n * <li><i>a</i> - am/pm marker\n * <li><i>d</i> - 1 or 2 digit date of month, not padded\n * <li><i>dd</i> - 1 or 2 digit date of month, 0 padded to 2 digits\n * <li><i>O</i> - ordinal representation of the date of month (eg. \"1st\", \"2nd\", etc.)\n * <li><i>D</i> - 1 to 3 digit day of year\n * <li><i>DD</i> - 1 to 3 digit day of year, 0 padded to 2 digits\n * <li><i>DDD</i> - 1 to 3 digit day of year, 0 padded to 3 digits\n * <li><i>M</i> - 1 or 2 digit month number, not padded\n * <li><i>MM</i> - 1 or 2 digit month number, 0 padded to 2 digits\n * <li><i>N</i> - 1 character month name abbreviation\n * <li><i>NN</i> - 2 character month name abbreviation\n * <li><i>MMM</i> - 3 character month month name abbreviation\n * <li><i>MMMM</i> - fully spelled out month name\n * <li><i>yy</i> - 2 digit year\n * <li><i>yyyy</i> - 4 digit year\n * <li><i>E</i> - day-of-week name, abbreviated to a single character\n * <li><i>EE</i> - day-of-week name, abbreviated to a max of 2 characters\n * <li><i>EEE</i> - day-of-week name, abbreviated to a max of 3 characters\n * <li><i>EEEE</i> - day-of-week name fully spelled out\n * <li><i>G</i> - era designator\n * <li><i>w</i> - week number in year\n * <li><i>ww</i> - week number in year, 0 padded to 2 digits\n * <li><i>W</i> - week in month\n * <li><i>h</i> - hour (12 followed by 1 to 11)\n * <li><i>hh</i> - hour (12, followed by 1 to 11), 0 padded to 2 digits\n * <li><i>k</i> - hour (1 to 24)\n * <li><i>kk</i> - hour (1 to 24), 0 padded to 2 digits\n * <li><i>H</i> - hour (0 to 23)\n * <li><i>HH</i> - hour (0 to 23), 0 padded to 2 digits\n * <li><i>K</i> - hour (0 to 11)\n * <li><i>KK</i> - hour (0 to 11), 0 padded to 2 digits\n * <li><i>m</i> - minute in hour\n * <li><i>mm</i> - minute in hour, 0 padded to 2 digits\n * <li><i>s</i> - second in minute\n * <li><i>ss</i> - second in minute, 0 padded to 2 digits\n * <li><i>S</i> - millisecond (1 to 3 digits)\n * <li><i>SSS</i> - millisecond, 0 padded to 3 digits\n * <li><i>z</i> - general time zone\n * <li><i>Z</i> - RFC 822 time zone\n * </ul>\n *\n * <li><i>useNative</i> - the flag used to determine whether to use the native script settings\n * for formatting the numbers.\n *\n * <li><i>meridiems</i> - string that specifies what style of meridiems to use with this\n * format. The choices are \"default\", \"gregorian\", \"ethiopic\", and \"chinese\". The \"default\"\n * style is often the simple Gregorian AM/PM, but the actual style is chosen by the locale.\n * (For almost all locales, the Gregorian AM/PM style is most frequently used.)\n * The \"ethiopic\" style uses 5 different meridiems for \"morning\", \"noon\", \"afternoon\",\n * \"evening\", and \"night\". The \"chinese\" style uses 7 different meridiems corresponding\n * to the various parts of the day. N.B. Even for the Chinese locales, the default is \"gregorian\"\n * when formatting dates in the Gregorian calendar.\n *\n * <li><i>onLoad</i> - a callback function to call when the date format object is fully\n * loaded. When the onLoad option is given, the DateFmt object will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the\n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n *\n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the\n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object\n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n *\n * Any substring containing letters within single or double quotes will be used\n * as-is in the final output and will not be interpretted for codes as above.<p>\n *\n * Example: a date format in Spanish might be given as: \"'El' d. 'de' MMMM\", where\n * the 'El' and the 'de' are left as-is in the output because they are quoted. Typical\n * output for this example template might be, \"El 5. de Mayo\".\n *\n * The following options will be used when formatting a date/time with an explicit\n * template:\n *\n * <ul>\n * <li>locale - the locale is only used for\n * translations of things like month names or day-of-week names.\n * <li>calendar - used to translate a date instance into date/time component values\n * that can be formatted into the template\n * <li>timezone - used to figure out the offset to add or subtract from the time to\n * get the final time component values\n * <li>clock - used to figure out whether to format times with a 12 or 24 hour clock.\n * If this option is specified, it will override the hours portion of a time format.\n * That is, \"hh\" is switched with \"HH\" and \"kk\" is switched with \"KK\" as appropriate.\n * If this option is not specified, the 12/24 code in the template will dictate whether\n * to use the 12 or 24 clock, and the 12/24 default in the locale will be ignored.\n * </ul>\n *\n * All other options will be ignored and their corresponding getter methods will\n * return the empty string.<p>\n *\n * Depends directive: !depends datefmt.js\n *\n * @constructor\n * @param {Object} options options governing the way this date formatter instance works\n */\nilib.DateFmt = function(options) {\n\tvar arr, i, bad,\n\t\tsync = true,\n\t\tloadParams = undefined;\n\n\tthis.locale = new ilib.Locale();\n\tthis.type = \"date\";\n\tthis.length = \"s\";\n\tthis.dateComponents = \"dmy\";\n\tthis.timeComponents = \"ahm\";\n\tthis.meridiems = \"default\";\n\n\tif (options) {\n\t\tif (options.locale) {\n\t\t\tthis.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;\n\t\t}\n\n\t\tif (options.type) {\n\t\t\tif (options.type === 'date' || options.type === 'time' || options.type === 'datetime') {\n\t\t\t\tthis.type = options.type;\n\t\t\t}\n\t\t}\n\n\t\tif (options.calendar) {\n\t\t\tthis.calName = options.calendar;\n\t\t}\n\n\t\tif (options.length) {\n\t\t\tif (options.length === 'short' ||\n\t\t\t\toptions.length === 'medium' ||\n\t\t\t\toptions.length === 'long' ||\n\t\t\t\toptions.length === 'full') {\n\t\t\t\t// only use the first char to save space in the json files\n\t\t\t\tthis.length = options.length.charAt(0);\n\t\t\t}\n\t\t}\n\n\t\tif (options.date) {\n\t\t\tarr = options.date.split(\"\");\n\t\t\tarr.sort(function (left, right) {\n\t\t\t\treturn (left < right) ? -1 : ((right < left) ? 1 : 0);\n\t\t\t});\n\t\t\tbad = false;\n\t\t\tfor (i = 0; i < arr.length; i++) {\n\t\t\t\tif (arr[i] !== 'd' && arr[i] !== 'm' && arr[i] !== 'y' && arr[i] !== 'w' && arr[i] !== 'n') {\n\t\t\t\t\tbad = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!bad) {\n\t\t\t\tthis.dateComponents = arr.join(\"\");\n\t\t\t}\n\t\t}\n\n\t\tif (options.time) {\n\t\t\tarr = options.time.split(\"\");\n\t\t\tarr.sort(function (left, right) {\n\t\t\t\treturn (left < right) ? -1 : ((right < left) ? 1 : 0);\n\t\t\t});\n\t\t\tthis.badTime = false;\n\t\t\tfor (i = 0; i < arr.length; i++) {\n\t\t\t\tif (arr[i] !== 'h' && arr[i] !== 'm' && arr[i] !== 's' && arr[i] !== 'a' && arr[i] !== 'z') {\n\t\t\t\t\tthis.badTime = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!this.badTime) {\n\t\t\t\tthis.timeComponents = arr.join(\"\");\n\t\t\t}\n\t\t}\n\n\t\tif (options.clock && (options.clock === '12' || options.clock === '24')) {\n\t\t\tthis.clock = options.clock;\n\t\t}\n\n\t\tif (options.template) {\n\t\t\t// many options are not useful when specifying the template directly, so zero\n\t\t\t// them out.\n\t\t\tthis.type = \"\";\n\t\t\tthis.length = \"\";\n\t\t\tthis.dateComponents = \"\";\n\t\t\tthis.timeComponents = \"\";\n\n\t\t\tthis.template = options.template;\n\t\t}\n\n\t\tif (options.timezone) {\n\t\t\tif (options.timezone instanceof ilib.TimeZone) {\n\t\t\t\tthis.tz = options.timezone;\n\t\t\t} else {\n\t\t\t\tthis.tz = new ilib.TimeZone({\n\t\t\t\t\tlocale: this.locale,\n\t\t\t\t\tid: options.timezone\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (options.locale) {\n\t\t\t// if an explicit locale was given, then get the time zone for that locale\n\t\t\tthis.tz = new ilib.TimeZone({\n\t\t\t\tlocale: this.locale\n\t\t\t});\n\t\t} // else just assume time zone \"local\"\n\n\t\tif (typeof(options.useNative) === 'boolean') {\n\t\t\tthis.useNative = options.useNative;\n\t\t}\n\n\t\tif (typeof(options.meridiems) !== 'undefined' &&\n\t\t\t\t(options.meridiems === \"chinese\" ||\n\t\t\t\t options.meridiems === \"gregorian\" ||\n\t\t\t\t options.meridiems === \"ethiopic\")) {\n\t\t\tthis.meridiems = options.meridiems;\n\t\t}\n\n\t\tif (typeof(options.sync) !== 'undefined') {\n\t\t\tsync = (options.sync === true);\n\t\t}\n\n\t\tloadParams = options.loadParams;\n\t}\n\n\tif (!ilib.DateFmt.cache) {\n\t\tilib.DateFmt.cache = {};\n\t}\n\n\tnew ilib.LocaleInfo(this.locale, {\n\t\tsync: sync,\n\t\tloadParams: loadParams,\n\t\tonLoad: ilib.bind(this, function (li) {\n\t\t\tthis.locinfo = li;\n\n\t\t\t// get the default calendar name from the locale, and if the locale doesn't define\n\t\t\t// one, use the hard-coded gregorian as the last resort\n\t\t\tthis.calName = this.calName || this.locinfo.getCalendar() || \"gregorian\";\n\t\t\tthis.cal = ilib.Cal.newInstance({\n\t\t\t\ttype: this.calName\n\t\t\t});\n\t\t\tif (!this.cal) {\n\t\t\t\tthis.cal = new ilib.Cal.Gregorian();\n\t\t\t}\n\n\t\t\tif (this.meridiems === \"default\") {\n\t\t\t\tthis.meridiems = li.getMeridiemsStyle();\n\t\t\t}\n\n\t\t\t/*\n\t\t\tif (this.timeComponents &&\n\t\t\t\t\t(this.clock === '24' ||\n\t\t\t\t\t(!this.clock && this.locinfo.getClock() === \"24\"))) {\n\t\t\t\t// make sure we don't have am/pm in 24 hour mode unless the user specifically\n\t\t\t\t// requested it in the time component option\n\t\t\t\tthis.timeComponents = this.timeComponents.replace(\"a\", \"\");\n\t\t\t}\n\t\t\t*/\n\n\t\t\t// load the strings used to translate the components\n\t\t\tnew ilib.ResBundle({\n\t\t\t\tlocale: this.locale,\n\t\t\t\tname: \"sysres\",\n\t\t\t\tsync: sync,\n\t\t\t\tloadParams: loadParams,\n\t\t\t\tonLoad: ilib.bind(this, function (rb) {\n\t\t\t\t\tthis.sysres = rb;\n\n\t\t\t\t\tif (!this.template) {\n\t\t\t\t\t\tilib.loadData({\n\t\t\t\t\t\t\tobject: ilib.DateFmt,\n\t\t\t\t\t\t\tlocale: this.locale,\n\t\t\t\t\t\t\tname: \"dateformats.json\",\n\t\t\t\t\t\t\tsync: sync,\n\t\t\t\t\t\t\tloadParams: loadParams,\n\t\t\t\t\t\t\tcallback: ilib.bind(this, function (formats) {\n\t\t\t\t\t\t\t\tif (!formats) {\n\t\t\t\t\t\t\t\t\tformats = ilib.data.dateformats || ilib.DateFmt.defaultFmt;\n\t\t\t\t\t\t\t\t\tvar spec = this.locale.getSpec().replace(/-/g, '_');\n\t\t\t\t\t\t\t\t\tilib.DateFmt.cache[spec] = formats;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (typeof(this.clock) === 'undefined') {\n\t\t\t\t\t\t\t\t\t// default to the locale instead\n\t\t\t\t\t\t\t\t\tthis.clock = this.locinfo.getClock();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tthis._initTemplate(formats);\n\t\t\t\t\t\t\t\tthis._massageTemplate();\n\t\t\t\t\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\t\t\t\t\t\toptions.onLoad(this);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._massageTemplate();\n\t\t\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\t\t\t\toptions.onLoad(this);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t});\n\t\t})\n\t});\n};\n\n// used in getLength\nilib.DateFmt.lenmap = {\n\t\"s\": \"short\",\n\t\"m\": \"medium\",\n\t\"l\": \"long\",\n\t\"f\": \"full\"\n};\n\nilib.DateFmt.zeros = \"0000\";\n\nilib.DateFmt.defaultFmt = {\n\t\"gregorian\": {\n\t\t\"order\": \"{date} {time}\",\n\t\t\"date\": {\n\t\t\t\"dmwy\": \"EEE d/MM/yyyy\",\n\t\t\t\"dmy\": \"d/MM/yyyy\",\n\t\t\t\"dmw\": \"EEE d/MM\",\n\t\t\t\"dm\": \"d/MM\",\n\t\t\t\"my\": \"MM/yyyy\",\n\t\t\t\"dw\": \"EEE d\",\n\t\t\t\"d\": \"dd\",\n\t\t\t\"m\": \"MM\",\n\t\t\t\"y\": \"yyyy\",\n\t\t\t\"n\": \"NN\",\n\t\t\t\"w\": \"EEE\"\n\t\t},\n\t\t\"time\": {\n\t\t\t\"12\": \"h:mm:ssa\",\n\t\t\t\"24\": \"H:mm:ss\"\n\t\t},\n\t\t\"range\": {\n\t\t\t\"c00\": \"{st} - {et}, {sd}/{sm}/{sy}\",\n\t\t\t\"c01\": \"{sd}/{sm} {st} - {ed}/{em} {et}, {sy}\",\n\t\t\t\"c02\": \"{sd}/{sm} {st} - {ed}/{em} {et}, {sy}\",\n\t\t\t\"c03\": \"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}\",\n\t\t\t\"c10\": \"{sd}-{ed}/{sm}/{sy}\",\n\t\t\t\"c11\": \"{sd}/{sm} - {ed}/{em} {sy}\",\n\t\t\t\"c12\": \"{sd}/{sm}/{sy} - {ed}/{em}/{ey}\",\n\t\t\t\"c20\": \"{sm}/{sy} - {em}/{ey}\",\n\t\t\t\"c30\": \"{sy} - {ey}\"\n\t\t}\n\t},\n\t\"islamic\": \"gregorian\",\n\t\"hebrew\": \"gregorian\",\n\t\"julian\": \"gregorian\",\n\t\"buddhist\": \"gregorian\",\n\t\"persian\": \"gregorian\",\n\t\"persian-algo\": \"gregorian\",\n\t\"han\": \"gregorian\"\n};\n\n/**\n* @static\n* @private\n*/\nilib.DateFmt.monthNameLenMap = {\n\t\"short\" : \"N\",\n\t\"medium\": \"NN\",\n\t\"long\":   \"MMM\",\n\t\"full\":   \"MMMM\"\n};\n\n/**\n* @static\n* @private\n*/\nilib.DateFmt.weekDayLenMap = {\n\t\"short\" : \"E\",\n\t\"medium\": \"EE\",\n\t\"long\":   \"EEE\",\n\t\"full\":   \"EEEE\"\n};\n\n/**\n\t * @protected\n\t * @param {Object.<string, (string|{s:string,m:string,l:string,f:string})>} obj Object to search\n\t * @param {string} components Format components to search\n\t * @param {string} length Length of the requested format\n\t * @return {string|undefined} the requested format\n\t */\n\n/**\n* @static\n* @public\n* The options may contain any of the following properties:\n*\n* <ul>\n* <li><i>locale</i> - locale to use when formatting the date/time. If the locale is\n* not specified, then the default locale of the app or web page will be used.\n*\n* <li><i>meridiems</i> - string that specifies what style of meridiems to use with this\n* format. The choices are \"default\", \"gregorian\", \"ethiopic\", and \"chinese\". The \"default\"\n* style is often the simple Gregorian AM/PM, but the actual style is chosen by the locale.\n* (For almost all locales, the Gregorian AM/PM style is most frequently used.)\n* The \"ethiopic\" style uses 5 different meridiems for \"morning\", \"noon\", \"afternoon\",\n* \"evening\", and \"night\". The \"chinese\" style uses 7 different meridiems corresponding\n* to the various parts of the day. N.B. Even for the Chinese locales, the default is \"gregorian\"\n* when formatting dates in the Gregorian calendar.\n* </ul>\n*\n* @param {Object} options options governing the way this date formatter instance works for getting meridiems range\n* @return {Array.<{name:string,start:string,end:string}>}\n*/\nilib.DateFmt.getMeridiemsRange = function (options) {\n\toptions = options || {};\n\tvar args = {};\n\tif (options.locale) {\n\t\targs.locale = options.locale;\n\t}\n\n\tif (options.meridiems) {\n\t\targs.meridiems = options.meridiems;\n\t}\n\n\tvar fmt = new ilib.DateFmt(args);\n\n\treturn fmt.getMeridiemsRange();\n};\n\nilib.DateFmt.prototype = {\n\t/**\n\t * @protected\n\t */\n\t_initTemplate: function (formats) {\n\t\tif (formats[this.calName]) {\n\t\t\t/**\n\t\t\t * @private\n\t\t\t * @type {{order:(string|{s:string,m:string,l:string,f:string}),date:Object.<string, (string|{s:string,m:string,l:string,f:string})>,time:Object.<string,(string|{s:string,m:string,l:string,f:string})>,range:Object.<string, (string|{s:string,m:string,l:string,f:string})>}}\n\t\t\t */\n\t\t\tthis.formats = formats[this.calName];\n\t\t\tif (typeof(this.formats) === \"string\") {\n\t\t\t\t// alias to another calendar type\n\t\t\t\tthis.formats = formats[this.formats];\n\t\t\t}\n\n\t\t\tthis.template = \"\";\n\n\t\t\tswitch (this.type) {\n\t\t\t\tcase \"datetime\":\n\t\t\t\t\tthis.template = (this.formats && this._getLengthFormat(this.formats.order, this.length)) || \"{date} {time}\";\n\t\t\t\t\tthis.template = this.template.replace(\"{date}\", this._getFormat(this.formats.date, this.dateComponents, this.length) || \"\");\n\t\t\t\t\tthis.template = this.template.replace(\"{time}\", this._getFormat(this.formats.time[this.clock], this.timeComponents, this.length) || \"\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"date\":\n\t\t\t\t\tthis.template = this._getFormat(this.formats.date, this.dateComponents, this.length);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"time\":\n\t\t\t\t\tthis.template = this._getFormat(this.formats.time[this.clock], this.timeComponents, this.length);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\tthrow \"No formats available for calendar \" + this.calName + \" in locale \" + this.locale.toString();\n\t\t}\n\t},\n\n\t/**\n\t * @protected\n\t */\n\t_massageTemplate: function () {\n\t\tvar i;\n\n\t\tif (this.clock && this.template) {\n\t\t\t// explicitly set the hours to the requested type\n\t\t\tvar temp = \"\";\n\t\t\tswitch (this.clock) {\n\t\t\t\tcase \"24\":\n\t\t\t\t\tfor (i = 0; i < this.template.length; i++) {\n\t\t\t\t\t\tif (this.template.charAt(i) == \"'\") {\n\t\t\t\t\t\t\ttemp += this.template.charAt(i++);\n\t\t\t\t\t\t\twhile (i < this.template.length && this.template.charAt(i) !== \"'\") {\n\t\t\t\t\t\t\t\ttemp += this.template.charAt(i++);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (i < this.template.length) {\n\t\t\t\t\t\t\t\ttemp += this.template.charAt(i);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (this.template.charAt(i) == 'K') {\n\t\t\t\t\t\t\ttemp += 'k';\n\t\t\t\t\t\t} else if (this.template.charAt(i) == 'h') {\n\t\t\t\t\t\t\ttemp += 'H';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttemp += this.template.charAt(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.template = temp;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"12\":\n\t\t\t\t\tfor (i = 0; i < this.template.length; i++) {\n\t\t\t\t\t\tif (this.template.charAt(i) == \"'\") {\n\t\t\t\t\t\t\ttemp += this.template.charAt(i++);\n\t\t\t\t\t\t\twhile (i < this.template.length && this.template.charAt(i) !== \"'\") {\n\t\t\t\t\t\t\t\ttemp += this.template.charAt(i++);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (i < this.template.length) {\n\t\t\t\t\t\t\t\ttemp += this.template.charAt(i);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (this.template.charAt(i) == 'k') {\n\t\t\t\t\t\t\ttemp += 'K';\n\t\t\t\t\t\t} else if (this.template.charAt(i) == 'H') {\n\t\t\t\t\t\t\ttemp += 'h';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttemp += this.template.charAt(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.template = temp;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// tokenize it now for easy formatting\n\t\tthis.templateArr = this._tokenize(this.template);\n\n\t\tvar digits;\n\t\t// set up the mapping to native or alternate digits if necessary\n\t\tif (typeof(this.useNative) === \"boolean\") {\n\t\t\tif (this.useNative) {\n\t\t\t\tdigits = this.locinfo.getNativeDigits();\n\t\t\t\tif (digits) {\n\t\t\t\t\tthis.digits = digits;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (this.locinfo.getDigitsStyle() === \"native\") {\n\t\t\tdigits = this.locinfo.getNativeDigits();\n\t\t\tif (digits) {\n\t\t\t\tthis.useNative = true;\n\t\t\t\tthis.digits = digits;\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Convert the template into an array of date components separated by formatting chars.\n\t * @protected\n\t * @param {string} template Format template to tokenize into components\n\t * @return {Array.<string>} a tokenized array of date format components\n\t */\n\t_tokenize: function (template) {\n\t\tvar i = 0, start, ch, letter, arr = [];\n\n\t\t// console.log(\"_tokenize: tokenizing template \" + template);\n\t\tif (template) {\n\t\t\twhile (i < template.length) {\n\t\t\t\tch = template.charAt(i);\n\t\t\t\tstart = i;\n\t\t\t\tif (ch === \"'\") {\n\t\t\t\t\t// console.log(\"found quoted string\");\n\t\t\t\t\ti++;\n\t\t\t\t\t// escaped string - push as-is, then dequote later\n\t\t\t\t\twhile (i < template.length && template.charAt(i) !== \"'\") {\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\tif (i < template.length) {\n\t\t\t\t\t\ti++;\t// grab the other quote too\n\t\t\t\t\t}\n\t\t\t\t} else if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')) {\n\t\t\t\t\tletter = template.charAt(i);\n\t\t\t\t\t// console.log(\"found letters \" + letter);\n\t\t\t\t\twhile (i < template.length && ch === letter) {\n\t\t\t\t\t\tch = template.charAt(++i);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// console.log(\"found other\");\n\t\t\t\t\twhile (i < template.length && ch !== \"'\" && (ch < 'a' || ch > 'z') && (ch < 'A' || ch > 'Z')) {\n\t\t\t\t\t\tch = template.charAt(++i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tarr.push(template.substring(start,i));\n\t\t\t\t// console.log(\"start is \" + start + \" i is \" + i + \" and substr is \" + template.substring(start,i));\n\t\t\t}\n\t\t}\n\t\treturn arr;\n\t},\n\n\t/**\n\t * @protected\n\t * @param {Object.<string, (string|{s:string,m:string,l:string,f:string})>} obj Object to search\n\t * @param {string} components Format components to search\n\t * @param {string} length Length of the requested format\n\t * @return {string|undefined} the requested format\n\t */\n\t_getFormat: function getFormat(obj, components, length) {\n\t\tif (typeof(components) !== 'undefined' && obj && obj[components]) {\n\t\t\treturn this._getLengthFormat(obj[components], length);\n\t\t}\n\t\treturn undefined;\n\t},\n\n\t/**\n\t * @protected\n\t * @param {(string|{s:string,m:string,l:string,f:string})} obj Object to search\n\t * @param {string} length Length of the requested format\n\t * @return {(string|undefined)} the requested format\n\t */\n\t_getLengthFormat: function getLengthFormat(obj, length) {\n\t\tif (typeof(obj) === 'string') {\n\t\t\treturn obj;\n\t\t} else if (obj[length]) {\n\t\t\treturn obj[length];\n\t\t}\n\t\treturn undefined;\n\t},\n\n\t/**\n\t * Return the locale used with this formatter instance.\n\t * @return {ilib.Locale} the ilib.Locale instance for this formatter\n\t */\n\tgetLocale: function() {\n\t\treturn this.locale;\n\t},\n\n\t/**\n\t * Return the template string that is used to format date/times for this\n\t * formatter instance. This will work, even when the template property is not explicitly\n\t * given in the options to the constructor. Without the template option, the constructor\n\t * will build the appropriate template according to the options and use that template\n\t * in the format method.\n\t *\n\t * @return {string} the format template for this formatter\n\t */\n\tgetTemplate: function() {\n\t\treturn this.template;\n\t},\n\n\t/**\n\t * Return the type of this formatter. The type is a string that has one of the following\n\t * values: \"time\", \"date\", \"datetime\".\n\t * @return {string} the type of the formatter\n\t */\n\tgetType: function() {\n\t\treturn this.type;\n\t},\n\n\t/**\n\t * Return the name of the calendar used to format date/times for this\n\t * formatter instance.\n\t * @return {string} the name of the calendar used by this formatter\n\t */\n\tgetCalendar: function () {\n\t\treturn this.cal.getType();\n\t},\n\n\t/**\n\t * Return the length used to format date/times in this formatter. This is either the\n\t * value of the length option to the constructor, or the default value.\n\t *\n\t * @return {string} the length of formats this formatter returns\n\t */\n\tgetLength: function () {\n\t\treturn ilib.DateFmt.lenmap[this.length] || \"\";\n\t},\n\n\t/**\n\t * Return the date components that this formatter formats. This is either the\n\t * value of the date option to the constructor, or the default value. If this\n\t * formatter is a time-only formatter, this method will return the empty\n\t * string. The date component letters may be specified in any order in the\n\t * constructor, but this method will reorder the given components to a standard\n\t * order.\n\t *\n\t * @return {string} the date components that this formatter formats\n\t */\n\tgetDateComponents: function () {\n\t\treturn this.dateComponents || \"\";\n\t},\n\n\t/**\n\t * Return the time components that this formatter formats. This is either the\n\t * value of the time option to the constructor, or the default value. If this\n\t * formatter is a date-only formatter, this method will return the empty\n\t * string. The time component letters may be specified in any order in the\n\t * constructor, but this method will reorder the given components to a standard\n\t * order.\n\t *\n\t * @return {string} the time components that this formatter formats\n\t */\n\tgetTimeComponents: function () {\n\t\treturn this.timeComponents || \"\";\n\t},\n\n\t/**\n\t * Return the time zone used to format date/times for this formatter\n\t * instance.\n\t * @return a string naming the time zone\n\t */\n\tgetTimeZone: function () {\n\t\t// Lazy load the time zone. If it wasn't explicitly set up before, set\n\t\t// it up now, but use the\n\t\t// default TZ for the locale. This way, if the caller never uses the\n\t\t// time zone in their format, we never have to load up a TimeZone\n\t\t// instance into this formatter.\n\t\tif (!this.tz) {\n\t\t\tthis.tz = new ilib.TimeZone({id: ilib.getTimeZone()});\n\t\t}\n\t\treturn this.tz;\n\t},\n\t/**\n\t * Return the clock option set in the constructor. If the clock option was\n\t * not given, the default from the locale is returned instead.\n\t * @return {string} \"12\" or \"24\" depending on whether this formatter uses\n\t * the 12-hour or 24-hour clock\n\t */\n\tgetClock: function () {\n\t\treturn this.clock || this.locinfo.getClock();\n\t},\n\t/**\n\t * Return the meridiems range in current locale.\n\t * @return {Array.<{name:string,start:string,end:string}>}\n\t */\n\tgetMeridiemsRange: function () {\n\t\tvar result;\n\t\tvar _getSysString = function (key) {\n\t\t\treturn (this.sysres.getString(undefined, key + \"-\" + this.calName) || this.sysres.getString(undefined, key)).toString();\n\t\t};\n\n\t\tswitch (this.meridiems) {\n\t\tcase \"chinese\":\n\t\t\tresult = [\n\t\t\t\t{\n\t\t\t\t\tname: _getSysString.call(this, \"azh0\"),\n\t\t\t\t\tstart: \"00:00\",\n\t\t\t\t\tend: \"05:59\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: _getSysString.call(this, \"azh1\"),\n\t\t\t\t\tstart: \"06:00\",\n\t\t\t\t\tend: \"08:59\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: _getSysString.call(this, \"azh2\"),\n\t\t\t\t\tstart: \"09:00\",\n\t\t\t\t\tend: \"11:59\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: _getSysString.call(this, \"azh3\"),\n\t\t\t\t\tstart: \"12:00\",\n\t\t\t\t\tend: \"12:59\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: _getSysString.call(this, \"azh4\"),\n\t\t\t\t\tstart: \"13:00\",\n\t\t\t\t\tend: \"17:59\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: _getSysString.call(this, \"azh5\"),\n\t\t\t\t\tstart: \"18:00\",\n\t\t\t\t\tend: \"20:59\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: _getSysString.call(this, \"azh6\"),\n\t\t\t\t\tstart: \"21:00\",\n\t\t\t\t\tend: \"23:59\"\n\t\t\t\t}\n\t\t\t];\n\t\t\tbreak;\n\t\tcase \"ethiopic\":\n\t\t\tresult = [\n\t\t\t\t{\n\t\t\t\t\tname: _getSysString.call(this, \"a0-ethiopic\"),\n\t\t\t\t\tstart: \"00:00\",\n\t\t\t\t\tend: \"05:59\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: _getSysString.call(this, \"a1-ethiopic\"),\n\t\t\t\t\tstart: \"06:00\",\n\t\t\t\t\tend: \"06:00\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: _getSysString.call(this, \"a2-ethiopic\"),\n\t\t\t\t\tstart: \"06:01\",\n\t\t\t\t\tend: \"11:59\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: _getSysString.call(this, \"a3-ethiopic\"),\n\t\t\t\t\tstart: \"12:00\",\n\t\t\t\t\tend: \"17:59\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: _getSysString.call(this, \"a4-ethiopic\"),\n\t\t\t\t\tstart: \"18:00\",\n\t\t\t\t\tend: \"23:59\"\n\t\t\t\t}\n\t\t\t];\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tresult = [\n\t\t\t\t{\n\t\t\t\t\tname: _getSysString.call(this, \"a0\"),\n\t\t\t\t\tstart: \"00:00\",\n\t\t\t\t\tend: \"11:59\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: _getSysString.call(this, \"a1\"),\n\t\t\t\t\tstart: \"12:00\",\n\t\t\t\t\tend: \"23:59\"\n\t\t\t\t}\n\t\t\t];\n\t\t\tbreak;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getTemplate: function (prefix, calendar) {\n\t\tif (calendar !== \"gregorian\") {\n\t\t\treturn prefix + \"-\" + calendar;\n\t\t}\n\t\treturn prefix;\n\t},\n\n\t/**\n\t * Returns an array of the months of the year, formatted to the optional length specified.\n\t * i.e. ...getMonthsOfYear() OR ...getMonthsOfYear({length: \"short\"})\n\t * <p>\n\t * The options parameter may contain any of the following properties:\n\t *\n\t * <ul>\n\t * <li><i>length</i> - length of the names of the months being sought. This may be one of\n\t * \"short\", \"medium\", \"long\", or \"full\"\n\t * <li><i>date</i> - retrieve the names of the months in the date of the given date\n\t * <li><i>year</i> - retrieve the names of the months in the given year. In some calendars,\n\t * the months have different names depending if that year is a leap year or not.\n\t * </ul>\n\t *\n\t * @param  {Object=} options an object-literal that contains any of the above properties\n\t * @return {Array} an array of the names of all of the months of the year in the current calendar\n\t */\n\tgetMonthsOfYear: function(options) {\n\t\tvar length = (options && options.length) || this.getLength(),\n\t\t\ttemplate = ilib.DateFmt.monthNameLenMap[length],\n\t\t\tmonths = [undefined],\n\t\t\tdate,\n\t\t\tmonthCount;\n\n\t\tif (options) {\n\t\t\tif (options.date) {\n\t\t\t\tdate = ilib.Date._dateToIlib(options.date);\n\t\t\t}\n\n\t\t\tif (options.year) {\n\t\t\t\tdate = ilib.Date.newInstance({year: options.year, month: 1, day: 1, type: this.cal.getType()});\n\t\t\t}\n\t\t}\n\n\t\tif (!date) {\n\t\t\tdate = this.cal.newDateInstance();\n\t\t}\n\n\t\tmonthCount = this.cal.getNumMonths(date.getYears());\n\t\tfor (var i = 1; i <= monthCount; i++) {\n\t\t\tmonths[i] = this.sysres.getString(this._getTemplate(template + i, this.cal.getType())).toString();\n\t\t}\n\t\treturn months;\n\t},\n\n\t/**\n\t * Returns an array of the days of the week, formatted to the optional length specified.\n\t * i.e. ...getDaysOfWeek() OR ...getDaysOfWeek({length: \"short\"})\n\t * <p>\n\t * The options parameter may contain any of the following properties:\n\t *\n\t * <ul>\n\t * <li><i>length</i> - length of the names of the months being sought. This may be one of\n\t * \"short\", \"medium\", \"long\", or \"full\"\n\t * </ul>\n\t * @param  {Object=} options an object-literal that contains one key\n\t *                   \"length\" with the standard length strings\n\t * @return {Array} an array of all of the names of the days of the week\n\t */\n\tgetDaysOfWeek: function(options) {\n\t\tvar length = (options && options.length) || this.getLength(),\n\t\t\ttemplate = ilib.DateFmt.weekDayLenMap[length],\n\t\t\tdays = [];\n\t\tfor (var i = 0; i < 7; i++) {\n\t\t\tdays[i] = this.sysres.getString(this._getTemplate(template + i, this.cal.getType())).toString();\n\t\t}\n\t\treturn days;\n\t},\n\n\n\t/**\n\t * Convert this formatter to a string representation by returning the\n\t * format template. This method delegates to getTemplate.\n\t *\n\t * @return {string} the format template\n\t */\n\ttoString: function() {\n\t\treturn this.getTemplate();\n\t},\n\n\t/*\n\t * @private\n\t * Left pad the str to the given length of digits with zeros\n\t * @param {string} str the string to pad\n\t * @param {number} length the desired total length of the output string, padded\n\t */\n\t_pad: function (str, length) {\n\t\tif (typeof(str) !== 'string') {\n\t\t\tstr = \"\" + str;\n\t\t}\n\t\tvar start = 0;\n\t\tif (str.charAt(0) === '-') {\n\t\t\tstart++;\n\t\t}\n\t\treturn (str.length >= length+start) ? str : str.substring(0, start) + ilib.DateFmt.zeros.substring(0,length-str.length+start) + str.substring(start);\n\t},\n\n\t/*\n\t * @private\n\t * Format a date according to a sequence of components.\n\t * @param {ilib.Date} date a date/time object to format\n\t * @param {Array.<string>} templateArr an array of components to format\n\t * @return {string} the formatted date\n\t */\n\t_formatTemplate: function (date, templateArr) {\n\t\tvar i, key, temp, tz, str = \"\";\n\t\tfor (i = 0; i < templateArr.length; i++) {\n\t\t\tswitch (templateArr[i]) {\n\t\t\t\tcase 'd':\n\t\t\t\t\tstr += (date.day || 1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'dd':\n\t\t\t\t\tstr += this._pad(date.day || \"1\", 2);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'yy':\n\t\t\t\t\ttemp = \"\" + ((date.year || 0) % 100);\n\t\t\t\t\tstr += this._pad(temp, 2);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'yyyy':\n\t\t\t\t\tstr += this._pad(date.year || \"0\", 4);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'M':\n\t\t\t\t\tstr += (date.month || 1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'MM':\n\t\t\t\t\tstr += this._pad(date.month || \"1\", 2);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'h':\n\t\t\t\t\ttemp = (date.hour || 0) % 12;\n\t\t\t\t\tif (temp == 0) {\n\t\t\t\t\t\ttemp = \"12\";\n\t\t\t\t\t}\n\t\t\t\t\tstr += temp;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'hh':\n\t\t\t\t\ttemp = (date.hour || 0) % 12;\n\t\t\t\t\tif (temp == 0) {\n\t\t\t\t\t\ttemp = \"12\";\n\t\t\t\t\t}\n\t\t\t\t\tstr += this._pad(temp, 2);\n\t\t\t\t\tbreak;\n\t\t\t\t/*\n\t\t\t\tcase 'j':\n\t\t\t\t\ttemp = (date.hour || 0) % 12 + 1;\n\t\t\t\t\tstr += temp;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'jj':\n\t\t\t\t\ttemp = (date.hour || 0) % 12 + 1;\n\t\t\t\t\tstr += this._pad(temp, 2);\n\t\t\t\t\tbreak;\n\t\t\t\t*/\n\t\t\t\tcase 'K':\n\t\t\t\t\ttemp = (date.hour || 0) % 12;\n\t\t\t\t\tstr += temp;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'KK':\n\t\t\t\t\ttemp = (date.hour || 0) % 12;\n\t\t\t\t\tstr += this._pad(temp, 2);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'H':\n\t\t\t\t\tstr += (date.hour || \"0\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'HH':\n\t\t\t\t\tstr += this._pad(date.hour || \"0\", 2);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'k':\n\t\t\t\t\tstr += (date.hour == 0 ? \"24\" : date.hour);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'kk':\n\t\t\t\t\ttemp = (date.hour == 0 ? \"24\" : date.hour);\n\t\t\t\t\tstr += this._pad(temp, 2);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'm':\n\t\t\t\t\tstr += (date.minute || \"0\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'mm':\n\t\t\t\t\tstr += this._pad(date.minute || \"0\", 2);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 's':\n\t\t\t\t\tstr += (date.minute || \"0\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ss':\n\t\t\t\t\tstr += this._pad(date.second || \"0\", 2);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'S':\n\t\t\t\t\tstr += (date.millisecond || \"0\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'SSS':\n\t\t\t\t\tstr += this._pad(date.millisecond || \"0\", 3);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'N':\n\t\t\t\tcase 'NN':\n\t\t\t\tcase 'MMM':\n\t\t\t\tcase 'MMMM':\n\t\t\t\t\tkey = templateArr[i] + (date.month || 1);\n\t\t\t\t\tstr += (this.sysres.getString(undefined, key + \"-\" + this.calName) || this.sysres.getString(undefined, key));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'E':\n\t\t\t\tcase 'EE':\n\t\t\t\tcase 'EEE':\n\t\t\t\tcase 'EEEE':\n\t\t\t\t\tkey = templateArr[i] + date.getDayOfWeek();\n\t\t\t\t\t//console.log(\"finding \" + key + \" in the resources\");\n\t\t\t\t\tstr += (this.sysres.getString(undefined, key + \"-\" + this.calName) || this.sysres.getString(undefined, key));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'a':\n\t\t\t\t\tswitch (this.meridiems) {\n\t\t\t\t\tcase \"chinese\":\n\t\t\t\t\t\tif (date.hour < 6) {\n\t\t\t\t\t\t\tkey = \"azh0\";\t// before dawn\n\t\t\t\t\t\t} else if (date.hour < 9) {\n\t\t\t\t\t\t\tkey = \"azh1\";\t// morning\n\t\t\t\t\t\t} else if (date.hour < 12) {\n\t\t\t\t\t\t\tkey = \"azh2\";\t// late morning/day before noon\n\t\t\t\t\t\t} else if (date.hour < 13) {\n\t\t\t\t\t\t\tkey = \"azh3\";\t// noon hour/midday\n\t\t\t\t\t\t} else if (date.hour < 18) {\n\t\t\t\t\t\t\tkey = \"azh4\";\t// afternoon\n\t\t\t\t\t\t} else if (date.hour < 21) {\n\t\t\t\t\t\t\tkey = \"azh5\";\t// evening time/dusk\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tkey = \"azh6\";\t// night time\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"ethiopic\":\n\t\t\t\t\t\tif (date.hour < 6) {\n\t\t\t\t\t\t\tkey = \"a0-ethiopic\";\t// morning\n\t\t\t\t\t\t} else if (date.hour === 6 && date.minute === 0) {\n\t\t\t\t\t\t\tkey = \"a1-ethiopic\";\t// noon\n\t\t\t\t\t\t} else if (date.hour >= 6 && date.hour < 12) {\n\t\t\t\t\t\t\tkey = \"a2-ethiopic\";\t// afternoon\n\t\t\t\t\t\t} else if (date.hour >= 12 && date.hour < 18) {\n\t\t\t\t\t\t\tkey = \"a3-ethiopic\";\t// evening\n\t\t\t\t\t\t} else if (date.hour >= 18) {\n\t\t\t\t\t\t\tkey = \"a4-ethiopic\";\t// night\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tkey = date.hour < 12 ? \"a0\" : \"a1\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t//console.log(\"finding \" + key + \" in the resources\");\n\t\t\t\t\tstr += (this.sysres.getString(undefined, key + \"-\" + this.calName) || this.sysres.getString(undefined, key));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'w':\n\t\t\t\t\tstr += date.getWeekOfYear();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ww':\n\t\t\t\t\tstr += this._pad(date.getWeekOfYear(), 2);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'D':\n\t\t\t\t\tstr += date.getDayOfYear();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'DD':\n\t\t\t\t\tstr += this._pad(date.getDayOfYear(), 2);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'DDD':\n\t\t\t\t\tstr += this._pad(date.getDayOfYear(), 3);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'W':\n\t\t\t\t\tstr += date.getWeekOfMonth(this.locale);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'G':\n\t\t\t\t\tkey = \"G\" + date.getEra();\n\t\t\t\t\tstr += (this.sysres.getString(undefined, key + \"-\" + this.calName) || this.sysres.getString(undefined, key));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'O':\n\t\t\t\t\ttemp = this.sysres.getString(\"1#1st|2#2nd|3#3rd|21#21st|22#22nd|23#23rd|31#31st|#{num}th\", \"ordinalChoice\");\n\t\t\t\t\tstr += temp.formatChoice(date.day, {num: date.day});\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'z': // general time zone\n\t\t\t\t\ttz = this.getTimeZone(); // lazy-load the tz\n\t\t\t\t\tstr += tz.getDisplayName(date, \"standard\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Z': // RFC 822 time zone\n\t\t\t\t\ttz = this.getTimeZone(); // lazy-load the tz\n\t\t\t\t\tstr += tz.getDisplayName(date, \"rfc822\");\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tstr += templateArr[i].replace(/'/g, \"\");\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (this.digits) {\n\t\t\tstr = ilib.mapString(str, this.digits);\n\t\t}\n\t\treturn str;\n\t},\n\n\t/**\n\t * Format a particular date instance according to the settings of this\n\t * formatter object. The type of the date instance being formatted must\n\t * correspond exactly to the calendar type with which this formatter was\n\t * constructed. If the types are not compatible, this formatter will\n\t * produce bogus results.\n\t *\n\t * @param {Date|Number|String|ilib.Date|ilib.JulianDay|null|undefined} dateLike a date-like object to format\n\t * @return {string} the formatted version of the given date instance\n\t */\n\tformat: function (dateLike) {\n\t\tvar thisZoneName = this.tz && this.tz.getId() || \"local\";\n\n\t\tvar date = ilib.Date._dateToIlib(dateLike, thisZoneName);\n\n\t\tif (!date.getCalendar || !(date instanceof ilib.Date)) {\n\t\t\tthrow \"Wrong date type passed to ilib.DateFmt.format()\";\n\t\t}\n\n\t\tvar dateZoneName = date.timezone || \"local\";\n\n\t\t// convert to the time zone of this formatter before formatting\n\t\tif (dateZoneName !== thisZoneName || date.getCalendar() !== this.calName) {\n\t\t\t// console.log(\"Differing time zones date: \" + dateZoneName + \" and fmt: \" + thisZoneName + \". Converting...\");\n\t\t\t// this will recalculate the date components based on the new time zone\n\t\t\t// and/or convert a date in another calendar to the current calendar before formatting it\n\t\t\tvar newDate = ilib.Date.newInstance({\n\t\t\t\ttype: this.calName,\n\t\t\t\ttimezone: thisZoneName,\n\t\t\t\tjulianday: date.getJulianDay()\n\t\t\t});\n\n\t\t\tdate = newDate;\n\t\t}\n\t\treturn this._formatTemplate(date, this.templateArr);\n\t},\n\n\t/**\n\t * Return a string that describes a date relative to the given\n\t * reference date. The string returned is text that for the locale that\n\t * was specified when the formatter instance was constructed.<p>\n\t *\n\t * The date can be in the future relative to the reference date or in\n\t * the past, and the formatter will generate the appropriate string.<p>\n\t *\n\t * The text used to describe the relative reference depends on the length\n\t * of time between the date and the reference. If the time was in the\n\t * past, it will use the \"ago\" phrase, and in the future, it will use\n\t * the \"in\" phrase. Examples:<p>\n\t *\n\t * <ul>\n\t * <li>within a minute: either \"X seconds ago\" or \"in X seconds\"\n\t * <li>within an hour: either \"X minutes ago\" or \"in X minutes\"\n\t * <li>within a day: either \"X hours ago\" or \"in X hours\"\n\t * <li>within 2 weeks: either \"X days ago\" or \"in X days\"\n\t * <li>within 12 weeks (~3 months): either \"X weeks ago\" or \"in X weeks\"\n\t * <li>within two years: either \"X months ago\" or \"in X months\"\n\t * <li>longer than 2 years: \"X years ago\" or \"in X years\"\n\t * </ul>\n\t *\n\t * @param {Date|Number|String|ilib.Date|ilib.JulianDay|null|undefined} reference a date that the date parameter should be relative to\n\t * @param {Date|Number|String|ilib.Date|ilib.JulianDay|null|undefined} date a date being formatted\n\t * @throws \"Wrong calendar type\" when the start or end dates are not the same\n\t * calendar type as the formatter itself\n\t * @return {string} the formatted relative date\n\t */\n\tformatRelative: function(reference, date) {\n\t\treference = ilib.Date._dateToIlib(reference);\n\t\tdate = ilib.Date._dateToIlib(date);\n\n\t\tvar referenceRd, dateRd, fmt, time, diff, num;\n\n\t\tif (typeof(reference) !== 'object' || !reference.getCalendar || reference.getCalendar() !== this.calName ||\n\t\t\ttypeof(date) !== 'object' || !date.getCalendar || date.getCalendar() !== this.calName) {\n\t\t\tthrow \"Wrong calendar type\";\n\t\t}\n\n\t\treferenceRd = reference.getRataDie();\n\t\tdateRd = date.getRataDie();\n\n\t\tif (dateRd < referenceRd) {\n\t\t\tdiff = referenceRd - dateRd;\n\t\t\tfmt = this.sysres.getString(\"{duration} ago\");\n\t\t} else {\n\t\t\tdiff = dateRd - referenceRd;\n\t\t\tfmt = this.sysres.getString(\"in {duration}\");\n\t\t}\n\n\t\tif (diff < 0.000694444) {\n\t\t\tnum = Math.round(diff * 86400);\n\t\t\tswitch (this.length) {\n\t\t\t\tcase 's':\n\t\t\t\t\ttime = this.sysres.getString(\"#{num}s\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'm':\n\t\t\t\t\ttime = this.sysres.getString(\"1#1 se|#{num} sec\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'l':\n\t\t\t\t\ttime = this.sysres.getString(\"1#1 sec|#{num} sec\");\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\tcase 'f':\n\t\t\t\t\ttime = this.sysres.getString(\"1#1 second|#{num} seconds\");\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if (diff < 0.041666667) {\n\t\t\tnum = Math.round(diff * 1440);\n\t\t\tswitch (this.length) {\n\t\t\t\tcase 's':\n\t\t\t\t\ttime = this.sysres.getString(\"#{num}m\", \"durationShortMinutes\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'm':\n\t\t\t\t\ttime = this.sysres.getString(\"1#1 mi|#{num} min\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'l':\n\t\t\t\t\ttime = this.sysres.getString(\"1#1 min|#{num} min\");\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\tcase 'f':\n\t\t\t\t\ttime = this.sysres.getString(\"1#1 minute|#{num} minutes\");\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if (diff < 1) {\n\t\t\tnum = Math.round(diff * 24);\n\t\t\tswitch (this.length) {\n\t\t\t\tcase 's':\n\t\t\t\t\ttime = this.sysres.getString(\"#{num}h\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'm':\n\t\t\t\t\ttime = this.sysres.getString(\"1#1 hr|#{num} hrs\", \"durationMediumHours\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'l':\n\t\t\t\t\ttime = this.sysres.getString(\"1#1 hr|#{num} hrs\");\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\tcase 'f':\n\t\t\t\t\ttime = this.sysres.getString(\"1#1 hour|#{num} hours\");\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if (diff < 14) {\n\t\t\tnum = Math.round(diff);\n\t\t\tswitch (this.length) {\n\t\t\t\tcase 's':\n\t\t\t\t\ttime = this.sysres.getString(\"#{num}d\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'm':\n\t\t\t\t\ttime = this.sysres.getString(\"1#1 dy|#{num} dys\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'l':\n\t\t\t\t\ttime = this.sysres.getString(\"1#1 day|#{num} days\", \"durationLongDays\");\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\tcase 'f':\n\t\t\t\t\ttime = this.sysres.getString(\"1#1 day|#{num} days\");\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if (diff < 84) {\n\t\t\tnum = Math.round(diff/7);\n\t\t\tswitch (this.length) {\n\t\t\t\tcase 's':\n\t\t\t\t\ttime = this.sysres.getString(\"#{num}w\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'm':\n\t\t\t\t\ttime = this.sysres.getString(\"1#1 wk|#{num} wks\", \"durationMediumWeeks\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'l':\n\t\t\t\t\ttime = this.sysres.getString(\"1#1 wk|#{num} wks\");\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\tcase 'f':\n\t\t\t\t\ttime = this.sysres.getString(\"1#1 week|#{num} weeks\");\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if (diff < 730) {\n\t\t\tnum = Math.round(diff/30.4);\n\t\t\tswitch (this.length) {\n\t\t\t\tcase 's':\n\t\t\t\t\ttime = this.sysres.getString(\"#{num}m\", \"durationShortMonths\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'm':\n\t\t\t\t\ttime = this.sysres.getString(\"1#1 mo|#{num} mos\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'l':\n\t\t\t\t\ttime = this.sysres.getString(\"1#1 mon|#{num} mons\");\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\tcase 'f':\n\t\t\t\t\ttime = this.sysres.getString(\"1#1 month|#{num} months\");\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\tnum = Math.round(diff/365);\n\t\t\tswitch (this.length) {\n\t\t\t\tcase 's':\n\t\t\t\t\ttime = this.sysres.getString(\"#{num}y\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'm':\n\t\t\t\t\ttime = this.sysres.getString(\"1#1 yr|#{num} yrs\", \"durationMediumYears\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'l':\n\t\t\t\t\ttime = this.sysres.getString(\"1#1 yr|#{num} yrs\");\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\tcase 'f':\n\t\t\t\t\ttime = this.sysres.getString(\"1#1 year|#{num} years\");\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn fmt.format({duration: time.formatChoice(num, {num: num})});\n\t}\n};\n\n/*\n * datefmt.js - Date formatter definition\n *\n * Copyright © 2012-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n!depends\nilibglobal.js\nlocale.js\ndate.js\nstrings.js\ncalendar.js\nlocaleinfo.js\ntimezone.js\ndatefmt.js\ncalendar/gregorian.js\nutil/jsutils.js\n*/\n\n// !data dateformats sysres\n\n/**\n * @class\n * Create a new date range formatter instance. The date range formatter is immutable once\n * it is created, but can format as many different date ranges as needed with the same\n * options. Create different date range formatter instances for different purposes\n * and then keep them cached for use later if you have more than one range to\n * format.<p>\n *\n * The options may contain any of the following properties:\n *\n * <ul>\n * <li><i>locale</i> - locale to use when formatting the date/times in the range. If the\n * locale is not specified, then the default locale of the app or web page will be used.\n *\n * <li><i>calendar</i> - the type of calendar to use for this format. The value should\n * be a sting containing the name of the calendar. Currently, the supported\n * types are \"gregorian\", \"julian\", \"arabic\", \"hebrew\", or \"chinese\". If the\n * calendar is not specified, then the default calendar for the locale is used. When the\n * calendar type is specified, then the format method must be called with an instance of\n * the appropriate date type. (eg. Gregorian calendar means that the format method must\n * be called with a GregDate instance.)\n *\n * <li><i>timezone</i> - time zone to use when formatting times. This may be a time zone\n * instance or a time zone specifier string in RFC 822 format. If not specified, the\n * default time zone for the locale is used.\n *\n * <li><i>length</i> - Specify the length of the format to use as a string. The length\n * is the approximate size of the formatted string.\n *\n * <ul>\n * <li><i>short</i> - use a short representation of the time. This is the most compact format possible for the locale.\n * <li><i>medium</i> - use a medium length representation of the time. This is a slightly longer format.\n * <li><i>long</i> - use a long representation of the time. This is a fully specified format, but some of the textual\n * components may still be abbreviated. (eg. \"Tue\" instead of \"Tuesday\")\n * <li><i>full</i> - use a full representation of the time. This is a fully specified format where all the textual\n * components are spelled out completely.\n * </ul>\n *\n * eg. The \"short\" format for an en_US range may be \"MM/yy - MM/yy\", whereas the long format might be\n * \"MMM, yyyy - MMM, yyyy\". In the long format, the month name is textual instead of numeric\n * and is longer, the year is 4 digits instead of 2, and the format contains slightly more\n * spaces and formatting characters.<p>\n *\n * Note that the length parameter does not specify which components are to be formatted. The\n * components that are formatted depend on the length of time in the range.\n *\n * <li><i>clock</i> - specify that formatted times should use a 12 or 24 hour clock if the\n * format happens to include times. Valid values are \"12\" and \"24\".<p>\n *\n * In some locales, both clocks are used. For example, in en_US, the general populace uses\n * a 12 hour clock with am/pm, but in the US military or in nautical or aeronautical or\n * scientific writing, it is more common to use a 24 hour clock. This property allows you to\n * construct a formatter that overrides the default for the locale.<p>\n *\n * If this property is not specified, the default is to use the most widely used convention\n * for the locale.\n * <li>onLoad - a callback function to call when the date range format object is fully\n * loaded. When the onLoad option is given, the DateRngFmt object will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the\n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n *\n * <li>sync - tell whether to load any missing locale data synchronously or\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the\n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object\n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n * <p>\n *\n * Depends directive: !depends daterangefmt.js\n *\n * @constructor\n * @param {Object} options options governing the way this date range formatter instance works\n */\nilib.DateRngFmt = function(options) {\n\tvar sync = true;\n\tvar loadParams = undefined;\n\tthis.locale = new ilib.Locale();\n\tthis.length = \"s\";\n\n\tif (options) {\n\t\tif (options.locale) {\n\t\t\tthis.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;\n\t\t}\n\n\t\tif (options.calendar) {\n\t\t\tthis.calName = options.calendar;\n\t\t}\n\n\t\tif (options.length) {\n\t\t\tif (options.length === 'short' ||\n\t\t\t\toptions.length === 'medium' ||\n\t\t\t\toptions.length === 'long' ||\n\t\t\t\toptions.length === 'full') {\n\t\t\t\t// only use the first char to save space in the json files\n\t\t\t\tthis.length = options.length.charAt(0);\n\t\t\t}\n\t\t}\n\t\tif (typeof(options.sync) !== 'undefined') {\n\t\t\tsync = (options.sync == true);\n\t\t}\n\n\t\tloadParams = options.loadParams;\n\t}\n\n\tvar opts = {};\n\tilib.shallowCopy(options, opts);\n\topts.sync = sync;\n\topts.loadParams = loadParams;\n\n\t/**\n\t * @private\n\t */\n\topts.onLoad = ilib.bind(this, function (fmt) {\n\t\tthis.dateFmt = fmt;\n\t\tif (fmt) {\n\t\t\tthis.locinfo = this.dateFmt.locinfo;\n\n\t\t\t// get the default calendar name from the locale, and if the locale doesn't define\n\t\t\t// one, use the hard-coded gregorian as the last resort\n\t\t\tthis.calName = this.calName || this.locinfo.getCalendar() || \"gregorian\";\n\t\t\tthis.cal = ilib.Cal.newInstance({\n\t\t\t\ttype: this.calName\n\t\t\t});\n\t\t\tif (!this.cal) {\n\t\t\t\tthis.cal = new ilib.Cal.Gregorian();\n\t\t\t}\n\n\t\t\tthis.timeTemplate = this.dateFmt._getFormat(this.dateFmt.formats.time[this.dateFmt.clock], this.dateFmt.timeComponents, this.length) || \"hh:mm\";\n\t\t\tthis.timeTemplateArr = this.dateFmt._tokenize(this.timeTemplate);\n\n\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\toptions.onLoad(this);\n\t\t\t}\n\t\t}\n\t});\n\n\t// delegate a bunch of the formatting to this formatter\n\tnew ilib.DateFmt(opts);\n};\n\nilib.DateRngFmt.prototype = {\n\t/**\n\t * Return the locale used with this formatter instance.\n\t * @return {ilib.Locale} the ilib.Locale instance for this formatter\n\t */\n\tgetLocale: function() {\n\t\treturn this.locale;\n\t},\n\n\t/**\n\t * Return the name of the calendar used to format date/times for this\n\t * formatter instance.\n\t * @return {string} the name of the calendar used by this formatter\n\t */\n\tgetCalendar: function () {\n\t\treturn this.dateFmt.getCalendar();\n\t},\n\n\t/**\n\t * Return the length used to format date/times in this formatter. This is either the\n\t * value of the length option to the constructor, or the default value.\n\t *\n\t * @return {string} the length of formats this formatter returns\n\t */\n\tgetLength: function () {\n\t\treturn ilib.DateFmt.lenmap[this.length] || \"\";\n\t},\n\n\t/**\n\t * Return the time zone used to format date/times for this formatter\n\t * instance.\n\t * @return {ilib.TimeZone} a string naming the time zone\n\t */\n\tgetTimeZone: function () {\n\t\treturn this.dateFmt.getTimeZone();\n\t},\n\n\t/**\n\t * Return the clock option set in the constructor. If the clock option was\n\t * not given, the default from the locale is returned instead.\n\t * @return {string} \"12\" or \"24\" depending on whether this formatter uses\n\t * the 12-hour or 24-hour clock\n\t */\n\tgetClock: function () {\n\t\treturn this.dateFmt.getClock();\n\t},\n\n\t/**\n\t * Format a date/time range according to the settings of the current\n\t * formatter. The range is specified as being from the \"start\" date until\n\t * the \"end\" date. <p>\n\t *\n\t * The template that the date/time range uses depends on the\n\t * length of time between the dates, on the premise that a long date range\n\t * which is too specific is not useful. For example, when giving\n\t * the dates of the 100 Years War, in most situations it would be more\n\t * appropriate to format the range as \"1337 - 1453\" than to format it as\n\t * \"10:37am November 9, 1337 - 4:37pm July 17, 1453\", as the latter format\n\t * is much too specific given the length of time that the range represents.\n\t * If a very specific, but long, date range really is needed, the caller\n\t * should format two specific dates separately and put them\n\t * together as you might with other normal strings.<p>\n\t *\n\t * The format used for a date range contains the following date components,\n\t * where the order of those components is rearranged and the component values\n\t * are translated according to each locale:\n\t *\n\t * <ul>\n\t * <li>within 3 days: the times of day, dates, months, and years\n\t * <li>within 730 days (2 years): the dates, months, and years\n\t * <li>within 3650 days (10 years): the months and years\n\t * <li>longer than 10 years: the years only\n\t * </ul>\n\t *\n\t * In general, if any of the date components share a value between the\n\t * start and end date, that component is only given once. For example,\n\t * if the range is from November 15, 2011 to November 26, 2011, the\n\t * start and end dates both share the same month and year. The\n\t * range would then be formatted as \"November 15-26, 2011\". <p>\n\t *\n\t * If you want to format a length of time instead of a particular range of\n\t * time (for example, the length of an event rather than the specific start time\n\t * and end time of that event), then use a duration formatter instance\n\t * (ilib.DurFmt) instead. The formatRange method will make sure that each component\n\t * of the date/time is within the normal range for that component. For example,\n\t * the minutes will always be between 0 and 59, no matter what is specified in\n\t * the date to format, because that is the normal range for minutes. A duration\n\t * format will allow the number of minutes to exceed 59. For example, if you\n\t * were displaying the length of a movie that is 198 minutes long, the minutes\n\t * component of a duration could be 198.<p>\n\t *\n\t * @param {ilib.Date} start the starting date/time of the range. This must be of\n\t * the same calendar type as the formatter itself.\n\t * @param {ilib.Date} end the ending date/time of the range. This must be of the\n\t * same calendar type as the formatter itself.\n\t * @throws \"Wrong calendar type\" when the start or end dates are not the same\n\t * calendar type as the formatter itself\n\t * @return {string} a date range formatted for the locale\n\t */\n\tformat: function (start, end) {\n\t\tvar startRd, endRd, fmt = \"\", yearTemplate, monthTemplate, dayTemplate;\n\n\t\tif (typeof(start) !== 'object' || !start.getCalendar || start.getCalendar() !== this.calName ||\n\t\t\ttypeof(end) !== 'object' || !end.getCalendar || end.getCalendar() !== this.calName) {\n\t\t\tthrow \"Wrong calendar type\";\n\t\t}\n\n\t\tstartRd = start.getRataDie();\n\t\tendRd = end.getRataDie();\n\n\t\t//\n\t\t// legend:\n\t\t// c00 - difference is less than 3 days. Year, month, and date are same, but time is different\n\t\t// c01 - difference is less than 3 days. Year and month are same but date and time are different\n\t\t// c02 - difference is less than 3 days. Year is same but month, date, and time are different. (ie. it straddles a month boundary)\n\t\t// c03 - difference is less than 3 days. Year, month, date, and time are all different. (ie. it straddles a year boundary)\n\t\t// c10 - difference is less than 2 years. Year and month are the same, but date is different.\n\t\t// c11 - difference is less than 2 years. Year is the same, but month, date, and time are different.\n\t\t// c12 - difference is less than 2 years. All fields are different. (ie. straddles a year boundary)\n\t\t// c20 - difference is less than 10 years. All fields are different.\n\t\t// c30 - difference is more than 10 years. All fields are different.\n\t\t//\n\n\t\tif (endRd - startRd < 3) {\n\t\t\tif (start.year === end.year) {\n\t\t\t\tif (start.month === end.month) {\n\t\t\t\t\tif (start.day === end.day) {\n\t\t\t\t\t\tfmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, \"c00\", this.length));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, \"c01\", this.length));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, \"c02\", this.length));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, \"c03\", this.length));\n\t\t\t}\n\t\t} else if (endRd - startRd < 730) {\n\t\t\tif (start.year === end.year) {\n\t\t\t\tif (start.month === end.month) {\n\t\t\t\t\tfmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, \"c10\", this.length));\n\t\t\t\t} else {\n\t\t\t\t\tfmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, \"c11\", this.length));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, \"c12\", this.length));\n\t\t\t}\n\t\t} else if (endRd - startRd < 3650) {\n\t\t\tfmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, \"c20\", this.length));\n\t\t} else {\n\t\t\tfmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, \"c30\", this.length));\n\t\t}\n\n\t\tyearTemplate = this.dateFmt._tokenize(this.dateFmt._getFormat(this.dateFmt.formats.date, \"y\", this.length) || \"yyyy\");\n\t\tmonthTemplate = this.dateFmt._tokenize(this.dateFmt._getFormat(this.dateFmt.formats.date, \"m\", this.length) || \"MM\");\n\t\tdayTemplate = this.dateFmt._tokenize(this.dateFmt._getFormat(this.dateFmt.formats.date, \"d\", this.length) || \"dd\");\n\n\t\t/*\n\t\tconsole.log(\"fmt is \" + fmt.toString());\n\t\tconsole.log(\"year template is \" + yearTemplate);\n\t\tconsole.log(\"month template is \" + monthTemplate);\n\t\tconsole.log(\"day template is \" + dayTemplate);\n\t\t*/\n\n\t\treturn fmt.format({\n\t\t\tsy: this.dateFmt._formatTemplate(start, yearTemplate),\n\t\t\tsm: this.dateFmt._formatTemplate(start, monthTemplate),\n\t\t\tsd: this.dateFmt._formatTemplate(start, dayTemplate),\n\t\t\tst: this.dateFmt._formatTemplate(start, this.timeTemplateArr),\n\t\t\tey: this.dateFmt._formatTemplate(end, yearTemplate),\n\t\t\tem: this.dateFmt._formatTemplate(end, monthTemplate),\n\t\t\ted: this.dateFmt._formatTemplate(end, dayTemplate),\n\t\t\tet: this.dateFmt._formatTemplate(end, this.timeTemplateArr)\n\t\t});\n\t}\n};\n\n/*\n * hebrew.js - Represent a Hebrew calendar object.\n *\n * Copyright © 2012-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/* !depends calendar.js locale.js date.js julianday.js util/utils.js util/math.js */\n\n/**\n * @class\n * Construct a new Hebrew calendar object. This class encodes information about\n * the Hebrew (Jewish) calendar. The Hebrew calendar is a tabular hebrew\n * calendar where the dates are calculated by arithmetic rules. This differs from\n * the religious Hebrew calendar which is used to mark the beginning of particular\n * holidays. The religious calendar depends on the first sighting of the new\n * crescent moon to determine the first day of the new month. Because humans and\n * weather are both involved, the actual time of sighting varies, so it is not\n * really possible to precalculate the religious calendar. Certain groups, such\n * as the Hebrew Society of North America, decreed in in 2007 that they will use\n * a calendar based on calculations rather than observations to determine the\n * beginning of lunar months, and therefore the dates of holidays.<p>\n *\n * Depends directive: !depends hebrew.js\n *\n * @constructor\n * @implements ilib.Cal\n */\nilib.Cal.Hebrew = function() {\n\tthis.type = \"hebrew\";\n};\n\n\n/**\n * Return the number of days elapsed in the Hebrew calendar before the\n * given year starts.\n * @private\n * @param {number} year the year for which the number of days is sought\n * @return {number} the number of days elapsed in the Hebrew calendar before the\n * given year starts\n */\nilib.Cal.Hebrew.elapsedDays = function(year) {\n\tvar months = Math.floor(((235*year) - 234)/19);\n\tvar parts = 204 + 793 * ilib.mod(months, 1080);\n\tvar hours = 11 + 12 * months + 793 * Math.floor(months/1080) +\n\t\tMath.floor(parts/1080);\n\tvar days = 29 * months + Math.floor(hours/24);\n\treturn (ilib.mod(3 * (days + 1), 7) < 3) ? days + 1 : days;\n};\n\n/**\n * Return the number of days that the New Year's (Rosh HaShanah) in the Hebrew\n * calendar will be corrected for the given year. Corrections are caused because New\n * Year's is not allowed to start on certain days of the week. To deal with\n * it, the start of the new year is corrected for the next year by adding a\n * day to the 8th month (Heshvan) and/or the 9th month (Kislev) in the current\n * year to make them 30 days long instead of 29.\n *\n * @private\n * @param {number} year the year for which the correction is sought\n * @param {number} elapsed number of days elapsed up to this year\n * @return {number} the number of days correction in the current year to make sure\n * Rosh HaShanah does not fall on undesirable days of the week\n */\nilib.Cal.Hebrew.newYearsCorrection = function(year, elapsed) {\n\tvar lastYear = ilib.Cal.Hebrew.elapsedDays(year-1),\n\t\tthisYear = elapsed,\n\t\tnextYear = ilib.Cal.Hebrew.elapsedDays(year+1);\n\n\treturn (nextYear - thisYear) == 356 ? 2 : ((thisYear - lastYear) == 382 ? 1 : 0);\n};\n\n/**\n * Return the rata die date of the new year for the given hebrew year.\n * @private\n * @param {number} year the year for which the new year is needed\n * @return {number} the rata die date of the new year\n */\nilib.Cal.Hebrew.newYear = function(year) {\n\tvar elapsed = ilib.Cal.Hebrew.elapsedDays(year);\n\n\treturn elapsed + ilib.Cal.Hebrew.newYearsCorrection(year, elapsed);\n};\n\n/**\n * Return the number of days in the given year. Years contain a variable number of\n * days because the date of Rosh HaShanah (New Year's) changes so that it doesn't\n * fall on particular days of the week. Days are added to the months of Heshvan\n * and/or Kislev in the previous year in order to prevent the current year's New\n * Year from being on Sunday, Wednesday, or Friday.\n *\n * @param {number} year the year for which the length is sought\n * @return {number} number of days in the given year\n */\nilib.Cal.Hebrew.daysInYear = function(year) {\n\treturn ilib.Cal.Hebrew.newYear(year+1) - ilib.Cal.Hebrew.newYear(year);\n};\n\n/**\n * Return true if the given year contains a long month of Heshvan. That is,\n * it is 30 days instead of 29.\n *\n * @private\n * @param {number} year the year in which that month is questioned\n * @return {boolean} true if the given year contains a long month of Heshvan\n */\nilib.Cal.Hebrew.longHeshvan = function(year) {\n\treturn ilib.mod(ilib.Cal.Hebrew.daysInYear(year), 10) === 5;\n};\n\n/**\n * Return true if the given year contains a long month of Kislev. That is,\n * it is 30 days instead of 29.\n *\n * @private\n * @param {number} year the year in which that month is questioned\n * @return {boolean} true if the given year contains a short month of Kislev\n */\nilib.Cal.Hebrew.longKislev = function(year) {\n\treturn ilib.mod(ilib.Cal.Hebrew.daysInYear(year), 10) !== 3;\n};\n\n/**\n * Return the date of the last day of the month for the given year. The date of\n * the last day of the month is variable because a number of months gain an extra\n * day in leap years, and it is variable which months gain a day for each leap\n * year and which do not.\n *\n * @param {number} month the month for which the number of days is sought\n * @param {number} year the year in which that month is\n * @return {number} the number of days in the given month and year\n */\nilib.Cal.Hebrew.prototype.lastDayOfMonth = function(month, year) {\n\tswitch (month) {\n\t\tcase 2:\n\t\tcase 4:\n\t\tcase 6:\n\t\tcase 10:\n\t\t\treturn 29;\n\t\tcase 13:\n\t\t\treturn this.isLeapYear(year) ? 29 : 0;\n\t\tcase 8:\n\t\t\treturn ilib.Cal.Hebrew.longHeshvan(year) ? 30 : 29;\n\t\tcase 9:\n\t\t\treturn ilib.Cal.Hebrew.longKislev(year) ? 30 : 29;\n\t\tcase 12:\n\t\tcase 1:\n\t\tcase 3:\n\t\tcase 5:\n\t\tcase 7:\n\t\tcase 11:\n\t\t\treturn 30;\n\t\tdefault:\n\t\t\treturn 0;\n\t}\n};\n\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for luni-solar calendars because in some years, an extra month is needed to extend the\n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=first month, 2=second month, etc.\n *\n * @param {number} year a year for which the number of months is sought\n */\nilib.Cal.Hebrew.prototype.getNumMonths = function(year) {\n\treturn this.isLeapYear(year) ? 13 : 12;\n};\n\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of leap years.\n *\n * @param {number} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @returns {number} the number of days within the given month in the given year, or\n * 0 for an invalid month in the year\n */\nilib.Cal.Hebrew.prototype.getMonLength = function(month, year) {\n\tif (month < 1 || month > 13 || (month == 13 && !this.isLeapYear(year))) {\n\t\treturn 0;\n\t}\n\treturn this.lastDayOfMonth(month, year);\n};\n\n/**\n * Return true if the given year is a leap year in the Hebrew calendar.\n * The year parameter may be given as a number, or as a HebrewDate object.\n * @param {number|Object} year the year for which the leap year information is being sought\n * @returns {boolean} true if the given year is a leap year\n */\nilib.Cal.Hebrew.prototype.isLeapYear = function(year) {\n\tvar y = (typeof(year) == 'number') ? year : year.year;\n\treturn (ilib.mod(1 + 7 * y, 19) < 7);\n};\n\n/**\n * Return the type of this calendar.\n *\n * @returns {string} the name of the type of this calendar\n */\nilib.Cal.Hebrew.prototype.getType = function() {\n\treturn this.type;\n};\n\n/**\n * Return a date instance for this calendar type using the given\n * options.\n * @param {Object} options options controlling the construction of\n * the date instance\n * @returns {ilib.Date} a date appropriate for this calendar type\n */\nilib.Cal.Hebrew.prototype.newDateInstance = function (options) {\n\treturn new ilib.Date.HebrewDate(options);\n};\n\n/*register this calendar for the factory method */\nilib.Cal._constructors[\"hebrew\"] = ilib.Cal.Hebrew;\n\n/*\n * hebrewdate.js - Represent a date in the Hebrew calendar\n *\n * Copyright © 2012-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\ndate.js\ncalendar/hebrew.js\ncalendar/ratadie.js\nutil/utils.js\nutil/math.js\njulianday.js\n*/\n\n/**\n * @class\n * Construct a new Hebrew RD date number object. The constructor parameters can\n * contain any of the following properties:\n *\n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n *\n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n *\n * <li><i>year</i> - any integer, including 0\n *\n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n *\n * <li><i>day</i> - 1 to 31\n *\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n *\n * <li><i>parts</i> - 0 to 1079. Specify the halaqim parts of an hour. Either specify\n * the parts or specify the minutes, seconds, and milliseconds, but not both.\n *\n * <li><i>minute</i> - 0 to 59\n *\n * <li><i>second</i> - 0 to 59\n *\n * <li><i>millisecond</i> - 0 to 999\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Hebrew date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above are present, then the RD is calculate based on\n * the current date at the time of instantiation. <p>\n *\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n *\n * Depends directive: !depends hebrewdate.js\n *\n * @private\n * @constructor\n * @extends ilib.Date.RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Hebrew RD date\n */\nilib.Date.HebrewRataDie = function(params) {\n\tthis.cal = params && params.cal || new ilib.Cal.Hebrew();\n\tthis.rd = undefined;\n\tilib.Date.RataDie.call(this, params);\n};\n\nilib.Date.HebrewRataDie.prototype = new ilib.Date.RataDie();\nilib.Date.HebrewRataDie.prototype.parent = ilib.Date.RataDie;\nilib.Date.HebrewRataDie.prototype.constructor = ilib.Date.HebrewRataDie;\n\n/**\n * The difference between a zero Julian day and the first day of the Hebrew\n * calendar: sunset on Monday, Tishri 1, 1 = September 7, 3760 BC Gregorian = JD 347997.25\n * @private\n * @const\n * @type number\n */\nilib.Date.HebrewRataDie.prototype.epoch = 347997.25;\n\n/**\n * Calculate the Rata Die (fixed day) number of the given date from the\n * date components.\n *\n * @private\n * @param {Object} date the date components to calculate the RD from\n */\nilib.Date.HebrewRataDie.prototype._setDateComponents = function(date) {\n\tvar elapsed = ilib.Cal.Hebrew.elapsedDays(date.year);\n\tvar days = elapsed +\n\t\tilib.Cal.Hebrew.newYearsCorrection(date.year, elapsed) +\n\t\tdate.day - 1;\n\tvar sum = 0, table;\n\n\t//console.log(\"getRataDie: converting \" +  JSON.stringify(date));\n\t//console.log(\"getRataDie: days is \" +  days);\n\t//console.log(\"getRataDie: new years correction is \" +  ilib.Cal.Hebrew.newYearsCorrection(date.year, elapsed));\n\n\ttable = this.cal.isLeapYear(date.year) ?\n\t\t\t\tilib.Date.HebrewDate.cumMonthLengthsLeap :\n\t\t\t\tilib.Date.HebrewDate.cumMonthLengths;\n\tsum = table[date.month-1];\n\n\t// gets cumulative without correction, so now add in the correction\n\tif ((date.month < 7 || date.month > 8) && ilib.Cal.Hebrew.longHeshvan(date.year)) {\n\t\tsum++;\n\t}\n\tif ((date.month < 7 || date.month > 9) && ilib.Cal.Hebrew.longKislev(date.year)) {\n\t\tsum++;\n\t}\n\t// console.log(\"getRataDie: cum days is now \" +  sum);\n\n\tdays += sum;\n\n\t// the date starts at sunset, which we take as 18:00, so the hours from\n\t// midnight to 18:00 are on the current Gregorian day, and the hours from\n\t// 18:00 to midnight are on the previous Gregorian day. So to calculate the\n\t// number of hours into the current day that this time represents, we have\n\t// to count from 18:00 to midnight first, and add in 6 hours if the time is\n\t// less than 18:00\n\tvar minute, second, millisecond;\n\n\tif (typeof(date.parts) !== 'undefined') {\n\t\t// The parts (halaqim) of the hour. This can be a number from 0 to 1079.\n\t\tvar parts = parseInt(date.parts, 10);\n\t\tvar seconds = parseInt(parts, 10) * 3.333333333333;\n\t\tminute = Math.floor(seconds / 60);\n\t\tseconds -= minute * 60;\n\t\tsecond = Math.floor(seconds);\n\t\tmillisecond = (seconds - second);\n\t} else {\n\t\tminute = parseInt(date.minute, 10) || 0;\n\t\tsecond = parseInt(date.second, 10) || 0;\n\t\tmillisecond = parseInt(date.millisecond, 10) || 0;\n\t}\n\n\tvar time;\n\tif (date.hour >= 18) {\n\t\ttime = ((date.hour - 18 || 0) * 3600000 +\n\t\t\t(minute || 0) * 60000 +\n\t\t\t(second || 0) * 1000 +\n\t\t\t(millisecond || 0)) /\n\t\t\t86400000;\n\t} else {\n\t\ttime = 0.25 +\t// 6 hours from 18:00 to midnight on the previous gregorian day\n\t\t\t\t((date.hour || 0) * 3600000 +\n\t\t\t\t(minute || 0) * 60000 +\n\t\t\t\t(second || 0) * 1000 +\n\t\t\t\t(millisecond || 0)) /\n\t\t\t\t86400000;\n\t}\n\n\t//console.log(\"getRataDie: rd is \" +  (days + time));\n\tthis.rd = days + time;\n};\n\n/**\n * Return the rd number of the particular day of the week on or before the\n * given rd. eg. The Sunday on or before the given rd.\n * @private\n * @param {number} rd the rata die date of the reference date\n * @param {number} dayOfWeek the day of the week that is being sought relative\n * to the current date\n * @return {number} the rd of the day of the week\n */\nilib.Date.HebrewRataDie.prototype._onOrBefore = function(rd, dayOfWeek) {\n\treturn rd - ilib.mod(Math.floor(rd) - dayOfWeek + 1, 7);\n};\n\n/**\n * @class\n * Construct a new civil Hebrew date object. The constructor can be called\n * with a params object that can contain the following properties:<p>\n *\n * <ul>\n * <li><i>julianday</i> - the Julian Day to set into this date\n * <li><i>year</i> - any integer except 0. Years go from -1 (BCE) to 1 (CE), skipping the zero year\n * <li><i>month</i> - 1 to 12, where 1 means Nisan, 2 means Iyyar, etc.\n * <li><i>day</i> - 1 to 30\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n * <li><i>parts</i> - 0 to 1079. Specify the halaqim parts of an hour. Either specify\n * the parts or specify the minutes, seconds, and milliseconds, but not both.\n * <li><i>minute</i> - 0 to 59\n * <li><i>second</i> - 0 to 59\n * <li><i>millisecond</i> - 0 to 999\n * <li><i>locale</i> - the ilib.TimeZone instance or time zone name as a string\n * of this julian date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * <li><i>timezone</i> - the time zone of this instance. If the time zone is not\n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that\n * represents the locale.\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If called with another Hebrew date argument, the date components of the given\n * date are copied into the current one.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above\n * from <i>julianday</i> through <i>millisecond</i> are present, then the date\n * components are\n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the\n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich\n * Mean Time\").<p>\n *\n * Depends directive: !depends hebrewdate.js\n *\n * @constructor\n * @extends ilib.Date\n * @param {Object=} params parameters that govern the settings and behaviour of this Hebrew date\n */\nilib.Date.HebrewDate = function(params) {\n\tthis.cal = new ilib.Cal.Hebrew();\n\n\tif (params) {\n\t\tif (params.timezone) {\n\t\t\tthis.timezone = params.timezone;\n\t\t}\n\t\tif (params.locale) {\n\t\t\tthis.locale = (typeof(params.locale) === 'string') ? new ilib.Locale(params.locale) : params.locale;\n\t\t\tif (!this.timezone) {\n\t\t\t\tvar li = new ilib.LocaleInfo(this.locale);\n\t\t\t\tthis.timezone = li.getTimeZone();\n\t\t\t}\n\t\t}\n\n\t\tif (params.year || params.month || params.day || params.hour ||\n\t\t\t\tparams.minute || params.second || params.millisecond || params.parts ) {\n\t\t\t/**\n\t\t\t * Year in the Hebrew calendar.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.year = parseInt(params.year, 10) || 0;\n\n\t\t\t/**\n\t\t\t * The month number, ranging from 1 to 13.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.month = parseInt(params.month, 10) || 1;\n\n\t\t\t/**\n\t\t\t * The day of the month. This ranges from 1 to 30.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.day = parseInt(params.day, 10) || 1;\n\n\t\t\t/**\n\t\t\t * The hour of the day. This can be a number from 0 to 23, as times are\n\t\t\t * stored unambiguously in the 24-hour clock.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.hour = parseInt(params.hour, 10) || 0;\n\n\t\t\tif (typeof(params.parts) !== 'undefined') {\n\t\t\t\t/**\n\t\t\t\t * The parts (halaqim) of the hour. This can be a number from 0 to 1079.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.parts = parseInt(params.parts, 10);\n\t\t\t\tvar seconds = parseInt(params.parts, 10) * 3.333333333333;\n\t\t\t\tthis.minute = Math.floor(seconds / 60);\n\t\t\t\tseconds -= this.minute * 60;\n\t\t\t\tthis.second = Math.floor(seconds);\n\t\t\t\tthis.millisecond = (seconds - this.second);\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * The minute of the hours. Ranges from 0 to 59.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.minute = parseInt(params.minute, 10) || 0;\n\n\t\t\t\t/**\n\t\t\t\t * The second of the minute. Ranges from 0 to 59.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.second = parseInt(params.second, 10) || 0;\n\n\t\t\t\t/**\n\t\t\t\t * The millisecond of the second. Ranges from 0 to 999.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.millisecond = parseInt(params.millisecond, 10) || 0;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * The day of the year. Ranges from 1 to 383.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.dayOfYear = parseInt(params.dayOfYear, 10);\n\n\t\t\tif (typeof(params.dst) === 'boolean') {\n\t\t\t\tthis.dst = params.dst;\n\t\t\t}\n\n\t\t\tthis.rd = this.newRd(this);\n\n\t\t\t// add the time zone offset to the rd to convert to UTC\n\t\t\tif (!this.tz) {\n\t\t\t\tthis.tz = new ilib.TimeZone({id: this.timezone});\n\t\t\t}\n\t\t\t// getOffsetMillis requires that this.year, this.rd, and this.dst\n\t\t\t// are set in order to figure out which time zone rules apply and\n\t\t\t// what the offset is at that point in the year\n\t\t\tthis.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n\t\t\tif (this.offset !== 0) {\n\t\t\t\tthis.rd = this.newRd({\n\t\t\t\t\trd: this.rd.getRataDie() - this.offset\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this.rd) {\n\t\tthis.rd = this.newRd(params);\n\t\tthis._calcDateComponents();\n\t}\n};\n\nilib.Date.HebrewDate.prototype = new ilib.Date({noinstance: true});\nilib.Date.HebrewDate.prototype.parent = ilib.Date;\nilib.Date.HebrewDate.prototype.constructor = ilib.Date.HebrewDate;\n\n/**\n * the cumulative lengths of each month for a non-leap year, without new years corrections\n * @private\n * @const\n * @type Array.<number>\n */\nilib.Date.HebrewDate.cumMonthLengths = [\n\t176,  /* Nisan */\n\t206,  /* Iyyar */\n\t235,  /* Sivan */\n\t265,  /* Tammuz */\n\t294,  /* Av */\n\t324,  /* Elul */\n\t0,    /* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */\n\t30,   /* Heshvan */\n\t59,   /* Kislev */\n\t88,   /* Teveth */\n\t117,  /* Shevat */\n\t147   /* Adar I */\n];\n\n/**\n * the cumulative lengths of each month for a non-leap year, without new years corrections,\n * that can be used in reverse to map days to months\n * @private\n * @const\n * @type Array.<number>\n */\nilib.Date.HebrewDate.cumMonthLengthsReverse = [\n//  [days, monthnumber],\n\t[0,   7],  /* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */\n\t[30,  8],  /* Heshvan */\n\t[59,  9],  /* Kislev */\n\t[88,  10], /* Teveth */\n\t[117, 11], /* Shevat */\n\t[147, 12], /* Adar I */\n\t[176, 1],  /* Nisan */\n\t[206, 2],  /* Iyyar */\n\t[235, 3],  /* Sivan */\n\t[265, 4],  /* Tammuz */\n\t[294, 5],  /* Av */\n\t[324, 6],  /* Elul */\n\t[354, 7]   /* end of year sentinel value */\n];\n\n/**\n * the cumulative lengths of each month for a leap year, without new years corrections\n * @private\n * @const\n * @type Array.<number>\n */\nilib.Date.HebrewDate.cumMonthLengthsLeap = [\n\t206,  /* Nisan */\n\t236,  /* Iyyar */\n\t265,  /* Sivan */\n\t295,  /* Tammuz */\n\t324,  /* Av */\n\t354,  /* Elul */\n\t0,    /* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */\n\t30,   /* Heshvan */\n\t59,   /* Kislev */\n\t88,   /* Teveth */\n\t117,  /* Shevat */\n\t147,  /* Adar I */\n\t177   /* Adar II */\n];\n\n/**\n * the cumulative lengths of each month for a leap year, without new years corrections\n * that can be used in reverse to map days to months\n *\n * @private\n * @const\n * @type Array.<number>\n */\nilib.Date.HebrewDate.cumMonthLengthsLeapReverse = [\n//  [days, monthnumber],\n\t[0,   7],  /* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */\n\t[30,  8],  /* Heshvan */\n\t[59,  9],  /* Kislev */\n\t[88,  10], /* Teveth */\n\t[117, 11], /* Shevat */\n\t[147, 12], /* Adar I */\n\t[177, 13], /* Adar II */\n\t[206, 1],  /* Nisan */\n\t[236, 2],  /* Iyyar */\n\t[265, 3],  /* Sivan */\n\t[295, 4],  /* Tammuz */\n\t[324, 5],  /* Av */\n\t[354, 6],  /* Elul */\n\t[384, 7]   /* end of year sentinel value */\n];\n\n/**\n * Number of days difference between RD 0 of the Hebrew calendar\n * (Jan 1, 1 Gregorian = JD 1721057.5) and RD 0 of the Hebrew calendar\n * (September 7, -3760 Gregorian = JD 347997.25)\n * @private\n * @const\n * @type number\n */\nilib.Date.HebrewDate.GregorianDiff = 1373060.25;\n\n/**\n * Return a new RD for this date type using the given params.\n * @private\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {ilib.Date.RataDie} the new RD instance for the given params\n */\nilib.Date.HebrewDate.prototype.newRd = function (params) {\n\treturn new ilib.Date.HebrewRataDie(params);\n};\n\n/**\n * Return the year for the given RD\n * @protected\n * @param {number} rd RD to calculate from\n * @returns {number} the year for the RD\n */\nilib.Date.HebrewDate.prototype._calcYear = function(rd) {\n\tvar year, approximation, nextNewYear;\n\n\t// divide by the average number of days per year in the Hebrew calendar\n\t// to approximate the year, then tweak it to get the real year\n\tapproximation = Math.floor(rd / 365.246822206) + 1;\n\n\t// console.log(\"HebrewDate._calcYear: approx is \" + approximation);\n\n\t// search forward from approximation-1 for the year that actually contains this rd\n\tyear = approximation;\n\tnextNewYear = ilib.Cal.Hebrew.newYear(year);\n\twhile (rd >= nextNewYear) {\n\t\tyear++;\n\t\tnextNewYear = ilib.Cal.Hebrew.newYear(year);\n\t}\n\treturn year - 1;\n};\n\n/**\n * Calculate date components for the given RD date.\n * @protected\n */\nilib.Date.HebrewDate.prototype._calcDateComponents = function () {\n\tvar remainder,\n\t\ti,\n\t\ttable,\n\t\ttarget,\n\t\trd = this.rd.getRataDie();\n\n\t// console.log(\"HebrewDate.calcComponents: calculating for rd \" + rd);\n\n\tif (typeof(this.offset) === \"undefined\") {\n\t\tthis.year = this._calcYear(rd);\n\n\t\t// now offset the RD by the time zone, then recalculate in case we were\n\t\t// near the year boundary\n\t\tif (!this.tz) {\n\t\t\tthis.tz = new ilib.TimeZone({id: this.timezone});\n\t\t}\n\t\tthis.offset = this.tz.getOffsetMillis(this) / 86400000;\n\t}\n\n\tif (this.offset !== 0) {\n\t\trd += this.offset;\n\t\tthis.year = this._calcYear(rd);\n\t}\n\n\t// console.log(\"HebrewDate.calcComponents: year is \" + this.year + \" with starting rd \" + thisNewYear);\n\n\tremainder = rd - ilib.Cal.Hebrew.newYear(this.year);\n\t// console.log(\"HebrewDate.calcComponents: remainder is \" + remainder);\n\n\t// take out new years corrections so we get the right month when we look it up in the table\n\tif (remainder >= 59) {\n\t\tif (remainder >= 88) {\n\t\t\tif (ilib.Cal.Hebrew.longKislev(this.year)) {\n\t\t\t\tremainder--;\n\t\t\t}\n\t\t}\n\t\tif (ilib.Cal.Hebrew.longHeshvan(this.year)) {\n\t\t\tremainder--;\n\t\t}\n\t}\n\n\t// console.log(\"HebrewDate.calcComponents: after new years corrections, remainder is \" + remainder);\n\n\ttable = this.cal.isLeapYear(this.year) ?\n\t\t\tilib.Date.HebrewDate.cumMonthLengthsLeapReverse :\n\t\t\tilib.Date.HebrewDate.cumMonthLengthsReverse;\n\n\ti = 0;\n\ttarget = Math.floor(remainder);\n\twhile (i+1 < table.length && target >= table[i+1][0]) {\n\t\ti++;\n\t}\n\n\tthis.month = table[i][1];\n\t// console.log(\"HebrewDate.calcComponents: remainder is \" + remainder);\n\tremainder -= table[i][0];\n\n\t// console.log(\"HebrewDate.calcComponents: month is \" + this.month + \" and remainder is \" + remainder);\n\n\tthis.day = Math.floor(remainder);\n\tremainder -= this.day;\n\tthis.day++; // days are 1-based\n\n\t// console.log(\"HebrewDate.calcComponents: day is \" + this.day + \" and remainder is \" + remainder);\n\n\t// now convert to milliseconds for the rest of the calculation\n\tremainder = Math.round(remainder * 86400000);\n\n\tthis.hour = Math.floor(remainder/3600000);\n\tremainder -= this.hour * 3600000;\n\n\t// the hours from 0 to 6 are actually 18:00 to midnight of the previous\n\t// gregorian day, so we have to adjust for that\n\tif (this.hour >= 6) {\n\t\tthis.hour -= 6;\n\t} else {\n\t\tthis.hour += 18;\n\t}\n\n\tthis.minute = Math.floor(remainder/60000);\n\tremainder -= this.minute * 60000;\n\n\tthis.second = Math.floor(remainder/1000);\n\tremainder -= this.second * 1000;\n\n\tthis.millisecond = Math.floor(remainder);\n};\n\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n *\n * @return {number} the day of the week\n */\nilib.Date.HebrewDate.prototype.getDayOfWeek = function() {\n\tvar rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\n\treturn ilib.mod(rd+1, 7);\n};\n\n/**\n * Get the Halaqim (parts) of an hour. There are 1080 parts in an hour, which means\n * each part is 3.33333333 seconds long. This means the number returned may not\n * be an integer.\n *\n * @return {number} the halaqim parts of the current hour\n */\nilib.Date.HebrewDate.prototype.getHalaqim = function() {\n\tif (this.parts < 0) {\n\t\t// convert to ms first, then to parts\n\t\tvar h = this.minute * 60000 + this.second * 1000 + this.millisecond;\n\t\tthis.parts = (h * 0.0003);\n\t}\n\treturn this.parts;\n};\n\n/**\n * Return the rd number of the first Sunday of the given ISO year.\n * @protected\n * @return the rd of the first Sunday of the ISO year\n */\nilib.Date.HebrewDate.prototype.firstSunday = function (year) {\n\tvar tishri1 = this.newRd({\n\t\tyear: year,\n\t\tmonth: 7,\n\t\tday: 1,\n\t\thour: 18,\n\t\tminute: 0,\n\t\tsecond: 0,\n\t\tmillisecond: 0,\n\t\tcal: this.cal\n\t});\n\tvar firstThu = this.newRd({\n\t\trd: tishri1.onOrAfter(4),\n\t\tcal: this.cal\n\t});\n\treturn firstThu.before(0);\n};\n\n/**\n * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to\n * 385, regardless of months or weeks, etc. That is, Tishri 1st is day 1, and\n * Elul 29 is 385 for a leap year with a long Heshvan and long Kislev.\n * @return {number} the ordinal day of the year\n */\nilib.Date.HebrewDate.prototype.getDayOfYear = function() {\n\tvar table = this.cal.isLeapYear(this.year) ?\n\t\t\t\tilib.Date.HebrewDate.cumMonthLengthsLeap :\n\t\t\t\tilib.Date.HebrewDate.cumMonthLengths;\n\tvar days = table[this.month-1];\n\tif ((this.month < 7 || this.month > 8) && ilib.Cal.Hebrew.longHeshvan(this.year)) {\n\t\tdays++;\n\t}\n\tif ((this.month < 7 || this.month > 9) && ilib.Cal.Hebrew.longKislev(this.year)) {\n\t\tdays++;\n\t}\n\n\treturn days + this.day;\n};\n\n/**\n * Return the ordinal number of the week within the month. The first week of a month is\n * the first one that contains 4 or more days in that month. If any days precede this\n * first week, they are marked as being in week 0. This function returns values from 0\n * through 6.<p>\n *\n * The locale is a required parameter because different locales that use the same\n * Hebrew calendar consider different days of the week to be the beginning of\n * the week. This can affect the week of the month in which some days are located.\n *\n * @param {ilib.Locale|string} locale the locale or locale spec to use when figuring out\n * the first day of the week\n * @return {number} the ordinal number of the week within the current month\n */\nilib.Date.HebrewDate.prototype.getWeekOfMonth = function(locale) {\n\tvar li = new ilib.LocaleInfo(locale),\n\t\tfirst = this.newRd({\n\t\t\tyear: this.year,\n\t\t\tmonth: this.month,\n\t\t\tday: 1,\n\t\t\thour: 18,\n\t\t\tminute: 0,\n\t\t\tsecond: 0,\n\t\t\tmillisecond: 0\n\t\t}),\n\t\trd = this.rd.getRataDie(),\n\t\tweekStart = first.onOrAfter(li.getFirstDayOfWeek());\n\n\tif (weekStart - first.getRataDie() > 3) {\n\t\t// if the first week has 4 or more days in it of the current month, then consider\n\t\t// that week 1. Otherwise, it is week 0. To make it week 1, move the week start\n\t\t// one week earlier.\n\t\tweekStart -= 7;\n\t}\n\treturn (rd < weekStart) ? 0 : Math.floor((rd - weekStart) / 7) + 1;\n};\n\n/**\n * Return the era for this date as a number. The value for the era for Hebrew\n * calendars is -1 for \"before the Hebrew era\" and 1 for \"the Hebrew era\".\n * Hebrew era dates are any date after Tishri 1, 1, which is the same as\n * September 7, 3760 BC in the Gregorian calendar.\n *\n * @return {number} 1 if this date is in the Hebrew era, -1 if it is before the\n * Hebrew era\n */\nilib.Date.HebrewDate.prototype.getEra = function() {\n\treturn (this.year < 1) ? -1 : 1;\n};\n\n/**\n * Return the name of the calendar that governs this date.\n *\n * @return {string} a string giving the name of the calendar\n */\nilib.Date.HebrewDate.prototype.getCalendar = function() {\n\treturn \"hebrew\";\n};\n\n// register with the factory method\nilib.Date._constructors[\"hebrew\"] = ilib.Date.HebrewDate;\n/*\n * islamic.js - Represent a Islamic calendar object.\n *\n * Copyright © 2012-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/* !depends calendar.js locale.js date.js julianday.js util/utils.js util/math.js */\n\n/**\n * @class\n * Construct a new Islamic calendar object. This class encodes information about\n * the civil Islamic calendar. The civil Islamic calendar is a tabular islamic\n * calendar where the dates are calculated by arithmetic rules. This differs from\n * the religious Islamic calendar which is used to mark the beginning of particular\n * holidays. The religious calendar depends on the first sighting of the new\n * crescent moon to determine the first day of the new month. Because humans and\n * weather are both involved, the actual time of sighting varies, so it is not\n * really possible to precalculate the religious calendar. Certain groups, such\n * as the Islamic Society of North America, decreed in in 2007 that they will use\n * a calendar based on calculations rather than observations to determine the\n * beginning of lunar months, and therefore the dates of holidays.<p>\n *\n * Depends directive: !depends islamic.js\n *\n * @constructor\n * @implements ilib.Cal\n */\nilib.Cal.Islamic = function() {\n\tthis.type = \"islamic\";\n};\n\n/**\n * the lengths of each month\n * @private\n * @const\n * @type Array.<number>\n */\nilib.Cal.Islamic.monthLengths = [\n\t30,  /* Muharram */\n\t29,  /* Saffar */\n\t30,  /* Rabi'I */\n\t29,  /* Rabi'II */\n\t30,  /* Jumada I */\n\t29,  /* Jumada II */\n\t30,  /* Rajab */\n\t29,  /* Sha'ban */\n\t30,  /* Ramadan */\n\t29,  /* Shawwal */\n\t30,  /* Dhu al-Qa'da */\n\t29   /* Dhu al-Hijja */\n];\n\n\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for luni-solar calendars because in some years, an extra month is needed to extend the\n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=first month, 2=second month, etc.\n *\n * @param {number} year a year for which the number of months is sought\n */\nilib.Cal.Islamic.prototype.getNumMonths = function(year) {\n\treturn 12;\n};\n\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of things\n * like leap years.\n *\n * @param {number} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @return {number} the number of days within the given month in the given year\n */\nilib.Cal.Islamic.prototype.getMonLength = function(month, year) {\n\tif (month !== 12) {\n\t\treturn ilib.Cal.Islamic.monthLengths[month-1];\n\t} else {\n\t\treturn this.isLeapYear(year) ? 30 : 29;\n\t}\n};\n\n/**\n * Return true if the given year is a leap year in the Islamic calendar.\n * The year parameter may be given as a number, or as a IslamicDate object.\n * @param {number} year the year for which the leap year information is being sought\n * @return {boolean} true if the given year is a leap year\n */\nilib.Cal.Islamic.prototype.isLeapYear = function(year) {\n\treturn (ilib.mod((14 + 11 * year), 30) < 11);\n};\n\n/**\n * Return the type of this calendar.\n *\n * @return {string} the name of the type of this calendar\n */\nilib.Cal.Islamic.prototype.getType = function() {\n\treturn this.type;\n};\n\n/**\n * Return a date instance for this calendar type using the given\n * options.\n * @param {Object} options options controlling the construction of\n * the date instance\n * @return {ilib.Date} a date appropriate for this calendar type\n */\nilib.Cal.Islamic.prototype.newDateInstance = function (options) {\n\treturn new ilib.Date.IslamicDate(options);\n};\n\n/*register this calendar for the factory method */\nilib.Cal._constructors[\"islamic\"] = ilib.Cal.Islamic;\n\n/*\n * util/search.js - Misc search utility routines\n *\n * Copyright © 2013, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ilibglobal.js\n\n/**\n * Binary search a sorted array for a particular target value.\n * If the exact value is not found, it returns the index of the smallest\n * entry that is greater than the given target value.<p>\n *\n * The comparator\n * parameter is a function that knows how to compare elements of the\n * array and the target. The function should return a value greater than 0\n * if the array element is greater than the target, a value less than 0 if\n * the array element is less than the target, and 0 if the array element\n * and the target are equivalent.<p>\n *\n * If the comparator function is not specified, this function assumes\n * the array and the target are numeric values and should be compared\n * as such.<p>\n *\n * Depends directive: !depends utils.js\n *\n * @static\n * @param {*} target element being sought\n * @param {Array} arr the array being searched\n * @param {?function(*,*)=} comparator a comparator that is appropriate for comparing two entries\n * in the array\n * @return the index of the array into which the value would fit if\n * inserted, or -1 if given array is not an array or the target is not\n * a number\n */\nilib.bsearch = function(target, arr, comparator) {\n\tif (typeof(arr) === 'undefined' || !arr || typeof(target) === 'undefined') {\n\t\treturn -1;\n\t}\n\n\tvar high = arr.length - 1,\n\t\tlow = 0,\n\t\tmid = 0,\n\t\tvalue,\n\t\tcmp = comparator || ilib.bsearch.numbers;\n\n\twhile (low <= high) {\n\t\tmid = Math.floor((high+low)/2);\n\t\tvalue = cmp(arr[mid], target);\n\t\tif (value > 0) {\n\t\t\thigh = mid - 1;\n\t\t} else if (value < 0) {\n\t\t\tlow = mid + 1;\n\t\t} else {\n\t\t\treturn mid;\n\t\t}\n\t}\n\n\treturn low;\n};\n\n/**\n * Returns whether or not the given element is greater than, less than,\n * or equal to the given target.<p>\n *\n * @private\n * @static\n * @param {number} element the element being tested\n * @param {number} target the target being sought\n */\nilib.bsearch.numbers = function(element, target) {\n\treturn element - target;\n};\n\n/**\n * Do a bisection search of a function for a particular target value.<p>\n *\n * The function to search is a function that takes a numeric parameter,\n * does calculations, and returns gives a numeric result. The\n * function should should be smooth and not have any discontinuities\n * between the low and high values of the parameter.\n *\n * Depends directive: !depends utils.js\n *\n * @static\n * @param {number} target value being sought\n * @param {number} low the lower bounds to start searching\n * @param {number} high the upper bounds to start searching\n * @param {number} precision minimum precision to support. Use 0 if you want to use the default.\n * @param {?function(number)=} func function to search\n * @return an approximation of the input value to the function that gives the desired\n * target output value, correct to within the error range of Javascript floating point\n * arithmetic, or NaN if there was some error\n */\nilib.bisectionSearch = function(target, low, high, precision, func) {\n\tif (typeof(target) !== 'number' ||\n\t\t\ttypeof(low) !== 'number' ||\n\t\t\ttypeof(high) !== 'number' ||\n\t\t\ttypeof(func) !== 'function') {\n\t\treturn NaN;\n\t}\n\n\tvar mid = 0,\n\t\tvalue,\n\t\tpre = precision > 0 ? precision : 1e-13;\n\n\tfunction compareSignificantDigits(a, b) {\n\t\tvar leftParts = a.toExponential().split('e');\n\t\tvar rightParts = b.toExponential().split('e');\n\t\tvar left = new Number(leftParts[0]);\n\t\tvar right = new Number(rightParts[0]);\n\n\t\treturn leftParts[1] === rightParts[1] && Math.abs(left - right) < pre;\n\t}\n\n\tdo {\n\t\tmid = (high+low)/2;\n\t\tvalue = func(mid);\n\t\tif (value > target) {\n\t\t\thigh = mid;\n\t\t} else if (value < target) {\n\t\t\tlow = mid;\n\t\t}\n\t} while (high - low > pre);\n\n\treturn mid;\n};\n\n\n/*\n * islamicdate.js - Represent a date in the Islamic calendar\n *\n * Copyright © 2012-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\ndate.js\ncalendar/islamic.js\nutil/utils.js\nutil/search.js\nutil/math.js\nlocaleinfo.js\njulianday.js\n*/\n\n/**\n * @class\n * Construct a new Islamic RD date number object. The constructor parameters can\n * contain any of the following properties:\n *\n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n *\n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n *\n * <li><i>year</i> - any integer, including 0\n *\n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n *\n * <li><i>day</i> - 1 to 31\n *\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n *\n * <li><i>minute</i> - 0 to 59\n *\n * <li><i>second</i> - 0 to 59\n *\n * <li><i>millisecond</i> - 0 to 999\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Islamic date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above are present, then the RD is calculate based on\n * the current date at the time of instantiation. <p>\n *\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n *\n * Depends directive: !depends islamicdate.js\n *\n * @private\n * @constructor\n * @extends ilib.Date.RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Islamic RD date\n */\nilib.Date.IslamicRataDie = function(params) {\n\tthis.cal = params && params.cal || new ilib.Cal.Islamic();\n\tthis.rd = undefined;\n\tilib.Date.RataDie.call(this, params);\n};\n\nilib.Date.IslamicRataDie.prototype = new ilib.Date.RataDie();\nilib.Date.IslamicRataDie.prototype.parent = ilib.Date.RataDie;\nilib.Date.IslamicRataDie.prototype.constructor = ilib.Date.IslamicRataDie;\n\n/**\n * The difference between a zero Julian day and the first Islamic date\n * of Friday, July 16, 622 CE Julian.\n * @private\n * @const\n * @type number\n */\nilib.Date.IslamicRataDie.prototype.epoch = 1948439.5;\n\n/**\n * Calculate the Rata Die (fixed day) number of the given date from the\n * date components.\n *\n * @protected\n * @param {Object} date the date components to calculate the RD from\n */\nilib.Date.IslamicRataDie.prototype._setDateComponents = function(date) {\n\tvar days = (date.year - 1) * 354 +\n\t\tMath.ceil(29.5 * (date.month - 1)) +\n\t\tdate.day +\n\t\tMath.floor((3 + 11 * date.year) / 30) - 1;\n\tvar time = (date.hour * 3600000 +\n\t\tdate.minute * 60000 +\n\t\tdate.second * 1000 +\n\t\tdate.millisecond) /\n\t\t86400000;\n\n\t//console.log(\"getRataDie: converting \" +  JSON.stringify(date));\n\t//console.log(\"getRataDie: days is \" +  days);\n\t//console.log(\"getRataDie: time is \" +  time);\n\t//console.log(\"getRataDie: rd is \" +  (days + time));\n\n\tthis.rd = days + time;\n};\n\n/**\n * @class\n * Construct a new civil Islamic date object. The constructor can be called\n * with a params object that can contain the following properties:<p>\n *\n * <ul>\n * <li><i>julianday</i> - the Julian Day to set into this date\n * <li><i>year</i> - any integer except 0. Years go from -1 (BCE) to 1 (CE), skipping the zero year\n * <li><i>month</i> - 1 to 12, where 1 means Muharram, 2 means Saffar, etc.\n * <li><i>day</i> - 1 to 30\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n * <li><i>minute</i> - 0 to 59\n * <li><i>second</i> - 0 to 59\n * <li><i>millisecond</i> - 0 to 999\n * <li><i>locale</i> - the ilib.TimeZone instance or time zone name as a string\n * of this julian date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * <li><i>timezone</i> - the time zone of this instance. If the time zone is not\n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that\n * represents the locale.\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If called with another Islamic date argument, the date components of the given\n * date are copied into the current one.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above\n * from <i>julianday</i> through <i>millisecond</i> are present, then the date\n * components are\n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the\n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich\n * Mean Time\").<p>\n *\n * Depends directive: !depends islamicdate.js\n *\n * @constructor\n * @extends ilib.Date\n * @param {Object=} params parameters that govern the settings and behaviour of this Islamic date\n */\nilib.Date.IslamicDate = function(params) {\n\tthis.cal = new ilib.Cal.Islamic();\n\n\tif (params) {\n\t\tif (params.locale) {\n\t\t\tthis.locale = (typeof(params.locale) === 'string') ? new ilib.Locale(params.locale) : params.locale;\n\t\t\tvar li = new ilib.LocaleInfo(this.locale);\n\t\t\tthis.timezone = li.getTimeZone();\n\t\t}\n\t\tif (params.timezone) {\n\t\t\tthis.timezone = params.timezone;\n\t\t}\n\n\t\tif (params.year || params.month || params.day || params.hour ||\n\t\t\t\tparams.minute || params.second || params.millisecond ) {\n\t\t\t/**\n\t\t\t * Year in the Islamic calendar.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.year = parseInt(params.year, 10) || 0;\n\n\t\t\t/**\n\t\t\t * The month number, ranging from 1 to 12 (December).\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.month = parseInt(params.month, 10) || 1;\n\n\t\t\t/**\n\t\t\t * The day of the month. This ranges from 1 to 30.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.day = parseInt(params.day, 10) || 1;\n\n\t\t\t/**\n\t\t\t * The hour of the day. This can be a number from 0 to 23, as times are\n\t\t\t * stored unambiguously in the 24-hour clock.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.hour = parseInt(params.hour, 10) || 0;\n\n\t\t\t/**\n\t\t\t * The minute of the hours. Ranges from 0 to 59.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.minute = parseInt(params.minute, 10) || 0;\n\n\t\t\t/**\n\t\t\t * The second of the minute. Ranges from 0 to 59.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.second = parseInt(params.second, 10) || 0;\n\n\t\t\t/**\n\t\t\t * The millisecond of the second. Ranges from 0 to 999.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.millisecond = parseInt(params.millisecond, 10) || 0;\n\n\t\t\t/**\n\t\t\t * The day of the year. Ranges from 1 to 355.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.dayOfYear = parseInt(params.dayOfYear, 10);\n\n\t\t\tif (typeof(params.dst) === 'boolean') {\n\t\t\t\tthis.dst = params.dst;\n\t\t\t}\n\n\t\t\tthis.rd = this.newRd(this);\n\n\t\t\t// add the time zone offset to the rd to convert to UTC\n\t\t\tif (!this.tz) {\n\t\t\t\tthis.tz = new ilib.TimeZone({id: this.timezone});\n\t\t\t}\n\t\t\t// getOffsetMillis requires that this.year, this.rd, and this.dst\n\t\t\t// are set in order to figure out which time zone rules apply and\n\t\t\t// what the offset is at that point in the year\n\t\t\tthis.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n\t\t\tif (this.offset !== 0) {\n\t\t\t\tthis.rd = this.newRd({\n\t\t\t\t\trd: this.rd.getRataDie() - this.offset\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this.rd) {\n\t\tthis.rd = this.newRd(params);\n\t\tthis._calcDateComponents();\n\t}\n};\n\nilib.Date.IslamicDate.prototype = new ilib.Date({noinstance: true});\nilib.Date.IslamicDate.prototype.parent = ilib.Date;\nilib.Date.IslamicDate.prototype.constructor = ilib.Date.IslamicDate;\n\n/**\n * the cumulative lengths of each month, for a non-leap year\n * @private\n * @const\n * @type Array.<number>\n */\nilib.Date.IslamicDate.cumMonthLengths = [\n\t0,  /* Muharram */\n\t30,  /* Saffar */\n\t59,  /* Rabi'I */\n\t89,  /* Rabi'II */\n\t118,  /* Jumada I */\n\t148,  /* Jumada II */\n\t177,  /* Rajab */\n\t207,  /* Sha'ban */\n\t236,  /* Ramadan */\n\t266,  /* Shawwal */\n\t295,  /* Dhu al-Qa'da */\n\t325,  /* Dhu al-Hijja */\n\t354\n];\n\n/**\n * Number of days difference between RD 0 of the Gregorian calendar and\n * RD 0 of the Islamic calendar.\n * @private\n * @const\n * @type number\n */\nilib.Date.IslamicDate.GregorianDiff = 227015;\n\n/**\n * Return a new RD for this date type using the given params.\n * @protected\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {ilib.Date.RataDie} the new RD instance for the given params\n */\nilib.Date.IslamicDate.prototype.newRd = function (params) {\n\treturn new ilib.Date.IslamicRataDie(params);\n};\n\n/**\n * Return the year for the given RD\n * @protected\n * @param {number} rd RD to calculate from\n * @returns {number} the year for the RD\n */\nilib.Date.IslamicDate.prototype._calcYear = function(rd) {\n\treturn Math.floor((30 * rd + 10646) / 10631);\n};\n\n/**\n * Calculate date components for the given RD date.\n * @protected\n */\nilib.Date.IslamicDate.prototype._calcDateComponents = function () {\n\tvar remainder,\n\t\trd = this.rd.getRataDie();\n\n\tthis.year = this._calcYear(rd);\n\n\tif (typeof(this.offset) === \"undefined\") {\n\t\tthis.year = this._calcYear(rd);\n\n\t\t// now offset the RD by the time zone, then recalculate in case we were\n\t\t// near the year boundary\n\t\tif (!this.tz) {\n\t\t\tthis.tz = new ilib.TimeZone({id: this.timezone});\n\t\t}\n\t\tthis.offset = this.tz.getOffsetMillis(this) / 86400000;\n\t}\n\n\tif (this.offset !== 0) {\n\t\trd += this.offset;\n\t\tthis.year = this._calcYear(rd);\n\t}\n\n\t//console.log(\"IslamicDate.calcComponent: calculating for rd \" + rd);\n\t//console.log(\"IslamicDate.calcComponent: year is \" + ret.year);\n\tvar yearStart = this.newRd({\n\t\tyear: this.year,\n\t\tmonth: 1,\n\t\tday: 1,\n\t\thour: 0,\n\t\tminute: 0,\n\t\tsecond: 0,\n\t\tmillisecond: 0\n\t});\n\tremainder = rd - yearStart.getRataDie() + 1;\n\n\tthis.dayOfYear = remainder;\n\n\t//console.log(\"IslamicDate.calcComponent: remainder is \" + remainder);\n\n\tthis.month = ilib.bsearch(remainder, ilib.Date.IslamicDate.cumMonthLengths);\n\tremainder -= ilib.Date.IslamicDate.cumMonthLengths[this.month-1];\n\n\t//console.log(\"IslamicDate.calcComponent: month is \" + this.month + \" and remainder is \" + remainder);\n\n\tthis.day = Math.floor(remainder);\n\tremainder -= this.day;\n\n\t//console.log(\"IslamicDate.calcComponent: day is \" + this.day + \" and remainder is \" + remainder);\n\n\t// now convert to milliseconds for the rest of the calculation\n\tremainder = Math.round(remainder * 86400000);\n\n\tthis.hour = Math.floor(remainder/3600000);\n\tremainder -= this.hour * 3600000;\n\n\tthis.minute = Math.floor(remainder/60000);\n\tremainder -= this.minute * 60000;\n\n\tthis.second = Math.floor(remainder/1000);\n\tremainder -= this.second * 1000;\n\n\tthis.millisecond = remainder;\n};\n\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n *\n * @return {number} the day of the week\n */\nilib.Date.IslamicDate.prototype.getDayOfWeek = function() {\n\tvar rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\n\treturn ilib.mod(rd-2, 7);\n};\n\n/**\n * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to\n * 354 or 355, regardless of months or weeks, etc. That is, Muharran 1st is day 1, and\n * Dhu al-Hijja 29 is 354.\n * @return {number} the ordinal day of the year\n */\nilib.Date.IslamicDate.prototype.getDayOfYear = function() {\n\treturn ilib.Date.IslamicDate.cumMonthLengths[this.month-1] + this.day;\n};\n\n/**\n * Return the era for this date as a number. The value for the era for Islamic\n * calendars is -1 for \"before the Islamic era\" and 1 for \"the Islamic era\".\n * Islamic era dates are any date after Muharran 1, 1, which is the same as\n * July 16, 622 CE in the Gregorian calendar.\n *\n * @return {number} 1 if this date is in the common era, -1 if it is before the\n * common era\n */\nilib.Date.IslamicDate.prototype.getEra = function() {\n\treturn (this.year < 1) ? -1 : 1;\n};\n\n/**\n * Return the name of the calendar that governs this date.\n *\n * @return {string} a string giving the name of the calendar\n */\nilib.Date.IslamicDate.prototype.getCalendar = function() {\n\treturn \"islamic\";\n};\n\n//register with the factory method\nilib.Date._constructors[\"islamic\"] = ilib.Date.IslamicDate;\n/*\n * julian.js - Represent a Julian calendar object.\n *\n * Copyright © 2012-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/* !depends calendar.js locale.js date.js julianday.js util/utils.js util/math.js */\n\n/**\n * @class\n * Construct a new Julian calendar object. This class encodes information about\n * a Julian calendar.<p>\n *\n * Depends directive: !depends julian.js\n *\n * @constructor\n * @implements ilib.Cal\n */\nilib.Cal.Julian = function() {\n\tthis.type = \"julian\";\n};\n\n/* the lengths of each month */\nilib.Cal.Julian.monthLengths = [\n\t31,  /* Jan */\n\t28,  /* Feb */\n\t31,  /* Mar */\n\t30,  /* Apr */\n\t31,  /* May */\n\t30,  /* Jun */\n\t31,  /* Jul */\n\t31,  /* Aug */\n\t30,  /* Sep */\n\t31,  /* Oct */\n\t30,  /* Nov */\n\t31   /* Dec */\n];\n\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for lunar calendars because in some years, an extra month is needed to extend the\n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=Jaunary, 2=February, etc. until 12=December.\n *\n * @param {number} year a year for which the number of months is sought\n */\nilib.Cal.Julian.prototype.getNumMonths = function(year) {\n\treturn 12;\n};\n\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of things\n * like leap years.\n *\n * @param {number} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @return {number} the number of days within the given month in the given year\n */\nilib.Cal.Julian.prototype.getMonLength = function(month, year) {\n\tif (month !== 2 || !this.isLeapYear(year)) {\n\t\treturn ilib.Cal.Julian.monthLengths[month-1];\n\t} else {\n\t\treturn 29;\n\t}\n};\n\n/**\n * Return true if the given year is a leap year in the Julian calendar.\n * The year parameter may be given as a number, or as a JulDate object.\n * @param {number|ilib.Date.JulDate} year the year for which the leap year information is being sought\n * @return {boolean} true if the given year is a leap year\n */\nilib.Cal.Julian.prototype.isLeapYear = function(year) {\n\tvar y = (typeof(year) === 'number' ? year : year.year);\n\treturn ilib.mod(y, 4) === ((year > 0) ? 0 : 3);\n};\n\n/**\n * Return the type of this calendar.\n *\n * @return {string} the name of the type of this calendar\n */\nilib.Cal.Julian.prototype.getType = function() {\n\treturn this.type;\n};\n\n/**\n * Return a date instance for this calendar type using the given\n * options.\n * @param {Object} options options controlling the construction of\n * the date instance\n * @return {ilib.Date} a date appropriate for this calendar type\n */\nilib.Cal.Julian.prototype.newDateInstance = function (options) {\n\treturn new ilib.Date.JulDate(options);\n};\n\n/* register this calendar for the factory method */\nilib.Cal._constructors[\"julian\"] = ilib.Cal.Julian;\n/*\n * juliandate.js - Represent a date in the Julian calendar\n *\n * Copyright © 2012-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\ndate.js\ncalendar/julian.js\nutil/utils.js\nutil/search.js\nutil/math.js\nlocaleinfo.js\njulianday.js\n*/\n\n/**\n * @class\n * Construct a new Julian RD date number object. The constructor parameters can\n * contain any of the following properties:\n *\n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n *\n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n *\n * <li><i>year</i> - any integer, including 0\n *\n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n *\n * <li><i>day</i> - 1 to 31\n *\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n *\n * <li><i>minute</i> - 0 to 59\n *\n * <li><i>second</i> - 0 to 59\n *\n * <li><i>millisecond</i> - 0 to 999\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Julian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above are present, then the RD is calculate based on\n * the current date at the time of instantiation. <p>\n *\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n *\n * Depends directive: !depends juliandate.js\n *\n * @private\n * @constructor\n * @extends ilib.Date.RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Julian RD date\n */\nilib.Date.JulianRataDie = function(params) {\n\tthis.cal = params && params.cal || new ilib.Cal.Julian();\n\tthis.rd = undefined;\n\tilib.Date.RataDie.call(this, params);\n};\n\nilib.Date.JulianRataDie.prototype = new ilib.Date.RataDie();\nilib.Date.JulianRataDie.prototype.parent = ilib.Date.RataDie;\nilib.Date.JulianRataDie.prototype.constructor = ilib.Date.JulianRataDie;\n\n/**\n * The difference between a zero Julian day and the first Julian date\n * of Friday, July 16, 622 CE Julian.\n * @private\n * @const\n * @type number\n */\nilib.Date.JulianRataDie.prototype.epoch = 1721422.5;\n\n/**\n * Calculate the Rata Die (fixed day) number of the given date from the\n * date components.\n *\n * @protected\n * @param {Object} date the date components to calculate the RD from\n */\nilib.Date.JulianRataDie.prototype._setDateComponents = function(date) {\n\tvar year = date.year + ((date.year < 0) ? 1 : 0);\n\tvar years = 365 * (year - 1) + Math.floor((year-1)/4);\n\tvar dayInYear = (date.month > 1 ? ilib.Date.JulDate.cumMonthLengths[date.month-1] : 0) +\n\t\tdate.day +\n\t\t(this.cal.isLeapYear(date.year) && date.month > 2 ? 1 : 0);\n\tvar rdtime = (date.hour * 3600000 +\n\t\tdate.minute * 60000 +\n\t\tdate.second * 1000 +\n\t\tdate.millisecond) /\n\t\t86400000;\n\n\t/*\n\tconsole.log(\"calcRataDie: converting \" +  JSON.stringify(parts));\n\tconsole.log(\"getRataDie: year is \" +  years);\n\tconsole.log(\"getRataDie: day in year is \" +  dayInYear);\n\tconsole.log(\"getRataDie: rdtime is \" +  rdtime);\n\tconsole.log(\"getRataDie: rd is \" +  (years + dayInYear + rdtime));\n\t*/\n\n\tthis.rd = years + dayInYear + rdtime;\n};\n\n/**\n * @class\n * Construct a new date object for the Julian Calendar. The constructor can be called\n * with a parameter object that contains any of the following properties:\n *\n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970 (Gregorian).\n * <li><i>julianday</i> - the Julian Day to set into this date\n * <li><i>year</i> - any integer except 0. Years go from -1 (BCE) to 1 (CE), skipping the zero\n * year which doesn't exist in the Julian calendar\n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n * <li><i>day</i> - 1 to 31\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n * <li><i>minute</i> - 0 to 59\n * <li><i>second</i> - 0 to 59\n * <li><i>millisecond<i> - 0 to 999\n * <li><i>locale</i> - the ilib.TimeZone instance or time zone name as a string\n * of this julian date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * <li><i>timezone</i> - the time zone of this instance. If the time zone is not\n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that\n * represents the locale.\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * NB. The <a href=\"http://en.wikipedia.org/wiki/Julian_date\">Julian Day</a>\n * (ilib.JulianDay) object is a <i>different</i> object than a\n * <a href=\"http://en.wikipedia.org/wiki/Julian_calendar\">date in\n * the Julian calendar</a> and the two are not to be confused. The Julian Day\n * object represents time as a number of whole and fractional days since the\n * beginning of the epoch, whereas a date in the Julian\n * calendar is a regular date that signifies year, month, day, etc. using the rules\n * of the Julian calendar. The naming of Julian Days and the Julian calendar are\n * unfortunately close, and come from history.<p>\n *\n * If called with another Julian date argument, the date components of the given\n * date are copied into the current one.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above\n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date\n * components are\n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the\n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich\n * Mean Time\").<p>\n *\n * Depends directive: !depends juliandate.js\n *\n * @constructor\n * @extends ilib.Date\n * @param {Object=} params parameters that govern the settings and behaviour of this Julian date\n */\nilib.Date.JulDate = function(params) {\n\tthis.cal = new ilib.Cal.Julian();\n\n\tif (params) {\n\t\tif (params.locale) {\n\t\t\tthis.locale = (typeof(params.locale) === 'string') ? new ilib.Locale(params.locale) : params.locale;\n\t\t\tvar li = new ilib.LocaleInfo(this.locale);\n\t\t\tthis.timezone = li.getTimeZone();\n\t\t}\n\t\tif (params.timezone) {\n\t\t\tthis.timezone = params.timezone;\n\t\t}\n\n\t\tif (params.year || params.month || params.day || params.hour ||\n\t\t\t\tparams.minute || params.second || params.millisecond ) {\n\t\t\t/**\n\t\t\t * Year in the Julian calendar.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.year = parseInt(params.year, 10) || 0;\n\t\t\t/**\n\t\t\t * The month number, ranging from 1 (January) to 12 (December).\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.month = parseInt(params.month, 10) || 1;\n\t\t\t/**\n\t\t\t * The day of the month. This ranges from 1 to 31.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.day = parseInt(params.day, 10) || 1;\n\t\t\t/**\n\t\t\t * The hour of the day. This can be a number from 0 to 23, as times are\n\t\t\t * stored unambiguously in the 24-hour clock.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.hour = parseInt(params.hour, 10) || 0;\n\t\t\t/**\n\t\t\t * The minute of the hours. Ranges from 0 to 59.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.minute = parseInt(params.minute, 10) || 0;\n\t\t\t/**\n\t\t\t * The second of the minute. Ranges from 0 to 59.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.second = parseInt(params.second, 10) || 0;\n\t\t\t/**\n\t\t\t * The millisecond of the second. Ranges from 0 to 999.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.millisecond = parseInt(params.millisecond, 10) || 0;\n\n\t\t\t/**\n\t\t\t * The day of the year. Ranges from 1 to 383.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.dayOfYear = parseInt(params.dayOfYear, 10);\n\n\t\t\tif (typeof(params.dst) === 'boolean') {\n\t\t\t\tthis.dst = params.dst;\n\t\t\t}\n\n\t\t\tthis.rd = this.newRd(this);\n\n\t\t\t// add the time zone offset to the rd to convert to UTC\n\t\t\tif (!this.tz) {\n\t\t\t\tthis.tz = new ilib.TimeZone({id: this.timezone});\n\t\t\t}\n\t\t\t// getOffsetMillis requires that this.year, this.rd, and this.dst\n\t\t\t// are set in order to figure out which time zone rules apply and\n\t\t\t// what the offset is at that point in the year\n\t\t\tthis.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n\t\t\tif (this.offset !== 0) {\n\t\t\t\tthis.rd = this.newRd({\n\t\t\t\t\trd: this.rd.getRataDie() - this.offset\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this.rd) {\n\t\tthis.rd = this.newRd(params);\n\t\tthis._calcDateComponents();\n\t}\n};\n\nilib.Date.JulDate.prototype = new ilib.Date({noinstance: true});\nilib.Date.JulDate.prototype.parent = ilib.Date;\nilib.Date.JulDate.prototype.constructor = ilib.Date.JulDate;\n\n/**\n * the cumulative lengths of each month, for a non-leap year\n * @private\n * @const\n * @type Array.<number>\n */\nilib.Date.JulDate.cumMonthLengths = [\n    0,   /* Jan */\n\t31,  /* Feb */\n\t59,  /* Mar */\n\t90,  /* Apr */\n\t120, /* May */\n\t151, /* Jun */\n\t181, /* Jul */\n\t212, /* Aug */\n\t243, /* Sep */\n\t273, /* Oct */\n\t304, /* Nov */\n\t334, /* Dec */\n\t365\n];\n\n/**\n * the cumulative lengths of each month, for a leap year\n * @private\n * @const\n * @type Array.<number>\n */\nilib.Date.JulDate.cumMonthLengthsLeap = [\n\t0,   /* Jan */\n\t31,  /* Feb */\n\t60,  /* Mar */\n\t91,  /* Apr */\n\t121, /* May */\n\t152, /* Jun */\n\t182, /* Jul */\n\t213, /* Aug */\n\t244, /* Sep */\n\t274, /* Oct */\n\t305, /* Nov */\n\t335, /* Dec */\n\t366\n];\n\n/**\n * Return a new RD for this date type using the given params.\n * @protected\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {ilib.Date.RataDie} the new RD instance for the given params\n */\nilib.Date.JulDate.prototype.newRd = function (params) {\n\treturn new ilib.Date.JulianRataDie(params);\n};\n\n/**\n * Return the year for the given RD\n * @protected\n * @param {number} rd RD to calculate from\n * @returns {number} the year for the RD\n */\nilib.Date.JulDate.prototype._calcYear = function(rd) {\n\tvar year = Math.floor((4*(Math.floor(rd)-1) + 1464)/1461);\n\n\treturn (year <= 0) ? year - 1 : year;\n};\n\n/**\n * Calculate date components for the given RD date.\n * @protected\n */\nilib.Date.JulDate.prototype._calcDateComponents = function () {\n\tvar remainder,\n\t\tcumulative,\n\t\trd = this.rd.getRataDie();\n\n\tthis.year = this._calcYear(rd);\n\n\tif (typeof(this.offset) === \"undefined\") {\n\t\tthis.year = this._calcYear(rd);\n\n\t\t// now offset the RD by the time zone, then recalculate in case we were\n\t\t// near the year boundary\n\t\tif (!this.tz) {\n\t\t\tthis.tz = new ilib.TimeZone({id: this.timezone});\n\t\t}\n\t\tthis.offset = this.tz.getOffsetMillis(this) / 86400000;\n\t}\n\n\tif (this.offset !== 0) {\n\t\trd += this.offset;\n\t\tthis.year = this._calcYear(rd);\n\t}\n\n\tvar jan1 = this.newRd({\n\t\tyear: this.year,\n\t\tmonth: 1,\n\t\tday: 1,\n\t\thour: 0,\n\t\tminute: 0,\n\t\tsecond: 0,\n\t\tmillisecond: 0\n\t});\n\tremainder = rd + 1 - jan1.getRataDie();\n\n\tcumulative = this.cal.isLeapYear(this.year) ?\n\t\tilib.Date.JulDate.cumMonthLengthsLeap :\n\t\tilib.Date.JulDate.cumMonthLengths;\n\n\tthis.month = ilib.bsearch(Math.floor(remainder), cumulative);\n\tremainder = remainder - cumulative[this.month-1];\n\n\tthis.day = Math.floor(remainder);\n\tremainder -= this.day;\n\t// now convert to milliseconds for the rest of the calculation\n\tremainder = Math.round(remainder * 86400000);\n\n\tthis.hour = Math.floor(remainder/3600000);\n\tremainder -= this.hour * 3600000;\n\n\tthis.minute = Math.floor(remainder/60000);\n\tremainder -= this.minute * 60000;\n\n\tthis.second = Math.floor(remainder/1000);\n\tremainder -= this.second * 1000;\n\n\tthis.millisecond = remainder;\n};\n\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n *\n * @return {number} the day of the week\n */\nilib.Date.JulDate.prototype.getDayOfWeek = function() {\n\tvar rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\n\treturn ilib.mod(rd-2, 7);\n};\n\n/**\n * Return the name of the calendar that governs this date.\n *\n * @return {string} a string giving the name of the calendar\n */\nilib.Date.JulDate.prototype.getCalendar = function() {\n\treturn \"julian\";\n};\n\n//register with the factory method\nilib.Date._constructors[\"julian\"] = ilib.Date.JulDate;\n/*\n * gregoriandate.js - Represent a date in the Gregorian calendar\n *\n * Copyright © 2012-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\ndate.js\ncalendar/gregorian.js\nutil/utils.js\nutil/search.js\nutil/math.js\nlocaleinfo.js\njulianday.js\ncalendar/gregratadie.js\ntimezone.js\n*/\n\n/**\n * @class\n * Construct a new Gregorian date object. The constructor parameters can\n * contain any of the following properties:\n *\n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n *\n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n *\n * <li><i>year</i> - any integer, including 0\n *\n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n *\n * <li><i>day</i> - 1 to 31\n *\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n *\n * <li><i>minute</i> - 0 to 59\n *\n * <li><i>second</i> - 0 to 59\n *\n * <li><i>millisecond</i> - 0 to 999\n *\n * <li><i>dst</i> - boolean used to specify whether the given time components are\n * intended to be in daylight time or not. This is only used in the overlap\n * time when transitioning from DST to standard time, and the time components are\n * ambiguous. Otherwise at all other times of the year, this flag is ignored.\n * If you specify the date using unix time (UTC) or a julian day, then the time is\n * already unambiguous and this flag does not need to be specified.\n * <p>\n * For example, in the US, the transition out of daylight savings time\n * in 2014 happens at Nov 2, 2014 2:00am Daylight Time, when the time falls\n * back to Nov 2, 2014 1:00am Standard Time. If you give a date/time components as\n * \"Nov 2, 2014 1:30am\", then there are two 1:30am times in that day, and you would\n * have to give the standard flag to indicate which of those two you mean.\n * (dst=true means daylight time, dst=false means standard time).\n *\n * <li><i>timezone</i> - the ilib.TimeZone instance or time zone name as a string\n * of this gregorian date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n *\n * <li><i>locale</i> - locale for this gregorian date. If the time zone is not\n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that\n * represents the locale.\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Gregorian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above\n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date\n * components are\n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the\n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich\n * Mean Time\").<p>\n *\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n *\n * Depends directive: !depends gregoriandate.js\n *\n * @constructor\n * @extends ilib.Date\n * @param {Object=} params parameters that govern the settings and behaviour of this Gregorian date\n */\nilib.Date.GregDate = function(params) {\n\tthis.cal = new ilib.Cal.Gregorian();\n\tthis.timezone = \"local\";\n\n\tif (params) {\n\t\tif (typeof(params.noinstance) === 'boolean' && params.noinstance) {\n\t\t\t// for doing inheritance, so don't need to fill in the data. The inheriting class only wants the methods.\n\t\t\treturn;\n\t\t}\n\t\tif (params.locale) {\n\t\t\tthis.locale = (typeof(params.locale) === 'string') ? new ilib.Locale(params.locale) : params.locale;\n\t\t\tvar li = new ilib.LocaleInfo(this.locale);\n\t\t\tthis.timezone = li.getTimeZone();\n\t\t}\n\t\tif (params.timezone) {\n\t\t\tthis.timezone = params.timezone.toString();\n\t\t}\n\n\t\tif (params.year || params.month || params.day || params.hour ||\n\t\t\t\tparams.minute || params.second || params.millisecond ) {\n\t\t\tthis.year = parseInt(params.year, 10) || 0;\n\t\t\tthis.month = parseInt(params.month, 10) || 1;\n\t\t\tthis.day = parseInt(params.day, 10) || 1;\n\t\t\tthis.hour = parseInt(params.hour, 10) || 0;\n\t\t\tthis.minute = parseInt(params.minute, 10) || 0;\n\t\t\tthis.second = parseInt(params.second, 10) || 0;\n\t\t\tthis.millisecond = parseInt(params.millisecond, 10) || 0;\n\t\t\tif (typeof(params.dst) === 'boolean') {\n\t\t\t\tthis.dst = params.dst;\n\t\t\t}\n\t\t\tthis.rd = this.newRd(params);\n\n\t\t\t// add the time zone offset to the rd to convert to UTC\n\t\t\tthis.offset = 0;\n\t\t\tif (this.timezone === \"local\" && typeof(params.dst) === 'undefined') {\n\t\t\t\t// if dst is defined, the intrinsic Date object has no way of specifying which version of a time you mean\n\t\t\t\t// in the overlap time at the end of DST. Do you mean the daylight 1:30am or the standard 1:30am? In this\n\t\t\t\t// case, use the ilib calculations below, which can distinguish between the two properly\n\t\t\t\tvar d = new Date(this.year, this.month-1, this.day, this.hour, this.minute, this.second, this.millisecond);\n\t\t\t\tthis.offset = -d.getTimezoneOffset() / 1440;\n\t\t\t} else {\n\t\t\t\tif (!this.tz) {\n\t\t\t\t\tthis.tz = new ilib.TimeZone({id: this.timezone});\n\t\t\t\t}\n\t\t\t\t// getOffsetMillis requires that this.year, this.rd, and this.dst\n\t\t\t\t// are set in order to figure out which time zone rules apply and\n\t\t\t\t// what the offset is at that point in the year\n\t\t\t\tthis.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n\t\t\t}\n\t\t\tif (this.offset !== 0) {\n\t\t\t\tthis.rd = this.newRd({\n\t\t\t\t\trd: this.rd.getRataDie() - this.offset\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this.rd) {\n\t\tthis.rd = this.newRd(params);\n\t\tthis._calcDateComponents();\n\t}\n};\n\nilib.Date.GregDate.prototype = new ilib.Date({noinstance: true});\nilib.Date.GregDate.prototype.parent = ilib.Date;\nilib.Date.GregDate.prototype.constructor = ilib.Date.GregDate;\n\n/**\n * Return a new RD for this date type using the given params.\n * @private\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {ilib.Date.RataDie} the new RD instance for the given params\n */\nilib.Date.GregDate.prototype.newRd = function (params) {\n\treturn new ilib.Date.GregRataDie(params);\n};\n\n/**\n * Calculates the Gregorian year for a given rd number.\n * @private\n * @static\n */\nilib.Date.GregDate._calcYear = function(rd) {\n\tvar days400,\n\t\tdays100,\n\t\tdays4,\n\t\tyears400,\n\t\tyears100,\n\t\tyears4,\n\t\tyears1,\n\t\tyear;\n\n\tyears400 = Math.floor((rd - 1) / 146097);\n\tdays400 = ilib.mod((rd - 1), 146097);\n\tyears100 = Math.floor(days400 / 36524);\n\tdays100 = ilib.mod(days400, 36524);\n\tyears4 = Math.floor(days100 / 1461);\n\tdays4 = ilib.mod(days100, 1461);\n\tyears1 = Math.floor(days4 / 365);\n\n\tyear = 400 * years400 + 100 * years100 + 4 * years4 + years1;\n\tif (years100 !== 4 && years1 !== 4) {\n\t\tyear++;\n\t}\n\treturn year;\n};\n\n/**\n * @private\n */\nilib.Date.GregDate.prototype._calcYear = function(rd) {\n\treturn ilib.Date.GregDate._calcYear(rd);\n};\n\n/**\n * Calculate the date components for the current time zone\n * @private\n */\nilib.Date.GregDate.prototype._calcDateComponents = function () {\n\tif (this.timezone === \"local\" && this.rd.getRataDie() >= -99280837 && this.rd.getRataDie() <= 100719163) {\n\t\t// console.log(\"using js Date to calculate offset\");\n\t\t// use the intrinsic JS Date object to do the tz conversion for us, which\n\t\t// guarantees that it follows the system tz database settings\n\t\tvar d = new Date(this.rd.getTimeExtended());\n\n\t\t/**\n\t\t * Year in the Gregorian calendar.\n\t\t * @type number\n\t\t */\n\t\tthis.year = d.getFullYear();\n\n\t\t/**\n\t\t * The month number, ranging from 1 (January) to 12 (December).\n\t\t * @type number\n\t\t */\n\t\tthis.month = d.getMonth()+1;\n\n\t\t/**\n\t\t * The day of the month. This ranges from 1 to 31.\n\t\t * @type number\n\t\t */\n\t\tthis.day = d.getDate();\n\n\t\t/**\n\t\t * The hour of the day. This can be a number from 0 to 23, as times are\n\t\t * stored unambiguously in the 24-hour clock.\n\t\t * @type number\n\t\t */\n\t\tthis.hour = d.getHours();\n\n\t\t/**\n\t\t * The minute of the hours. Ranges from 0 to 59.\n\t\t * @type number\n\t\t */\n\t\tthis.minute = d.getMinutes();\n\n\t\t/**\n\t\t * The second of the minute. Ranges from 0 to 59.\n\t\t * @type number\n\t\t */\n\t\tthis.second = d.getSeconds();\n\n\t\t/**\n\t\t * The millisecond of the second. Ranges from 0 to 999.\n\t\t * @type number\n\t\t */\n\t\tthis.millisecond = d.getMilliseconds();\n\n\t\tthis.offset = -d.getTimezoneOffset() / 1440;\n\t} else {\n\t\t// console.log(\"using ilib to calculate offset. tz is \" + this.timezone);\n\t\t// console.log(\"GregDate._calcDateComponents: date is \" + JSON.stringify(this) + \" parent is \" + JSON.stringify(this.parent) + \" and parent.parent is \" + JSON.stringify(this.parent.parent));\n\t\tif (typeof(this.offset) === \"undefined\") {\n\t\t\t// console.log(\"calculating offset\");\n\t\t\tthis.year = this._calcYear(this.rd.getRataDie());\n\n\t\t\t// now offset the RD by the time zone, then recalculate in case we were\n\t\t\t// near the year boundary\n\t\t\tif (!this.tz) {\n\t\t\t\tthis.tz = new ilib.TimeZone({id: this.timezone});\n\t\t\t}\n\t\t\tthis.offset = this.tz.getOffsetMillis(this) / 86400000;\n\t\t// } else {\n\t\t\t// console.log(\"offset is already defined somehow. type is \" + typeof(this.offset));\n\t\t\t// console.trace(\"Stack is this one\");\n\t\t}\n\t\t// console.log(\"offset is \" + this.offset);\n\t\tvar rd = this.rd.getRataDie();\n\t\tif (this.offset !== 0) {\n\t\t\trd += this.offset;\n\t\t}\n\t\tthis.year = this._calcYear(rd);\n\n\t\tvar yearStartRd = this.newRd({\n\t\t\tyear: this.year,\n\t\t\tmonth: 1,\n\t\t\tday: 1,\n\t\t\tcal: this.cal\n\t\t});\n\n\t\t// remainder is days into the year\n\t\tvar remainder = rd - yearStartRd.getRataDie() + 1;\n\n\t\tvar cumulative = ilib.Cal.Gregorian.prototype.isLeapYear.call(this.cal, this.year) ?\n\t\t\tilib.Date.GregRataDie.cumMonthLengthsLeap :\n\t\t\tilib.Date.GregRataDie.cumMonthLengths;\n\n\t\tthis.month = ilib.bsearch(Math.floor(remainder), cumulative);\n\t\tremainder = remainder - cumulative[this.month-1];\n\n\t\tthis.day = Math.floor(remainder);\n\t\tremainder -= this.day;\n\t\t// now convert to milliseconds for the rest of the calculation\n\t\tremainder = Math.round(remainder * 86400000);\n\n\t\tthis.hour = Math.floor(remainder/3600000);\n\t\tremainder -= this.hour * 3600000;\n\n\t\tthis.minute = Math.floor(remainder/60000);\n\t\tremainder -= this.minute * 60000;\n\n\t\tthis.second = Math.floor(remainder/1000);\n\t\tremainder -= this.second * 1000;\n\n\t\tthis.millisecond = Math.floor(remainder);\n\t}\n};\n\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n *\n * @return {number} the day of the week\n */\nilib.Date.GregDate.prototype.getDayOfWeek = function() {\n\tvar rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\n\treturn ilib.mod(rd, 7);\n};\n\n/**\n * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to\n * 365, regardless of months or weeks, etc. That is, January 1st is day 1, and\n * December 31st is 365 in regular years, or 366 in leap years.\n * @return {number} the ordinal day of the year\n */\nilib.Date.GregDate.prototype.getDayOfYear = function() {\n\tvar cumulativeMap = this.cal.isLeapYear(this.year) ?\n\t\tilib.Date.GregRataDie.cumMonthLengthsLeap :\n\t\tilib.Date.GregRataDie.cumMonthLengths;\n\n\treturn cumulativeMap[this.month-1] + this.day;\n};\n\n/**\n * Return the era for this date as a number. The value for the era for Gregorian\n * calendars is -1 for \"before the common era\" (BCE) and 1 for \"the common era\" (CE).\n * BCE dates are any date before Jan 1, 1 CE. In the proleptic Gregorian calendar,\n * there is a year 0, so any years that are negative or zero are BCE. In the Julian\n * calendar, there is no year 0. Instead, the calendar goes straight from year -1 to\n * 1.\n * @return {number} 1 if this date is in the common era, -1 if it is before the\n * common era\n */\nilib.Date.GregDate.prototype.getEra = function() {\n\treturn (this.year < 1) ? -1 : 1;\n};\n\n/**\n * Return the name of the calendar that governs this date.\n *\n * @return {string} a string giving the name of the calendar\n */\nilib.Date.GregDate.prototype.getCalendar = function() {\n\treturn \"gregorian\";\n};\n\n// register with the factory method\nilib.Date._constructors[\"gregorian\"] = ilib.Date.GregDate;\n/*\n * thaisolar.js - Represent a Thai solar calendar object.\n *\n * Copyright © 2013-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/* !depends calendar.js locale.js date.js julianday.js calendar/gregorian.js util/utils.js util/math.js */\n\n/**\n * @class\n * Construct a new Thai solar calendar object. This class encodes information about\n * a Thai solar calendar.<p>\n *\n * Depends directive: !depends thaisolar.js\n *\n * @constructor\n * @implements ilib.Cal\n */\nilib.Cal.ThaiSolar = function() {\n\tthis.type = \"thaisolar\";\n};\n\nilib.Cal.ThaiSolar.prototype = new ilib.Cal.Gregorian();\nilib.Cal.ThaiSolar.prototype.parent = ilib.Cal.Gregorian;\nilib.Cal.ThaiSolar.prototype.constructor = ilib.Cal.ThaiSolar;\n\n/**\n * Return true if the given year is a leap year in the Thai solar calendar.\n * The year parameter may be given as a number, or as a ThaiSolarDate object.\n * @param {number|ilib.Date.ThaiSolarDate} year the year for which the leap year information is being sought\n * @return {boolean} true if the given year is a leap year\n */\nilib.Cal.ThaiSolar.prototype.isLeapYear = function(year) {\n\tvar y = (typeof(year) === 'number' ? year : year.getYears());\n\ty -= 543;\n\tvar centuries = ilib.mod(y, 400);\n\treturn (ilib.mod(y, 4) === 0 && centuries !== 100 && centuries !== 200 && centuries !== 300);\n};\n\n/**\n * Return a date instance for this calendar type using the given\n * options.\n * @param {Object} options options controlling the construction of\n * the date instance\n * @return {ilib.Date} a date appropriate for this calendar type\n */\nilib.Cal.ThaiSolar.prototype.newDateInstance = function (options) {\n\treturn new ilib.Date.ThaiSolarDate(options);\n};\n\n/* register this calendar for the factory method */\nilib.Cal._constructors[\"thaisolar\"] = ilib.Cal.ThaiSolar;\n/*\n * thaisolardate.js - Represent a date in the ThaiSolar calendar\n *\n * Copyright © 2013-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\ndate.js\ncalendar/gregorian.js\nutil/jsutils.js\n*/\n\n/**\n * @class\n * Construct a new Thai solar date object. The constructor parameters can\n * contain any of the following properties:\n *\n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n *\n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n *\n * <li><i>year</i> - any integer, including 0\n *\n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n *\n * <li><i>day</i> - 1 to 31\n *\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n *\n * <li><i>minute</i> - 0 to 59\n *\n * <li><i>second</i> - 0 to 59\n *\n * <li><i>millisecond</i> - 0 to 999\n *\n * <li><i>timezone</i> - the ilib.TimeZone instance or time zone name as a string\n * of this Thai solar date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n *\n * <li><i>locale</i> - locale for this Thai solar date. If the time zone is not\n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that\n * represents the locale.\n * </ul>\n *\n * If the constructor is called with another Thai solar date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above\n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date\n * components are\n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the\n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich\n * Mean Time\").<p>\n *\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n *\n * Depends directive: !depends thaisolardate.js\n *\n * @constructor\n * @extends ilib.Date.GregDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Thai solar date\n */\nilib.Date.ThaiSolarDate = function(params) {\n\tvar p = params;\n\tif (params) {\n\t\t// there is 198327 days difference between the Thai solar and\n\t\t// Gregorian epochs which is equivalent to 543 years\n\t\tp = {};\n\t\tilib.shallowCopy(params, p);\n\t\tif (typeof(p.year) !== 'undefined') {\n\t\t\tp.year -= 543;\n\t\t}\n\t\tif (typeof(p.rd) !== 'undefined') {\n\t\t\tp.rd -= 198327;\n\t\t}\n\t}\n\tthis.rd = undefined; // clear these out so that the GregDate constructor can set it\n\tthis.offset = undefined;\n\t//console.log(\"ThaiSolarDate.constructor: date is \" + JSON.stringify(this) + \" parent is \" + JSON.stringify(this.parent) + \" and parent.parent is \" + JSON.stringify(this.parent.parent));\n\tilib.Date.GregDate.call(this, p);\n\tthis.cal = new ilib.Cal.ThaiSolar();\n\t// make sure the year is set correctly\n\tif (params && typeof(params.year) !== 'undefined') {\n\t\tthis.year = parseInt(params.year, 10);\n\t}\n};\n\nilib.Date.ThaiSolarDate.prototype = new ilib.Date.GregDate({noinstance: true});\nilib.Date.ThaiSolarDate.prototype.parent = ilib.Date.GregDate.prototype;\nilib.Date.ThaiSolarDate.prototype.constructor = ilib.Date.ThaiSolarDate;\n\n/**\n * the difference between a zero Julian day and the zero Thai Solar date.\n * This is some 543 years before the start of the Gregorian epoch.\n * @private\n * @const\n * @type number\n */\nilib.Date.ThaiSolarDate.epoch = 1523097.5;\n\n/**\n * Calculate the date components for the current time zone\n * @protected\n */\nilib.Date.ThaiSolarDate.prototype._calcDateComponents = function () {\n\t// there is 198327 days difference between the Thai solar and\n\t// Gregorian epochs which is equivalent to 543 years\n\t// console.log(\"ThaiSolarDate._calcDateComponents: date is \" + JSON.stringify(this) + \" parent is \" + JSON.stringify(this.parent) + \" and parent.parent is \" + JSON.stringify(this.parent.parent));\n\tthis.parent._calcDateComponents.call(this);\n\tthis.year += 543;\n};\n\n/**\n * Return the Rata Die (fixed day) number of this date.\n *\n * @protected\n * @return {number} the rd date as a number\n */\nilib.Date.ThaiSolarDate.prototype.getRataDie = function() {\n\t// there is 198327 days difference between the Thai solar and\n\t// Gregorian epochs which is equivalent to 543 years\n\treturn this.rd.getRataDie() + 198327;\n};\n\n/**\n * Return a new Gregorian date instance that represents the first instance of the\n * given day of the week before the current date. The day of the week is encoded\n * as a number where 0 = Sunday, 1 = Monday, etc.\n *\n * @param {number} dow the day of the week before the current date that is being sought\n * @return {ilib.Date} the date being sought\n */\nilib.Date.ThaiSolarDate.prototype.before = function (dow) {\n\treturn this.cal.newDateInstance({\n\t\trd: this.rd.before(dow, this.offset) + 198327,\n\t\ttimezone: this.timezone\n\t});\n};\n\n/**\n * Return a new Gregorian date instance that represents the first instance of the\n * given day of the week after the current date. The day of the week is encoded\n * as a number where 0 = Sunday, 1 = Monday, etc.\n *\n * @param {number} dow the day of the week after the current date that is being sought\n * @return {ilib.Date} the date being sought\n */\nilib.Date.ThaiSolarDate.prototype.after = function (dow) {\n\treturn this.cal.newDateInstance({\n\t\trd: this.rd.after(dow, this.offset) + 198327,\n\t\ttimezone: this.timezone\n\t});\n};\n\n/**\n * Return a new Gregorian date instance that represents the first instance of the\n * given day of the week on or before the current date. The day of the week is encoded\n * as a number where 0 = Sunday, 1 = Monday, etc.\n *\n * @param {number} dow the day of the week on or before the current date that is being sought\n * @return {ilib.Date} the date being sought\n */\nilib.Date.ThaiSolarDate.prototype.onOrBefore = function (dow) {\n\treturn this.cal.newDateInstance({\n\t\trd: this.rd.onOrBefore(dow, this.offset) + 198327,\n\t\ttimezone: this.timezone\n\t});\n};\n\n/**\n * Return a new Gregorian date instance that represents the first instance of the\n * given day of the week on or after the current date. The day of the week is encoded\n * as a number where 0 = Sunday, 1 = Monday, etc.\n *\n * @param {number} dow the day of the week on or after the current date that is being sought\n * @return {ilib.Date} the date being sought\n */\nilib.Date.ThaiSolarDate.prototype.onOrAfter = function (dow) {\n\treturn this.cal.newDateInstance({\n\t\trd: this.rd.onOrAfter(dow, this.offset) + 198327,\n\t\ttimezone: this.timezone\n\t});\n};\n\n/**\n * Return the name of the calendar that governs this date.\n *\n * @return {string} a string giving the name of the calendar\n */\nilib.Date.ThaiSolarDate.prototype.getCalendar = function() {\n\treturn \"thaisolar\";\n};\n\n//register with the factory method\nilib.Date._constructors[\"thaisolar\"] = ilib.Date.ThaiSolarDate;\n\n\n/*\n * persian.js - Represent a Persian algorithmic calendar object.\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/* !depends calendar.js locale.js date.js julianday.js util/utils.js util/math.js */\n\n/**\n * @class\n * Construct a new Persian algorithmic calendar object. This class encodes information about\n * a Persian algorithmic calendar.<p>\n *\n * Depends directive: !depends persian.js\n *\n * @constructor\n * @implements ilib.Cal\n */\nilib.Cal.PersianAlgo = function() {\n\tthis.type = \"persian-algo\";\n};\n\n/**\n * @private\n * @const\n * @type Array.<number>\n * the lengths of each month\n */\nilib.Cal.PersianAlgo.monthLengths = [\n\t31,  // Farvardin\n\t31,  // Ordibehesht\n\t31,  // Khordad\n\t31,  // Tir\n\t31,  // Mordad\n\t31,  // Shahrivar\n\t30,  // Mehr\n\t30,  // Aban\n\t30,  // Azar\n\t30,  // Dey\n\t30,  // Bahman\n\t29   // Esfand\n];\n\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for some luni-solar calendars because in some years, an extra month is needed to extend the\n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=first month, 2=second month, etc.\n *\n * @param {number} year a year for which the number of months is sought\n * @return {number} The number of months in the given year\n */\nilib.Cal.PersianAlgo.prototype.getNumMonths = function(year) {\n\treturn 12;\n};\n\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of things\n * like leap years.\n *\n * @param {number} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @return {number} the number of days within the given month in the given year\n */\nilib.Cal.PersianAlgo.prototype.getMonLength = function(month, year) {\n\tif (month !== 12 || !this.isLeapYear(year)) {\n\t\treturn ilib.Cal.PersianAlgo.monthLengths[month-1];\n\t} else {\n\t\t// Month 12, Esfand, has 30 days instead of 29 in leap years\n\t\treturn 30;\n\t}\n};\n\n/**\n * Return the equivalent year in the 2820 year cycle that begins on\n * Far 1, 474. This particular cycle obeys the cycle-of-years formula\n * whereas the others do not specifically. This cycle can be used as\n * a proxy for other years outside of the cycle by shifting them into\n * the cycle.\n * @param {number} year year to find the equivalent cycle year for\n * @returns {number} the equivalent cycle year\n */\nilib.Cal.PersianAlgo.prototype.equivalentCycleYear = function(year) {\n\tvar y = year - (year >= 0 ? 474 : 473);\n\treturn ilib.mod(y, 2820) + 474;\n};\n\n/**\n * Return true if the given year is a leap year in the Persian calendar.\n * The year parameter may be given as a number, or as a PersAlgoDate object.\n * @param {number} year the year for which the leap year information is being sought\n * @return {boolean} true if the given year is a leap year\n */\nilib.Cal.PersianAlgo.prototype.isLeapYear = function(year) {\n\treturn (ilib.mod((this.equivalentCycleYear(year) + 38) * 682, 2816) < 682);\n};\n\n/**\n * Return the type of this calendar.\n *\n * @return {string} the name of the type of this calendar\n */\nilib.Cal.PersianAlgo.prototype.getType = function() {\n\treturn this.type;\n};\n\n/**\n * Return a date instance for this calendar type using the given\n * options.\n * @param {Object} options options controlling the construction of\n * the date instance\n * @return {ilib.Date} a date appropriate for this calendar type\n */\nilib.Cal.PersianAlgo.prototype.newDateInstance = function (options) {\n\treturn new ilib.Date.PersAlgoDate(options);\n};\n\n/* register this calendar for the factory method */\nilib.Cal._constructors[\"persian-algo\"] = ilib.Cal.PersianAlgo;\n\n/*\n * persiandate.js - Represent a date in the Persian algorithmic calendar\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\ndate.js\ncalendar/persian.js\nutil/utils.js\nutil/search.js\nutil/math.js\nlocaleinfo.js\njulianday.js\n*/\n\n/**\n * Construct a new Persian RD date number object. The constructor parameters can\n * contain any of the following properties:\n *\n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\n *\n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n *\n * <li><i>year</i> - any integer, including 0\n *\n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\n *\n * <li><i>day</i> - 1 to 31\n *\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n *\n * <li><i>minute</i> - 0 to 59\n *\n * <li><i>second</i> - 0 to 59\n *\n * <li><i>millisecond</i> - 0 to 999\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Persian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above are present, then the RD is calculate based on\n * the current date at the time of instantiation. <p>\n *\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n *\n * Depends directive: !depends persiandate.js\n *\n * @private\n * @class\n * @constructor\n * @extends ilib.Date.RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Persian RD date\n */\nilib.Date.PersAlgoRataDie = function(params) {\n\tthis.cal = params && params.cal || new ilib.Cal.PersianAlgo();\n\tthis.rd = undefined;\n\tilib.Date.RataDie.call(this, params);\n};\n\nilib.Date.PersAlgoRataDie.prototype = new ilib.Date.RataDie();\nilib.Date.PersAlgoRataDie.prototype.parent = ilib.Date.RataDie;\nilib.Date.PersAlgoRataDie.prototype.constructor = ilib.Date.PersAlgoRataDie;\n\n/**\n * The difference between a zero Julian day and the first Persian date\n * @private\n * @const\n * @type number\n */\nilib.Date.PersAlgoRataDie.prototype.epoch = 1948319.5;\n\n/**\n * Calculate the Rata Die (fixed day) number of the given date from the\n * date components.\n *\n * @protected\n * @param {Object} date the date components to calculate the RD from\n */\nilib.Date.PersAlgoRataDie.prototype._setDateComponents = function(date) {\n\tvar year = this.cal.equivalentCycleYear(date.year);\n\tvar y = date.year - (date.year >= 0 ? 474 : 473);\n\tvar rdOfYears = 1029983 * Math.floor(y/2820) + 365 * (year - 1) + Math.floor((682 * year - 110) / 2816);\n\tvar dayInYear = (date.month > 1 ? ilib.Date.PersAlgoDate.cumMonthLengths[date.month-1] : 0) + date.day;\n\tvar rdtime = (date.hour * 3600000 +\n\t\tdate.minute * 60000 +\n\t\tdate.second * 1000 +\n\t\tdate.millisecond) /\n\t\t86400000;\n\n\t/*\n\t// console.log(\"getRataDie: converting \" +  JSON.stringify(this));\n\tconsole.log(\"getRataDie: year is \" +  year);\n\tconsole.log(\"getRataDie: rd of years is \" +  rdOfYears);\n\tconsole.log(\"getRataDie: day in year is \" +  dayInYear);\n\tconsole.log(\"getRataDie: rdtime is \" +  rdtime);\n\tconsole.log(\"getRataDie: rd is \" +  (rdOfYears + dayInYear + rdtime));\n\t*/\n\n\tthis.rd = rdOfYears + dayInYear + rdtime;\n};\n\n/**\n * Return the rd number of the particular day of the week on or before the\n * given rd. eg. The Sunday on or before the given rd.\n * @private\n * @param {number} rd the rata die date of the reference date\n * @param {number} dayOfWeek the day of the week that is being sought relative\n * to the current date\n * @return {number} the rd of the day of the week\n */\nilib.Date.PersAlgoRataDie.prototype._onOrBefore = function(rd, dayOfWeek) {\n\treturn rd - ilib.mod(Math.floor(rd) - dayOfWeek - 3, 7);\n};\n\n\n/**\n * @class\n *\n * Construct a new Persian date object. The constructor parameters can\n * contain any of the following properties:\n *\n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\n *\n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n *\n * <li><i>year</i> - any integer, including 0\n *\n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\n *\n * <li><i>day</i> - 1 to 31\n *\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n *\n * <li><i>minute</i> - 0 to 59\n *\n * <li><i>second</i> - 0 to 59\n *\n * <li><i>millisecond</i> - 0 to 999\n *\n * <li><i>timezone</i> - the ilib.TimeZone instance or time zone name as a string\n * of this persian date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n *\n * <li><i>locale</i> - locale for this persian date. If the time zone is not\n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that\n * represents the locale.\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Persian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above\n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date\n * components are\n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the\n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich\n * Mean Time\").<p>\n *\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n *\n * Depends directive: !depends persiandate.js\n *\n * @constructor\n * @extends ilib.Date\n * @param {Object=} params parameters that govern the settings and behaviour of this Persian date\n */\nilib.Date.PersAlgoDate = function(params) {\n\tthis.cal = new ilib.Cal.PersianAlgo();\n\tthis.timezone = \"local\";\n\n\tif (params) {\n\t\tif (params.locale) {\n\t\t\tthis.locale = (typeof(params.locale) === 'string') ? new ilib.Locale(params.locale) : params.locale;\n\t\t\tvar li = new ilib.LocaleInfo(this.locale);\n\t\t\tthis.timezone = li.getTimeZone();\n\t\t}\n\t\tif (params.timezone) {\n\t\t\tthis.timezone = params.timezone;\n\t\t}\n\n\t\tif (params.year || params.month || params.day || params.hour ||\n\t\t\t\tparams.minute || params.second || params.millisecond ) {\n\t\t\t/**\n\t\t\t * Year in the Persian calendar.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.year = parseInt(params.year, 10) || 0;\n\n\t\t\t/**\n\t\t\t * The month number, ranging from 1 to 12\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.month = parseInt(params.month, 10) || 1;\n\n\t\t\t/**\n\t\t\t * The day of the month. This ranges from 1 to 31.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.day = parseInt(params.day, 10) || 1;\n\n\t\t\t/**\n\t\t\t * The hour of the day. This can be a number from 0 to 23, as times are\n\t\t\t * stored unambiguously in the 24-hour clock.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.hour = parseInt(params.hour, 10) || 0;\n\n\t\t\t/**\n\t\t\t * The minute of the hours. Ranges from 0 to 59.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.minute = parseInt(params.minute, 10) || 0;\n\n\t\t\t/**\n\t\t\t * The second of the minute. Ranges from 0 to 59.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.second = parseInt(params.second, 10) || 0;\n\n\t\t\t/**\n\t\t\t * The millisecond of the second. Ranges from 0 to 999.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.millisecond = parseInt(params.millisecond, 10) || 0;\n\n\t\t\t/**\n\t\t\t * The day of the year. Ranges from 1 to 366.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.dayOfYear = parseInt(params.dayOfYear, 10);\n\n\t\t\tif (typeof(params.dst) === 'boolean') {\n\t\t\t\tthis.dst = params.dst;\n\t\t\t}\n\n\t\t\tthis.rd = this.newRd(this);\n\n\t\t\t// add the time zone offset to the rd to convert to UTC\n\t\t\tif (!this.tz) {\n\t\t\t\tthis.tz = new ilib.TimeZone({id: this.timezone});\n\t\t\t}\n\t\t\t// getOffsetMillis requires that this.year, this.rd, and this.dst\n\t\t\t// are set in order to figure out which time zone rules apply and\n\t\t\t// what the offset is at that point in the year\n\t\t\tthis.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n\t\t\tif (this.offset !== 0) {\n\t\t\t\tthis.rd = this.newRd({\n\t\t\t\t\trd: this.rd.getRataDie() - this.offset\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this.rd) {\n\t\tthis.rd = this.newRd(params);\n\t\tthis._calcDateComponents();\n\t}\n};\n\nilib.Date.PersAlgoDate.prototype = new ilib.Date({noinstance: true});\nilib.Date.PersAlgoDate.prototype.parent = ilib.Date;\nilib.Date.PersAlgoDate.prototype.constructor = ilib.Date.PersAlgoDate;\n\n/**\n * @private\n * @const\n * @type Array.<number>\n * the cumulative lengths of each month, for a non-leap year\n */\nilib.Date.PersAlgoDate.cumMonthLengths = [\n    0,    // Farvardin\n\t31,   // Ordibehesht\n\t62,   // Khordad\n\t93,   // Tir\n\t124,  // Mordad\n\t155,  // Shahrivar\n\t186,  // Mehr\n\t216,  // Aban\n\t246,  // Azar\n\t276,  // Dey\n\t306,  // Bahman\n\t336,  // Esfand\n\t365\n];\n\n/**\n * Return a new RD for this date type using the given params.\n * @protected\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {ilib.Date.RataDie} the new RD instance for the given params\n */\nilib.Date.PersAlgoDate.prototype.newRd = function (params) {\n\treturn new ilib.Date.PersAlgoRataDie(params);\n};\n\n/**\n * Return the year for the given RD\n * @protected\n * @param {number} rd RD to calculate from\n * @returns {number} the year for the RD\n */\nilib.Date.PersAlgoDate.prototype._calcYear = function(rd) {\n\tvar shiftedRd = rd - 173126;\n\tvar numberOfCycles = Math.floor(shiftedRd / 1029983);\n\tvar shiftedDayInCycle = ilib.mod(shiftedRd, 1029983);\n\tvar yearInCycle = (shiftedDayInCycle === 1029982) ? 2820 : Math.floor((2816 * shiftedDayInCycle + 1031337) / 1028522);\n\tvar year = 474 + 2820 * numberOfCycles + yearInCycle;\n\treturn (year > 0) ? year : year - 1;\n};\n\n/**\n * @private\n * Calculate date components for the given RD date.\n */\nilib.Date.PersAlgoDate.prototype._calcDateComponents = function () {\n\tvar remainder,\n\t\trd = this.rd.getRataDie();\n\n\tthis.year = this._calcYear(rd);\n\n\tif (typeof(this.offset) === \"undefined\") {\n\t\t// now offset the RD by the time zone, then recalculate in case we were\n\t\t// near the year boundary\n\t\tif (!this.tz) {\n\t\t\tthis.tz = new ilib.TimeZone({id: this.timezone});\n\t\t}\n\t\tthis.offset = this.tz.getOffsetMillis(this) / 86400000;\n\t}\n\n\tif (this.offset !== 0) {\n\t\trd += this.offset;\n\t\tthis.year = this._calcYear(rd);\n\t}\n\n\t//console.log(\"PersAlgoDate.calcComponent: calculating for rd \" + rd);\n\t//console.log(\"PersAlgoDate.calcComponent: year is \" + ret.year);\n\tvar yearStart = this.newRd({\n\t\tyear: this.year,\n\t\tmonth: 1,\n\t\tday: 1,\n\t\thour: 0,\n\t\tminute: 0,\n\t\tsecond: 0,\n\t\tmillisecond: 0\n\t});\n\tremainder = rd - yearStart.getRataDie() + 1;\n\n\tthis.dayOfYear = remainder;\n\n\t//console.log(\"PersAlgoDate.calcComponent: remainder is \" + remainder);\n\n\tthis.month = ilib.bsearch(remainder, ilib.Date.PersAlgoDate.cumMonthLengths);\n\tremainder -= ilib.Date.PersAlgoDate.cumMonthLengths[this.month-1];\n\n\t//console.log(\"PersAlgoDate.calcComponent: month is \" + this.month + \" and remainder is \" + remainder);\n\n\tthis.day = Math.floor(remainder);\n\tremainder -= this.day;\n\n\t//console.log(\"PersAlgoDate.calcComponent: day is \" + this.day + \" and remainder is \" + remainder);\n\n\t// now convert to milliseconds for the rest of the calculation\n\tremainder = Math.round(remainder * 86400000);\n\n\tthis.hour = Math.floor(remainder/3600000);\n\tremainder -= this.hour * 3600000;\n\n\tthis.minute = Math.floor(remainder/60000);\n\tremainder -= this.minute * 60000;\n\n\tthis.second = Math.floor(remainder/1000);\n\tremainder -= this.second * 1000;\n\n\tthis.millisecond = remainder;\n};\n\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n *\n * @return {number} the day of the week\n */\nilib.Date.PersAlgoDate.prototype.getDayOfWeek = function() {\n\tvar rd = Math.floor(this.getRataDie());\n\treturn ilib.mod(rd-3, 7);\n};\n\n/**\n * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to\n * 365, regardless of months or weeks, etc. That is, Farvardin 1st is day 1, and\n * December 31st is 365 in regular years, or 366 in leap years.\n * @return {number} the ordinal day of the year\n */\nilib.Date.PersAlgoDate.prototype.getDayOfYear = function() {\n\treturn ilib.Date.PersAlgoDate.cumMonthLengths[this.month-1] + this.day;\n};\n\n/**\n * Return the era for this date as a number. The value for the era for Persian\n * calendars is -1 for \"before the persian era\" (BP) and 1 for \"the persian era\" (anno\n * persico or AP).\n * BP dates are any date before Farvardin 1, 1 AP. In the proleptic Persian calendar,\n * there is a year 0, so any years that are negative or zero are BP.\n * @return {number} 1 if this date is in the common era, -1 if it is before the\n * common era\n */\nilib.Date.PersAlgoDate.prototype.getEra = function() {\n\treturn (this.year < 1) ? -1 : 1;\n};\n\n/**\n * Return the name of the calendar that governs this date.\n *\n * @return {string} a string giving the name of the calendar\n */\nilib.Date.PersAlgoDate.prototype.getCalendar = function() {\n\treturn \"persian-algo\";\n};\n\n// register with the factory method\nilib.Date._constructors[\"persian-algo\"] = ilib.Date.PersAlgoDate;\n/*\n * astro.js - Static functions to support astronomical calculations\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\nilibglobal.js\ndate.js\ncalendar/gregoriandate.js\ncalendar/gregratadie.js\n*/\n\n// !data astro\n\n/*\n * These routines were derived from a public domain set of JavaScript\n * functions for positional astronomy by John Walker of Fourmilab,\n * September 1999.\n */\n\n/**\n * Load in all the data needed for astrological calculations.\n *\n * @param {boolean} sync\n * @param {*} loadParams\n * @param {function(*)|undefined} callback\n */\nilib.Date.initAstro = function(sync, loadParams, callback) {\n\tif (!ilib.data.astro) {\n\t\tilib.loadData({\n\t\t\tname: \"astro.json\", // countries in their own language\n\t\t\tlocale: \"-\", // only need to load the root file\n\t\t\tnonLocale: true,\n\t\t\tsync: sync,\n\t\t\tloadParams: loadParams,\n\t\t\tcallback: ilib.bind(this, /** @type function() */ function(astroData) {\n\t\t\t\t/**\n\t\t\t\t * @type {{\n\t\t\t\t *  \t_EquinoxpTerms:Array.<number>,\n\t\t\t\t *  \t_JDE0tab1000:Array.<number>,\n\t\t\t\t *  \t_JDE0tab2000:Array.<number>,\n\t\t\t\t *  \t_deltaTtab:Array.<number>,\n\t\t\t\t *  \t_oterms:Array.<number>,\n\t\t\t\t *  \t_nutArgMult:Array.<number>,\n\t\t\t\t *  \t_nutArgCoeff:Array.<number>,\n\t\t\t\t *  \t_nutCoeffA:Array.<number>,\n\t\t\t\t *  \t_nutCoeffB:Array.<number>,\n\t\t\t\t *  \t_coeff19th:Array.<number>,\n\t\t\t\t *  \t_coeff18th:Array.<number>,\n\t\t\t\t *  \t_solarLongCoeff:Array.<number>,\n\t\t\t\t *  \t_solarLongMultipliers:Array.<number>,\n\t\t\t\t *  \t_solarLongAddends:Array.<number>,\n\t\t\t\t *  \t_meanMoonCoeff:Array.<number>,\n\t\t\t\t *  \t_elongationCoeff:Array.<number>,\n\t\t\t\t *  \t_solarAnomalyCoeff:Array.<number>,\n\t\t\t\t *  \t_lunarAnomalyCoeff:Array.<number>,\n\t\t\t\t *  \t_moonFromNodeCoeff:Array.<number>,\n\t\t\t\t *  \t_eCoeff:Array.<number>,\n\t\t\t\t *  \t_lunarElongationLongCoeff:Array.<number>,\n\t\t\t\t *  \t_solarAnomalyLongCoeff:Array.<number>,\n\t\t\t\t *  \t_lunarAnomalyLongCoeff:Array.<number>,\n\t\t\t\t *  \t_moonFromNodeLongCoeff:Array.<number>,\n\t\t\t\t *  \t_sineCoeff:Array.<number>,\n\t\t\t\t *  \t_nmApproxCoeff:Array.<number>,\n\t\t\t\t *  \t_nmCapECoeff:Array.<number>,\n\t\t\t\t *  \t_nmSolarAnomalyCoeff:Array.<number>,\n\t\t\t\t *  \t_nmLunarAnomalyCoeff:Array.<number>,\n\t\t\t\t *  \t_nmMoonArgumentCoeff:Array.<number>,\n\t\t\t\t *  \t_nmCapOmegaCoeff:Array.<number>,\n\t\t\t\t *  \t_nmEFactor:Array.<number>,\n\t\t\t\t *  \t_nmSolarCoeff:Array.<number>,\n\t\t\t\t *  \t_nmLunarCoeff:Array.<number>,\n\t\t\t\t *  \t_nmMoonCoeff:Array.<number>,\n\t\t\t\t *  \t_nmSineCoeff:Array.<number>,\n\t\t\t\t *  \t_nmAddConst:Array.<number>,\n\t\t\t\t *  \t_nmAddCoeff:Array.<number>,\n\t\t\t\t *  \t_nmAddFactor:Array.<number>,\n\t\t\t\t *  \t_nmExtra:Array.<number>\n\t\t\t\t *  }}\n\t\t\t\t */\n\t\t\t \tilib.data.astro = astroData;\n\t\t\t\tif (callback && typeof(callback) === 'function') {\n\t\t\t\t\tcallback(astroData);\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t} else {\n\t\tif (callback && typeof(callback) === 'function') {\n\t\t\tcallback(ilib.data.astro);\n\t\t}\n\t}\n};\n\n/**\n * Convert degrees to radians.\n *\n * @static\n * @param {number} d angle in degrees\n * @return {number} angle in radians\n */\nilib.Date._dtr = function(d) {\n\treturn (d * Math.PI) / 180.0;\n};\n\n/**\n * Convert radians to degrees.\n *\n * @static\n * @param {number} r angle in radians\n * @return {number} angle in degrees\n */\nilib.Date._rtd = function(r) {\n\treturn (r * 180.0) / Math.PI;\n};\n\n/**\n * Return the cosine of an angle given in degrees.\n * @static\n * @param {number} d angle in degrees\n * @return {number} cosine of the angle.\n */\nilib.Date._dcos = function(d) {\n\treturn Math.cos(ilib.Date._dtr(d));\n};\n\n/**\n * Return the sine of an angle given in degrees.\n * @static\n * @param {number} d angle in degrees\n * @return {number} sine of the angle.\n */\nilib.Date._dsin = function(d) {\n\treturn Math.sin(ilib.Date._dtr(d));\n};\n\n/**\n * Return the tan of an angle given in degrees.\n * @static\n * @param {number} d angle in degrees\n * @return {number} tan of the angle.\n */\nilib.Date._dtan = function(d) {\n\treturn Math.tan(ilib.Date._dtr(d));\n};\n\n/**\n * Range reduce angle in degrees.\n *\n * @static\n * @param {number} a angle to reduce\n * @return {number} the reduced angle\n */\nilib.Date._fixangle = function(a) {\n\treturn a - 360.0 * (Math.floor(a / 360.0));\n};\n\n/**\n * Range reduce angle in radians.\n *\n * @static\n * @param {number} a angle to reduce\n * @return {number} the reduced angle\n */\nilib.Date._fixangr = function(a) {\n\treturn a - (2 * Math.PI) * (Math.floor(a / (2 * Math.PI)));\n};\n\n/**\n * Determine the Julian Ephemeris Day of an equinox or solstice.  The \"which\"\n * argument selects the item to be computed:\n *\n * <ul>\n * <li>0   March equinox\n * <li>1   June solstice\n * <li>2   September equinox\n * <li>3   December solstice\n * </ul>\n *\n * @static\n * @param {number} year Gregorian year to calculate for\n * @param {number} which Which equinox or solstice to calculate\n */\nilib.Date._equinox = function(year, which) {\n\tvar deltaL, i, j, JDE0, JDE, JDE0tab, S, T, W, Y;\n\n\t/*  Initialize terms for mean equinox and solstices.  We\n\t    have two sets: one for years prior to 1000 and a second\n\t    for subsequent years.  */\n\n\tif (year < 1000) {\n\t\tJDE0tab = ilib.data.astro._JDE0tab1000;\n\t\tY = year / 1000;\n\t} else {\n\t\tJDE0tab = ilib.data.astro._JDE0tab2000;\n\t\tY = (year - 2000) / 1000;\n\t}\n\n\tJDE0 = JDE0tab[which][0] + (JDE0tab[which][1] * Y)\n\t\t\t+ (JDE0tab[which][2] * Y * Y) + (JDE0tab[which][3] * Y * Y * Y)\n\t\t\t+ (JDE0tab[which][4] * Y * Y * Y * Y);\n\n\t//document.debug.log.value += \"JDE0 = \" + JDE0 + \"\\n\";\n\n\tT = (JDE0 - 2451545.0) / 36525;\n\t//document.debug.log.value += \"T = \" + T + \"\\n\";\n\tW = (35999.373 * T) - 2.47;\n\t//document.debug.log.value += \"W = \" + W + \"\\n\";\n\tdeltaL = 1 + (0.0334 * ilib.Date._dcos(W)) + (0.0007 * ilib.Date._dcos(2 * W));\n\t//document.debug.log.value += \"deltaL = \" + deltaL + \"\\n\";\n\n\t//  Sum the periodic terms for time T\n\n\tS = 0;\n\tj = 0;\n\tfor (i = 0; i < 24; i++) {\n\t\tS += ilib.data.astro._EquinoxpTerms[j]\n\t\t\t\t* ilib.Date._dcos(ilib.data.astro._EquinoxpTerms[j + 1] + (ilib.data.astro._EquinoxpTerms[j + 2] * T));\n\t\tj += 3;\n\t}\n\n\t//document.debug.log.value += \"S = \" + S + \"\\n\";\n\t//document.debug.log.value += \"Corr = \" + ((S * 0.00001) / deltaL) + \"\\n\";\n\n\tJDE = JDE0 + ((S * 0.00001) / deltaL);\n\n\treturn JDE;\n};\n\n/*\n * The table of observed Delta T values at the beginning of\n * years from 1620 through 2014 as found in astro.json is taken from\n * http://www.staff.science.uu.nl/~gent0113/deltat/deltat.htm\n * and\n * ftp://maia.usno.navy.mil/ser7/deltat.data\n */\n\n/**\n * Determine the difference, in seconds, between dynamical time and universal time.\n *\n * @static\n * @param {number} year to calculate the difference for\n * @return {number} difference in seconds between dynamical time and universal time\n */\nilib.Date._deltat = function (year) {\n\tvar dt, f, i, t;\n\n\tif ((year >= 1620) && (year <= 2014)) {\n\t\ti = Math.floor(year - 1620);\n\t\tf = (year - 1620) - i; /* Fractional part of year */\n\t\tdt = ilib.data.astro._deltaTtab[i] + ((ilib.data.astro._deltaTtab[i + 1] - ilib.data.astro._deltaTtab[i]) * f);\n\t} else {\n\t\tt = (year - 2000) / 100;\n\t\tif (year < 948) {\n\t\t\tdt = 2177 + (497 * t) + (44.1 * t * t);\n\t\t} else {\n\t\t\tdt = 102 + (102 * t) + (25.3 * t * t);\n\t\t\tif ((year > 2000) && (year < 2100)) {\n\t\t\t\tdt += 0.37 * (year - 2100);\n\t\t\t}\n\t\t}\n\t}\n\treturn dt;\n};\n\n/**\n * Calculate the obliquity of the ecliptic for a given\n * Julian date.  This uses Laskar's tenth-degree\n * polynomial fit (J. Laskar, Astronomy and\n * Astrophysics, Vol. 157, page 68 [1986]) which is\n * accurate to within 0.01 arc second between AD 1000\n * and AD 3000, and within a few seconds of arc for\n * +/-10000 years around AD 2000.  If we're outside the\n * range in which this fit is valid (deep time) we\n * simply return the J2000 value of the obliquity, which\n * happens to be almost precisely the mean.\n *\n * @static\n * @param {number} jd Julian Day to calculate the obliquity for\n * @return {number} the obliquity\n */\nilib.Date._obliqeq = function (jd) {\n\tvar eps, u, v, i;\n\n \tv = u = (jd - 2451545.0) / 3652500.0;\n\n \teps = 23 + (26 / 60.0) + (21.448 / 3600.0);\n\n \tif (Math.abs(u) < 1.0) {\n \t\tfor (i = 0; i < 10; i++) {\n \t\t\teps += (ilib.data.astro._oterms[i] / 3600.0) * v;\n \t\t\tv *= u;\n \t\t}\n \t}\n \treturn eps;\n};\n\n/**\n * Return the position of the sun.  We return\n * intermediate values because they are useful in a\n * variety of other contexts.\n * @static\n * @param {number} jd find the position of sun on this Julian Day\n * @return {Object} the position of the sun and many intermediate\n * values\n */\nilib.Date._sunpos = function(jd) {\n\tvar ret = {},\n\t\tT, T2, T3, Omega, epsilon, epsilon0;\n\n\tT = (jd - 2451545.0) / 36525.0;\n\t//document.debug.log.value += \"Sunpos.  T = \" + T + \"\\n\";\n\tT2 = T * T;\n\tT3 = T * T2;\n\tret.meanLongitude = ilib.Date._fixangle(280.46646 + 36000.76983 * T + 0.0003032 * T2);\n\t//document.debug.log.value += \"ret.meanLongitude = \" + ret.meanLongitude + \"\\n\";\n\tret.meanAnomaly = ilib.Date._fixangle(357.52911 + (35999.05029 * T) - 0.0001537 * T2 - 0.00000048 * T3);\n\t//document.debug.log.value += \"ret.meanAnomaly = \" + ret.meanAnomaly + \"\\n\";\n\tret.eccentricity = 0.016708634 - 0.000042037 * T - 0.0000001267 * T2;\n\t//document.debug.log.value += \"e = \" + e + \"\\n\";\n\tret.equationOfCenter = ((1.914602 - 0.004817 * T - 0.000014 * T2) * ilib.Date._dsin(ret.meanAnomaly))\n\t\t\t+ ((0.019993 - 0.000101 * T) * ilib.Date._dsin(2 * ret.meanAnomaly))\n\t\t\t+ (0.000289 * ilib.Date._dsin(3 * ret.meanAnomaly));\n\t//document.debug.log.value += \"ret.equationOfCenter = \" + ret.equationOfCenter + \"\\n\";\n\tret.sunLongitude = ret.meanLongitude + ret.equationOfCenter;\n\t//document.debug.log.value += \"ret.sunLongitude = \" + ret.sunLongitude + \"\\n\";\n\t//ret.sunAnomaly = ret.meanAnomaly + ret.equationOfCenter;\n\t//document.debug.log.value += \"ret.sunAnomaly = \" + ret.sunAnomaly + \"\\n\";\n\t// ret.sunRadius = (1.000001018 * (1 - (ret.eccentricity * ret.eccentricity))) / (1 + (ret.eccentricity * ilib.Date._dcos(ret.sunAnomaly)));\n\t//document.debug.log.value += \"ret.sunRadius = \" + ret.sunRadius + \"\\n\";\n\tOmega = 125.04 - (1934.136 * T);\n\t//document.debug.log.value += \"Omega = \" + Omega + \"\\n\";\n\tret.apparentLong = ret.sunLongitude + (-0.00569) + (-0.00478 * ilib.Date._dsin(Omega));\n\t//document.debug.log.value += \"ret.apparentLong = \" + ret.apparentLong + \"\\n\";\n\tepsilon0 = ilib.Date._obliqeq(jd);\n\t//document.debug.log.value += \"epsilon0 = \" + epsilon0 + \"\\n\";\n\tepsilon = epsilon0 + (0.00256 * ilib.Date._dcos(Omega));\n\t//document.debug.log.value += \"epsilon = \" + epsilon + \"\\n\";\n\t//ret.rightAscension = ilib.Date._fixangle(ilib.Date._rtd(Math.atan2(ilib.Date._dcos(epsilon0) * ilib.Date._dsin(ret.sunLongitude), ilib.Date._dcos(ret.sunLongitude))));\n\t//document.debug.log.value += \"ret.rightAscension = \" + ret.rightAscension + \"\\n\";\n\t// ret.declination = ilib.Date._rtd(Math.asin(ilib.Date._dsin(epsilon0) * ilib.Date._dsin(ret.sunLongitude)));\n\t////document.debug.log.value += \"ret.declination = \" + ret.declination + \"\\n\";\n\tret.inclination = ilib.Date._fixangle(23.4392911 - 0.013004167 * T - 0.00000016389 * T2 + 0.0000005036 * T3);\n\tret.apparentRightAscension = ilib.Date._fixangle(ilib.Date._rtd(Math.atan2(ilib.Date._dcos(epsilon) * ilib.Date._dsin(ret.apparentLong), ilib.Date._dcos(ret.apparentLong))));\n\t//document.debug.log.value += \"ret.apparentRightAscension = \" + ret.apparentRightAscension + \"\\n\";\n\t//ret.apparentDeclination = ilib.Date._rtd(Math.asin(ilib.Date._dsin(epsilon) * ilib.Date._dsin(ret.apparentLong)));\n\t//document.debug.log.value += \"ret.apparentDecliation = \" + ret.apparentDecliation + \"\\n\";\n\n\t// Angular quantities are expressed in decimal degrees\n\treturn ret;\n};\n\n/**\n * Calculate the nutation in longitude, deltaPsi, and obliquity,\n * deltaEpsilon for a given Julian date jd. Results are returned as an object\n * giving deltaPsi and deltaEpsilon in degrees.\n *\n * @static\n * @param {number} jd calculate the nutation of this Julian Day\n * @return {Object} the deltaPsi and deltaEpsilon of the nutation\n */\nilib.Date._nutation = function(jd) {\n\tvar i, j,\n\t\tt = (jd - 2451545.0) / 36525.0,\n\t\tt2, t3, to10,\n\t\tta = [],\n\t\tdp = 0,\n\t\tde = 0,\n\t\tang,\n\t\tret = {};\n\n\tt3 = t * (t2 = t * t);\n\n\t/*\n\t * Calculate angles. The correspondence between the elements of our array\n\t * and the terms cited in Meeus are:\n\t *\n\t * ta[0] = D ta[0] = M ta[2] = M' ta[3] = F ta[4] = \\Omega\n\t *\n\t */\n\n\tta[0] = ilib.Date._dtr(297.850363 + 445267.11148 * t - 0.0019142 * t2 + t3 / 189474.0);\n\tta[1] = ilib.Date._dtr(357.52772 + 35999.05034 * t - 0.0001603 * t2 - t3 / 300000.0);\n\tta[2] = ilib.Date._dtr(134.96298 + 477198.867398 * t + 0.0086972 * t2 + t3 / 56250.0);\n\tta[3] = ilib.Date._dtr(93.27191 + 483202.017538 * t - 0.0036825 * t2 + t3 / 327270);\n\tta[4] = ilib.Date._dtr(125.04452 - 1934.136261 * t + 0.0020708 * t2 + t3 / 450000.0);\n\n\t/*\n\t * Range reduce the angles in case the sine and cosine functions don't do it\n\t * as accurately or quickly.\n\t */\n\n\tfor (i = 0; i < 5; i++) {\n\t\tta[i] = ilib.Date._fixangr(ta[i]);\n\t}\n\n\tto10 = t / 10.0;\n\tfor (i = 0; i < 63; i++) {\n\t\tang = 0;\n\t\tfor (j = 0; j < 5; j++) {\n\t\t\tif (ilib.data.astro._nutArgMult[(i * 5) + j] != 0) {\n\t\t\t\tang += ilib.data.astro._nutArgMult[(i * 5) + j] * ta[j];\n\t\t\t}\n\t\t}\n\t\tdp += (ilib.data.astro._nutArgCoeff[(i * 4) + 0] + ilib.data.astro._nutArgCoeff[(i * 4) + 1] * to10) * Math.sin(ang);\n\t\tde += (ilib.data.astro._nutArgCoeff[(i * 4) + 2] + ilib.data.astro._nutArgCoeff[(i * 4) + 3] * to10) * Math.cos(ang);\n\t}\n\n\t/*\n\t * Return the result, converting from ten thousandths of arc seconds to\n\t * radians in the process.\n\t */\n\n\tret.deltaPsi = dp / (3600.0 * 10000.0);\n\tret.deltaEpsilon = de / (3600.0 * 10000.0);\n\n\treturn ret;\n};\n\n/**\n * Returns the equation of time as a fraction of a day.\n *\n * @static\n * @param {number} jd the Julian Day of the day to calculate for\n * @return {number} the equation of time for the given day\n */\nilib.Date._equationOfTime = function(jd) {\n\tvar alpha, deltaPsi, E, epsilon, L0, tau, pos;\n\n\t// 2451545.0 is the Julian day of J2000 epoch\n\t// 365250.0 is the number of days in a Julian millenium\n\ttau = (jd - 2451545.0) / 365250.0;\n\t//console.log(\"equationOfTime.  tau = \" + tau);\n\tL0 = 280.4664567 + (360007.6982779 * tau) + (0.03032028 * tau * tau)\n\t\t\t+ ((tau * tau * tau) / 49931)\n\t\t\t+ (-((tau * tau * tau * tau) / 15300))\n\t\t\t+ (-((tau * tau * tau * tau * tau) / 2000000));\n\t//console.log(\"L0 = \" + L0);\n\tL0 = ilib.Date._fixangle(L0);\n\t//console.log(\"L0 = \" + L0);\n\tpos = ilib.Date._sunpos(jd);\n\talpha = pos.apparentRightAscension;\n\t//console.log(\"alpha = \" + alpha);\n\tvar nut = ilib.Date._nutation(jd);\n\tdeltaPsi = nut.deltaPsi;\n\t//console.log(\"deltaPsi = \" + deltaPsi);\n\tepsilon = ilib.Date._obliqeq(jd) + nut.deltaEpsilon;\n\t//console.log(\"epsilon = \" + epsilon);\n\t//console.log(\"L0 - 0.0057183 = \" + (L0 - 0.0057183));\n\t//console.log(\"L0 - 0.0057183 - alpha = \" + (L0 - 0.0057183 - alpha));\n\t//console.log(\"deltaPsi * cos(epsilon) = \" + deltaPsi * ilib.Date._dcos(epsilon));\n\n\tE = L0 - 0.0057183 - alpha + deltaPsi * ilib.Date._dcos(epsilon);\n\t// if alpha and L0 are in different quadrants, then renormalize\n\t// so that the difference between them is in the right range\n\tif (E > 180) {\n\t\tE -= 360;\n\t}\n\t//console.log(\"E = \" + E);\n\t// E = E - 20.0 * (Math.floor(E / 20.0));\n\tE = E * 4;\n\t//console.log(\"Efixed = \" + E);\n\tE = E / (24 * 60);\n\t//console.log(\"Eday = \" + E);\n\n\treturn E;\n};\n\n/**\n * @private\n * @static\n */\nilib.Date._poly = function(x, coefficients) {\n\tvar result = coefficients[0];\n\tvar xpow = x;\n\tfor (var i = 1; i < coefficients.length; i++) {\n\t\tresult += coefficients[i] * xpow;\n\t\txpow *= x;\n\t}\n\treturn result;\n};\n\n/**\n * Calculate the UTC RD from the local RD given \"zone\" number of minutes\n * worth of offset.\n *\n * @static\n * @param {number} local RD of the locale time, given in any calendar\n * @param {number} zone number of minutes of offset from UTC for the time zone\n * @return {number} the UTC equivalent of the local RD\n */\nilib.Date._universalFromLocal = function(local, zone) {\n\treturn local - zone / 1440;\n};\n\n/**\n * Calculate the local RD from the UTC RD given \"zone\" number of minutes\n * worth of offset.\n *\n * @static\n * @param {number} local RD of the locale time, given in any calendar\n * @param {number} zone number of minutes of offset from UTC for the time zone\n * @return {number} the UTC equivalent of the local RD\n */\nilib.Date._localFromUniversal = function(local, zone) {\n\treturn local + zone / 1440;\n};\n\n/**\n * @private\n * @static\n * @param {number} c julian centuries of the date to calculate\n * @return {number} the aberration\n */\nilib.Date._aberration = function(c) {\n\treturn 9.74e-05 * ilib.Date._dcos(177.63 + 35999.01847999999 * c) - 0.005575;\n};\n\n/**\n * @private\n *\nilib.data.astro._nutCoeffA = [124.90, -1934.134, 0.002063];\nilib.data.astro._nutCoeffB = [201.11, 72001.5377, 0.00057];\n*/\n\n/**\n * @private\n * @static\n * @param {number} c julian centuries of the date to calculate\n * @return {number} the nutation for the given julian century in radians\n */\nilib.Date._nutation2 = function(c) {\n\tvar a = ilib.Date._poly(c, ilib.data.astro._nutCoeffA);\n\tvar b = ilib.Date._poly(c, ilib.data.astro._nutCoeffB);\n\t// return -0.0000834 * ilib.Date._dsin(a) - 0.0000064 * ilib.Date._dsin(b);\n\treturn -0.004778 * ilib.Date._dsin(a) - 0.0003667 * ilib.Date._dsin(b);\n};\n\n\n/**\n * @static\n * @private\n */\nilib.Date._ephemerisCorrection = function(jd) {\n\tvar year = ilib.Date.GregDate._calcYear(jd - 1721424.5);\n\n\tif (1988 <= year && year <= 2019) {\n\t\treturn (year - 1933) / 86400;\n\t}\n\n\tif (1800 <= year && year <= 1987) {\n\t\tvar jul1 = new ilib.Date.GregRataDie({\n\t\t\tyear: year,\n\t\t\tmonth: 7,\n\t\t\tday: 1,\n\t\t\thour: 0,\n\t\t\tminute: 0,\n\t\t\tsecond: 0\n\t\t});\n\t\t// 693596 is the rd of Jan 1, 1900\n\t\tvar theta = (jul1.getRataDie() - 693596) / 36525;\n\t\treturn ilib.Date._poly(theta, (1900 <= year) ? ilib.data.astro._coeff19th : ilib.data.astro._coeff18th);\n\t}\n\n\tif (1620 <= year && year <= 1799) {\n\t\tyear -= 1600;\n\t\treturn (196.58333 - 4.0675 * year + 0.0219167 * year * year) / 86400;\n\t}\n\n\t// 660724 is the rd of Jan 1, 1810\n\tvar jan1 = new ilib.Date.GregRataDie({\n\t\tyear: year,\n\t\tmonth: 1,\n\t\tday: 1,\n\t\thour: 0,\n\t\tminute: 0,\n\t\tsecond: 0\n\t});\n\t// var x = 0.5 + (jan1.getRataDie() - 660724);\n\tvar x = 0.5 + (jan1.getRataDie() - 660724);\n\n\treturn ((x * x / 41048480) - 15) / 86400;\n};\n\n/**\n * @static\n * @private\n */\nilib.Date._ephemerisFromUniversal = function(jd) {\n\treturn jd + ilib.Date._ephemerisCorrection(jd);\n};\n\n/**\n * @static\n * @private\n */\nilib.Date._universalFromEphemeris = function(jd) {\n\treturn jd - ilib.Date._ephemerisCorrection(jd);\n};\n\n/**\n * @static\n * @private\n */\nilib.Date._julianCenturies = function(jd) {\n\t// 2451545.0 is the Julian day of J2000 epoch\n\t// 730119.5 is the Gregorian RD of J2000 epoch\n\t// 36525.0 is the number of days in a Julian century\n\treturn (ilib.Date._ephemerisFromUniversal(jd) - 2451545.0) / 36525.0;\n};\n\n/**\n * Calculate the solar longitude\n *\n * @static\n * @param {number} jd julian day of the date to calculate the longitude for\n * @return {number} the solar longitude in degrees\n */\nilib.Date._solarLongitude = function(jd) {\n\tvar c = ilib.Date._julianCenturies(jd),\n\t\tlongitude = 0,\n\t\tlen = ilib.data.astro._solarLongCoeff.length,\n\t\trow;\n\n\tfor (var i = 0; i < len; i++) {\n\t\tlongitude += ilib.data.astro._solarLongCoeff[i] *\n\t\t\tilib.Date._dsin(ilib.data.astro._solarLongAddends[i] + ilib.data.astro._solarLongMultipliers[i] * c);\n\t}\n\tlongitude *= 5.729577951308232e-06;\n\tlongitude += 282.77718340000001 + 36000.769537439999 * c;\n\tlongitude += ilib.Date._aberration(c) + ilib.Date._nutation2(c);\n\treturn ilib.Date._fixangle(longitude);\n};\n\n/**\n * @static\n * @protected\n * @param {number} jd\n * @return {number}\n */\nilib.Date._lunarLongitude = function (jd) {\n\tvar c = ilib.Date._julianCenturies(jd),\n\t    meanMoon = ilib.Date._fixangle(ilib.Date._poly(c, ilib.data.astro._meanMoonCoeff)),\n\t    elongation = ilib.Date._fixangle(ilib.Date._poly(c, ilib.data.astro._elongationCoeff)),\n\t    solarAnomaly = ilib.Date._fixangle(ilib.Date._poly(c, ilib.data.astro._solarAnomalyCoeff)),\n\t    lunarAnomaly = ilib.Date._fixangle(ilib.Date._poly(c, ilib.data.astro._lunarAnomalyCoeff)),\n\t    moonNode = ilib.Date._fixangle(ilib.Date._poly(c, ilib.data.astro._moonFromNodeCoeff)),\n\t    e = ilib.Date._poly(c, ilib.data.astro._eCoeff);\n\n\tvar sum = 0;\n\tfor (var i = 0; i < ilib.data.astro._lunarElongationLongCoeff.length; i++) {\n\t\tvar x = ilib.data.astro._solarAnomalyLongCoeff[i];\n\n\t\tsum += ilib.data.astro._sineCoeff[i] * Math.pow(e, Math.abs(x)) *\n\t\t\tilib.Date._dsin(ilib.data.astro._lunarElongationLongCoeff[i] * elongation + x * solarAnomaly +\n\t\t\t\tilib.data.astro._lunarAnomalyLongCoeff[i] * lunarAnomaly +\n\t\t\t\tilib.data.astro._moonFromNodeLongCoeff[i] * moonNode);\n\t}\n\tvar longitude = sum / 1000000;\n\tvar venus = 3958.0 / 1000000 * ilib.Date._dsin(119.75 + c * 131.84899999999999);\n\tvar jupiter = 318.0 / 1000000 * ilib.Date._dsin(53.090000000000003 + c * 479264.28999999998);\n\tvar flatEarth = 1962.0 / 1000000 * ilib.Date._dsin(meanMoon - moonNode);\n\n\treturn ilib.Date._fixangle(meanMoon + longitude + venus + jupiter + flatEarth + ilib.Date._nutation2(c));\n};\n\n/**\n * @static\n * @param {number} n\n * @return {number} julian day of the n'th new moon\n */\nilib.Date._newMoonTime = function(n) {\n\tvar k = n - 24724;\n\tvar c = k / 1236.8499999999999;\n\tvar approx = ilib.Date._poly(c, ilib.data.astro._nmApproxCoeff);\n\tvar capE = ilib.Date._poly(c, ilib.data.astro._nmCapECoeff);\n\tvar solarAnomaly = ilib.Date._poly(c, ilib.data.astro._nmSolarAnomalyCoeff);\n\tvar lunarAnomaly = ilib.Date._poly(c, ilib.data.astro._nmLunarAnomalyCoeff);\n\tvar moonArgument = ilib.Date._poly(c, ilib.data.astro._nmMoonArgumentCoeff);\n\tvar capOmega = ilib.Date._poly(c, ilib.data.astro._nmCapOmegaCoeff);\n\tvar correction = -0.00017 * ilib.Date._dsin(capOmega);\n\tfor (var i = 0; i < ilib.data.astro._nmSineCoeff.length; i++) {\n\t\tcorrection = correction + ilib.data.astro._nmSineCoeff[i] * Math.pow(capE, ilib.data.astro._nmEFactor[i]) *\n\t\tilib.Date._dsin(ilib.data.astro._nmSolarCoeff[i] * solarAnomaly +\n\t\t\t\tilib.data.astro._nmLunarCoeff[i] * lunarAnomaly +\n\t\t\t\tilib.data.astro._nmMoonCoeff[i] * moonArgument);\n\t}\n\tvar additional = 0;\n\tfor (var i = 0; i < ilib.data.astro._nmAddConst.length; i++) {\n\t\tadditional = additional + ilib.data.astro._nmAddFactor[i] *\n\t\tilib.Date._dsin(ilib.data.astro._nmAddConst[i] + ilib.data.astro._nmAddCoeff[i] * k);\n\t}\n\tvar extra = 0.000325 * ilib.Date._dsin(ilib.Date._poly(c, ilib.data.astro._nmExtra));\n\treturn ilib.Date._universalFromEphemeris(approx + correction + extra + additional + ilib.Date.RataDie.gregorianEpoch);\n};\n\n/**\n * @static\n * @param {number} jd\n * @return {number}\n */\nilib.Date._lunarSolarAngle = function(jd) {\n\tvar lunar = ilib.Date._lunarLongitude(jd);\n\tvar solar = ilib.Date._solarLongitude(jd)\n\treturn ilib.Date._fixangle(lunar - solar);\n};\n\n/**\n * @static\n * @param {number} jd\n * @return {number}\n */\nilib.Date._newMoonBefore = function (jd) {\n\tvar phase = ilib.Date._lunarSolarAngle(jd);\n\t// 11.450086114414322 is the julian day of the 0th full moon\n\t// 29.530588853000001 is the average length of a month\n\tvar guess = Math.round((jd - 11.450086114414322 - ilib.Date.RataDie.gregorianEpoch) / 29.530588853000001 - phase / 360) - 1;\n\tvar current, last;\n\tcurrent = last = ilib.Date._newMoonTime(guess);\n\twhile (current < jd) {\n\t\tguess++;\n\t\tlast = current;\n\t\tcurrent = ilib.Date._newMoonTime(guess);\n\t}\n\treturn last;\n};\n\n/**\n * @static\n * @param {number} jd\n * @return {number}\n */\nilib.Date._newMoonAtOrAfter = function (jd) {\n\tvar phase = ilib.Date._lunarSolarAngle(jd);\n\t// 11.450086114414322 is the julian day of the 0th full moon\n\t// 29.530588853000001 is the average length of a month\n\tvar guess = Math.round((jd - 11.450086114414322 - ilib.Date.RataDie.gregorianEpoch) / 29.530588853000001 - phase / 360);\n\tvar current;\n\twhile ((current = ilib.Date._newMoonTime(guess)) < jd) {\n\t\tguess++;\n\t}\n\treturn current;\n};\n\n/**\n * @static\n * @param {number} jd JD to calculate from\n * @param {number} longitude longitude to seek\n * @returns {number} the JD of the next time that the solar longitude\n * is a multiple of the given longitude\n */\nilib.Date._nextSolarLongitude = function(jd, longitude) {\n\tvar rate = 365.242189 / 360.0;\n\tvar tau = jd + rate * ilib.Date._fixangle(longitude - ilib.Date._solarLongitude(jd));\n\tvar start = Math.max(jd, tau - 5.0);\n\tvar end = tau + 5.0;\n\n\treturn ilib.bisectionSearch(0, start, end, 1e-6, function (l) {\n\t\treturn 180 - ilib.Date._fixangle(ilib.Date._solarLongitude(l) - longitude);\n\t});\n};\n\n/**\n * Floor the julian day to midnight of the current julian day.\n *\n * @static\n * @protected\n * @param {number} jd the julian to round\n * @return {number} the jd floored to the midnight of the julian day\n */\nilib.Date._floorToJD = function(jd) {\n\treturn Math.floor(jd - 0.5) + 0.5;\n};\n\n/**\n * Floor the julian day to midnight of the current julian day.\n *\n * @static\n * @protected\n * @param {number} jd the julian to round\n * @return {number} the jd floored to the midnight of the julian day\n */\nilib.Date._ceilToJD = function(jd) {\n\treturn Math.ceil(jd + 0.5) - 0.5;\n};\n\n/*\n * persratadie.js - Represent a rata die date in the Persian calendar\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\ndate.js\nutil/utils.js\nutil/math.js\ncalendar/ratadie.js\ncalendar/astro.js\ncalendar/gregoriandate.js\n*/\n\n/**\n * Construct a new Persian RD date number object. The constructor parameters can\n * contain any of the following properties:\n *\n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\n *\n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n *\n * <li><i>year</i> - any integer, including 0\n *\n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\n *\n * <li><i>day</i> - 1 to 31\n *\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n *\n * <li><i>minute</i> - 0 to 59\n *\n * <li><i>second</i> - 0 to 59\n *\n * <li><i>millisecond</i> - 0 to 999\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Persian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above are present, then the RD is calculate based on\n * the current date at the time of instantiation. <p>\n *\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n *\n * Depends directive: !depends persiandate.js\n *\n * @private\n * @class\n * @constructor\n * @extends ilib.Date.RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Persian RD date\n */\nilib.Date.PersAstroRataDie = function(params) {\n\tthis.rd = undefined;\n\tilib.Date.initAstro(\n\t\tparams && typeof(params.sync) === 'boolean' ? params.sync : true,\n\t\tparams && params.loadParams,\n\t\tilib.bind(this, function (x) {\n\t\t\tilib.Date.RataDie.call(this, params);\n\t\t\tif (params && typeof(params.callback) === 'function') {\n\t\t\t\tparams.callback(this);\n\t\t\t}\n\t\t})\n\t);\n};\n\nilib.Date.PersAstroRataDie.prototype = new ilib.Date.RataDie();\nilib.Date.PersAstroRataDie.prototype.parent = ilib.Date.RataDie;\nilib.Date.PersAstroRataDie.prototype.constructor = ilib.Date.PersAstroRataDie;\n\n/**\n * The difference between a zero Julian day and the first Persian date\n * @private\n * @const\n * @type number\n */\nilib.Date.PersAstroRataDie.prototype.epoch = 1948319.5;\n\n/**\n * @protected\n */\nilib.Date.PersAstroRataDie.prototype._tehranEquinox = function(year) {\n    var equJED, equJD, equAPP, equTehran, dtTehran, eot;\n\n    //  March equinox in dynamical time\n    equJED = ilib.Date._equinox(year, 0);\n\n    //  Correct for delta T to obtain Universal time\n    equJD = equJED - (ilib.Date._deltat(year) / (24 * 60 * 60));\n\n    //  Apply the equation of time to yield the apparent time at Greenwich\n    eot = ilib.Date._equationOfTime(equJED) * 360;\n    eot = (eot - 20 * Math.floor(eot/20)) / 360;\n    equAPP = equJD + eot;\n\n    /*\n     * Finally, we must correct for the constant difference between\n     * the Greenwich meridian and the time zone standard for Iran\n     * Standard time, 52 degrees 30 minutes to the East.\n     */\n\n    dtTehran = 52.5 / 360;\n    equTehran = equAPP + dtTehran;\n\n    return equTehran;\n};\n\n/**\n * Calculate the year based on the given Julian day.\n * @protected\n * @param {number} jd the Julian day to get the year for\n * @return {{year:number,equinox:number}} the year and the last equinox\n */\nilib.Date.PersAstroRataDie.prototype._getYear = function(jd) {\n\tvar gd = new ilib.Date.GregDate({julianday: jd});\n    var guess = gd.getYears() - 2,\n    \tnexteq,\n    \tret = {};\n\n    //ret.equinox = Math.floor(this._tehranEquinox(guess));\n    ret.equinox = this._tehranEquinox(guess);\n\twhile (ret.equinox > jd) {\n\t    guess--;\n\t    // ret.equinox = Math.floor(this._tehranEquinox(guess));\n\t    ret.equinox = this._tehranEquinox(guess);\n\t}\n\tnexteq = ret.equinox - 1;\n\t// if the equinox falls after noon, then the day after that is the start of the\n\t// next year, so truncate the JD to get the noon of the day before the day with\n\t//the equinox on it, then add 0.5 to get the midnight of that day\n\twhile (!(Math.floor(ret.equinox) + 0.5 <= jd && jd < Math.floor(nexteq) + 0.5)) {\n\t    ret.equinox = nexteq;\n\t    guess++;\n\t    // nexteq = Math.floor(this._tehranEquinox(guess));\n\t    nexteq = this._tehranEquinox(guess);\n\t}\n\n\t// Mean solar tropical year is 365.24219878 days\n\tret.year = Math.round((ret.equinox - this.epoch - 1) / 365.24219878) + 1;\n\n\treturn ret;\n};\n\n/**\n * Calculate the Rata Die (fixed day) number of the given date from the\n * date components.\n *\n * @protected\n * @param {Object} date the date components to calculate the RD from\n */\nilib.Date.PersAstroRataDie.prototype._setDateComponents = function(date) {\n    var adr, guess, jd;\n\n    // Mean solar tropical year is 365.24219878 days\n    guess = this.epoch + 1 + 365.24219878 * (date.year - 2);\n    adr = {year: date.year - 1, equinox: 0};\n\n    while (adr.year < date.year) {\n        adr = this._getYear(guess);\n        guess = adr.equinox + (365.24219878 + 2);\n    }\n\n    jd = Math.floor(adr.equinox) +\n            ((date.month <= 7) ?\n                ((date.month - 1) * 31) :\n                (((date.month - 1) * 30) + 6)\n            ) +\n    \t    (date.day - 1 + 0.5); // add 0.5 so that we convert JDs, which start at noon to RDs which start at midnight\n\n\tjd += (date.hour * 3600000 +\n\t\t\tdate.minute * 60000 +\n\t\t\tdate.second * 1000 +\n\t\t\tdate.millisecond) /\n\t\t\t86400000;\n\n    this.rd = jd - this.epoch;\n};\n\n/**\n * Return the rd number of the particular day of the week on or before the\n * given rd. eg. The Sunday on or before the given rd.\n * @private\n * @param {number} rd the rata die date of the reference date\n * @param {number} dayOfWeek the day of the week that is being sought relative\n * to the current date\n * @return {number} the rd of the day of the week\n */\nilib.Date.PersAstroRataDie.prototype._onOrBefore = function(rd, dayOfWeek) {\n\treturn rd - ilib.mod(Math.floor(rd) - dayOfWeek - 3, 7);\n};\n\n/*\n * persianastro.js - Represent a Persian astronomical (Hijjri) calendar object.\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/* !depends\ncalendar/astro.js\ncalendar.js\nlocale.js\ndate.js\njulianday.js\nutil/utils.js\ncalendar/persratadie.js\n*/\n\n/**\n * @class\n * Construct a new Persian astronomical (Hijjri) calendar object. This class encodes\n * information about a Persian calendar. This class differs from the\n * Persian calendar in that the leap years are calculated based on the\n * astronomical observations of the sun in Teheran, instead of calculating\n * the leap years based on a regular cyclical rhythm algorithm.<p>\n *\n * Depends directive: !depends persianastro.js\n *\n * @constructor\n * @implements ilib.Cal\n */\nilib.Cal.Persian = function() {\n\tthis.type = \"persian\";\n};\n\n/**\n * @private\n * @const\n * @type Array.<number>\n * the lengths of each month\n */\nilib.Cal.Persian.monthLengths = [\n\t31,  // Farvardin\n\t31,  // Ordibehesht\n\t31,  // Khordad\n\t31,  // Tir\n\t31,  // Mordad\n\t31,  // Shahrivar\n\t30,  // Mehr\n\t30,  // Aban\n\t30,  // Azar\n\t30,  // Dey\n\t30,  // Bahman\n\t29   // Esfand\n];\n\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for some luni-solar calendars because in some years, an extra month is needed to extend the\n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=first month, 2=second month, etc.\n *\n * @param {number} year a year for which the number of months is sought\n * @return {number} The number of months in the given year\n */\nilib.Cal.Persian.prototype.getNumMonths = function(year) {\n\treturn 12;\n};\n\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of things\n * like leap years.\n *\n * @param {number} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @return {number} the number of days within the given month in the given year\n */\nilib.Cal.Persian.prototype.getMonLength = function(month, year) {\n\tif (month !== 12 || !this.isLeapYear(year)) {\n\t\treturn ilib.Cal.Persian.monthLengths[month-1];\n\t} else {\n\t\t// Month 12, Esfand, has 30 days instead of 29 in leap years\n\t\treturn 30;\n\t}\n};\n\n/**\n * Return true if the given year is a leap year in the Persian astronomical calendar.\n * @param {number} year the year for which the leap year information is being sought\n * @return {boolean} true if the given year is a leap year\n */\nilib.Cal.Persian.prototype.isLeapYear = function(year) {\n\tvar rdNextYear = new ilib.Date.PersAstroRataDie({\n\t\tcal: this,\n\t\tyear: year + 1,\n\t\tmonth: 1,\n\t\tday: 1,\n\t\thour: 0,\n\t\tminute: 0,\n\t\tsecond: 0,\n\t\tmillisecond: 0\n\t});\n\tvar rdThisYear = new ilib.Date.PersAstroRataDie({\n\t\tcal: this,\n\t\tyear: year,\n\t\tmonth: 1,\n\t\tday: 1,\n\t\thour: 0,\n\t\tminute: 0,\n\t\tsecond: 0,\n\t\tmillisecond: 0\n\t});\n    return (rdNextYear.getRataDie() - rdThisYear.getRataDie()) > 365;\n};\n\n/**\n * Return the type of this calendar.\n *\n * @return {string} the name of the type of this calendar\n */\nilib.Cal.Persian.prototype.getType = function() {\n\treturn this.type;\n};\n\n/**\n * Return a date instance for this calendar type using the given\n * options.\n * @param {Object} options options controlling the construction of\n * the date instance\n * @return {ilib.Date} a date appropriate for this calendar type\n */\nilib.Cal.Persian.prototype.newDateInstance = function (options) {\n\treturn new ilib.Date.PersDate(options);\n};\n\n/* register this calendar for the factory method */\nilib.Cal._constructors[\"persian\"] = ilib.Cal.Persian;\n\n/*\n * persianastrodate.js - Represent a date in the Persian astronomical (Hijjri) calendar\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\ndate.js\ncalendar/persratadie.js\ncalendar/persianastro.js\nutil/utils.js\nutil/search.js\nutil/math.js\nlocaleinfo.js\njulianday.js\n*/\n\n// !data astro\n\n/**\n * @class\n *\n * Construct a new Persian astronomical date object. The constructor parameters can\n * contain any of the following properties:\n *\n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\n *\n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n *\n * <li><i>year</i> - any integer, including 0\n *\n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\n *\n * <li><i>day</i> - 1 to 31\n *\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n *\n * <li><i>minute</i> - 0 to 59\n *\n * <li><i>second</i> - 0 to 59\n *\n * <li><i>millisecond</i> - 0 to 999\n *\n * <li><i>timezone</i> - the ilib.TimeZone instance or time zone name as a string\n * of this persian date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n *\n * <li><i>locale</i> - locale for this persian date. If the time zone is not\n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that\n * represents the locale.\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Persian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above\n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date\n * components are\n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the\n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich\n * Mean Time\").<p>\n *\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n *\n * Depends directive: !depends persiandate.js\n *\n * @constructor\n * @extends ilib.Date\n * @param {Object=} params parameters that govern the settings and behaviour of this Persian date\n */\nilib.Date.PersDate = function(params) {\n\tthis.cal = new ilib.Cal.Persian();\n\tthis.timezone = \"local\";\n\n\tif (params) {\n\t\tif (params.locale) {\n\t\t\tthis.locale = (typeof(params.locale) === 'string') ? new ilib.Locale(params.locale) : params.locale;\n\t\t\tvar li = new ilib.LocaleInfo(this.locale);\n\t\t\tthis.timezone = li.getTimeZone();\n\t\t}\n\t\tif (params.timezone) {\n\t\t\tthis.timezone = params.timezone;\n\t\t}\n\t}\n\n\tilib.Date.initAstro(\n\t\tparams && typeof(params.sync) === 'boolean' ? params.sync : true,\n\t\tparams && params.loadParams,\n\t\tilib.bind(this, function (x) {\n\t\t\tif (params && (params.year || params.month || params.day || params.hour ||\n\t\t\t\t\tparams.minute || params.second || params.millisecond)) {\n\t\t\t\t/**\n\t\t\t\t * Year in the Persian calendar.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.year = parseInt(params.year, 10) || 0;\n\n\t\t\t\t/**\n\t\t\t\t * The month number, ranging from 1 to 12\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.month = parseInt(params.month, 10) || 1;\n\n\t\t\t\t/**\n\t\t\t\t * The day of the month. This ranges from 1 to 31.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.day = parseInt(params.day, 10) || 1;\n\n\t\t\t\t/**\n\t\t\t\t * The hour of the day. This can be a number from 0 to 23, as times are\n\t\t\t\t * stored unambiguously in the 24-hour clock.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.hour = parseInt(params.hour, 10) || 0;\n\n\t\t\t\t/**\n\t\t\t\t * The minute of the hours. Ranges from 0 to 59.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.minute = parseInt(params.minute, 10) || 0;\n\n\t\t\t\t/**\n\t\t\t\t * The second of the minute. Ranges from 0 to 59.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.second = parseInt(params.second, 10) || 0;\n\n\t\t\t\t/**\n\t\t\t\t * The millisecond of the second. Ranges from 0 to 999.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.millisecond = parseInt(params.millisecond, 10) || 0;\n\n\t\t\t\t/**\n\t\t\t\t * The day of the year. Ranges from 1 to 366.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.dayOfYear = parseInt(params.dayOfYear, 10);\n\n\t\t\t\tif (typeof(params.dst) === 'boolean') {\n\t\t\t\t\tthis.dst = params.dst;\n\t\t\t\t}\n\n\t\t\t\tthis.rd = this.newRd(this);\n\n\t\t\t\t// add the time zone offset to the rd to convert to UTC\n\t\t\t\tif (!this.tz) {\n\t\t\t\t\tthis.tz = new ilib.TimeZone({id: this.timezone});\n\t\t\t\t}\n\t\t\t\t// getOffsetMillis requires that this.year, this.rd, and this.dst\n\t\t\t\t// are set in order to figure out which time zone rules apply and\n\t\t\t\t// what the offset is at that point in the year\n\t\t\t\tthis.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n\t\t\t\tif (this.offset !== 0) {\n\t\t\t\t\tthis.rd = this.newRd({\n\t\t\t\t\t\trd: this.rd.getRataDie() - this.offset\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!this.rd) {\n\t\t\t\tthis.rd = this.newRd(params);\n\t\t\t\tthis._calcDateComponents();\n\t\t\t}\n\n\t\t\tif (params && typeof(params.onLoad) === 'function') {\n\t\t\t\tparams.onLoad(this);\n\t\t\t}\n\t\t})\n\t);\n};\n\nilib.Date.PersDate.prototype = new ilib.Date({noinstance: true});\nilib.Date.PersDate.prototype.parent = ilib.Date;\nilib.Date.PersDate.prototype.constructor = ilib.Date.PersDate;\n\n/**\n * @private\n * @const\n * @type Array.<number>\n * the cumulative lengths of each month, for a non-leap year\n */\nilib.Date.PersDate.cumMonthLengths = [\n    0,    // Farvardin\n\t31,   // Ordibehesht\n\t62,   // Khordad\n\t93,   // Tir\n\t124,  // Mordad\n\t155,  // Shahrivar\n\t186,  // Mehr\n\t216,  // Aban\n\t246,  // Azar\n\t276,  // Dey\n\t306,  // Bahman\n\t336,  // Esfand\n\t366\n];\n\n/**\n * Return a new RD for this date type using the given params.\n * @protected\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {ilib.Date.RataDie} the new RD instance for the given params\n */\nilib.Date.PersDate.prototype.newRd = function (params) {\n\treturn new ilib.Date.PersAstroRataDie(params);\n};\n\n/**\n * Return the year for the given RD\n * @protected\n * @param {number} rd RD to calculate from\n * @returns {number} the year for the RD\n */\nilib.Date.PersDate.prototype._calcYear = function(rd) {\n\tvar julianday = rd + this.rd.epoch;\n\treturn this.rd._getYear(julianday).year;\n};\n\n/**\n * @private\n * Calculate date components for the given RD date.\n */\nilib.Date.PersDate.prototype._calcDateComponents = function () {\n\tvar remainder,\n\t\trd = this.rd.getRataDie();\n\n\tthis.year = this._calcYear(rd);\n\n\tif (typeof(this.offset) === \"undefined\") {\n\t\t// now offset the RD by the time zone, then recalculate in case we were\n\t\t// near the year boundary\n\t\tif (!this.tz) {\n\t\t\tthis.tz = new ilib.TimeZone({id: this.timezone});\n\t\t}\n\t\tthis.offset = this.tz.getOffsetMillis(this) / 86400000;\n\t}\n\n\tif (this.offset !== 0) {\n\t\trd += this.offset;\n\t\tthis.year = this._calcYear(rd);\n\t}\n\n\t//console.log(\"PersDate.calcComponent: calculating for rd \" + rd);\n\t//console.log(\"PersDate.calcComponent: year is \" + ret.year);\n\tvar yearStart = this.newRd({\n\t\tyear: this.year,\n\t\tmonth: 1,\n\t\tday: 1,\n\t\thour: 0,\n\t\tminute: 0,\n\t\tsecond: 0,\n\t\tmillisecond: 0\n\t});\n\tremainder = rd - yearStart.getRataDie() + 1;\n\n\tthis.dayOfYear = remainder;\n\n\t//console.log(\"PersDate.calcComponent: remainder is \" + remainder);\n\n\tthis.month = ilib.bsearch(Math.floor(remainder), ilib.Date.PersDate.cumMonthLengths);\n\tremainder -= ilib.Date.PersDate.cumMonthLengths[this.month-1];\n\n\t//console.log(\"PersDate.calcComponent: month is \" + this.month + \" and remainder is \" + remainder);\n\n\tthis.day = Math.floor(remainder);\n\tremainder -= this.day;\n\n\t//console.log(\"PersDate.calcComponent: day is \" + this.day + \" and remainder is \" + remainder);\n\n\t// now convert to milliseconds for the rest of the calculation\n\tremainder = Math.round(remainder * 86400000);\n\n\tthis.hour = Math.floor(remainder/3600000);\n\tremainder -= this.hour * 3600000;\n\n\tthis.minute = Math.floor(remainder/60000);\n\tremainder -= this.minute * 60000;\n\n\tthis.second = Math.floor(remainder/1000);\n\tremainder -= this.second * 1000;\n\n\tthis.millisecond = remainder;\n};\n\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n *\n * @return {number} the day of the week\n */\nilib.Date.PersDate.prototype.getDayOfWeek = function() {\n\tvar rd = Math.floor(this.getRataDie());\n\treturn ilib.mod(rd-3, 7);\n};\n\n/**\n * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to\n * 365, regardless of months or weeks, etc. That is, Farvardin 1st is day 1, and\n * December 31st is 365 in regular years, or 366 in leap years.\n * @return {number} the ordinal day of the year\n */\nilib.Date.PersDate.prototype.getDayOfYear = function() {\n\treturn ilib.Date.PersDate.cumMonthLengths[this.month-1] + this.day;\n};\n\n/**\n * Return the era for this date as a number. The value for the era for Persian\n * calendars is -1 for \"before the persian era\" (BP) and 1 for \"the persian era\" (anno\n * persico or AP).\n * BP dates are any date before Farvardin 1, 1 AP. In the proleptic Persian calendar,\n * there is a year 0, so any years that are negative or zero are BP.\n * @return {number} 1 if this date is in the common era, -1 if it is before the\n * common era\n */\nilib.Date.PersDate.prototype.getEra = function() {\n\treturn (this.year < 1) ? -1 : 1;\n};\n\n/**\n * Return the name of the calendar that governs this date.\n *\n * @return {string} a string giving the name of the calendar\n */\nilib.Date.PersDate.prototype.getCalendar = function() {\n\treturn \"persian\";\n};\n\n// register with the factory method\nilib.Date._constructors[\"persian\"] = ilib.Date.PersDate;\n/*\n * han.js - Represent a Han Chinese Lunar calendar object.\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends calendar.js locale.js date.js julianday.js util/utils.js util/math.js calendar/astro.js */\n\n/**\n * @class\n * Construct a new Han algorithmic calendar object. This class encodes information about\n * a Han algorithmic calendar.<p>\n *\n * Depends directive: !depends han.js\n *\n * @constructor\n * @param {Object=} params optional parameters to load the calendrical data\n * @implements ilib.Cal\n */\nilib.Cal.Han = function(params) {\n\tthis.type = \"han\";\n\tvar sync = params && typeof(params.sync) === 'boolean' ? params.sync : true;\n\n\tilib.Date.initAstro(sync, params && params.loadParams, /** @type {function ((Object|null)=): ?} */ ilib.bind(this, function (x) {\n\t\tif (params && typeof(params.callback) === 'function') {\n\t\t\tparams.callback(this);\n\t\t}\n\t}));\n};\n\n/**\n * @protected\n * @static\n * @param {number} year\n * @param {number=} cycle\n * @return {number}\n */\nilib.Cal.Han._getElapsedYear = function(year, cycle) {\n\tvar elapsedYear = year || 0;\n\tif (typeof(year) !== 'undefined' && year < 61 && typeof(cycle) !== 'undefined') {\n\t\telapsedYear = 60 * cycle + year;\n\t}\n\treturn elapsedYear;\n};\n\n/**\n * @protected\n * @static\n * @param {number} jd julian day to calculate from\n * @param {number} longitude longitude to seek\n * @returns {number} the julian day of the next time that the solar longitude\n * is a multiple of the given longitude\n */\nilib.Cal.Han._hanNextSolarLongitude = function(jd, longitude) {\n\tvar tz = ilib.Cal.Han._chineseTZ(jd);\n\tvar uni = ilib.Date._universalFromLocal(jd, tz);\n\tvar sol = ilib.Date._nextSolarLongitude(uni, longitude);\n\treturn ilib.Date._localFromUniversal(sol, tz);\n};\n\n/**\n * @protected\n * @static\n * @param {number} jd julian day to calculate from\n * @returns {number} the major solar term for the julian day\n */\nilib.Cal.Han._majorSTOnOrAfter = function(jd) {\n\tvar tz = ilib.Cal.Han._chineseTZ(jd);\n\tvar uni = ilib.Date._universalFromLocal(jd, tz);\n\tvar next = ilib.Date._fixangle(30 * Math.ceil(ilib.Date._solarLongitude(uni)/30));\n\treturn ilib.Cal.Han._hanNextSolarLongitude(jd, next);\n};\n\n/**\n * @protected\n * @static\n * @param {number} year the year for which the leap year information is being sought\n * @param {number=} cycle if the given year < 60, this can specify the cycle. If the\n * cycle is not given, then the year should be given as elapsed years since the beginning\n * of the epoch\n */\nilib.Cal.Han._solsticeBefore = function (year, cycle) {\n\tvar elapsedYear = ilib.Cal.Han._getElapsedYear(year, cycle);\n\tvar gregyear = elapsedYear - 2697;\n\tvar rd = new ilib.Date.GregRataDie({\n\t\tyear: gregyear-1,\n\t\tmonth: 12,\n\t\tday: 15,\n\t\thour: 0,\n\t\tminute: 0,\n\t\tsecond: 0,\n\t\tmillisecond: 0\n\t});\n\treturn ilib.Cal.Han._majorSTOnOrAfter(rd.getRataDie() + ilib.Date.RataDie.gregorianEpoch);\n};\n\n/**\n * @protected\n * @static\n * @param {number} jd julian day to calculate from\n * @returns {number} the current major solar term\n */\nilib.Cal.Han._chineseTZ = function(jd) {\n\tvar year = ilib.Date.GregDate._calcYear(jd - ilib.Date.RataDie.gregorianEpoch);\n\treturn year < 1929 ? 465.6666666666666666 : 480;\n};\n\n/**\n * @protected\n * @static\n * @param {number} jd julian day to calculate from\n * @returns {number} the julian day of next new moon on or after the given julian day date\n */\nilib.Cal.Han._newMoonOnOrAfter = function(jd) {\n\tvar tz = ilib.Cal.Han._chineseTZ(jd);\n\tvar uni = ilib.Date._universalFromLocal(jd, tz);\n\tvar moon = ilib.Date._newMoonAtOrAfter(uni);\n\t// floor to the start of the julian day\n\treturn ilib.Date._floorToJD(ilib.Date._localFromUniversal(moon, tz));\n};\n\n/**\n * @protected\n * @static\n * @param {number} jd julian day to calculate from\n * @returns {number} the julian day of previous new moon before the given julian day date\n */\nilib.Cal.Han._newMoonBefore = function(jd) {\n\tvar tz = ilib.Cal.Han._chineseTZ(jd);\n\tvar uni = ilib.Date._universalFromLocal(jd, tz);\n\tvar moon = ilib.Date._newMoonBefore(uni);\n\t// floor to the start of the julian day\n\treturn ilib.Date._floorToJD(ilib.Date._localFromUniversal(moon, tz));\n};\n\n/**\n * @static\n * @protected\n * @param {number} year the year for which the leap year information is being sought\n * @param {number=} cycle if the given year < 60, this can specify the cycle. If the\n * cycle is not given, then the year should be given as elapsed years since the beginning\n * of the epoch\n */\nilib.Cal.Han._leapYearCalc = function(year, cycle) {\n\tvar ret = {\n\t\telapsedYear: ilib.Cal.Han._getElapsedYear(year, cycle)\n\t};\n\tret.solstice1 = ilib.Cal.Han._solsticeBefore(ret.elapsedYear);\n\tret.solstice2 = ilib.Cal.Han._solsticeBefore(ret.elapsedYear+1);\n\t// ceil to the end of the julian day\n\tret.m1 = ilib.Cal.Han._newMoonOnOrAfter(ilib.Date._ceilToJD(ret.solstice1));\n\tret.m2 = ilib.Cal.Han._newMoonBefore(ilib.Date._ceilToJD(ret.solstice2));\n\n\treturn ret;\n};\n\n/**\n * @protected\n * @static\n * @param {number} jd julian day to calculate from\n * @returns {number} the current major solar term\n */\nilib.Cal.Han._currentMajorST = function(jd) {\n\tvar s = ilib.Date._solarLongitude(ilib.Date._universalFromLocal(jd, ilib.Cal.Han._chineseTZ(jd)));\n\treturn ilib.amod(2 + Math.floor(s/30), 12);\n};\n\n/**\n * @protected\n * @static\n * @param {number} jd julian day to calculate from\n * @returns {boolean} true if there is no major solar term in the same year\n */\nilib.Cal.Han._noMajorST = function(jd) {\n\treturn ilib.Cal.Han._currentMajorST(jd) === ilib.Cal.Han._currentMajorST(ilib.Cal.Han._newMoonOnOrAfter(jd+1));\n};\n\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for some luni-solar calendars because in some years, an extra month is needed to extend the\n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=first month, 2=second month, etc.\n *\n * @param {number} year a year for which the number of months is sought\n * @param {number=} cycle if the given year < 60, this can specify the cycle. If the\n * cycle is not given, then the year should be given as elapsed years since the beginning\n * of the epoch\n * @return {number} The number of months in the given year\n */\nilib.Cal.Han.prototype.getNumMonths = function(year, cycle) {\n\treturn this.isLeapYear(year, cycle) ? 13 : 12;\n};\n\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of things\n * like leap years.\n *\n * @param {number} month the elapsed month for which the length is sought\n * @param {number} year the elapsed year within which that month can be found\n * @return {number} the number of days within the given month in the given year\n */\nilib.Cal.Han.prototype.getMonLength = function(month, year) {\n\t// distance between two new moons in Nanjing China\n\tvar calc = ilib.Cal.Han._leapYearCalc(year);\n\tvar priorNewMoon = ilib.Cal.Han._newMoonOnOrAfter(calc.m1 + month * 29);\n\tvar postNewMoon = ilib.Cal.Han._newMoonOnOrAfter(priorNewMoon + 1);\n\treturn postNewMoon - priorNewMoon;\n};\n\n/**\n * Return the equivalent year in the 2820 year cycle that begins on\n * Far 1, 474. This particular cycle obeys the cycle-of-years formula\n * whereas the others do not specifically. This cycle can be used as\n * a proxy for other years outside of the cycle by shifting them into\n * the cycle.\n * @param {number} year year to find the equivalent cycle year for\n * @returns {number} the equivalent cycle year\n */\nilib.Cal.Han.prototype.equivalentCycleYear = function(year) {\n\tvar y = year - (year >= 0 ? 474 : 473);\n\treturn ilib.mod(y, 2820) + 474;\n};\n\n/**\n * Return true if the given year is a leap year in the Han calendar.\n * If the year is given as a year/cycle combination, then the year should be in the\n * range [1,60] and the given cycle is the cycle in which the year is located. If\n * the year is greater than 60, then\n * it represents the total number of years elapsed in the proleptic calendar since\n * the beginning of the Chinese epoch in on 15 Feb, -2636 (Gregorian). In this\n * case, the cycle parameter is ignored.\n *\n * @param {number} year the year for which the leap year information is being sought\n * @param {number=} cycle if the given year < 60, this can specify the cycle. If the\n * cycle is not given, then the year should be given as elapsed years since the beginning\n * of the epoch\n * @return {boolean} true if the given year is a leap year\n */\nilib.Cal.Han.prototype.isLeapYear = function(year, cycle) {\n\tvar calc = ilib.Cal.Han._leapYearCalc(year, cycle);\n\treturn Math.round((calc.m2 - calc.m1) / 29.530588853000001) === 12;\n};\n\n/**\n * Return the month of the year that is the leap month. If the given year is\n * not a leap year, then this method will return -1.\n *\n * @param {number} year the year for which the leap year information is being sought\n * @param {number=} cycle if the given year < 60, this can specify the cycle. If the\n * cycle is not given, then the year should be given as elapsed years since the beginning\n * of the epoch\n * @return {number} the number of the month that is doubled in this leap year, or -1\n * if this is not a leap year\n */\nilib.Cal.Han.prototype.getLeapMonth = function(year, cycle) {\n\tvar calc = ilib.Cal.Han._leapYearCalc(year, cycle);\n\n\tif (Math.round((calc.m2 - calc.m1) / 29.530588853000001) != 12) {\n\t\treturn -1; // no leap month\n\t}\n\n\t// search between rd1 and rd2 for the first month with no major solar term. That is our leap month.\n\tvar month = 0;\n\tvar m = ilib.Cal.Han._newMoonOnOrAfter(calc.m1+1);\n\twhile (!ilib.Cal.Han._noMajorST(m)) {\n\t\tmonth++;\n\t\tm = ilib.Cal.Han._newMoonOnOrAfter(m+1);\n\t}\n\n\t// return the number of the month that is doubled\n\treturn month;\n};\n\n/**\n * Return the date of Chinese New Years in the given calendar year.\n *\n * @param {number} year the Chinese year for which the new year information is being sought\n * @param {number=} cycle if the given year < 60, this can specify the cycle. If the\n * cycle is not given, then the year should be given as elapsed years since the beginning\n * of the epoch\n * @return {number} the julian day of the beginning of the given year\n */\nilib.Cal.Han.prototype.newYears = function(year, cycle) {\n\tvar calc = ilib.Cal.Han._leapYearCalc(year, cycle);\n\tvar m2 = ilib.Cal.Han._newMoonOnOrAfter(calc.m1+1);\n\tif (Math.round((calc.m2 - calc.m1) / 29.530588853000001) === 12 &&\n\t\t\t(ilib.Cal.Han._noMajorST(calc.m1) || ilib.Cal.Han._noMajorST(m2)) ) {\n\t\treturn ilib.Cal.Han._newMoonOnOrAfter(m2+1);\n\t}\n\treturn m2;\n};\n\n/**\n * Return the type of this calendar.\n *\n * @return {string} the name of the type of this calendar\n */\nilib.Cal.Han.prototype.getType = function() {\n\treturn this.type;\n};\n\n/**\n * Return a date instance for this calendar type using the given\n * options.\n * @param {Object} options options controlling the construction of\n * the date instance\n * @return {ilib.Date} a date appropriate for this calendar type\n */\nilib.Cal.Han.prototype.newDateInstance = function (options) {\n\treturn new ilib.Date.HanDate(options);\n};\n\n/* register this calendar for the factory method */\nilib.Cal._constructors[\"han\"] = ilib.Cal.Han;\n\n/*\n * handate.js - Represent a date in the Han algorithmic calendar\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\ndate.js\ncalendar/gregratadie.js\ncalendar/gregoriandate.js\ncalendar/han.js\ncalendar/astro.js\nutil/utils.js\nutil/search.js\nutil/math.js\nlocaleinfo.js\njulianday.js\n*/\n\n/**\n * Construct a new Han RD date number object. The constructor parameters can\n * contain any of the following properties:\n *\n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\n *\n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n *\n * <li><i>cycle</i> - any integer giving the number of 60-year cycle in which the date is located.\n * If the cycle is not given but the year is, it is assumed that the year parameter is a fictitious\n * linear count of years since the beginning of the epoch, much like other calendars. This linear\n * count is never used. If both the cycle and year are given, the year is wrapped to the range 0\n * to 60 and treated as if it were a year in the regular 60-year cycle.\n *\n * <li><i>year</i> - any integer, including 0\n *\n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\n *\n * <li><i>day</i> - 1 to 31\n *\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n *\n * <li><i>minute</i> - 0 to 59\n *\n * <li><i>second</i> - 0 to 59\n *\n * <li><i>millisecond</i> - 0 to 999\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Han date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above are present, then the RD is calculate based on\n * the current date at the time of instantiation. <p>\n *\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n *\n * Depends directive: !depends handate.js\n *\n * @private\n * @class\n * @constructor\n * @extends ilib.Date.RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Han RD date\n */\nilib.Date.HanRataDie = function(params) {\n\tthis.rd = undefined;\n\tif (params && params.cal) {\n\t\tthis.cal = params.cal;\n\t\tilib.Date.RataDie.call(this, params);\n\t\tif (params && typeof(params.callback) === 'function') {\n\t\t\tparams.callback(this);\n\t\t}\n\t} else {\n\t\tnew ilib.Cal.Han({\n\t\t\tsync: params && params.sync,\n\t\t\tloadParams: params && params.loadParams,\n\t\t\tcallback: ilib.bind(this, function(c) {\n\t\t\t\tthis.cal = c;\n\t\t\t\tilib.Date.RataDie.call(this, params);\n\t\t\t\tif (params && typeof(params.callback) === 'function') {\n\t\t\t\t\tparams.callback(this);\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t}\n};\n\nilib.Date.HanRataDie.prototype = new ilib.Date.RataDie();\nilib.Date.HanRataDie.prototype.parent = ilib.Date.RataDie;\nilib.Date.HanRataDie.prototype.constructor = ilib.Date.HanRataDie;\n\n/**\n * The difference between a zero Julian day and the first Han date\n * which is February 15, -2636 (Gregorian).\n * @private\n * @const\n * @type number\n */\nilib.Date.HanRataDie.epoch = 758325.5;\n\n/**\n * Calculate the Rata Die (fixed day) number of the given date from the\n * date components.\n *\n * @protected\n * @param {Object} date the date components to calculate the RD from\n */\nilib.Date.HanRataDie.prototype._setDateComponents = function(date) {\n\tvar calc = ilib.Cal.Han._leapYearCalc(date.year, date.cycle);\n\tvar m2 = ilib.Cal.Han._newMoonOnOrAfter(calc.m1+1);\n\tvar newYears;\n\tthis.leapYear = (Math.round((calc.m2 - calc.m1) / 29.530588853000001) === 12);\n\tif (this.leapYear && (ilib.Cal.Han._noMajorST(calc.m1) || ilib.Cal.Han._noMajorST(m2)) ) {\n\t\tnewYears = ilib.Cal.Han._newMoonOnOrAfter(m2+1);\n\t} else {\n\t\tnewYears = m2;\n\t}\n\n\tvar priorNewMoon = ilib.Cal.Han._newMoonOnOrAfter(calc.m1 + date.month * 29); // this is a julian day\n\tthis.priorLeapMonth = ilib.Date.HanDate._priorLeapMonth(newYears, ilib.Cal.Han._newMoonBefore(priorNewMoon));\n\tthis.leapMonth = (this.leapYear && ilib.Cal.Han._noMajorST(priorNewMoon) && !this.priorLeapMonth);\n\n\tvar rdtime = (date.hour * 3600000 +\n\t\tdate.minute * 60000 +\n\t\tdate.second * 1000 +\n\t\tdate.millisecond) /\n\t\t86400000;\n\n\t/*\n\tconsole.log(\"getRataDie: converting \" +  JSON.stringify(date) + \" to an RD\");\n\tconsole.log(\"getRataDie: year is \" +  date.year + \" plus cycle \" + date.cycle);\n\tconsole.log(\"getRataDie: isLeapYear is \" +  this.leapYear);\n\tconsole.log(\"getRataDie: priorNewMoon is \" +  priorNewMoon);\n\tconsole.log(\"getRataDie: day in month is \" +  date.day);\n\tconsole.log(\"getRataDie: rdtime is \" +  rdtime);\n\tconsole.log(\"getRataDie: rd is \" +  (priorNewMoon + date.day - 1 + rdtime));\n\t*/\n\n\tthis.rd = priorNewMoon + date.day - 1 + rdtime - ilib.Date.RataDie.gregorianEpoch;\n};\n\n/**\n * Return the rd number of the particular day of the week on or before the\n * given rd. eg. The Sunday on or before the given rd.\n * @private\n * @param {number} rd the rata die date of the reference date\n * @param {number} dayOfWeek the day of the week that is being sought relative\n * to the current date\n * @return {number} the rd of the day of the week\n */\nilib.Date.HanRataDie.prototype._onOrBefore = function(rd, dayOfWeek) {\n\treturn rd - ilib.mod(Math.floor(rd) - dayOfWeek, 7);\n};\n\n/**\n * @class\n *\n * Construct a new Han date object. The constructor parameters can\n * contain any of the following properties:\n *\n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\n *\n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n *\n * <li><i>cycle</i> - any integer giving the number of 60-year cycle in which the date is located.\n * If the cycle is not given but the year is, it is assumed that the year parameter is a fictitious\n * linear count of years since the beginning of the epoch, much like other calendars. This linear\n * count is never used. If both the cycle and year are given, the year is wrapped to the range 0\n * to 60 and treated as if it were a year in the regular 60-year cycle.\n *\n * <li><i>year</i> - any integer, including 0\n *\n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\n *\n * <li><i>day</i> - 1 to 31\n *\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n *\n * <li><i>minute</i> - 0 to 59\n *\n * <li><i>second</i> - 0 to 59\n *\n * <li><i>millisecond</i> - 0 to 999\n *\n * <li><i>timezone</i> - the ilib.TimeZone instance or time zone name as a string\n * of this han date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n *\n * <li><i>locale</i> - locale for this han date. If the time zone is not\n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that\n * represents the locale.\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Han date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above\n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date\n * components are\n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the\n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich\n * Mean Time\").<p>\n *\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n *\n * Depends directive: !depends handate.js\n *\n * @constructor\n * @extends ilib.Date\n * @param {Object=} params parameters that govern the settings and behaviour of this Han date\n */\nilib.Date.HanDate = function(params) {\n\tthis.timezone = \"local\";\n\tif (params) {\n\t\tif (params.locale) {\n\t\t\tthis.locale = (typeof(params.locale) === 'string') ? new ilib.Locale(params.locale) : params.locale;\n\t\t\tvar li = new ilib.LocaleInfo(this.locale);\n\t\t\tthis.timezone = li.getTimeZone();\n\t\t}\n\t\tif (params.timezone) {\n\t\t\tthis.timezone = params.timezone;\n\t\t}\n\t}\n\n\tnew ilib.Cal.Han({\n\t\tsync: params && typeof(params) === 'boolean' ? params.sync : true,\n\t\tloadParams: params && params.loadParams,\n\t\tcallback: ilib.bind(this, function (cal) {\n\t\t\tthis.cal = cal;\n\n\t\t\tif (params && (params.year || params.month || params.day || params.hour ||\n\t\t\t\tparams.minute || params.second || params.millisecond || params.cycle || params.cycleYear)) {\n\t\t\t\tif (typeof(params.cycle) !== 'undefined') {\n\t\t\t\t\t/**\n\t\t\t\t\t * Cycle number in the Han calendar.\n\t\t\t\t\t * @type number\n\t\t\t\t\t */\n\t\t\t\t\tthis.cycle = parseInt(params.cycle, 10) || 0;\n\n\t\t\t\t\tvar year = (typeof(params.year) !== 'undefined' ? parseInt(params.year, 10) : parseInt(params.cycleYear, 10)) || 0;\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Year in the Han calendar.\n\t\t\t\t\t * @type number\n\t\t\t\t\t */\n\t\t\t\t\tthis.year = ilib.Cal.Han._getElapsedYear(year, this.cycle);\n\t\t\t\t} else {\n\t\t\t\t\tif (typeof(params.year) !== 'undefined') {\n\t\t\t\t\t\tthis.year = parseInt(params.year, 10) || 0;\n\t\t\t\t\t\tthis.cycle = Math.floor((this.year - 1) / 60);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.year = this.cycle = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * The month number, ranging from 1 to 13\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.month = parseInt(params.month, 10) || 1;\n\n\t\t\t\t/**\n\t\t\t\t * The day of the month. This ranges from 1 to 30.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.day = parseInt(params.day, 10) || 1;\n\n\t\t\t\t/**\n\t\t\t\t * The hour of the day. This can be a number from 0 to 23, as times are\n\t\t\t\t * stored unambiguously in the 24-hour clock.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.hour = parseInt(params.hour, 10) || 0;\n\n\t\t\t\t/**\n\t\t\t\t * The minute of the hours. Ranges from 0 to 59.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.minute = parseInt(params.minute, 10) || 0;\n\n\t\t\t\t/**\n\t\t\t\t * The second of the minute. Ranges from 0 to 59.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.second = parseInt(params.second, 10) || 0;\n\n\t\t\t\t/**\n\t\t\t\t * The millisecond of the second. Ranges from 0 to 999.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.millisecond = parseInt(params.millisecond, 10) || 0;\n\n\t\t\t\t// derived properties\n\n\t\t\t\t/**\n\t\t\t\t * Year in the cycle of the Han calendar\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.cycleYear = ilib.amod(this.year, 60);\n\n\t\t\t\t/**\n\t\t\t\t * The day of the year. Ranges from 1 to 384.\n\t\t\t\t * @type number\n\t\t\t\t */\n\t\t\t\tthis.dayOfYear = parseInt(params.dayOfYear, 10);\n\n\t\t\t\tif (typeof(params.dst) === 'boolean') {\n\t\t\t\t\tthis.dst = params.dst;\n\t\t\t\t}\n\n\t\t\t\tthis.newRd({\n\t\t\t\t\tcal: this.cal,\n\t\t\t\t\tcycle: this.cycle,\n\t\t\t\t\tyear: this.year,\n\t\t\t\t\tmonth: this.month,\n\t\t\t\t\tday: this.day,\n\t\t\t\t\thour: this.hour,\n\t\t\t\t\tminute: this.minute,\n\t\t\t\t\tsecond: this.second,\n\t\t\t\t\tmillisecond: this.millisecond,\n\t\t\t\t\tsync: params && typeof(params.sync) === 'boolean' ? params.sync : true,\n\t\t\t\t\tloadParams: params && params.loadParams,\n\t\t\t\t\tcallback: ilib.bind(this, function (rd) {\n\t\t\t\t\t\tif (rd) {\n\t\t\t\t\t\t\tthis.rd = rd;\n\n\t\t\t\t\t\t\t// add the time zone offset to the rd to convert to UTC\n\t\t\t\t\t\t\tif (!this.tz) {\n\t\t\t\t\t\t\t\tthis.tz = new ilib.TimeZone({id: this.timezone});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// getOffsetMillis requires that this.year, this.rd, and this.dst\n\t\t\t\t\t\t\t// are set in order to figure out which time zone rules apply and\n\t\t\t\t\t\t\t// what the offset is at that point in the year\n\t\t\t\t\t\t\tthis.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n\t\t\t\t\t\t\tif (this.offset !== 0) {\n\t\t\t\t\t\t\t\tthis.rd = this.newRd({\n\t\t\t\t\t\t\t\t\tcal: this.cal,\n\t\t\t\t\t\t\t\t\trd: this.rd.getRataDie() - this.offset\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tthis._calcLeap();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// re-use the derived properties from the RD calculations\n\t\t\t\t\t\t\t\tthis.leapMonth = this.rd.leapMonth;\n\t\t\t\t\t\t\t\tthis.priorLeapMonth = this.rd.priorLeapMonth;\n\t\t\t\t\t\t\t\tthis.leapYear = this.rd.leapYear;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!this.rd) {\n\t\t\t\t\t\t\tthis.rd = this.newRd(ilib.merge(params || {}, {\n\t\t\t\t\t\t\t\tcal: this.cal\n\t\t\t\t\t\t\t}));\n\t\t\t\t\t\t\tthis._calcDateComponents();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (params && typeof(params.onLoad) === 'function') {\n\t\t\t\t\t\t\tparams.onLoad(this);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (!this.rd) {\n\t\t\t\t\tthis.rd = this.newRd(ilib.merge(params || {}, {\n\t\t\t\t\t\tcal: this.cal\n\t\t\t\t\t}));\n\t\t\t\t\tthis._calcDateComponents();\n\t\t\t\t}\n\n\t\t\t\tif (params && typeof(params.onLoad) === 'function') {\n\t\t\t\t\tparams.onLoad(this);\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t});\n\n};\n\nilib.Date.HanDate.prototype = new ilib.Date({noinstance: true});\nilib.Date.HanDate.prototype.parent = ilib.Date;\nilib.Date.HanDate.prototype.constructor = ilib.Date.HanDate;\n\n/**\n * Return a new RD for this date type using the given params.\n * @protected\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {ilib.Date.RataDie} the new RD instance for the given params\n */\nilib.Date.HanDate.prototype.newRd = function (params) {\n\treturn new ilib.Date.HanRataDie(params);\n};\n\n/**\n * @protected\n * @static\n * @param {number} jd1 first julian day\n * @param {number} jd2 second julian day\n * @returns {boolean} true if there is a leap month earlier in the same year\n * as the given months\n */\nilib.Date.HanDate._priorLeapMonth = function(jd1, jd2) {\n\treturn jd2 >= jd1 &&\n\t\t(ilib.Date.HanDate._priorLeapMonth(jd1, ilib.Cal.Han._newMoonBefore(jd2)) ||\n\t\t\t\tilib.Cal.Han._noMajorST(jd2));\n};\n\n/**\n * Return the year for the given RD\n * @protected\n * @param {number} rd RD to calculate from\n * @returns {number} the year for the RD\n */\nilib.Date.HanDate.prototype._calcYear = function(rd) {\n\tvar gregdate = new ilib.Date.GregDate({\n\t\trd: rd,\n\t\ttimezone: this.timezone\n\t});\n\tvar hanyear = gregdate.year + 2697;\n\tvar newYears = this.cal.newYears(hanyear);\n\treturn hanyear - ((rd + ilib.Date.RataDie.gregorianEpoch < newYears) ? 1 : 0);\n};\n\n/**\n * @private\n * Calculate the leap year and months from the RD.\n */\nilib.Date.HanDate.prototype._calcLeap = function() {\n\tvar jd = this.rd.getRataDie() + ilib.Date.RataDie.gregorianEpoch;\n\n\tvar calc = ilib.Cal.Han._leapYearCalc(this.year);\n\tvar m2 = ilib.Cal.Han._newMoonOnOrAfter(calc.m1+1);\n\tthis.leapYear = Math.round((calc.m2 - calc.m1) / 29.530588853000001) === 12;\n\n\tvar newYears = (this.leapYear &&\n\t\t(ilib.Cal.Han._noMajorST(calc.m1) || ilib.Cal.Han._noMajorST(m2))) ?\n\t\t\t\tilib.Cal.Han._newMoonOnOrAfter(m2+1) : m2;\n\n\tvar m = ilib.Cal.Han._newMoonBefore(jd + 1);\n\tthis.priorLeapMonth = ilib.Date.HanDate._priorLeapMonth(newYears, ilib.Cal.Han._newMoonBefore(m));\n\tthis.leapMonth = (this.leapYear && ilib.Cal.Han._noMajorST(m) && !this.priorLeapMonth);\n};\n\n/**\n * @private\n * Calculate date components for the given RD date.\n */\nilib.Date.HanDate.prototype._calcDateComponents = function () {\n\tvar remainder,\n\t\tjd = this.rd.getRataDie() + ilib.Date.RataDie.gregorianEpoch;\n\n\t// console.log(\"HanDate._calcDateComponents: calculating for jd \" + jd);\n\n\tif (typeof(this.offset) === \"undefined\") {\n\t\t// now offset the jd by the time zone, then recalculate in case we were\n\t\t// near the year boundary\n\t\tif (!this.tz) {\n\t\t\tthis.tz = new ilib.TimeZone({id: this.timezone});\n\t\t}\n\t\tthis.offset = this.tz.getOffsetMillis(this) / 86400000;\n\t}\n\n\tif (this.offset !== 0) {\n\t\tjd += this.offset;\n\t}\n\n\t// use the Gregorian calendar objects as a convenient way to short-cut some\n\t// of the date calculations\n\n\tvar gregyear = ilib.Date.GregDate._calcYear(this.rd.getRataDie());\n\tthis.year = gregyear + 2697;\n\tvar calc = ilib.Cal.Han._leapYearCalc(this.year);\n\tvar m2 = ilib.Cal.Han._newMoonOnOrAfter(calc.m1+1);\n\tthis.leapYear = Math.round((calc.m2 - calc.m1) / 29.530588853000001) === 12;\n\tvar newYears = (this.leapYear &&\n\t\t(ilib.Cal.Han._noMajorST(calc.m1) || ilib.Cal.Han._noMajorST(m2))) ?\n\t\t\t\tilib.Cal.Han._newMoonOnOrAfter(m2+1) : m2;\n\n\t// See if it's between Jan 1 and the Chinese new years of that Gregorian year. If\n\t// so, then the Han year is actually the previous one\n\tif (jd < newYears) {\n\t\tthis.year--;\n\t\tcalc = ilib.Cal.Han._leapYearCalc(this.year);\n\t\tm2 = ilib.Cal.Han._newMoonOnOrAfter(calc.m1+1);\n\t\tthis.leapYear = Math.round((calc.m2 - calc.m1) / 29.530588853000001) === 12;\n\t\tnewYears = (this.leapYear &&\n\t\t\t(ilib.Cal.Han._noMajorST(calc.m1) || ilib.Cal.Han._noMajorST(m2))) ?\n\t\t\t\t\tilib.Cal.Han._newMoonOnOrAfter(m2+1) : m2;\n\t}\n\t// month is elapsed month, not the month number + leap month boolean\n\tvar m = ilib.Cal.Han._newMoonBefore(jd + 1);\n\tthis.month = Math.round((m - calc.m1) / 29.530588853000001);\n\n\tthis.priorLeapMonth = ilib.Date.HanDate._priorLeapMonth(newYears, ilib.Cal.Han._newMoonBefore(m));\n\tthis.leapMonth = (this.leapYear && ilib.Cal.Han._noMajorST(m) && !this.priorLeapMonth);\n\n\tthis.cycle = Math.floor((this.year - 1) / 60);\n\tthis.cycleYear = ilib.amod(this.year, 60);\n\tthis.day = ilib.Date._floorToJD(jd) - m + 1;\n\n\t/*\n\tconsole.log(\"HanDate._calcDateComponents: year is \" + this.year);\n\tconsole.log(\"HanDate._calcDateComponents: isLeapYear is \" + this.leapYear);\n\tconsole.log(\"HanDate._calcDateComponents: cycle is \" + this.cycle);\n\tconsole.log(\"HanDate._calcDateComponents: cycleYear is \" + this.cycleYear);\n\tconsole.log(\"HanDate._calcDateComponents: month is \" + this.month);\n\tconsole.log(\"HanDate._calcDateComponents: isLeapMonth is \" + this.leapMonth);\n\tconsole.log(\"HanDate._calcDateComponents: day is \" + this.day);\n\t*/\n\n\t// floor to the start of the julian day\n\tremainder = jd - ilib.Date._floorToJD(jd);\n\n\t// console.log(\"HanDate._calcDateComponents: time remainder is \" + remainder);\n\n\t// now convert to milliseconds for the rest of the calculation\n\tremainder = Math.round(remainder * 86400000);\n\n\tthis.hour = Math.floor(remainder/3600000);\n\tremainder -= this.hour * 3600000;\n\n\tthis.minute = Math.floor(remainder/60000);\n\tremainder -= this.minute * 60000;\n\n\tthis.second = Math.floor(remainder/1000);\n\tremainder -= this.second * 1000;\n\n\tthis.millisecond = remainder;\n};\n\n/**\n * Return the year within the Chinese cycle of this date. Cycles are 60\n * years long, and the value returned from this method is the number of the year\n * within this cycle. The year returned from getYear() is the total elapsed\n * years since the beginning of the Chinese epoch and does not include\n * the cycles.\n *\n * @return {number} the year within the current Chinese cycle\n */\nilib.Date.HanDate.prototype.getCycleYears = function() {\n\treturn this.cycleYear;\n};\n\n/**\n * Return the Chinese cycle number of this date. Cycles are 60 years long,\n * and the value returned from getCycleYear() is the number of the year\n * within this cycle. The year returned from getYear() is the total elapsed\n * years since the beginning of the Chinese epoch and does not include\n * the cycles.\n *\n * @return {number} the current Chinese cycle\n */\nilib.Date.HanDate.prototype.getCycles = function() {\n\treturn this.cycle;\n};\n\n/**\n * Return whether the year of this date is a leap year in the Chinese Han\n * calendar.\n *\n * @return {boolean} true if the year of this date is a leap year in the\n * Chinese Han calendar.\n */\nilib.Date.HanDate.prototype.isLeapYear = function() {\n\treturn this.leapYear;\n};\n\n/**\n * Return whether the month of this date is a leap month in the Chinese Han\n * calendar.\n *\n * @return {boolean} true if the month of this date is a leap month in the\n * Chinese Han calendar.\n */\nilib.Date.HanDate.prototype.isLeapMonth = function() {\n\treturn this.leapMonth;\n};\n\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n *\n * @return {number} the day of the week\n */\nilib.Date.HanDate.prototype.getDayOfWeek = function() {\n\tvar rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\n\treturn ilib.mod(rd, 7);\n};\n\n/**\n * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to\n * 365, regardless of months or weeks, etc. That is, Farvardin 1st is day 1, and\n * December 31st is 365 in regular years, or 366 in leap years.\n * @return {number} the ordinal day of the year\n */\nilib.Date.HanDate.prototype.getDayOfYear = function() {\n\tvar newYears = this.cal.newYears(this.year);\n\tvar priorNewMoon = ilib.Cal.Han._newMoonOnOrAfter(newYears + (this.month -1) * 29);\n\treturn priorNewMoon - newYears + this.day;\n};\n\n/**\n * Return the era for this date as a number. The value for the era for Han\n * calendars is -1 for \"before the han era\" (BP) and 1 for \"the han era\" (anno\n * persico or AP).\n * BP dates are any date before Farvardin 1, 1 AP. In the proleptic Han calendar,\n * there is a year 0, so any years that are negative or zero are BP.\n * @return {number} 1 if this date is in the common era, -1 if it is before the\n * common era\n */\nilib.Date.HanDate.prototype.getEra = function() {\n\treturn (this.year < 1) ? -1 : 1;\n};\n\n/**\n * Return the name of the calendar that governs this date.\n *\n * @return {string} a string giving the name of the calendar\n */\nilib.Date.HanDate.prototype.getCalendar = function() {\n\treturn \"han\";\n};\n\n// register with the factory method\nilib.Date._constructors[\"han\"] = ilib.Date.HanDate;\n/*\n * ethiopic.js - Represent a Ethiopic calendar object.\n *\n * Copyright © 2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/* !depends calendar.js locale.js date.js julianday.js util/utils.js util/math.js */\n\n/**\n * @class\n * Construct a new Ethiopic calendar object. This class encodes information about\n * a Ethiopic calendar.<p>\n *\n * Depends directive: !depends ethiopic.js\n *\n * @constructor\n * @implements ilib.Cal\n */\nilib.Cal.Ethiopic = function() {\n\tthis.type = \"ethiopic\";\n};\n\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for lunar calendars because in some years, an extra month is needed to extend the\n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=Maskaram, 2=Teqemt, etc. until 13=Paguemen.\n *\n * @param {number} year a year for which the number of months is sought\n */\nilib.Cal.Ethiopic.prototype.getNumMonths = function(year) {\n\treturn 13;\n};\n\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of things\n * like leap years.\n<<<<<<< HEAD\n *\n * @param {number|string} month the month for which the length is sought\n=======\n *\n * @param {number} month the month for which the length is sought\n>>>>>>> 2.6.0-dev\n * @param {number} year the year within which that month can be found\n * @return {number} the number of days within the given month in the given year\n */\nilib.Cal.Ethiopic.prototype.getMonLength = function(month, year) {\n\tvar m = month;\n\tswitch (typeof(m)) {\n        case \"string\":\n            m = parseInt(m, 10);\n            break;\n        case \"function\":\n        case \"object\":\n        case \"undefined\":\n            return 30;\n            break;\n    }\n\tif (m < 13) {\n\t\treturn 30;\n\t} else {\n\t\treturn this.isLeapYear(year) ? 6 : 5;\n\t}\n};\n\n/**\n * Return true if the given year is a leap year in the Ethiopic calendar.\n * The year parameter may be given as a number, or as a JulDate object.\n * @param {number|ilib.Date.JulDate|string} year the year for which the leap year information is being sought\n * @return {boolean} true if the given year is a leap year\n */\nilib.Cal.Ethiopic.prototype.isLeapYear = function(year) {\n\tvar y = year;\n\t switch (typeof(y)) {\n        case \"string\":\n            y = parseInt(y, 10);\n            break;\n        case \"object\":\n            if (typeof(y.year) !== \"number\") { // in case it is an ilib.Date object\n                return false;\n            }\n            y = y.year;\n            break;\n        case \"function\":\n        case \"undefined\":\n            return false;\n            break;\n    }\n\treturn ilib.mod(y, 4) === 3;\n};\n\n/**\n * Return the type of this calendar.\n *\n * @return {string} the name of the type of this calendar\n */\nilib.Cal.Ethiopic.prototype.getType = function() {\n\treturn this.type;\n};\n\n/**\n * Return a date instance for this calendar type using the given\n * options.\n * @param {Object} options options controlling the construction of\n * the date instance\n * @return {ilib.Date} a date appropriate for this calendar type\n */\nilib.Cal.Ethiopic.prototype.newDateInstance = function (options) {\n\treturn new ilib.Date.EthiopicDate(options);\n};\n\n/* register this calendar for the factory method */\nilib.Cal._constructors[\"ethiopic\"] = ilib.Cal.Ethiopic;\n/*\n * ethiopicdate.js - Represent a date in the Ethiopic calendar\n *\n * Copyright © 2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\ndate.js\ncalendar/ethiopic.js\nutil/utils.js\nutil/search.js\nutil/math.js\nlocaleinfo.js\njulianday.js\n*/\n\n/**\n * @class\n * Construct a new Ethiopic RD date number object. The constructor parameters can\n * contain any of the following properties:\n *\n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n *\n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n *\n * <li><i>year</i> - any integer, including 0\n *\n * <li><i>month</i> - 1 to 12, where 1 means Maskaram, 2 means Teqemt, etc., and 13 means Paguemen\n *\n * <li><i>day</i> - 1 to 30\n *\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n *\n * <li><i>minute</i> - 0 to 59\n *\n * <li><i>second</i> - 0 to 59\n *\n * <li><i>millisecond</i> - 0 to 999\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Ethiopic date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above are present, then the RD is calculate based on\n * the current date at the time of instantiation. <p>\n *\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n *\n * Depends directive: !depends ethiopicdate.js\n *\n * @private\n * @constructor\n * @extends ilib.Date.RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Ethiopic RD date\n */\nilib.Date.EthiopicRataDie = function(params) {\n\tthis.cal = params && params.cal || new ilib.Cal.Ethiopic();\n\tthis.rd = undefined;\n\tilib.Date.RataDie.call(this, params);\n};\n\nilib.Date.EthiopicRataDie.prototype = new ilib.Date.RataDie();\nilib.Date.EthiopicRataDie.prototype.parent = ilib.Date.RataDie;\nilib.Date.EthiopicRataDie.prototype.constructor = ilib.Date.EthiopicRataDie;\n\n/**\n * The difference between the zero Julian day and the first Ethiopic date\n * of Friday, August 29, 8 CE Julian at 6:00am UTC.<p>\n *\n * See <a href=\"http://us.wow.com/wiki/Time_in_Ethiopia?s_chn=90&s_pt=aolsem&v_t=aolsem\"\n * Time in Ethiopia</a> for information about how time is handled in Ethiopia.\n *\n * @protected\n * @type number\n */\nilib.Date.EthiopicRataDie.prototype.epoch = 1724219.75;\n\n/**\n * Calculate the Rata Die (fixed day) number of the given date from the\n * date components.\n *\n * @protected\n * @param {Object} date the date components to calculate the RD from\n */\nilib.Date.EthiopicRataDie.prototype._setDateComponents = function(date) {\n\tvar year = date.year;\n\tvar years = 365 * (year - 1) + Math.floor(year/4);\n\tvar dayInYear = (date.month-1) * 30 + date.day;\n\tvar rdtime = (date.hour * 3600000 +\n\t\tdate.minute * 60000 +\n\t\tdate.second * 1000 +\n\t\tdate.millisecond) /\n\t\t86400000;\n\n\t/*\n\tconsole.log(\"calcRataDie: converting \" +  JSON.stringify(parts));\n\tconsole.log(\"getRataDie: year is \" +  years);\n\tconsole.log(\"getRataDie: day in year is \" +  dayInYear);\n\tconsole.log(\"getRataDie: rdtime is \" +  rdtime);\n\tconsole.log(\"getRataDie: rd is \" +  (years + dayInYear + rdtime));\n\t*/\n\n\tthis.rd = years + dayInYear + rdtime;\n};\n\n/**\n * @class\n * Construct a new date object for the Ethiopic Calendar. The constructor can be called\n * with a parameter object that contains any of the following properties:\n *\n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970 (Gregorian).\n * <li><i>julianday</i> - the Julian Day to set into this date\n * <li><i>year</i> - any integer\n * <li><i>month</i> - 1 to 13, where 1 means Maskaram, 2 means Teqemt, etc., and 13 means Paguemen\n * <li><i>day</i> - 1 to 30\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n * <li><i>minute</i> - 0 to 59\n * <li><i>second</i> - 0 to 59\n * <li><i>millisecond<i> - 0 to 999\n * <li><i>locale</i> - the ilib.TimeZone instance or time zone name as a string\n * of this ethiopic date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * <li><i>timezone</i> - the time zone of this instance. If the time zone is not\n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that\n * represents the locale.\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If called with another Ethiopic date argument, the date components of the given\n * date are copied into the current one.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above\n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date\n * components are\n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the\n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich\n * Mean Time\").<p>\n *\n * Depends directive: !depends ethiopicdate.js\n *\n * @constructor\n * @extends ilib.Date\n * @param {Object=} params parameters that govern the settings and behaviour of this Ethiopic date\n */\nilib.Date.EthiopicDate = function(params) {\n\tthis.cal = new ilib.Cal.Ethiopic();\n\n\tif (params) {\n\t\tif (typeof(params.noinstance) === 'boolean' && params.noinstance) {\n\t\t\t// for doing inheritance, so don't need to fill in the data. The inheriting class only wants the methods.\n\t\t\treturn;\n\t\t}\n\t\tif (params.locale) {\n\t\t\tthis.locale = (typeof(params.locale) === 'string') ? new ilib.Locale(params.locale) : params.locale;\n\t\t\tvar li = new ilib.LocaleInfo(this.locale);\n\t\t\tthis.timezone = li.getTimeZone();\n\t\t}\n\t\tif (params.timezone) {\n\t\t\tthis.timezone = params.timezone;\n\t\t}\n\n\t\tif (params.year || params.month || params.day || params.hour ||\n\t\t\t\tparams.minute || params.second || params.millisecond ) {\n\t\t\t/**\n\t\t\t * Year in the Ethiopic calendar.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.year = parseInt(params.year, 10) || 0;\n\t\t\t/**\n\t\t\t * The month number, ranging from 1 (Maskaram) to 13 (Paguemen).\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.month = parseInt(params.month, 10) || 1;\n\t\t\t/**\n\t\t\t * The day of the month. This ranges from 1 to 30.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.day = parseInt(params.day, 10) || 1;\n\t\t\t/**\n\t\t\t * The hour of the day. This can be a number from 0 to 23, as times are\n\t\t\t * stored unambiguously in the 24-hour clock.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.hour = parseInt(params.hour, 10) || 0;\n\t\t\t/**\n\t\t\t * The minute of the hours. Ranges from 0 to 59.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.minute = parseInt(params.minute, 10) || 0;\n\t\t\t/**\n\t\t\t * The second of the minute. Ranges from 0 to 59.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.second = parseInt(params.second, 10) || 0;\n\t\t\t/**\n\t\t\t * The millisecond of the second. Ranges from 0 to 999.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.millisecond = parseInt(params.millisecond, 10) || 0;\n\n\t\t\t/**\n\t\t\t * The day of the year. Ranges from 1 to 366.\n\t\t\t * @type number\n\t\t\t */\n\t\t\tthis.dayOfYear = parseInt(params.dayOfYear, 10);\n\n\t\t\tif (typeof(params.dst) === 'boolean') {\n\t\t\t\tthis.dst = params.dst;\n\t\t\t}\n\n\t\t\tthis.rd = this.newRd(this);\n\n\t\t\t// add the time zone offset to the rd to convert to UTC\n\t\t\tif (!this.tz) {\n\t\t\t\tthis.tz = new ilib.TimeZone({id: this.timezone});\n\t\t\t}\n\t\t\t// getOffsetMillis requires that this.year, this.rd, and this.dst\n\t\t\t// are set in order to figure out which time zone rules apply and\n\t\t\t// what the offset is at that point in the year\n\t\t\tthis.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n\t\t\tif (this.offset !== 0) {\n\t\t\t\tthis.rd = this.newRd({\n\t\t\t\t\trd: this.rd.getRataDie() - this.offset\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this.rd) {\n\t\tthis.rd = this.newRd(params);\n\t\tthis._calcDateComponents();\n\t}\n};\n\nilib.Date.EthiopicDate.prototype = new ilib.Date({ noinstance: true });\nilib.Date.EthiopicDate.prototype.parent = ilib.Date;\nilib.Date.EthiopicDate.prototype.constructor = ilib.Date.EthiopicDate;\n\n/**\n * Return a new RD for this date type using the given params.\n * @protected\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {ilib.Date.RataDie} the new RD instance for the given params\n */\nilib.Date.EthiopicDate.prototype.newRd = function (params) {\n\treturn new ilib.Date.EthiopicRataDie(params);\n};\n\n/**\n * Return the year for the given RD\n * @protected\n * @param {number} rd RD to calculate from\n * @returns {number} the year for the RD\n */\nilib.Date.EthiopicDate.prototype._calcYear = function(rd) {\n\tvar year = Math.floor((4*(Math.floor(rd)-1) + 1463)/1461);\n\n\treturn year;\n};\n\n/**\n * Calculate date components for the given RD date.\n * @protected\n */\nilib.Date.EthiopicDate.prototype._calcDateComponents = function () {\n\tvar remainder,\n\t\tcumulative,\n\t\trd = this.rd.getRataDie();\n\n\tthis.year = this._calcYear(rd);\n\n\tif (typeof(this.offset) === \"undefined\") {\n\t\tthis.year = this._calcYear(rd);\n\n\t\t// now offset the RD by the time zone, then recalculate in case we were\n\t\t// near the year boundary\n\t\tif (!this.tz) {\n\t\t\tthis.tz = new ilib.TimeZone({id: this.timezone});\n\t\t}\n\t\tthis.offset = this.tz.getOffsetMillis(this) / 86400000;\n\t}\n\n\tif (this.offset !== 0) {\n\t\trd += this.offset;\n\t\tthis.year = this._calcYear(rd);\n\t}\n\n\tvar jan1 = this.newRd({\n\t\tyear: this.year,\n\t\tmonth: 1,\n\t\tday: 1,\n\t\thour: 0,\n\t\tminute: 0,\n\t\tsecond: 0,\n\t\tmillisecond: 0\n\t});\n\tremainder = rd + 1 - jan1.getRataDie();\n\n\tthis.month = Math.floor((remainder-1)/30) + 1;\n\tremainder = remainder - (this.month-1) * 30;\n\n\tthis.day = Math.floor(remainder);\n\tremainder -= this.day;\n\t// now convert to milliseconds for the rest of the calculation\n\tremainder = Math.round(remainder * 86400000);\n\n\tthis.hour = Math.floor(remainder/3600000);\n\tremainder -= this.hour * 3600000;\n\n\tthis.minute = Math.floor(remainder/60000);\n\tremainder -= this.minute * 60000;\n\n\tthis.second = Math.floor(remainder/1000);\n\tremainder -= this.second * 1000;\n\n\tthis.millisecond = remainder;\n};\n\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n *\n * @return {number} the day of the week\n */\nilib.Date.EthiopicDate.prototype.getDayOfWeek = function() {\n\tvar rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\n\treturn ilib.mod(rd-4, 7);\n};\n\n/**\n * Return the name of the calendar that governs this date.\n *\n * @return {string} a string giving the name of the calendar\n */\nilib.Date.EthiopicDate.prototype.getCalendar = function() {\n\treturn \"ethiopic\";\n};\n\n//register with the factory method\nilib.Date._constructors[\"ethiopic\"] = ilib.Date.EthiopicDate;\n/*\n * coptic.js - Represent a Coptic calendar object.\n *\n * Copyright © 2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/* !depends calendar.js locale.js date.js julianday.js util/utils.js util/math.js calendar/ethiopic.js */\n\n/**\n * @class\n * Construct a new Coptic calendar object. This class encodes information about\n * a Coptic calendar.<p>\n *\n * Depends directive: !depends coptic.js\n *\n * @constructor\n * @implements ilib.Cal\n */\nilib.Cal.Coptic = function() {\n\tthis.type = \"coptic\";\n};\n\nilib.Cal.Coptic.prototype = new ilib.Cal.Ethiopic();\nilib.Cal.Coptic.prototype.parent = ilib.Cal.Coptic.prototype;\nilib.Cal.Coptic.prototype.constructor = ilib.Cal.Coptic;\n\n/**\n * Return a date instance for this calendar type using the given\n * options.\n * @param {Object} options options controlling the construction of\n * the date instance\n * @return {ilib.Date} a date appropriate for this calendar type\n */\nilib.Cal.Coptic.prototype.newDateInstance = function (options) {\n\treturn new ilib.Date.CopticDate(options);\n};\n\n/* register this calendar for the factory method */\nilib.Cal._constructors[\"coptic\"] = ilib.Cal.Coptic;\n/*\n * copticdate.js - Represent a date in the Coptic calendar\n *\n * Copyright © 2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\ndate.js\ncalendar/coptic.js\nutil/utils.js\nutil/search.js\nutil/math.js\nlocaleinfo.js\njulianday.js\ncalendar/ethiopicdate.js\n*/\n\n/**\n * @class\n * Construct a new Coptic RD date number object. The constructor parameters can\n * contain any of the following properties:\n *\n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n *\n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n *\n * <li><i>year</i> - any integer, including 0\n *\n * <li><i>month</i> - 1 to 13, where 1 means Thoout, 2 means Paope, etc., and 13 means Epagomene\n *\n * <li><i>day</i> - 1 to 30\n *\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n *\n * <li><i>minute</i> - 0 to 59\n *\n * <li><i>second</i> - 0 to 59\n *\n * <li><i>millisecond</i> - 0 to 999\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Coptic date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above are present, then the RD is calculate based on\n * the current date at the time of instantiation. <p>\n *\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n *\n * Depends directive: !depends copticdate.js\n *\n * @private\n * @constructor\n * @extends ilib.Date.EthiopicRataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Coptic RD date\n */\nilib.Date.CopticRataDie = function(params) {\n\tthis.cal = params && params.cal || new ilib.Cal.Coptic();\n\tthis.rd = undefined;\n\t/**\n\t * The difference between the zero Julian day and the first Coptic date\n\t * of Friday, August 29, 284 CE Julian at 7:00am UTC.\n\t * @private\n\t * @const\n\t * @type number\n\t */\n\tthis.epoch = 1825028.5;\n\n\tvar tmp = {};\n\tif (params) {\n\t\tilib.shallowCopy(params, tmp);\n\t}\n\ttmp.cal = this.cal; // override the cal parameter that may be passed in\n\tilib.Date.EthiopicRataDie.call(this, tmp);\n};\n\nilib.Date.CopticRataDie.prototype = new ilib.Date.EthiopicRataDie();\nilib.Date.CopticRataDie.prototype.parent = ilib.Date.EthiopicRataDie;\nilib.Date.CopticRataDie.prototype.constructor = ilib.Date.CopticRataDie;\n\n/**\n * @class\n * Construct a new date object for the Coptic Calendar. The constructor can be called\n * with a parameter object that contains any of the following properties:\n *\n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970 (Gregorian).\n * <li><i>julianday</i> - the Julian Day to set into this date\n * <li><i>year</i> - any integer\n * <li><i>month</i> - 1 to 13, where 1 means Thoout, 2 means Paope, etc., and 13 means Epagomene\n * <li><i>day</i> - 1 to 30\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n * <li><i>minute</i> - 0 to 59\n * <li><i>second</i> - 0 to 59\n * <li><i>millisecond<i> - 0 to 999\n * <li><i>locale</i> - the ilib.TimeZone instance or time zone name as a string\n * of this coptic date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * <li><i>timezone</i> - the time zone of this instance. If the time zone is not\n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that\n * represents the locale.\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If called with another Coptic date argument, the date components of the given\n * date are copied into the current one.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above\n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date\n * components are\n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the\n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich\n * Mean Time\").<p>\n *\n * Depends directive: !depends copticdate.js\n *\n * @constructor\n * @extends ilib.Date.EthiopicDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Coptic date\n */\nilib.Date.CopticDate = function(params) {\n\tthis.rd = undefined; // clear these out so that the EthiopicDate constructor can set it\n\tilib.Date.EthiopicDate.call(this, params);\n\tthis.cal = new ilib.Cal.Coptic();\n};\n\nilib.Date.CopticDate.prototype = new ilib.Date.EthiopicDate({noinstance: true});\nilib.Date.CopticDate.prototype.parent = ilib.Date.EthiopicDate.prototype;\nilib.Date.CopticDate.prototype.constructor = ilib.Date.CopticDate;\n\n/**\n * Return a new RD for this date type using the given params.\n * @protected\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {ilib.Date.RataDie} the new RD instance for the given params\n */\nilib.Date.CopticDate.prototype.newRd = function (params) {\n\treturn new ilib.Date.CopticRataDie(params);\n};\n\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n *\n * @return {number} the day of the week\n */\nilib.Date.CopticDate.prototype.getDayOfWeek = function() {\n\tvar rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\n\treturn ilib.mod(rd-3, 7);\n};\n\n/**\n * Return the name of the calendar that governs this date.\n *\n * @return {string} a string giving the name of the calendar\n */\nilib.Date.CopticDate.prototype.getCalendar = function() {\n\treturn \"coptic\";\n};\n\n//register with the factory method\nilib.Date._constructors[\"coptic\"] = ilib.Date.CopticDate;\n/*\n * ctype.js - Character type definitions\n *\n * Copyright © 2012-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ilibglobal.js locale.js util/search.js\n\n// !data ctype\n\n/**\n * Provides a set of static routines that return information about characters.\n * These routines emulate the C-library ctype functions. The characters must be\n * encoded in utf-16, as no other charsets are currently supported. Only the first\n * character of the given string is tested.\n * @namespace\n */\nilib.CType = {\n\t/**\n\t * Actual implementation for withinRange. Searches the given object for ranges.\n\t * The range names are taken from the Unicode range names in\n\t * http://www.unicode.org/Public/UNIDATA/extracted/DerivedGeneralCategory.txt\n\t *\n\t * <ul>\n\t * <li>Cn - Unassigned\n\t * <li>Lu - Uppercase_Letter\n\t * <li>Ll - Lowercase_Letter\n\t * <li>Lt - Titlecase_Letter\n\t * <li>Lm - Modifier_Letter\n\t * <li>Lo - Other_Letter\n\t * <li>Mn - Nonspacing_Mark\n\t * <li>Me - Enclosing_Mark\n\t * <li>Mc - Spacing_Mark\n\t * <li>Nd - Decimal_Number\n\t * <li>Nl - Letter_Number\n\t * <li>No - Other_Number\n\t * <li>Zs - Space_Separator\n\t * <li>Zl - Line_Separator\n\t * <li>Zp - Paragraph_Separator\n\t * <li>Cc - Control\n\t * <li>Cf - Format\n\t * <li>Co - Private_Use\n\t * <li>Cs - Surrogate\n\t * <li>Pd - Dash_Punctuation\n\t * <li>Ps - Open_Punctuation\n\t * <li>Pe - Close_Punctuation\n\t * <li>Pc - Connector_Punctuation\n\t * <li>Po - Other_Punctuation\n\t * <li>Sm - Math_Symbol\n\t * <li>Sc - Currency_Symbol\n\t * <li>Sk - Modifier_Symbol\n\t * <li>So - Other_Symbol\n\t * <li>Pi - Initial_Punctuation\n\t * <li>Pf - Final_Punctuation\n\t * </ul>\n\t *\n\t * @protected\n\t * @param {number} num code point of the character to examine\n\t * @param {string} rangeName the name of the range to check\n\t * @param {Object} obj object containing the character range data\n\t * @return {boolean} true if the first character is within the named\n\t * range\n\t */\n\t_inRange: function(num, rangeName, obj) {\n\t\tvar range, i;\n\t\tif (num < 0 || !rangeName || !obj) {\n\t\t\treturn false;\n\t\t}\n\n\t\trange = obj[rangeName];\n\t\tif (!range) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar compare = function(singlerange, target) {\n\t\t\tif (singlerange.length === 1) {\n\t\t\t\treturn singlerange[0] - target;\n\t\t\t} else {\n\t\t\t\treturn target < singlerange[0] ? singlerange[0] - target :\n\t\t\t\t\t(target > singlerange[1] ? singlerange[1] - target : 0);\n\t\t\t}\n\t\t};\n\t\tvar result = ilib.bsearch(num, range, compare);\n\t\treturn result < range.length && compare(range[result], num) === 0;\n\t},\n\n\t/**\n\t * Return whether or not the first character is within the named range\n\t * of Unicode characters. The valid list of range names are taken from\n\t * the Unicode 6.0 spec. Characters in all ranges of Unicode are supported,\n\t * including those supported in Javascript via UTF-16. Currently, this method\n\t * supports the following range names:\n\t *\n\t * <ul>\n\t * <li><i>ascii</i> - basic ASCII\n\t * <li><i>latin</i> - Latin, Latin Extended Additional, Latin Extended-C, Latin Extended-D\n\t * <li><i>armenian</i>\n\t * <li><i>greek</i> - Greek, Greek Extended\n\t * <li><i>cyrillic</i> - Cyrillic, Cyrillic Extended-A, Cyrillic Extended-B\n\t * <li><i>georgian</i> - Georgian, Georgian Supplement\n\t * <li><i>glagolitic</i>\n\t * <li><i>gothic</i>\n\t * <li><i>ogham</i>\n\t * <li><i>oldpersian</i>\n\t * <li><i>runic</i>\n\t * <li><i>ipa</i> - IPA, Phonetic Extensions, Phonetic Extensions Supplement\n\t * <li><i>phonetic</i>\n\t * <li><i>modifiertone</i> - Modifier Tone Letters\n\t * <li><i>spacing</i>\n\t * <li><i>diacritics</i>\n\t * <li><i>halfmarks</i> - Combining Half Marks\n\t * <li><i>small</i> - Small Form Variants\n\t * <li><i>bamum</i> - Bamum, Bamum Supplement\n\t * <li><i>ethiopic</i> - Ethiopic, Ethiopic Extended, Ethiopic Extended-A\n\t * <li><i>nko</i>\n\t * <li><i>osmanya</i>\n\t * <li><i>tifinagh</i>\n\t * <li><i>val</i>\n\t * <li><i>arabic</i> - Arabic, Arabic Supplement, Arabic Presentation Forms-A,\n\t * Arabic Presentation Forms-B\n\t * <li><i>carlan</i>\n\t * <li><i>hebrew</i>\n\t * <li><i>mandaic</i>\n\t * <li><i>samaritan</i>\n\t * <li><i>syriac</i>\n\t * <li><i>mongolian</i>\n\t * <li><i>phagspa</i>\n\t * <li><i>tibetan</i>\n\t * <li><i>bengali</i>\n\t * <li><i>devanagari</i> - Devanagari, Devanagari Extended\n\t * <li><i>gujarati</i>\n\t * <li><i>gurmukhi</i>\n\t * <li><i>kannada</i>\n\t * <li><i>lepcha</i>\n\t * <li><i>limbu</i>\n\t * <li><i>malayalam</i>\n\t * <li><i>meetaimayek</i>\n\t * <li><i>olchiki</i>\n\t * <li><i>oriya</i>\n\t * <li><i>saurashtra</i>\n\t * <li><i>sinhala</i>\n\t * <li><i>sylotinagri</i> - Syloti Nagri\n\t * <li><i>tamil</i>\n\t * <li><i>telugu</i>\n\t * <li><i>thaana</i>\n\t * <li><i>vedic</i>\n\t * <li><i>batak</i>\n\t * <li><i>balinese</i>\n\t * <li><i>buginese</i>\n\t * <li><i>cham</i>\n\t * <li><i>javanese</i>\n\t * <li><i>kayahli</i>\n\t * <li><i>khmer</i>\n\t * <li><i>lao</i>\n\t * <li><i>myanmar</i> - Myanmar, Myanmar Extended-A\n\t * <li><i>newtailue</i>\n\t * <li><i>rejang</i>\n\t * <li><i>sundanese</i>\n\t * <li><i>taile</i>\n\t * <li><i>taitham</i>\n\t * <li><i>taiviet</i>\n\t * <li><i>thai</i>\n\t * <li><i>buhld</i>\n\t * <li><i>hanunoo</i>\n\t * <li><i>tagalog</i>\n\t * <li><i>tagbanwa</i>\n\t * <li><i>bopomofo</i> - Bopomofo, Bopomofo Extended\n\t * <li><i>cjk</i> - the CJK unified ideographs (Han), CJK Unified Ideographs\n\t *  Extension A, CJK Unified Ideographs Extension B, CJK Unified Ideographs\n\t *  Extension C, CJK Unified Ideographs Extension D, Ideographic Description\n\t *  Characters (=isIdeo())\n\t * <li><i>cjkcompatibility</i> - CJK Compatibility, CJK Compatibility\n\t * Ideographs, CJK Compatibility Forms, CJK Compatibility Ideographs Supplement\n\t * <li><i>cjkradicals</i> - the CJK radicals, KangXi radicals\n\t * <li><i>hangul</i> - Hangul Jamo, Hangul Syllables, Hangul Jamo Extended-A,\n\t * Hangul Jamo Extended-B, Hangul Compatibility Jamo\n\t * <li><i>cjkpunct</i> - CJK symbols and punctuation\n\t * <li><i>cjkstrokes</i> - CJK strokes\n\t * <li><i>hiragana</i>\n\t * <li><i>katakana</i> - Katakana, Katakana Phonetic Extensions, Kana Supplement\n\t * <li><i>kanbun</i>\n\t * <li><i>lisu</i>\n\t * <li><i>yi</i> - Yi Syllables, Yi Radicals\n\t * <li><i>cherokee</i>\n\t * <li><i>canadian</i> - Unified Canadian Aboriginal Syllabics, Unified Canadian\n\t * Aboriginal Syllabics Extended\n\t * <li><i>presentation</i> - Alphabetic presentation forms\n\t * <li><i>vertical</i> - Vertical Forms\n\t * <li><i>width</i> - Halfwidth and Fullwidth Forms\n\t * <li><i>punctuation</i> - General punctuation, Supplemental Punctuation\n\t * <li><i>box</i> - Box Drawing\n\t * <li><i>block</i> - Block Elements\n\t * <li><i>letterlike</i> - Letterlike symbols\n\t * <li><i>mathematical</i> - Mathematical alphanumeric symbols, Miscellaneous\n\t * Mathematical Symbols-A, Miscellaneous Mathematical Symbols-B\n\t * <li><i>enclosedalpha</i> - Enclosed alphanumerics, Enclosed Alphanumeric Supplement\n\t * <li><i>enclosedcjk</i> - Enclosed CJK letters and months, Enclosed Ideographic Supplement\n\t * <li><i>cjkcompatibility</i> - CJK compatibility\n\t * <li><i>apl</i> - APL symbols\n\t * <li><i>controlpictures</i> - Control pictures\n\t * <li><i>misc</i> - Miscellaneous technical\n\t * <li><i>ocr</i> - Optical character recognition (OCR)\n\t * <li><i>combining</i> - Combining Diacritical Marks, Combining Diacritical Marks\n\t * for Symbols, Combining Diacritical Marks Supplement\n\t * <li><i>digits</i> - ASCII digits (=isDigit())\n\t * <li><i>indicnumber</i> - Common Indic Number Forms\n\t * <li><i>numbers</i> - Number dorms\n\t * <li><i>supersub</i> - Super- and subscripts\n\t * <li><i>arrows</i> - Arrows, Miscellaneous Symbols and Arrows, Supplemental Arrows-A,\n\t * Supplemental Arrows-B\n\t * <li><i>operators</i> - Mathematical operators, supplemental\n\t * mathematical operators\n\t * <li><i>geometric</i> - Geometric shapes\n\t * <li><i>ancient</i> - Ancient symbols\n\t * <li><i>braille</i> - Braille patterns\n\t * <li><i>currency</i> - Currency symbols\n\t * <li><i>dingbats</i>\n\t * <li><i>gamesymbols</i>\n\t * <li><i>yijing</i> - Yijing Hexagram Symbols\n\t * <li><i>specials</i>\n\t * <li><i>variations</i> - Variation Selectors, Variation Selectors Supplement\n\t * <li><i>privateuse</i> - Private Use Area, Supplementary Private Use Area-A,\n\t * Supplementary Private Use Area-B\n\t * <li><i>supplementarya</i> - Supplementary private use area-A\n\t * <li><i>supplementaryb</i> - Supplementary private use area-B\n\t * <li><i>highsurrogates</i> - High Surrogates, High Private Use Surrogates\n\t * <li><i>lowsurrogates</i>\n\t * <li><i>reserved</i>\n\t * <li><i>noncharacters</i>\n\t * </ul><p>\n\t *\n\t * Depends directive: !depends ctype.js\n\t *\n\t * @param {string|ilib.String|number} ch character or code point to examine\n\t * @param {string} rangeName the name of the range to check\n\t * @return {boolean} true if the first character is within the named\n\t * range\n\t */\n\twithinRange: function(ch, rangeName) {\n\t\tif (!rangeName) {\n\t\t\treturn false;\n\t\t}\n\t\tvar num;\n\t\tswitch (typeof(ch)) {\n\t\t\tcase 'number':\n\t\t\t\tnum = ch;\n\t\t\t\tbreak;\n\t\t\tcase 'string':\n\t\t\t\tnum = ilib.String.toCodePoint(ch, 0);\n\t\t\t\tbreak;\n\t\t\tcase 'undefined':\n\t\t\t\treturn false;\n\t\t\tdefault:\n\t\t\t\tnum = ch._toCodePoint(0);\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn ilib.CType._inRange(num, rangeName.toLowerCase(), ilib.data.ctype);\n\t},\n\n\t/**\n\t * @protected\n\t * @param {boolean} sync\n\t * @param {Object} loadParams\n\t * @param {function(*)|undefined} onLoad\n\t */\n\t_init: function(sync, loadParams, onLoad) {\n\t\tilib.CType._load(\"ctype\", sync, loadParams, onLoad);\n\t},\n\n\t/**\n\t * @protected\n\t * @param {string} name\n\t * @param {boolean} sync\n\t * @param {Object} loadParams\n\t * @param {function(*)|undefined} onLoad\n\t */\n\t_load: function (name, sync, loadParams, onLoad) {\n\t\tif (!ilib.data[name]) {\n\t\t\tvar loadName = name ? name + \".json\" : \"ctype.json\";\n\t\t\tilib.loadData({\n\t\t\t\tname: loadName,\n\t\t\t\tlocale: \"-\",\n\t\t\t\tnonlocale: true,\n\t\t\t\tsync: sync,\n\t\t\t\tloadParams: loadParams,\n\t\t\t\tcallback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(ct) {\n\t\t\t\t\tilib.data[name] = ct;\n\t\t\t\t\tif (onLoad && typeof(onLoad) === 'function') {\n\t\t\t\t\t\tonLoad(ilib.data[name]);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t});\n\t\t} else {\n\t\t\tif (onLoad && typeof(onLoad) === 'function') {\n\t\t\t\tonLoad(ilib.data[name]);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/*\n * ctype.isdigit.js - Character type is digit\n *\n * Copyright © 2012-2013, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ctype.js\n\n// !data ctype\n\n/**\n * Return whether or not the first character is a digit character in the\n * Latin script.<p>\n *\n * Depends directive: !depends ctype.isdigit.js\n *\n * @param {string|ilib.String|number} ch character or code point to examine\n * @return {boolean} true if the first character is a digit character in the\n * Latin script.\n */\nilib.CType.isDigit = function (ch) {\n\tvar num;\n\tswitch (typeof(ch)) {\n\t\tcase 'number':\n\t\t\tnum = ch;\n\t\t\tbreak;\n\t\tcase 'string':\n\t\t\tnum = ilib.String.toCodePoint(ch, 0);\n\t\t\tbreak;\n\t\tcase 'undefined':\n\t\t\treturn false;\n\t\tdefault:\n\t\t\tnum = ch._toCodePoint(0);\n\t\t\tbreak;\n\t}\n\treturn ilib.CType._inRange(num, 'digit', ilib.data.ctype);\n};\n\n/**\n * @protected\n * @param {boolean} sync\n * @param {Object} loadParams\n * @param {function(*)|undefined} onLoad\n */\nilib.CType.isDigit._init = function (sync, loadParams, onLoad) {\n\tilib.CType._init(sync, loadParams, onLoad);\n};\n\n/*\n * ctype.isspace.js - Character type is space char\n *\n * Copyright © 2012-2013, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ctype.js\n\n// !data ctype ctype_z\n\n/**\n * Return whether or not the first character is a whitespace character.<p>\n *\n * Depends directive: !depends ctype.isspace.js\n *\n * @param {string|ilib.String|number} ch character or code point to examine\n * @return {boolean} true if the first character is a whitespace character.\n */\nilib.CType.isSpace = function (ch) {\n\tvar num;\n\tswitch (typeof(ch)) {\n\t\tcase 'number':\n\t\t\tnum = ch;\n\t\t\tbreak;\n\t\tcase 'string':\n\t\t\tnum = ilib.String.toCodePoint(ch, 0);\n\t\t\tbreak;\n\t\tcase 'undefined':\n\t\t\treturn false;\n\t\tdefault:\n\t\t\tnum = ch._toCodePoint(0);\n\t\t\tbreak;\n\t}\n\n\treturn ilib.CType._inRange(num, 'space', ilib.data.ctype) ||\n\t\tilib.CType._inRange(num, 'Zs', ilib.data.ctype_z) ||\n\t\tilib.CType._inRange(num, 'Zl', ilib.data.ctype_z) ||\n\t\tilib.CType._inRange(num, 'Zp', ilib.data.ctype_z);\n};\n\n/**\n * @protected\n * @param {boolean} sync\n * @param {Object} loadParams\n * @param {function(*)|undefined} onLoad\n */\nilib.CType.isSpace._init = function (sync, loadParams, onLoad) {\n\tilib.CType._load(\"ctype_z\", sync, loadParams, function () {\n\t\tilib.CType._init(sync, loadParams, onLoad);\n\t});\n};\n\n/*\n * numprs.js - Parse a number in any locale\n *\n * Copyright © 2012-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n!depends\nilibglobal.js\nlocale.js\nstrings.js\nctype.isdigit.js\nctype.isspace.js\n*/\n\n/**\n * @class\n * Parse a string as a number, ignoring all locale-specific formatting.<p>\n *\n * This class is different from the standard Javascript parseInt() and parseFloat()\n * functions in that the number to be parsed can have formatting characters in it\n * that are not supported by those two\n * functions, and it handles numbers written in other locales properly. For example,\n * if you pass the string \"203,231.23\" to the parseFloat() function in Javascript, it\n * will return you the number 203. The ilib.Number class will parse it correctly and\n * the value() function will return the number 203231.23. If you pass parseFloat() the\n * string \"203.231,23\" with the locale set to de-DE, it will return you 203 again. This\n * class will return the correct number 203231.23 again.<p>\n *\n * The options object may contain any of the following properties:\n *\n * <ul>\n * <li><i>locale</i> - specify the locale of the string to parse. This is used to\n * figure out what the decimal point character is. If not specified, the default locale\n * for the app or browser is used.\n * <li><i>type</i> - specify whether this string should be interpretted as a number,\n * currency, or percentage amount. When the number is interpretted as a currency\n * amount, the getCurrency() method will return something useful, otherwise it will\n * return undefined. If\n * the number is to be interpretted as percentage amount and there is a percentage sign\n * in the string, then the number will be returned\n * as a fraction from the valueOf() method. If there is no percentage sign, then the\n * number will be returned as a regular number. That is \"58.3%\" will be returned as the\n * number 0.583 but \"58.3\" will be returned as 58.3. Valid values for this property\n * are \"number\", \"currency\", and \"percentage\". Default if this is not specified is\n * \"number\".\n * <li><i>onLoad</i> - a callback function to call when the locale data is fully\n * loaded. When the onLoad option is given, this class will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the\n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n *\n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the\n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object\n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n * <p>\n *\n * Depends directive: !depends numprs.js\n *\n * @constructor\n * @param {string|number|Number|ilib.Number|undefined} str a string to parse as a number, or a number value\n * @param {Object=} options Options controlling how the instance should be created\n */\nilib.Number = function (str, options) {\n\tvar i, stripped = \"\",\n\t\tsync = true,\n\t\tloadParams,\n\t\tonLoad;\n\n\tthis.locale = new ilib.Locale();\n\tthis.type = \"number\";\n\n\tif (options) {\n\t\tif (options.locale) {\n\t\t\tthis.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;\n\t\t}\n\t\tif (options.type) {\n\t\t\tswitch (options.type) {\n\t\t\t\tcase \"number\":\n\t\t\t\tcase \"currency\":\n\t\t\t\tcase \"percentage\":\n\t\t\t\t\tthis.type = options.type;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (typeof(options.sync) !== 'undefined') {\n\t\t\tsync = (options.sync == true);\n\t\t}\n\t\tloadParams = options.loadParams;\n\t\tonLoad = options.onLoad;\n\t}\n\n\tilib.CType.isDigit._init(sync, loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {\n\t\tilib.CType.isSpace._init(sync, loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {\n\t\t\tnew ilib.LocaleInfo(this.locale, {\n\t\t\t\tsync: sync,\n\t\t\t\tonLoad: ilib.bind(this, function (li) {\n\t\t\t\t\tthis.decimal = li.getDecimalSeparator();\n\n\t\t\t\t\tswitch (typeof(str)) {\n\t\t\t\t\tcase 'string':\n\t\t\t\t\t\t// stripping should work for all locales, because you just ignore all the\n\t\t\t\t\t\t// formatting except the decimal char\n\t\t\t\t\t\tvar unary = true; // looking for the unary minus still?\n\t\t\t\t\t\tthis.str = str || \"0\";\n\t\t\t\t\t\ti = 0;\n\t\t\t\t\t\tfor (i = 0; i < this.str.length; i++) {\n\t\t\t\t\t\t\tif (unary && this.str.charAt(i) === '-') {\n\t\t\t\t\t\t\t\tunary = false;\n\t\t\t\t\t\t\t\tstripped += this.str.charAt(i);\n\t\t\t\t\t\t\t} else if (ilib.CType.isDigit(this.str.charAt(i))) {\n\t\t\t\t\t\t\t\tstripped += this.str.charAt(i);\n\t\t\t\t\t\t\t\tunary = false;\n\t\t\t\t\t\t\t} else if (this.str.charAt(i) === this.decimal) {\n\t\t\t\t\t\t\t\tstripped += \".\"; // always convert to period\n\t\t\t\t\t\t\t\tunary = false;\n\t\t\t\t\t\t\t} // else ignore\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.value = parseFloat(stripped);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'number':\n\t\t\t\t\t\tthis.str = \"\" + str;\n\t\t\t\t\t\tthis.value = str;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'object':\n\t\t\t\t\t\tthis.value = /** @type {number} */ str.valueOf();\n\t\t\t\t\t\tthis.str = \"\" + this.value;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'undefined':\n\t\t\t\t\t\tthis.value = 0;\n\t\t\t\t\t\tthis.str = \"0\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tswitch (this.type) {\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// don't need to do anything special for other types\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"percentage\":\n\t\t\t\t\t\t\tif (this.str.indexOf(li.getPercentageSymbol()) !== -1) {\n\t\t\t\t\t\t\t\tthis.value /= 100;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"currency\":\n\t\t\t\t\t\t\tstripped = \"\";\n\t\t\t\t\t\t\ti = 0;\n\t\t\t\t\t\t\twhile (i < this.str.length &&\n\t\t\t\t\t\t\t\t   !ilib.CType.isDigit(this.str.charAt(i)) &&\n\t\t\t\t\t\t\t\t   !ilib.CType.isSpace(this.str.charAt(i))) {\n\t\t\t\t\t\t\t\tstripped += this.str.charAt(i++);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (stripped.length === 0) {\n\t\t\t\t\t\t\t\twhile (i < this.str.length &&\n\t\t\t\t\t\t\t\t\t   ilib.CType.isDigit(this.str.charAt(i)) ||\n\t\t\t\t\t\t\t\t\t   ilib.CType.isSpace(this.str.charAt(i)) ||\n\t\t\t\t\t\t\t\t\t   this.str.charAt(i) === '.' ||\n\t\t\t\t\t\t\t\t\t   this.str.charAt(i) === ',' ) {\n\t\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twhile (i < this.str.length &&\n\t\t\t\t\t\t\t\t\t   !ilib.CType.isDigit(this.str.charAt(i)) &&\n\t\t\t\t\t\t\t\t\t   !ilib.CType.isSpace(this.str.charAt(i))) {\n\t\t\t\t\t\t\t\t\tstripped += this.str.charAt(i++);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tnew ilib.Currency({\n\t\t\t\t\t\t\t\tlocale: this.locale,\n\t\t\t\t\t\t\t\tsign: stripped,\n\t\t\t\t\t\t\t\tsync: sync,\n\t\t\t\t\t\t\t\tonLoad: ilib.bind(this, function (cur) {\n\t\t\t\t\t\t\t\t\tthis.currency = cur;\n\t\t\t\t\t\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\t\t\t\t\t\t\toptions.onLoad(this);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\t\t\toptions.onLoad(this);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t});\n\t\t}));\n\t}));\n};\n\nilib.Number.prototype = {\n\t/**\n\t * Return the locale for this formatter instance.\n\t * @return {ilib.Locale} the locale instance for this formatter\n\t */\n\tgetLocale: function () {\n\t\treturn this.locale;\n\t},\n\n\t/**\n\t * Return the original string that this number instance was created with.\n\t * @return {string} the original string\n\t */\n\ttoString: function () {\n\t\treturn this.str;\n\t},\n\n\t/**\n\t * If the type of this Number instance is \"currency\", then the parser will attempt\n\t * to figure out which currency this amount represents. The amount can be written\n\t * with any of the currency signs or ISO 4217 codes that are currently\n\t * recognized by ilib, and the currency signs may occur before or after the\n\t * numeric portion of the string. If no currency can be recognized, then the\n\t * default currency for the locale is returned. If multiple currencies can be\n\t * recognized (for example if the currency sign is \"$\"), then this method\n\t * will prefer the one for the current locale. If multiple currencies can be\n\t * recognized, but none are used in the current locale, then the first currency\n\t * encountered will be used. This may produce random results, though the larger\n\t * currencies occur earlier in the list. For example, if the sign found in the\n\t * string is \"$\" and that is not the sign of the currency of the current locale\n\t * then the US dollar will be recognized, as it is the largest currency that uses\n\t * the \"$\" as its sign.\n\t *\n\t * @return {ilib.Currency|undefined} the currency instance for this amount, or\n\t * undefined if this Number object is not of type currency\n\t */\n\tgetCurrency: function () {\n\t\treturn this.currency;\n\t},\n\n\t/**\n\t * Return the value of this number object as a primitive number instance.\n\t * @return {number} the value of this number instance\n\t */\n\tvalueOf: function () {\n\t\treturn this.value;\n\t}\n};\n\n/*\n * currency.js - Currency definition\n *\n * Copyright © 2012-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ilibglobal.js locale.js\n\n// !data currency\n\n/**\n * @class\n * Create a new currency information instance. Instances of this class encode\n * information about a particular currency.<p>\n *\n * Note: that if you are looking to format currency for display, please see\n * the number formatting class {ilib.NumFmt}. This class only gives information\n * about currencies.<p>\n *\n * The options can contain any of the following properties:\n *\n * <ul>\n * <li><i>locale</i> - specify the locale for this instance\n * <li><i>code</i> - find info on a specific currency with the given ISO 4217 code\n * <li><i>sign</i> - search for a currency that uses this sign\n * <li><i>onLoad</i> - a callback function to call when the currency data is fully\n * loaded. When the onLoad option is given, this class will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the\n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n * <li><i>loadParams</i> - an object containing parameters to pass to the\n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object\n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n *\n * When searching for a currency by its sign, this class cannot guarantee\n * that it will return info about a specific currency. The reason is that currency\n * signs are sometimes shared between different currencies and the sign is\n * therefore ambiguous. If you need a\n * guarantee, find the currency using the code instead.<p>\n *\n * The way this class finds a currency by sign is the following. If the sign is\n * unambiguous, then\n * the currency is returned. If there are multiple currencies that use the same\n * sign, and the current locale uses that sign, then the default currency for\n * the current locale is returned. If there are multiple, but the current locale\n * does not use that sign, then the currency with the largest circulation is\n * returned. For example, if you are in the en-GB locale, and the sign is \"$\",\n * then this class will notice that there are multiple currencies with that\n * sign (USD, CAD, AUD, HKD, MXP, etc.) Since \"$\" is not used in en-GB, it will\n * pick the one with the largest circulation, which in this case is the US Dollar\n * (USD).<p>\n *\n * If neither the code or sign property is set, the currency that is most common\n * for the locale\n * will be used instead. If the locale is not set, the default locale will be used.\n * If the code is given, but it is not found in the list of known currencies, this\n * constructor will throw an exception. If the sign is given, but it is not found,\n * this constructor will default to the currency for the current locale. If both\n * the code and sign properties are given, then the sign property will be ignored\n * and only the code property used. If the locale is given, but it is not a known\n * locale, this class will default to the default locale instead.<p>\n *\n * Depends directive: !depends currency.js\n *\n * @constructor\n * @param options {Object} a set of properties to govern how this instance is constructed.\n * @throws \"currency xxx is unknown\" when the given currency code is not in the list of\n * known currencies. xxx is replaced with the requested code.\n */\nilib.Currency = function (options) {\n\tthis.sync = true;\n\n\tif (options) {\n\t\tif (options.code) {\n\t\t\tthis.code = options.code;\n\t\t}\n\t\tif (options.locale) {\n\t\t\tthis.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;\n\t\t}\n\t\tif (options.sign) {\n\t\t\tthis.sign = options.sign;\n\t\t}\n\t\tif (typeof(options.sync) !== 'undefined') {\n\t\t\tthis.sync = options.sync;\n\t\t}\n\t\tif (options.loadParams) {\n\t\t\tthis.loadParams = options.loadParams;\n\t\t}\n\t}\n\n\tthis.locale = this.locale || new ilib.Locale();\n\tif (typeof(ilib.data.currency) === 'undefined') {\n\t\tilib.loadData({\n\t\t\tname: \"currency.json\",\n\t\t\tobject: ilib.Currency,\n\t\t\tlocale: \"-\",\n\t\t\tsync: this.sync,\n\t\t\tloadParams: this.loadParams,\n\t\t\tcallback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(currency) {\n\t\t\t\tilib.data.currency = currency;\n\t\t\t\tthis._loadLocinfo(options && options.onLoad);\n\t\t\t})\n\t\t});\n\t} else {\n\t\tthis._loadLocinfo(options && options.onLoad);\n\t}\n};\n\n/**\n * Return an array of the ids for all ISO 4217 currencies that\n * this copy of ilib knows about.\n *\n * @static\n * @return {Array.<string>} an array of currency ids that this copy of ilib knows about.\n */\nilib.Currency.getAvailableCurrencies = function() {\n\tvar ret = [],\n\t\tcur,\n\t\tcurrencies = new ilib.ResBundle({\n\t\t\tname: \"currency\"\n\t\t}).getResObj();\n\n\tfor (cur in currencies) {\n\t\tif (cur && currencies[cur]) {\n\t\t\tret.push(cur);\n\t\t}\n\t}\n\n\treturn ret;\n};\n\nilib.Currency.prototype = {\n\t/**\n\t * @private\n\t */\n\t_loadLocinfo: function(onLoad) {\n\t\tnew ilib.LocaleInfo(this.locale, {\n\t\t\tonLoad: ilib.bind(this, function (li) {\n\t\t\t\tvar currInfo;\n\n\t\t\t\tthis.locinfo = li;\n\t\t    \tif (this.code) {\n\t\t    \t\tcurrInfo = ilib.data.currency[this.code];\n\t\t    \t\tif (!currInfo) {\n\t\t    \t\t\tthrow \"currency \" + this.code + \" is unknown\";\n\t\t    \t\t}\n\t\t    \t} else if (this.sign) {\n\t\t    \t\tcurrInfo = ilib.data.currency[this.sign]; // maybe it is really a code...\n\t\t    \t\tif (typeof(currInfo) !== 'undefined') {\n\t\t    \t\t\tthis.code = this.sign;\n\t\t    \t\t} else {\n\t\t    \t\t\tthis.code = this.locinfo.getCurrency();\n\t\t    \t\t\tcurrInfo = ilib.data.currency[this.code];\n\t\t    \t\t\tif (currInfo.sign !== this.sign) {\n\t\t    \t\t\t\t// current locale does not use the sign, so search for it\n\t\t    \t\t\t\tfor (var cur in ilib.data.currency) {\n\t\t    \t\t\t\t\tif (cur && ilib.data.currency[cur]) {\n\t\t    \t\t\t\t\t\tcurrInfo = ilib.data.currency[cur];\n\t\t    \t\t\t\t\t\tif (currInfo.sign === this.sign) {\n\t\t    \t\t\t\t\t\t\t// currency data is already ordered so that the currency with the\n\t\t    \t\t\t\t\t\t\t// largest circulation is at the beginning, so all we have to do\n\t\t    \t\t\t\t\t\t\t// is take the first one in the list that matches\n\t\t    \t\t\t\t\t\t\tthis.code = cur;\n\t\t    \t\t\t\t\t\t\tbreak;\n\t\t    \t\t\t\t\t\t}\n\t\t    \t\t\t\t\t}\n\t\t    \t\t\t\t}\n\t\t    \t\t\t}\n\t\t    \t\t}\n\t\t    \t}\n\n\t\t    \tif (!currInfo || !this.code) {\n\t\t    \t\tthis.code = this.locinfo.getCurrency();\n\t\t    \t\tcurrInfo = ilib.data.currency[this.code];\n\t\t    \t}\n\n\t\t    \tthis.name = currInfo.name;\n\t\t    \tthis.fractionDigits = currInfo.decimals;\n\t\t    \tthis.sign = currInfo.sign;\n\n\t\t\t\tif (typeof(onLoad) === 'function') {\n\t\t\t\t\tonLoad(this);\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t},\n\n\t/**\n\t * Return the ISO 4217 currency code for this instance.\n\t * @return {string} the ISO 4217 currency code for this instance\n\t */\n\tgetCode: function () {\n\t\treturn this.code;\n\t},\n\n\t/**\n\t * Return the default number of fraction digits that is typically used\n\t * with this type of currency.\n\t * @return {number} the number of fraction digits for this currency\n\t */\n\tgetFractionDigits: function () {\n\t\treturn this.fractionDigits;\n\t},\n\n\t/**\n\t * Return the sign commonly used to represent this currency.\n\t * @return {string} the sign commonly used to represent this currency\n\t */\n\tgetSign: function () {\n\t\treturn this.sign;\n\t},\n\n\t/**\n\t * Return the name of the currency in English.\n\t * @return {string} the name of the currency in English\n\t */\n\tgetName: function () {\n\t\treturn this.name;\n\t},\n\n\t/**\n\t * Return the locale for this currency. If the options to the constructor\n\t * included a locale property in order to find the currency that is appropriate\n\t * for that locale, then the locale is returned here. If the options did not\n\t * include a locale, then this method returns undefined.\n\t * @return {ilib.Locale} the locale used in the constructor of this instance,\n\t * or undefined if no locale was given in the constructor\n\t */\n\tgetLocale: function () {\n\t\treturn this.locale;\n\t}\n};\n\n/*\n * numfmt.js - Number formatter definition\n *\n * Copyright © 2012-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ilibglobal.js locale.js strings.js currency.js\n/*\n!depends\nilibglobal.js\nlocale.js\nlocaleinfo.js\nutil/utils.js\nutil/math.js\ncurrency.js\nstrings.js\nutil/jsutils.js\n*/\n\n// !data localeinfo currency\n\n/**\n * @class\n * Create a new number formatter instance. Locales differ in the way that digits\n * in a formatted number are grouped, in the way the decimal character is represented,\n * etc. Use this formatter to get it right for any locale.<p>\n *\n * This formatter can format plain numbers, currency amounts, and percentage amounts.<p>\n *\n * As with all formatters, the recommended\n * practice is to create one formatter and use it multiple times to format various\n * numbers.<p>\n *\n * The options can contain any of the following properties:\n *\n * <ul>\n * <li><i>locale</i> - use the conventions of the specified locale when figuring out how to\n * format a number.\n * <li><i>type</i> - the type of this formatter. Valid values are \"number\", \"currency\", or\n * \"percentage\". If this property is not specified, the default is \"number\".\n * <li><i>currency</i> - the ISO 4217 3-letter currency code to use when the formatter type\n * is \"currency\". This property is required for currency formatting. If the type property\n * is \"currency\" and the currency property is not specified, the constructor will throw a\n * an exception.\n * <li><i>maxFractionDigits</i> - the maximum number of digits that should appear in the\n * formatted output after the decimal. A value of -1 means unlimited, and 0 means only print\n * the integral part of the number.\n * <li><i>minFractionDigits</i> - the minimum number of fractional digits that should\n * appear in the formatted output. If the number does not have enough fractional digits\n * to reach this minimum, the number will be zero-padded at the end to get to the limit.\n * If the type of the formatter is \"currency\" and this\n * property is not specified, then the minimum fraction digits is set to the normal number\n * of digits used with that currency, which is almost always 0, 2, or 3 digits.\n * <li><i>useNative</i> - the flag used to determaine whether to use the native script settings\n * for formatting the numbers .\n * <li><i>roundingMode</i> - When the maxFractionDigits or maxIntegerDigits is specified,\n * this property governs how the least significant digits are rounded to conform to that\n * maximum. The value of this property is a string with one of the following values:\n * <ul>\n *   <li><i>up</i> - round away from zero\n *   <li><i>down</i> - round towards zero. This has the effect of truncating the number\n *   <li><i>ceiling</i> - round towards positive infinity\n *   <li><i>floor</i> - round towards negative infinity\n *   <li><i>halfup</i> - round towards nearest neighbour. If equidistant, round up.\n *   <li><i>halfdown</i> - round towards nearest neighbour. If equidistant, round down.\n *   <li><i>halfeven</i> - round towards nearest neighbour. If equidistant, round towards the even neighbour\n *   <li><i>halfodd</i> - round towards nearest neighbour. If equidistant, round towards the odd neighbour\n * </ul>\n * When the type of the formatter is \"currency\" and the <i>roundingMode</i> property is not\n * set, then the standard legal rounding rules for the locale are followed. If the type\n * is \"number\" or \"percentage\" and the <i>roundingMode</i> property is not set, then the\n * default mode is \"halfdown\".</i>.\n *\n * <li><i>style</i> - When the type of this formatter is \"currency\", the currency amount\n * can be formatted in the following styles: \"common\" and \"iso\". The common style is the\n * one commonly used in every day writing where the currency unit is represented using a\n * symbol. eg. \"$57.35\" for fifty-seven dollars and thirty five cents. The iso style is\n * the international style where the currency unit is represented using the ISO 4217 code.\n * eg. \"USD 57.35\" for the same amount. The default is \"common\" style if the style is\n * not specified.<p>\n *\n * When the type of this formatter is \"number\", the style can be one of the following:\n * <ul>\n *   <li><i>standard - format a fully specified floating point number properly for the locale\n *   <li><i>scientific</i> - use scientific notation for all numbers. That is, 1 integral\n *   digit, followed by a number of fractional digits, followed by an \"e\" which denotes\n *   exponentiation, followed digits which give the power of 10 in the exponent.\n *   <li><i>native</i> - format a floating point number using the native digits and\n *   formatting symbols for the script of the locale.\n *   <li><i>nogrouping</i> - format a floating point number without grouping digits for\n *   the integral portion of the number\n * </ul>\n * Note that if you specify a maximum number\n * of integral digits, the formatter with a standard style will give you standard\n * formatting for smaller numbers and scientific notation for larger numbers. The default\n * is standard style if this is not specified.\n *\n * <li><i>onLoad</i> - a callback function to call when the format data is fully\n * loaded. When the onLoad option is given, this class will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the\n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n *\n * <li>sync - tell whether to load any missing locale data synchronously or\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the\n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object\n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n * <p>\n *\n * Depends directive: !depends numfmt.js\n *\n * @constructor\n * @param {Object.<string,*>} options A set of options that govern how the formatter will behave\n */\nilib.NumFmt = function (options) {\n\tvar sync = true;\n\tthis.locale = new ilib.Locale();\n\t/**\n\t * @private\n\t * @type {string}\n\t */\n\tthis.type = \"number\";\n\tvar loadParams = undefined;\n\n\tif (options) {\n\t\tif (options.locale) {\n\t\t\tthis.locale = (typeof (options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;\n\t\t}\n\n\t\tif (options.type) {\n\t\t\tif (options.type === 'number' ||\n\t\t\t\toptions.type === 'currency' ||\n\t\t\t\toptions.type === 'percentage') {\n\t\t\t\tthis.type = options.type;\n\t\t\t}\n\t\t}\n\n\t\tif (options.currency) {\n\t\t\t/**\n\t\t\t * @private\n\t\t\t * @type {string}\n\t\t\t */\n\t\t\tthis.currency = options.currency;\n\t\t}\n\n\t\tif (typeof (options.maxFractionDigits) === 'number') {\n\t\t\t/**\n\t\t\t * @private\n\t\t\t * @type {number|undefined}\n\t\t\t */\n\t\t\tthis.maxFractionDigits = this._toPrimitive(options.maxFractionDigits);\n\t\t}\n\t\tif (typeof (options.minFractionDigits) === 'number') {\n\t\t\t/**\n\t\t\t * @private\n\t\t\t * @type {number|undefined}\n\t\t\t */\n\t\t\tthis.minFractionDigits = this._toPrimitive(options.minFractionDigits);\n\t\t\t// enforce the limits to avoid JS exceptions\n\t\t\tif (this.minFractionDigits < 0) {\n\t\t\t\tthis.minFractionDigits = 0;\n\t\t\t}\n\t\t\tif (this.minFractionDigits > 20) {\n\t\t\t\tthis.minFractionDigits = 20;\n\t\t\t}\n\t\t}\n\t\tif (options.style) {\n\t\t\t/**\n\t\t\t * @private\n\t\t\t * @type {string}\n\t\t\t */\n\t\t\tthis.style = options.style;\n\t\t}\n\t\tif (typeof(options.useNative) === 'boolean') {\n\t\t\t/**\n\t\t\t * @private\n\t\t\t * @type {boolean}\n\t\t\t * */\n\t\t\tthis.useNative = options.useNative;\n\t\t}\n\t\t/**\n\t\t * @private\n\t\t * @type {string}\n\t\t */\n\t\tthis.roundingMode = options.roundingMode;\n\n\t\tif (typeof (options.sync) !== 'undefined') {\n\t\t\t/** @type {boolean} */\n\t\t\tsync = (options.sync == true);\n\t\t}\n\n\t\tloadParams = options.loadParams;\n\t}\n\n\t/**\n\t * @private\n\t * @type {ilib.LocaleInfo|undefined}\n\t */\n\tthis.localeInfo = undefined;\n\n\tnew ilib.LocaleInfo(this.locale, {\n\t\tsync: sync,\n\t\tloadParams: loadParams,\n\t\tonLoad: ilib.bind(this, function (li) {\n\t\t\t/**\n\t\t\t * @private\n\t\t\t * @type {ilib.LocaleInfo|undefined}\n\t\t\t */\n\t\t\tthis.localeInfo = li;\n\n\t\t\tif (this.type === \"number\") {\n\t\t\t\tthis.templateNegative = new ilib.String(this.localeInfo.getNegativeNumberFormat() || \"-{n}\");\n\t\t\t} else if (this.type === \"currency\") {\n\t\t\t\tvar templates;\n\n\t\t\t\tif (!this.currency || typeof (this.currency) != 'string') {\n\t\t\t\t\tthrow \"A currency property is required in the options to the number formatter constructor when the type property is set to currency.\";\n\t\t\t\t}\n\n\t\t\t\tnew ilib.Currency({\n\t\t\t\t\tlocale: this.locale,\n\t\t\t\t\tcode: this.currency,\n\t\t\t\t\tsync: sync,\n\t\t\t\t\tloadParams: loadParams,\n\t\t\t\t\tonLoad: ilib.bind(this, function (cur) {\n\t\t\t\t\t\tthis.currencyInfo = cur;\n\t\t\t\t\t\tif (this.style !== \"common\" && this.style !== \"iso\") {\n\t\t\t\t\t\t\tthis.style = \"common\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (typeof(this.maxFractionDigits) !== 'number' && typeof(this.minFractionDigits) !== 'number') {\n\t\t\t\t\t\t\tthis.minFractionDigits = this.maxFractionDigits = this.currencyInfo.getFractionDigits();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttemplates = this.localeInfo.getCurrencyFormats();\n\t\t\t\t\t\tthis.template = new ilib.String(templates[this.style] || templates.common);\n\t\t\t\t\t\tthis.templateNegative = new ilib.String(templates[this.style + \"Negative\"] || templates[\"commonNegative\"]);\n\t\t\t\t\t\tthis.sign = (this.style === \"iso\") ? this.currencyInfo.getCode() : this.currencyInfo.getSign();\n\n\t\t\t\t\t\tif (!this.roundingMode) {\n\t\t\t\t\t\t\tthis.roundingMode = this.currencyInfo && this.currencyInfo.roundingMode;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._init();\n\n\t\t\t\t\t\tif (options && typeof (options.onLoad) === 'function') {\n\t\t\t\t\t\t\toptions.onLoad(this);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t} else if (this.type === \"percentage\") {\n\t\t\t\tthis.template =  new ilib.String(this.localeInfo.getPercentageFormat() || \"{n}%\");\n\t\t\t\tthis.templateNegative = new ilib.String(this.localeInfo.getNegativePercentageFormat() || this.localeInfo.getNegativeNumberFormat() + \"%\");\n\t\t\t}\n\n\t\t\tthis._init();\n\n\t\t\tif (options && typeof (options.onLoad) === 'function') {\n\t\t\t\toptions.onLoad(this);\n\t\t\t}\n\t\t})\n\t});\n};\n\n/**\n * Return an array of available locales that this formatter can format\n * @static\n * @return {Array.<ilib.Locale>|undefined} an array of available locales\n */\nilib.NumFmt.getAvailableLocales = function () {\n\treturn undefined;\n};\n\n/**\n * @private\n * @const\n * @type string\n */\nilib.NumFmt.zeros = \"0000000000000000000000000000000000000000000000000000000000000000000000\";\n\nilib.NumFmt.prototype = {\n\t/**\n\t * Return true if this formatter uses native digits to format the number. If the useNative\n\t * option is given to the constructor, then this flag will be honoured. If the useNative\n\t * option is not given to the constructor, this this formatter will use native digits if\n\t * the locale typically uses native digits.\n\t *\n\t *  @return {boolean} true if this formatter will format with native digits, false otherwise\n\t */\n\tgetUseNative: function() {\n\t\tif (typeof(this.useNative) === \"boolean\") {\n\t\t\treturn this.useNative;\n\t\t}\n\t\treturn (this.localeInfo.getDigitsStyle() === \"native\");\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_init: function () {\n\t\tif (this.maxFractionDigits < this.minFractionDigits) {\n\t\t\tthis.minFractionDigits = this.maxFractionDigits;\n\t\t}\n\n\t\tif (!this.roundingMode) {\n\t\t\tthis.roundingMode = this.localeInfo.getRoundingMode();\n\t\t}\n\n\t\tif (!this.roundingMode) {\n\t\t\tthis.roundingMode = \"halfdown\";\n\t\t}\n\n\t\t// set up the function, so we only have to figure it out once\n\t\t// and not every time we do format()\n\t\tthis.round = ilib._roundFnc[this.roundingMode];\n\t\tif (!this.round) {\n\t\t\tthis.roundingMode = \"halfdown\";\n\t\t\tthis.round = ilib._roundFnc[this.roundingMode];\n\t\t}\n\n\t\tif (this.style === \"nogrouping\") {\n\t\t\tthis.prigroupSize = this.secgroupSize = 0;\n\t\t} else {\n\t\t\tthis.prigroupSize = this.localeInfo.getPrimaryGroupingDigits();\n\t\t\tthis.secgroupSize = this.localeInfo.getSecondaryGroupingDigits();\n\t\t\tthis.groupingSeparator = this.getUseNative() ? this.localeInfo.getNativeGroupingSeparator() : this.localeInfo.getGroupingSeparator();\n\t\t}\n\t\tthis.decimalSeparator = this.getUseNative() ? this.localeInfo.getNativeDecimalSeparator() : this.localeInfo.getDecimalSeparator();\n\n\t\tif (this.getUseNative()) {\n\t\t\tvar nd = this.localeInfo.getNativeDigits() || this.localeInfo.getDigits();\n\t\t\tif (nd) {\n\t\t\t\tthis.digits = nd.split(\"\");\n\t\t\t}\n\t\t}\n\n\t\tthis.exponentSymbol = this.localeInfo.getExponential() || \"e\";\n\t},\n\n\t/*\n\t * @private\n\t */\n\t_pad: function (str, length, left) {\n\t\treturn (str.length >= length) ?\n\t\t\tstr :\n\t\t\t(left ?\n\t\t\tilib.NumFmt.zeros.substring(0, length - str.length) + str :\n\t\t\tstr + ilib.NumFmt.zeros.substring(0, length - str.length));\n\t},\n\n\t/**\n\t * @private\n\t * @param {Number|ilib.Number|string|number} num object, string, or number to convert to a primitive number\n\t * @return {number} the primitive number equivalent of the argument\n\t */\n\t_toPrimitive: function (num) {\n\t\tvar n = 0;\n\n\t\tswitch (typeof (num)) {\n\t\tcase 'number':\n\t\t\tn = num;\n\t\t\tbreak;\n\t\tcase 'string':\n\t\t\tn = parseFloat(num);\n\t\t\tbreak;\n\t\tcase 'object':\n\t\t\t// Number.valueOf() is incorrectly documented as being of type \"string\" rather than \"number\", so coerse\n\t\t\t// the type here to shut the type checker up\n\t\t\tn = /** @type {number} */ num.valueOf();\n\t\t\tbreak;\n\t\t}\n\n\t\treturn n;\n\t},\n\n\t/**\n\t * Format the number using scientific notation as a positive number. Negative\n\t * formatting to be applied later.\n\t * @private\n\t * @param {number} num the number to format\n\t * @return {string} the formatted number\n\t */\n\t_formatScientific: function (num) {\n\t\tvar n = new Number(num);\n\t\tvar formatted;\n\n\t\tvar factor,\n\t\t\tstr = n.toExponential(),\n\t\t\tparts = str.split(\"e\"),\n\t\t\tsignificant = parts[0],\n\t\t\texponent = parts[1],\n\t\t\tnumparts,\n\t\t\tintegral,\n\t\t\tfraction;\n\n\t\tif (this.maxFractionDigits > 0) {\n\t\t\t// if there is a max fraction digits setting, round the fraction to\n\t\t\t// the right length first by dividing or multiplying by powers of 10.\n\t\t\t// manipulate the fraction digits so as to\n\t\t\t// avoid the rounding errors of floating point numbers\n\t\t\tfactor = Math.pow(10, this.maxFractionDigits);\n\t\t\tsignificant = this.round(significant * factor) / factor;\n\t\t}\n\t\tnumparts = (\"\" + significant).split(\".\");\n\t\tintegral = numparts[0];\n\t\tfraction = numparts[1];\n\n\t\tif (typeof(this.maxFractionDigits) !== 'undefined') {\n\t\t\tfraction = fraction.substring(0, this.maxFractionDigits);\n\t\t}\n\t\tif (typeof(this.minFractionDigits) !== 'undefined') {\n\t\t\tfraction = this._pad(fraction || \"\", this.minFractionDigits, false);\n\t\t}\n\t\tformatted = integral;\n\t\tif (fraction.length) {\n\t\t\tformatted += this.decimalSeparator + fraction;\n\t\t}\n\t\tformatted += this.exponentSymbol + exponent;\n\t\treturn formatted;\n\t},\n\n\t/**\n\t * Formats the number as a positive number. Negative formatting to be applied later.\n\t * @private\n\t * @param {number} num the number to format\n\t * @return {string} the formatted number\n\t */\n\t_formatStandard: function (num) {\n\t\tvar i;\n\t\tvar k;\n\n\t\tif (typeof(this.maxFractionDigits) !== 'undefined' && this.maxFractionDigits > -1) {\n\t\t\tvar factor = Math.pow(10, this.maxFractionDigits);\n\t\t\tnum = this.round(num * factor) / factor;\n\t\t}\n\n\t\tnum = Math.abs(num);\n\n\t\tvar parts = (\"\" + num).split(\".\"),\n\t\t\tintegral = parts[0],\n\t\t\tfraction = parts[1],\n\t\t\tcycle,\n\t\t\tformatted;\n\n\t\tintegral = integral.toString();\n\n\t\tif (this.minFractionDigits > 0) {\n\t\t\tfraction = this._pad(fraction || \"\", this.minFractionDigits, false);\n\t\t}\n\n\t\tif (this.secgroupSize > 0) {\n\t\t\tif (integral.length > this.prigroupSize) {\n\t\t\t\tvar size1 = this.prigroupSize;\n\t\t\t\tvar size2 = integral.length;\n\t\t\t\tvar size3 = size2 - size1;\n\t\t\t\tintegral = integral.slice(0, size3) + this.groupingSeparator + integral.slice(size3);\n\t\t\t\tvar num_sec = integral.substring(0, integral.indexOf(this.groupingSeparator));\n\t\t\t\tk = num_sec.length;\n\t\t\t\twhile (k > this.secgroupSize) {\n\t\t\t\t\tvar secsize1 = this.secgroupSize;\n\t\t\t\t\tvar secsize2 = num_sec.length;\n\t\t\t\t\tvar secsize3 = secsize2 - secsize1;\n\t\t\t\t\tintegral = integral.slice(0, secsize3) + this.groupingSeparator + integral.slice(secsize3);\n\t\t\t\t\tnum_sec = integral.substring(0, integral.indexOf(this.groupingSeparator));\n\t\t\t\t\tk = num_sec.length;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tformatted = integral;\n\t\t} else if (this.prigroupSize !== 0) {\n\t\t\tcycle = ilib.mod(integral.length - 1, this.prigroupSize);\n\n\t\t\tformatted = \"\";\n\n\t\t\tfor (i = 0; i < integral.length - 1; i++) {\n\t\t\t\tformatted += integral.charAt(i);\n\t\t\t\tif (cycle === 0) {\n\t\t\t\t\tformatted += this.groupingSeparator;\n\t\t\t\t}\n\t\t\t\tcycle = ilib.mod(cycle - 1, this.prigroupSize);\n\t\t\t}\n\t\t\tformatted += integral.charAt(integral.length - 1);\n\t\t} else {\n\t\t\tformatted = integral;\n\t\t}\n\n\t\tif (fraction && (typeof(this.maxFractionDigits) === 'undefined' || this.maxFractionDigits > 0)) {\n\t\t\tformatted += this.decimalSeparator;\n\t\t\tformatted += fraction;\n\t\t}\n\n\t\tif (this.digits) {\n\t\t\tformatted = ilib.mapString(formatted, this.digits);\n\t\t}\n\n\t\treturn formatted;\n\t},\n\n\t/**\n\t * Format a number according to the settings of this number formatter instance.\n\t * @param num {number|string|Number|ilib.Number} a floating point number to format\n\t * @return {string} a string containing the formatted number\n\t */\n\tformat: function (num) {\n\t\tvar formatted, n;\n\n\t\tif (typeof (num) === 'undefined') {\n\t\t\treturn \"\";\n\t\t}\n\n\t\t// convert to a real primitive number type\n\t\tn = this._toPrimitive(num);\n\n\t\tif (this.type === \"number\") {\n\t\t\tformatted = (this.style === \"scientific\") ?\n\t\t\t\tthis._formatScientific(n) :\n\t\t\t\tthis._formatStandard(n);\n\n\t\t\tif (num < 0) {\n\t\t\t\tformatted = this.templateNegative.format({n: formatted});\n\t\t\t}\n\t\t} else {\n\t\t\tformatted = this._formatStandard(n);\n\t\t\tvar template = (n < 0) ? this.templateNegative : this.template;\n\t\t\tformatted = template.format({\n\t\t\t\tn: formatted,\n\t\t\t\ts: this.sign\n\t\t\t});\n\t\t}\n\n\t\treturn formatted;\n\t},\n\n\t/**\n\t * Return the type of formatter. Valid values are \"number\", \"currency\", and\n\t * \"percentage\".\n\t *\n\t * @return {string} the type of formatter\n\t */\n\tgetType: function () {\n\t\treturn this.type;\n\t},\n\n\t/**\n\t * Return the locale for this formatter instance.\n\t * @return {ilib.Locale} the locale instance for this formatter\n\t */\n\tgetLocale: function () {\n\t\treturn this.locale;\n\t},\n\n\t/**\n\t * Returns true if this formatter groups together digits in the integral\n\t * portion of a number, based on the options set up in the constructor. In\n\t * most western European cultures, this means separating every 3 digits\n\t * of the integral portion of a number with a particular character.\n\t *\n\t * @return {boolean} true if this formatter groups digits in the integral\n\t * portion of the number\n\t */\n\tisGroupingUsed: function () {\n\t\treturn (this.groupingSeparator !== 'undefined' && this.groupingSeparator.length > 0);\n\t},\n\n\t/**\n\t * Returns the maximum fraction digits set up in the constructor.\n\t *\n\t * @return {number} the maximum number of fractional digits this\n\t * formatter will format, or -1 for no maximum\n\t */\n\tgetMaxFractionDigits: function () {\n\t\treturn typeof (this.maxFractionDigits) !== 'undefined' ? this.maxFractionDigits : -1;\n\t},\n\n\t/**\n\t * Returns the minimum fraction digits set up in the constructor. If\n\t * the formatter has the type \"currency\", then the minimum fraction\n\t * digits is the amount of digits that is standard for the currency\n\t * in question unless overridden in the options to the constructor.\n\t *\n\t * @return {number} the minimum number of fractional digits this\n\t * formatter will format, or -1 for no minimum\n\t */\n\tgetMinFractionDigits: function () {\n\t\treturn typeof (this.minFractionDigits) !== 'undefined' ? this.minFractionDigits : -1;\n\t},\n\n\t/**\n\t * Returns the ISO 4217 code for the currency that this formatter formats.\n\t * IF the typeof this formatter is not \"currency\", then this method will\n\t * return undefined.\n\t *\n\t * @return {string} the ISO 4217 code for the currency that this formatter\n\t * formats, or undefined if this not a currency formatter\n\t */\n\tgetCurrency: function () {\n\t\treturn this.currencyInfo && this.currencyInfo.getCode();\n\t},\n\n\t/**\n\t * Returns the rounding mode set up in the constructor. The rounding mode\n\t * controls how numbers are rounded when the integral or fraction digits\n\t * of a number are limited.\n\t *\n\t * @return {string} the name of the rounding mode used in this formatter\n\t */\n\tgetRoundingMode: function () {\n\t\treturn this.roundingMode;\n\t},\n\n\t/**\n\t * If this formatter is a currency formatter, then the style determines how the\n\t * currency is denoted in the formatted output. This method returns the style\n\t * that this formatter will produce. (See the constructor comment for more about\n\t * the styles.)\n\t * @return {string} the name of the style this formatter will use to format\n\t * currency amounts, or \"undefined\" if this formatter is not a currency formatter\n\t */\n\tgetStyle: function () {\n\t\treturn this.style;\n\t}\n};\n\n/*\n * durfmt.js - Date formatter definition\n *\n * Copyright © 2012-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n!depends\nilibglobal.js\nlocale.js\ndate.js\nstrings.js\nresources.js\nlocaleinfo.js\nutil/jsutils.js\n*/\n\n// !data dateformats sysres\n// !resbundle sysres\n\n/**\n * @class\n * Create a new duration formatter instance. The duration formatter is immutable once\n * it is created, but can format as many different durations as needed with the same\n * options. Create different duration formatter instances for different purposes\n * and then keep them cached for use later if you have more than one duration to\n * format.<p>\n *\n * Duration formatters format lengths of time. The duration formatter is meant to format\n * durations of such things as the length of a song or a movie or a meeting, or the\n * current position in that song or movie while playing it. If you wish to format a\n * period of time that has a specific start and end date/time, then use a\n * [ilib.DateRngFmt] instance instead and call its format method.<p>\n *\n * The options may contain any of the following properties:\n *\n * <ul>\n * <li><i>locale</i> - locale to use when formatting the duration. If the locale is\n * not specified, then the default locale of the app or web page will be used.\n *\n * <li><i>length</i> - Specify the length of the format to use. The length is the approximate size of the\n * formatted string.\n *\n * <ul>\n * <li><i>short</i> - use a short representation of the duration. This is the most compact format possible for the locale. eg. 1y 1m 1w 1d 1:01:01\n * <li><i>medium</i> - use a medium length representation of the duration. This is a slightly longer format. eg. 1 yr 1 mo 1 wk 1 dy 1 hr 1 mi 1 se\n * <li><i>long</i> - use a long representation of the duration. This is a fully specified format, but some of the textual\n * parts may still be abbreviated. eg. 1 yr 1 mo 1 wk 1 day 1 hr 1 min 1 sec\n * <li><i>full</i> - use a full representation of the duration. This is a fully specified format where all the textual\n * parts are spelled out completely. eg. 1 year, 1 month, 1 week, 1 day, 1 hour, 1 minute and 1 second\n * </ul>\n *\n * <li><i>style<i> - whether hours, minutes, and seconds should be formatted as a text string\n * or as a regular time as on a clock. eg. text is \"1 hour, 15 minutes\", whereas clock is \"1:15:00\". Valid\n * values for this property are \"text\" or \"clock\". Default if this property is not specified\n * is \"text\".\n *\n *<li><i>useNative</i> - the flag used to determaine whether to use the native script settings\n * for formatting the numbers .\n *\n * <li><i>onLoad</i> - a callback function to call when the format data is fully\n * loaded. When the onLoad option is given, this class will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the\n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n *\n * <li>sync - tell whether to load any missing locale data synchronously or\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the\n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object\n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n * <p>\n *\n * Depends directive: !depends durfmt.js\n *\n * @constructor\n * @param {?Object} options options governing the way this date formatter instance works\n */\nilib.DurFmt = function(options) {\n\tvar sync = true;\n\tvar loadParams = undefined;\n\n\tthis.locale = new ilib.Locale();\n\tthis.length = \"short\";\n\tthis.style = \"text\";\n\n\tif (options) {\n\t\tif (options.locale) {\n\t\t\tthis.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;\n\t\t}\n\n\t\tif (options.length) {\n\t\t\tif (options.length === 'short' ||\n\t\t\t\toptions.length === 'medium' ||\n\t\t\t\toptions.length === 'long' ||\n\t\t\t\toptions.length === 'full') {\n\t\t\t\tthis.length = options.length;\n\t\t\t}\n\t\t}\n\n\t\tif (options.style) {\n\t\t\tif (options.style === 'text' || options.style === 'clock') {\n\t\t\t\tthis.style = options.style;\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(options.sync) !== 'undefined') {\n\t\t\tsync = (options.sync == true);\n\t\t}\n\n\t\tif (typeof(options.useNative) === 'boolean') {\n\t\t\tthis.useNative = options.useNative;\n\t\t}\n\n\t\tloadParams = options.loadParams;\n\t}\n\n\tnew ilib.ResBundle({\n\t\tlocale: this.locale,\n\t\tname: \"sysres\",\n\t\tsync: sync,\n\t\tloadParams: loadParams,\n\t\tonLoad: ilib.bind(this, function (sysres) {\n\t\t\tswitch (this.length) {\n\t\t\t\tcase 'short':\n\t\t\t\t\tthis.components = {\n\t\t\t\t\t\tyear: sysres.getString(\"#{num}y\"),\n\t\t\t\t\t\tmonth: sysres.getString(\"#{num}m\", \"durationShortMonths\"),\n\t\t\t\t\t\tweek: sysres.getString(\"#{num}w\"),\n\t\t\t\t\t\tday: sysres.getString(\"#{num}d\"),\n\t\t\t\t\t\thour: sysres.getString(\"#{num}h\"),\n\t\t\t\t\t\tminute: sysres.getString(\"#{num}m\", \"durationShortMinutes\"),\n\t\t\t\t\t\tsecond: sysres.getString(\"#{num}s\"),\n\t\t\t\t\t\tmillisecond: sysres.getString(\"#{num}m\", \"durationShortMillis\"),\n\t\t\t\t\t\tseparator: sysres.getString(\" \", \"separatorShort\"),\n\t\t\t\t\t\tfinalSeparator: \"\" // not used at this length\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'medium':\n\t\t\t\t\tthis.components = {\n\t\t\t\t\t\tyear: sysres.getString(\"1#1 yr|#{num} yrs\", \"durationMediumYears\"),\n\t\t\t\t\t\tmonth: sysres.getString(\"1#1 mo|#{num} mos\"),\n\t\t\t\t\t\tweek: sysres.getString(\"1#1 wk|#{num} wks\", \"durationMediumWeeks\"),\n\t\t\t\t\t\tday: sysres.getString(\"1#1 dy|#{num} dys\"),\n\t\t\t\t\t\thour: sysres.getString(\"1#1 hr|#{num} hrs\", \"durationMediumHours\"),\n\t\t\t\t\t\tminute: sysres.getString(\"1#1 mi|#{num} min\"),\n\t\t\t\t\t\tsecond: sysres.getString(\"1#1 se|#{num} sec\"),\n\t\t\t\t\t\tmillisecond: sysres.getString(\"#{num} ms\"),\n\t\t\t\t\t\tseparator: sysres.getString(\" \", \"separatorMedium\"),\n\t\t\t\t\t\tfinalSeparator: \"\" // not used at this length\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'long':\n\t\t\t\t\tthis.components = {\n\t\t\t\t\t\tyear: sysres.getString(\"1#1 yr|#{num} yrs\"),\n\t\t\t\t\t\tmonth: sysres.getString(\"1#1 mon|#{num} mons\"),\n\t\t\t\t\t\tweek: sysres.getString(\"1#1 wk|#{num} wks\"),\n\t\t\t\t\t\tday: sysres.getString(\"1#1 day|#{num} days\", \"durationLongDays\"),\n\t\t\t\t\t\thour: sysres.getString(\"1#1 hr|#{num} hrs\"),\n\t\t\t\t\t\tminute: sysres.getString(\"1#1 min|#{num} min\"),\n\t\t\t\t\t\tsecond: sysres.getString(\"1#1 sec|#{num} sec\"),\n\t\t\t\t\t\tmillisecond: sysres.getString(\"#{num} ms\"),\n\t\t\t\t\t\tseparator: sysres.getString(\", \", \"separatorLong\"),\n\t\t\t\t\t\tfinalSeparator: \"\" // not used at this length\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'full':\n\t\t\t\t\tthis.components = {\n\t\t\t\t\t\tyear: sysres.getString(\"1#1 year|#{num} years\"),\n\t\t\t\t\t\tmonth: sysres.getString(\"1#1 month|#{num} months\"),\n\t\t\t\t\t\tweek: sysres.getString(\"1#1 week|#{num} weeks\"),\n\t\t\t\t\t\tday: sysres.getString(\"1#1 day|#{num} days\"),\n\t\t\t\t\t\thour: sysres.getString(\"1#1 hour|#{num} hours\"),\n\t\t\t\t\t\tminute: sysres.getString(\"1#1 minute|#{num} minutes\"),\n\t\t\t\t\t\tsecond: sysres.getString(\"1#1 second|#{num} seconds\"),\n\t\t\t\t\t\tmillisecond: sysres.getString(\"1#1 millisecond|#{num} milliseconds\"),\n\t\t\t\t\t\tseparator: sysres.getString(\", \", \"separatorFull\"),\n\t\t\t\t\t\tfinalSeparator: sysres.getString(\" and \", \"finalSeparatorFull\")\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (this.style === 'clock') {\n\t\t\t\tnew ilib.DateFmt({\n\t\t\t\t\tlocale: this.locale,\n\t\t\t\t\tcalendar: \"gregorian\",\n\t\t\t\t\ttype: \"time\",\n\t\t\t\t\ttime: \"ms\",\n\t\t\t\t\tsync: sync,\n\t\t\t\t\tloadParams: loadParams,\n\t\t\t\t\tuseNative: this.useNative,\n\t\t\t\t\tonLoad: ilib.bind(this, function (fmtMS) {\n\t\t\t\t\t\tthis.timeFmtMS = fmtMS;\n\t\t\t\t\t\tnew ilib.DateFmt({\n\t\t\t\t\t\t\tlocale: this.locale,\n\t\t\t\t\t\t\tcalendar: \"gregorian\",\n\t\t\t\t\t\t\ttype: \"time\",\n\t\t\t\t\t\t\ttime: \"hm\",\n\t\t\t\t\t\t\tsync: sync,\n\t\t\t\t\t\t\tloadParams: loadParams,\n\t\t\t\t\t\t\tuseNative: this.useNative,\n\t\t\t\t\t\t\tonLoad: ilib.bind(this, function (fmtHM) {\n\t\t\t\t\t\t\t\tthis.timeFmtHM = fmtHM;\n\t\t\t\t\t\t\t\tnew ilib.DateFmt({\n\t\t\t\t\t\t\t\t\tlocale: this.locale,\n\t\t\t\t\t\t\t\t\tcalendar: \"gregorian\",\n\t\t\t\t\t\t\t\t\ttype: \"time\",\n\t\t\t\t\t\t\t\t\ttime: \"hms\",\n\t\t\t\t\t\t\t\t\tsync: sync,\n\t\t\t\t\t\t\t\t\tloadParams: loadParams,\n\t\t\t\t\t\t\t\t\tuseNative: this.useNative,\n\t\t\t\t\t\t\t\t\tonLoad: ilib.bind(this, function (fmtHMS) {\n\t\t\t\t\t\t\t\t\t\tthis.timeFmtHMS = fmtHMS;\n\n\t\t\t\t\t\t\t\t\t\t// munge with the template to make sure that the hours are not formatted mod 12\n\t\t\t\t\t\t\t\t\t\tthis.timeFmtHM.template = this.timeFmtHM.template.replace(/hh?/, 'H');\n\t\t\t\t\t\t\t\t\t\tthis.timeFmtHM.templateArr = this.timeFmtHM._tokenize(this.timeFmtHM.template);\n\t\t\t\t\t\t\t\t\t\tthis.timeFmtHMS.template = this.timeFmtHMS.template.replace(/hh?/, 'H');\n\t\t\t\t\t\t\t\t\t\tthis.timeFmtHMS.templateArr = this.timeFmtHMS._tokenize(this.timeFmtHMS.template);\n\n\t\t\t\t\t\t\t\t\t\tthis._init(this.timeFmtHM.locinfo, options && options.onLoad);\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tnew ilib.LocaleInfo(this.locale, {\n\t\t\t\tsync: sync,\n\t\t\t\tloadParams: loadParams,\n\t\t\t\tonLoad: ilib.bind(this, function (li) {\n\t\t\t\t\tthis._init(li, options && options.onLoad);\n\t\t\t\t})\n\t\t\t});\n\t\t})\n\t});\n};\n\n/**\n * @private\n * @static\n */\nilib.DurFmt.complist = {\n\t\"text\": [\"year\", \"month\", \"week\", \"day\", \"hour\", \"minute\", \"second\", \"millisecond\"],\n\t\"clock\": [\"year\", \"month\", \"week\", \"day\"]\n};\n\n/**\n * @private\n */\nilib.DurFmt.prototype._mapDigits = function(str) {\n\tif (this.useNative && this.digits) {\n\t\treturn ilib.mapString(str.toString(), this.digits);\n\t}\n\treturn str;\n};\n\n/**\n * @private\n * @param {ilib.LocaleInfo} locinfo\n * @param {function(ilib.DurFmt)|undefined} onLoad\n */\nilib.DurFmt.prototype._init = function(locinfo, onLoad) {\n\tvar digits;\n\tif (typeof(this.useNative) === 'boolean') {\n\t\t// if the caller explicitly said to use native or not, honour that despite what the locale data says...\n\t\tif (this.useNative) {\n\t\t\tdigits = locinfo.getNativeDigits();\n\t\t\tif (digits) {\n\t\t\t\tthis.digits = digits;\n\t\t\t}\n\t\t}\n\t} else if (locinfo.getDigitsStyle() === \"native\") {\n\t\t// else if the locale usually uses native digits, then use them\n\t\tdigits = locinfo.getNativeDigits();\n\t\tif (digits) {\n\t\t\tthis.useNative = true;\n\t\t\tthis.digits = digits;\n\t\t}\n\t} // else use western digits always\n\n\tif (typeof(onLoad) === 'function') {\n\t\tonLoad(this);\n\t}\n};\n\n/**\n * Format a duration according to the format template of this formatter instance.<p>\n *\n * The components parameter should be an object that contains any or all of these\n * numeric properties:\n *\n * <ul>\n * <li>year\n * <li>month\n * <li>week\n * <li>day\n * <li>hour\n * <li>minute\n * <li>second\n * </ul>\n * <p>\n *\n * When a property is left out of the components parameter or has a value of 0, it will not\n * be formatted into the output string, except for times that include 0 minutes and 0 seconds.\n *\n * This formatter will not ensure that numbers for each component property is within the\n * valid range for that component. This allows you to format durations that are longer\n * than normal range. For example, you could format a duration has being \"33 hours\" rather\n * than \"1 day, 9 hours\".\n *\n * @param {Object} components date/time components to be formatted into a duration string\n * @return {ilib.String} a string with the duration formatted according to the style and\n * locale set up for this formatter instance. If the components parameter is empty or\n * undefined, an empty string is returned.\n */\nilib.DurFmt.prototype.format = function (components) {\n\tvar i, list, temp, fmt, secondlast = true, str = \"\";\n\n\tlist = ilib.DurFmt.complist[this.style];\n\t//for (i = 0; i < list.length; i++) {\n\tfor (i = list.length-1; i >= 0; i--) {\n\t\t//console.log(\"Now dealing with \" + list[i]);\n\t\tif (typeof(components[list[i]]) !== 'undefined' && components[list[i]] != 0) {\n\t\t\tif (str.length > 0) {\n\t\t\t\tstr = ((this.length === 'full' && secondlast) ? this.components.finalSeparator : this.components.separator) + str;\n\t\t\t\tsecondlast = false;\n\t\t\t}\n\t\t\tstr = this.components[list[i]].formatChoice(components[list[i]], {num: this._mapDigits(components[list[i]])}) + str;\n\t\t}\n\t}\n\n\tif (this.style === 'clock') {\n\t\tif (typeof(components.hour) !== 'undefined') {\n\t\t\tfmt = (typeof(components.second) !== 'undefined') ? this.timeFmtHMS : this.timeFmtHM;\n\t\t} else {\n\t\t\tfmt = this.timeFmtMS;\n\t\t}\n\n\t\tif (str.length > 0) {\n\t\t\tstr += this.components.separator;\n\t\t}\n\t\tstr += fmt._formatTemplate(components, fmt.templateArr);\n\t}\n\n\treturn new ilib.String(str);\n};\n\n/**\n * Return the locale that was used to construct this duration formatter object. If the\n * locale was not given as parameter to the constructor, this method returns the default\n * locale of the system.\n *\n * @return {ilib.Locale} locale that this duration formatter was constructed with\n */\nilib.DurFmt.prototype.getLocale = function () {\n\treturn this.locale;\n};\n\n/**\n * Return the length that was used to construct this duration formatter object. If the\n * length was not given as parameter to the constructor, this method returns the default\n * length. Valid values are \"short\", \"medium\", \"long\", and \"full\".\n *\n * @return {string} length that this duration formatter was constructed with\n */\nilib.DurFmt.prototype.getLength = function () {\n\treturn this.length;\n};\n\n/**\n * Return the style that was used to construct this duration formatter object. Returns\n * one of \"text\" or \"clock\".\n *\n * @return {string} style that this duration formatter was constructed with\n */\nilib.DurFmt.prototype.getStyle = function () {\n\treturn this.style;\n};\n\n/*\n * ctype.islpha.js - Character type is alphabetic\n *\n * Copyright © 2012-2013, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ctype.js\n\n// !data ctype_l\n\n/**\n * Return whether or not the first character is alphabetic.<p>\n *\n * Depends directive: !depends ctype.isalnum.js\n *\n * @param {string|ilib.String|number} ch character or code point to examine\n * @return {boolean} true if the first character is alphabetic.\n */\nilib.CType.isAlpha = function (ch) {\n\tvar num;\n\tswitch (typeof(ch)) {\n\t\tcase 'number':\n\t\t\tnum = ch;\n\t\t\tbreak;\n\t\tcase 'string':\n\t\t\tnum = ilib.String.toCodePoint(ch, 0);\n\t\t\tbreak;\n\t\tcase 'undefined':\n\t\t\treturn false;\n\t\tdefault:\n\t\t\tnum = ch._toCodePoint(0);\n\t\t\tbreak;\n\t}\n\treturn ilib.CType._inRange(num, 'Lu', ilib.data.ctype_l) ||\n\t\tilib.CType._inRange(num, 'Ll', ilib.data.ctype_l) ||\n\t\tilib.CType._inRange(num, 'Lt', ilib.data.ctype_l) ||\n\t\tilib.CType._inRange(num, 'Lm', ilib.data.ctype_l) ||\n\t\tilib.CType._inRange(num, 'Lo', ilib.data.ctype_l);\n};\n\n/**\n * @protected\n * @param {boolean} sync\n * @param {Object} loadParams\n * @param {function(*)|undefined} onLoad\n */\nilib.CType.isAlpha._init = function (sync, loadParams, onLoad) {\n\tilib.CType._load(\"ctype_l\", sync, loadParams, onLoad);\n};\n\n\n\n/*\n * ctype.isalnum.js - Character type alphanumeric\n *\n * Copyright © 2012-2013, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ctype.js ctype.isalpha.js ctype.isdigit.js\n\n/**\n * Return whether or not the first character is alphabetic or numeric.<p>\n *\n * Depends directive: !depends ctype.isalnum.js\n *\n * @param {string|ilib.String|number} ch character or code point to examine\n * @return {boolean} true if the first character is alphabetic or numeric\n */\nilib.CType.isAlnum = function isAlnum(ch) {\n\tvar num;\n\tswitch (typeof(ch)) {\n\t\tcase 'number':\n\t\t\tnum = ch;\n\t\t\tbreak;\n\t\tcase 'string':\n\t\t\tnum = ilib.String.toCodePoint(ch, 0);\n\t\t\tbreak;\n\t\tcase 'undefined':\n\t\t\treturn false;\n\t\tdefault:\n\t\t\tnum = ch._toCodePoint(0);\n\t\t\tbreak;\n\t}\n\treturn ilib.CType.isAlpha(num) || ilib.CType.isDigit(num);\n};\n\n/**\n * @protected\n * @param {boolean} sync\n * @param {Object} loadParams\n * @param {function(*)|undefined} onLoad\n */\nilib.CType.isAlnum._init = function (sync, loadParams, onLoad) {\n\tilib.CType.isAlpha._init(sync, loadParams, function () {\n\t\tilib.CType.isDigit._init(sync, loadParams, onLoad);\n\t});\n};\n\n/*\n * ctype.isascii.js - Character type is ASCII\n *\n * Copyright © 2012-2013, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ctype.js\n\n// !data ctype\n\n/**\n * Return whether or not the first character is in the ASCII range.<p>\n *\n * Depends directive: !depends ctype.isascii.js\n *\n * @param {string|ilib.String|number} ch character or code point to examine\n * @return {boolean} true if the first character is in the ASCII range.\n */\nilib.CType.isAscii = function (ch) {\n\tvar num;\n\tswitch (typeof(ch)) {\n\t\tcase 'number':\n\t\t\tnum = ch;\n\t\t\tbreak;\n\t\tcase 'string':\n\t\t\tnum = ilib.String.toCodePoint(ch, 0);\n\t\t\tbreak;\n\t\tcase 'undefined':\n\t\t\treturn false;\n\t\tdefault:\n\t\t\tnum = ch._toCodePoint(0);\n\t\t\tbreak;\n\t}\n\treturn ilib.CType._inRange(num, 'ascii', ilib.data.ctype);\n};\n\n/**\n * @protected\n * @param {boolean} sync\n * @param {Object} loadParams\n * @param {function(*)|undefined} onLoad\n */\nilib.CType.isAscii._init = function (sync, loadParams, onLoad) {\n\tilib.CType._init(sync, loadParams, onLoad);\n};\n\n/*\n * ctype.isblank.js - Character type is blank\n *\n * Copyright © 2012-2013, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ctype.js\n\n// !data ctype\n\n/**\n * Return whether or not the first character is a blank character.<p>\n *\n * Depends directive: !depends ctype.isblank.js\n *\n * ie. a space or a tab.\n * @param {string|ilib.String|number} ch character or code point to examine\n * @return {boolean} true if the first character is a blank character.\n */\nilib.CType.isBlank = function (ch) {\n\tvar num;\n\tswitch (typeof(ch)) {\n\t\tcase 'number':\n\t\t\tnum = ch;\n\t\t\tbreak;\n\t\tcase 'string':\n\t\t\tnum = ilib.String.toCodePoint(ch, 0);\n\t\t\tbreak;\n\t\tcase 'undefined':\n\t\t\treturn false;\n\t\tdefault:\n\t\t\tnum = ch._toCodePoint(0);\n\t\t\tbreak;\n\t}\n\treturn ilib.CType._inRange(num, 'blank', ilib.data.ctype);\n};\n\n/**\n * @protected\n * @param {boolean} sync\n * @param {Object} loadParams\n * @param {function(*)|undefined} onLoad\n */\nilib.CType.isBlank._init = function (sync, loadParams, onLoad) {\n\tilib.CType._init(sync, loadParams, onLoad);\n};\n\n/*\n * ctype.iscntrl.js - Character type is control character\n *\n * Copyright © 2012-2013, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ctype.js\n\n// !data ctype_c\n\n/**\n * Return whether or not the first character is a control character.<p>\n *\n * Depends directive: !depends ctype.iscntrl.js\n *\n * @param {string|ilib.String|number} ch character or code point to examine\n * @return {boolean} true if the first character is a control character.\n */\nilib.CType.isCntrl = function (ch) {\n\tvar num;\n\tswitch (typeof(ch)) {\n\t\tcase 'number':\n\t\t\tnum = ch;\n\t\t\tbreak;\n\t\tcase 'string':\n\t\t\tnum = ilib.String.toCodePoint(ch, 0);\n\t\t\tbreak;\n\t\tcase 'undefined':\n\t\t\treturn false;\n\t\tdefault:\n\t\t\tnum = ch._toCodePoint(0);\n\t\t\tbreak;\n\t}\n\treturn ilib.CType._inRange(num, 'Cc', ilib.data.ctype_c);\n};\n\n/**\n * @protected\n * @param {boolean} sync\n * @param {Object} loadParams\n * @param {function(*)|undefined} onLoad\n */\nilib.CType.isCntrl._init = function (sync, loadParams, onLoad) {\n\tilib.CType._load(\"ctype_c\", sync, loadParams, onLoad);\n};\n\n/*\n * ctype.isgraph.js - Character type is graph char\n *\n * Copyright © 2012-2013, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ctype.js ctype.isspace.js ctype.iscntrl.js\n\n/**\n * Return whether or not the first character is any printable character\n * other than space.<p>\n *\n * Depends directive: !depends ctype.isgraph.js\n *\n * @param {string|ilib.String|number} ch character or code point to examine\n * @return {boolean} true if the first character is any printable character\n * other than space.\n */\nilib.CType.isGraph = function (ch) {\n\tvar num;\n\tswitch (typeof(ch)) {\n\t\tcase 'number':\n\t\t\tnum = ch;\n\t\t\tbreak;\n\t\tcase 'string':\n\t\t\tnum = ilib.String.toCodePoint(ch, 0);\n\t\t\tbreak;\n\t\tcase 'undefined':\n\t\t\treturn false;\n\t\tdefault:\n\t\t\tnum = ch._toCodePoint(0);\n\t\t\tbreak;\n\t}\n\treturn typeof(ch) !== 'undefined' && ch.length > 0 && !ilib.CType.isSpace(num) && !ilib.CType.isCntrl(num);\n};\n\n/**\n * @protected\n * @param {boolean} sync\n * @param {Object} loadParams\n * @param {function(*)|undefined} onLoad\n */\nilib.CType.isGraph._init = function (sync, loadParams, onLoad) {\n\tilib.CType.isSpace._init(sync, loadParams, function () {\n\t\tilib.CType.isCntrl._init(sync, loadParams, onLoad);\n\t});\n};\n\n/*\n * ctype.js - Character type definitions\n *\n * Copyright © 2012-2013, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ctype.js\n\n// !data ctype\n\n/**\n * Return whether or not the first character is an ideographic character.<p>\n *\n * Depends directive: !depends ctype.isideo.js\n *\n * @param {string|ilib.String|number} ch character or code point to examine\n * @return {boolean} true if the first character is an ideographic character.\n */\nilib.CType.isIdeo = function (ch) {\n\tvar num;\n\tswitch (typeof(ch)) {\n\t\tcase 'number':\n\t\t\tnum = ch;\n\t\t\tbreak;\n\t\tcase 'string':\n\t\t\tnum = ilib.String.toCodePoint(ch, 0);\n\t\t\tbreak;\n\t\tcase 'undefined':\n\t\t\treturn false;\n\t\tdefault:\n\t\t\tnum = ch._toCodePoint(0);\n\t\t\tbreak;\n\t}\n\n\treturn ilib.CType._inRange(num, 'cjk', ilib.data.ctype) ||\n\t\tilib.CType._inRange(num, 'cjkradicals', ilib.data.ctype) ||\n\t\tilib.CType._inRange(num, 'enclosedcjk', ilib.data.ctype) ||\n\t\tilib.CType._inRange(num, 'cjkpunct', ilib.data.ctype) ||\n\t\tilib.CType._inRange(num, 'cjkcompatibility', ilib.data.ctype);\n};\n\n/**\n * @protected\n * @param {boolean} sync\n * @param {Object} loadParams\n * @param {function(*)|undefined} onLoad\n */\nilib.CType.isIdeo._init = function (sync, loadParams, onLoad) {\n\tilib.CType._init(sync, loadParams, onLoad);\n};\n\n/*\n * ctype.islower.js - Character type is lower case letter\n *\n * Copyright © 2012-2013, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ctype.js\n\n// !data ctype_l\n\n/**\n * Return whether or not the first character is lower-case. For alphabetic\n * characters in scripts that do not make a distinction between upper- and\n * lower-case, this function always returns true.<p>\n *\n * Depends directive: !depends ctype.islower.js\n *\n * @param {string|ilib.String|number} ch character or code point to examine\n * @return {boolean} true if the first character is lower-case.\n */\nilib.CType.isLower = function (ch) {\n\tvar num;\n\tswitch (typeof(ch)) {\n\t\tcase 'number':\n\t\t\tnum = ch;\n\t\t\tbreak;\n\t\tcase 'string':\n\t\t\tnum = ilib.String.toCodePoint(ch, 0);\n\t\t\tbreak;\n\t\tcase 'undefined':\n\t\t\treturn false;\n\t\tdefault:\n\t\t\tnum = ch._toCodePoint(0);\n\t\t\tbreak;\n\t}\n\n\treturn ilib.CType._inRange(num, 'Ll', ilib.data.ctype_l);\n};\n\n/**\n * @protected\n * @param {boolean} sync\n * @param {Object} loadParams\n * @param {function(*)|undefined} onLoad\n */\nilib.CType.isLower._init = function (sync, loadParams, onLoad) {\n\tilib.CType._load(\"ctype_l\", sync, loadParams, onLoad);\n};\n\n/*\n * ctype.isprint.js - Character type is printable char\n *\n * Copyright © 2012-2013, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ctype.js ctype.iscntrl.js\n\n/**\n * Return whether or not the first character is any printable character,\n * including space.<p>\n *\n * Depends directive: !depends ctype.isprint.js\n *\n * @param {string|ilib.String|number} ch character or code point to examine\n * @return {boolean} true if the first character is printable.\n */\nilib.CType.isPrint = function (ch) {\n\treturn typeof(ch) !== 'undefined' && ch.length > 0 && !ilib.CType.isCntrl(ch);\n};\n\n/**\n * @protected\n * @param {boolean} sync\n * @param {Object} loadParams\n * @param {function(*)|undefined} onLoad\n */\nilib.CType.isPrint._init = function (sync, loadParams, onLoad) {\n\tilib.CType.isCntrl._init(sync, loadParams, onLoad);\n};\n\n/*\n * ctype.ispunct.js - Character type is punctuation\n *\n * Copyright © 2012-2013, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ctype.js\n\n// !data ctype_p\n\n/**\n * Return whether or not the first character is punctuation.<p>\n *\n * Depends directive: !depends ctype.isprint.js\n *\n * @param {string|ilib.String|number} ch character or code point to examine\n * @return {boolean} true if the first character is punctuation.\n */\nilib.CType.isPunct = function (ch) {\n\tvar num;\n\tswitch (typeof(ch)) {\n\t\tcase 'number':\n\t\t\tnum = ch;\n\t\t\tbreak;\n\t\tcase 'string':\n\t\t\tnum = ilib.String.toCodePoint(ch, 0);\n\t\t\tbreak;\n\t\tcase 'undefined':\n\t\t\treturn false;\n\t\tdefault:\n\t\t\tnum = ch._toCodePoint(0);\n\t\t\tbreak;\n\t}\n\n\treturn ilib.CType._inRange(num, 'Pd', ilib.data.ctype_p) ||\n\t\tilib.CType._inRange(num, 'Ps', ilib.data.ctype_p) ||\n\t\tilib.CType._inRange(num, 'Pe', ilib.data.ctype_p) ||\n\t\tilib.CType._inRange(num, 'Pc', ilib.data.ctype_p) ||\n\t\tilib.CType._inRange(num, 'Po', ilib.data.ctype_p) ||\n\t\tilib.CType._inRange(num, 'Pi', ilib.data.ctype_p) ||\n\t\tilib.CType._inRange(num, 'Pf', ilib.data.ctype_p);\n};\n\n/**\n * @protected\n * @param {boolean} sync\n * @param {Object} loadParams\n * @param {function(*)|undefined} onLoad\n */\nilib.CType.isPunct._init = function (sync, loadParams, onLoad) {\n\tilib.CType._load(\"ctype_p\", sync, loadParams, onLoad);\n};\n\n/*\n * ctype.isupper.js - Character type is upper-case letter\n *\n * Copyright © 2012-2013, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ctype.js\n\n// !data ctype_l\n\n/**\n * Return whether or not the first character is upper-case. For alphabetic\n * characters in scripts that do not make a distinction between upper- and\n * lower-case, this function always returns true.<p>\n *\n * Depends directive: !depends ctype.isupper.js\n *\n * @param {string|ilib.String|number} ch character or code point to examine\n * @return {boolean} true if the first character is upper-case.\n */\nilib.CType.isUpper = function (ch) {\n\tvar num;\n\tswitch (typeof(ch)) {\n\t\tcase 'number':\n\t\t\tnum = ch;\n\t\t\tbreak;\n\t\tcase 'string':\n\t\t\tnum = ilib.String.toCodePoint(ch, 0);\n\t\t\tbreak;\n\t\tcase 'undefined':\n\t\t\treturn false;\n\t\tdefault:\n\t\t\tnum = ch._toCodePoint(0);\n\t\t\tbreak;\n\t}\n\n\treturn ilib.CType._inRange(num, 'Lu', ilib.data.ctype_l);\n};\n\n/**\n * @protected\n * @param {boolean} sync\n * @param {Object} loadParams\n * @param {function(*)|undefined} onLoad\n */\nilib.CType.isUpper._init = function (sync, loadParams, onLoad) {\n\tilib.CType._load(\"ctype_l\", sync, loadParams, onLoad);\n};\n\n/*\n * ctype.isdigit.js - Character type is digit\n *\n * Copyright © 2012-2013, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ctype.js\n\n// !data ctype\n\n/**\n * Return whether or not the first character is a hexadecimal digit written\n * in the Latin script. (0-9 or A-F)<p>\n *\n * Depends directive: !depends ctype.isxdigit.js\n *\n * @param {string|ilib.String|number} ch character or code point to examine\n * @return {boolean} true if the first character is a hexadecimal digit written\n * in the Latin script.\n */\nilib.CType.isXdigit = function (ch) {\n\tvar num;\n\tswitch (typeof(ch)) {\n\t\tcase 'number':\n\t\t\tnum = ch;\n\t\t\tbreak;\n\t\tcase 'string':\n\t\t\tnum = ilib.String.toCodePoint(ch, 0);\n\t\t\tbreak;\n\t\tcase 'undefined':\n\t\t\treturn false;\n\t\tdefault:\n\t\t\tnum = ch._toCodePoint(0);\n\t\t\tbreak;\n\t}\n\n\treturn ilib.CType._inRange(num, 'xdigit', ilib.data.ctype);\n};\n\n/**\n * @protected\n * @param {boolean} sync\n * @param {Object} loadParams\n * @param {function(*)|undefined} onLoad\n */\nilib.CType.isXdigit._init = function (sync, loadParams, onLoad) {\n\tilib.CType._init(sync, loadParams, onLoad);\n};\n\n/*\n * ctype.isscript.js - Character type is script\n *\n * Copyright © 2012-2013, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ctype.js\n\n// !data scriptToRange\n\n/**\n * Return whether or not the first character in the given string is\n * in the given script. The script is given as the 4-letter ISO\n * 15924 script code.<p>\n *\n * Depends directive: !depends ctype.isscript.js\n *\n * @param {string|ilib.String|number} ch character or code point to examine\n * @param {string} script the 4-letter ISO 15924 to query against\n * @return {boolean} true if the first character is in the given script, and\n * false otherwise\n */\nilib.CType.isScript = function (ch, script) {\n\tvar num;\n\tswitch (typeof(ch)) {\n\t\tcase 'number':\n\t\t\tnum = ch;\n\t\t\tbreak;\n\t\tcase 'string':\n\t\t\tnum = ilib.String.toCodePoint(ch, 0);\n\t\t\tbreak;\n\t\tcase 'undefined':\n\t\t\treturn false;\n\t\tdefault:\n\t\t\tnum = ch._toCodePoint(0);\n\t\t\tbreak;\n\t}\n\n\treturn ilib.CType._inRange(num, script, ilib.data.scriptToRange);\n};\n\n/**\n * @protected\n * @param {boolean} sync\n * @param {Object} loadParams\n * @param {function(*)|undefined} onLoad\n */\nilib.CType.isScript._init = function (sync, loadParams, onLoad) {\n\tilib.CType._load(\"scriptToRange\", sync, loadParams, onLoad);\n};\n\n\n/*\n * scriptinfo.js - information about scripts\n *\n * Copyright © 2012-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ilibglobal.js\n\n// !data scripts\n\n/**\n * @class\n * Create a new script info instance. This class encodes information about\n * scripts, which are sets of characters used in a writing system.<p>\n *\n * The options object may contain any of the following properties:\n *\n * <ul>\n * <li><i>onLoad</i> - a callback function to call when the script info object is fully\n * loaded. When the onLoad option is given, the script info object will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the\n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n *\n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the\n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object\n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n *\n * Depends directive: !depends scriptinfo.js\n *\n * @constructor\n * @param {string} script The ISO 15924 4-letter identifier for the script\n * @param {Object} options parameters to initialize this matcher\n */\nilib.ScriptInfo = function(script, options) {\n\tvar sync = true,\n\t    loadParams = undefined;\n\n\tthis.script = script;\n\n\tif (options) {\n\t\tif (typeof(options.sync) !== 'undefined') {\n\t\t\tsync = (options.sync == true);\n\t\t}\n\n\t\tif (typeof(options.loadParams) !== 'undefined') {\n\t\t\tloadParams = options.loadParams;\n\t\t}\n\t}\n\n\tif (!ilib.ScriptInfo.cache) {\n\t\tilib.ScriptInfo.cache = {};\n\t}\n\n\tif (!ilib.data.scripts) {\n\t\tilib.loadData({\n\t\t\tobject: ilib.ScriptInfo,\n\t\t\tlocale: \"-\",\n\t\t\tname: \"scripts.json\",\n\t\t\tsync: sync,\n\t\t\tloadParams: loadParams,\n\t\t\tcallback: ilib.bind(this, function (info) {\n\t\t\t\tif (!info) {\n\t\t\t\t\tinfo = {\"Latn\":{\"nb\":215,\"nm\":\"Latin\",\"lid\":\"Latin\",\"rtl\":false,\"ime\":false,\"casing\":true}};\n\t\t\t\t\tvar spec = this.locale.getSpec().replace(/-/g, \"_\");\n\t\t\t\t\tilib.ScriptInfo.cache[spec] = info;\n\t\t\t\t}\n\t\t\t\tilib.data.scripts = info;\n\t\t\t\tthis.info = script && ilib.data.scripts[script];\n\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\t\toptions.onLoad(this);\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t} else {\n\t\tthis.info = ilib.data.scripts[script];\n\t}\n\n};\n\n/**\n * Return an array of all ISO 15924 4-letter identifier script identifiers that\n * this copy of ilib knows about.\n * @static\n * @return {Array.<string>} an array of all script identifiers that this copy of\n * ilib knows about\n */\nilib.ScriptInfo.getAllScripts = function() {\n\tvar ret = [],\n\t\tscript = undefined,\n\t\tscripts = ilib.data.scripts;\n\n\tfor (script in scripts) {\n\t\tif (script && scripts[script]) {\n\t\t\tret.push(script);\n\t\t}\n\t}\n\n\treturn ret;\n};\n\nilib.ScriptInfo.prototype = {\n\t/**\n\t * Return the 4-letter ISO 15924 identifier associated\n\t * with this script.\n\t * @return {string} the 4-letter ISO code for this script\n\t */\n\tgetCode: function () {\n\t\treturn this.info && this.script;\n\t},\n\n\t/**\n\t * Get the ISO 15924 code number associated with this\n\t * script.\n\t *\n\t * @return {number} the ISO 15924 code number\n\t */\n\tgetCodeNumber: function () {\n\t\treturn this.info && this.info.nb || 0;\n\t},\n\n\t/**\n\t * Get the name of this script in English.\n\t *\n\t * @return {string} the name of this script in English\n\t */\n\tgetName: function () {\n\t\treturn this.info && this.info.nm;\n\t},\n\n\t/**\n\t * Get the long identifier assciated with this script.\n\t *\n\t * @return {string} the long identifier of this script\n\t */\n\tgetLongCode: function () {\n\t\treturn this.info && this.info.lid;\n\t},\n\n\t/**\n\t * Return the usual direction that text in this script is written\n\t * in. Possible return values are \"rtl\" for right-to-left,\n\t * \"ltr\" for left-to-right, and \"ttb\" for top-to-bottom.\n\t *\n\t * @return {string} the usual direction that text in this script is\n\t * written in\n\t */\n\tgetScriptDirection: function() {\n\t\treturn (this.info && typeof(this.info.rtl) !== 'undefined' && this.info.rtl) ? \"rtl\" : \"ltr\";\n\t},\n\n\t/**\n\t * Return true if this script typically requires an input method engine\n\t * to enter its characters.\n\t *\n\t * @return {boolean} true if this script typically requires an IME\n\t */\n\tgetNeedsIME: function () {\n\t\treturn this.info && this.info.ime ? true : false; // converts undefined to false\n\t},\n\n\t/**\n\t * Return true if this script uses lower- and upper-case characters.\n\t *\n\t * @return {boolean} true if this script uses letter case\n\t */\n\tgetCasing: function () {\n\t\treturn this.info && this.info.casing ? true : false; // converts undefined to false\n\t}\n};\n/*\n * nameprs.js - Person name parser\n *\n * Copyright © 2013-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\nilibglobal.js\nlocale.js\nutil/utils.js\nctype.isalpha.js\nctype.isideo.js\nctype.ispunct.js\nctype.isspace.js\nutil/jsutils.js\n*/\n\n// !data name\n\n// notes:\n// icelandic given names: http://en.wiktionary.org/wiki/Appendix:Icelandic_given_names\n// danish approved given names: http://www.familiestyrelsen.dk/samliv/navne/\n// http://www.mentalfloss.com/blogs/archives/59277\n// other countries with first name restrictions: Norway, China, New Zealand, Japan, Sweden, Germany, Hungary\n\n/**\n * @class\n * A class to parse names of people. Different locales have different conventions when it\n * comes to naming people.<p>\n *\n * The options can contain any of the following properties:\n *\n * <ul>\n * <li><i>locale</i> - use the rules and conventions of the given locale in order to parse\n * the name\n * <li><i>style</i> - explicitly use the named style to parse the name. Valid values so\n * far are \"western\" and \"asian\". If this property is not specified, then the style will\n * be gleaned from the name itself. This class will count the total number of Latin or Asian\n * characters. If the majority of the characters are in one style, that style will be\n * used to parse the whole name.\n * <li><i>order</i> - explicitly use the given order for names. In some locales, such\n * as Russian, names may be written equally validly as \"givenName familyName\" or \"familyName\n * givenName\". This option tells the parser which order to prefer, and overrides the\n * default order for the locale. Valid values are \"gf\" (given-family) or \"fg\" (family-given).\n * <li><i>useSpaces</i> - explicitly specifies whether to use spaces or not between the given name , middle name\n * and family name.\n * <li>onLoad - a callback function to call when the name info is fully\n * loaded and the name has been parsed. When the onLoad option is given, the name object\n * will attempt to load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the\n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n *\n * <li>sync - tell whether to load any missing locale data synchronously or\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the\n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object\n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n *\n * When the parser has completed its parsing, it fills in the fields listed below.<p>\n *\n * For names that include auxilliary words, such as the family name \"van der Heijden\", all\n * of the auxilliary words (\"van der\") will be included in the field.<p>\n *\n * For names in Spanish locales, it is assumed that the family name is doubled. That is,\n * a person may have a paternal family name followed by a maternal family name. All\n * family names will be listed in the familyName field as normal, separated by spaces.\n * When formatting the short version of such names, only the paternal family name will\n * be used.\n *\n * Depends directive: !depends nameprs.js\n *\n * @constructor\n * @param {string|ilib.Name=} name the name to parse\n * @param {Object=} options Options governing the construction of this name instance\n */\nilib.Name = function (name, options) {\n    var sync = true;\n\n    if (!name || name.length === 0) {\n    \treturn;\n    }\n\n    this.loadParams = {};\n\n    if (options) {\n        if (options.locale) {\n            this.locale = (typeof (options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;\n        }\n\n        if (options.style && (options.style === \"asian\" || options.style === \"western\")) {\n            this.style = options.style;\n        }\n\n        if (options.order && (options.order === \"gmf\" || options.order === \"fmg\" || options.order === \"fgm\")) {\n            this.order = options.order;\n        }\n\n        if (typeof (options.sync) !== 'undefined') {\n            sync = (options.sync == true);\n        }\n\n        if (typeof (options.loadParams) !== 'undefined') {\n            this.loadParams = options.loadParams;\n        }\n    }\n\n    if (!ilib.Name.cache) {\n        ilib.Name.cache = {};\n    }\n\n\tthis.locale = this.locale || new ilib.Locale();\n\n\tilib.CType.isAlpha._init(sync, this.loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {\n\t\tilib.CType.isIdeo._init(sync, this.loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {\n\t\t\tilib.CType.isPunct._init(sync, this.loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {\n\t\t\t\tilib.CType.isSpace._init(sync, this.loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {\n\t\t\t\t\tilib.loadData({\n\t\t\t\t\t\tobject: ilib.Name,\n\t\t\t\t\t\tlocale: this.locale,\n\t\t\t\t\t\tname: \"name.json\",\n\t\t\t\t\t\tsync: sync,\n\t\t\t\t\t\tloadParams: this.loadParams,\n\t\t\t\t\t\tcallback: ilib.bind(this, function (info) {\n\t\t\t\t\t\t\tif (!info) {\n\t\t\t\t\t\t\t\tinfo = ilib.Name.defaultInfo;\n\t\t\t\t\t\t\t\tvar spec = this.locale.getSpec().replace(/-/g, \"_\");\n\t\t\t\t\t\t\t\tilib.Name.cache[spec] = info;\n\t\t\t\t\t\t\t}\n                            if (typeof (name) === 'object') {\n    \t\t\t\t\t\t\t// copy constructor\n\t\t\t\t\t\t\t    /**\n\t\t\t\t\t\t\t     * The prefixes for this name\n\t\t\t\t\t\t\t     * @type {string|Array.<string>}\n\t\t\t\t\t\t\t     */\n\t\t\t\t\t\t\t    this.prefix = name.prefix;\n\t\t\t\t\t\t\t    /**\n\t\t\t\t\t\t\t     * The given (personal) name in this name.\n\t\t\t\t\t\t\t     * @type {string|Array.<string>}\n\t\t\t\t\t\t\t     */\n\t\t\t\t\t\t\t    this.givenName = name.givenName;\n\t\t\t\t\t\t\t    /**\n\t\t\t\t\t\t\t     * The middle names used in this name. If there are multiple middle names, they all\n\t\t\t\t\t\t\t     * appear in this field separated by spaces.\n\t\t\t\t\t\t\t     * @type {string|Array.<string>}\n\t\t\t\t\t\t\t     */\n\t\t\t\t\t\t\t    this.middleName = name.middleName;\n\t\t\t\t\t\t\t    /**\n\t\t\t\t\t\t\t     * The family names in this name. If there are multiple family names, they all\n\t\t\t\t\t\t\t     * appear in this field separated by spaces.\n\t\t\t\t\t\t\t     * @type {string|Array.<string>}\n\t\t\t\t\t\t\t     */\n\t\t\t\t\t\t\t    this.familyName = name.familyName;\n\t\t\t\t\t\t\t    /**\n\t\t\t\t\t\t\t     * The suffixes for this name. If there are multiple suffixes, they all\n\t\t\t\t\t\t\t     * appear in this field separated by spaces.\n\t\t\t\t\t\t\t     * @type {string|Array.<string>}\n\t\t\t\t\t\t\t     */\n\t\t\t\t\t\t\t    this.suffix = name.suffix;\n\n\t\t\t\t\t\t\t    // private properties\n\t\t\t\t\t\t\t    this.locale = name.locale;\n\t\t\t\t\t\t\t    this.style = name.style;\n\t\t\t\t\t\t\t    this.order = name.order;\n\t\t\t\t\t\t\t    this.useSpaces = name.useSpaces;\n\t\t\t\t\t\t\t    this.isAsianName = name.isAsianName;\n\t\t\t\t\t    \t    return;\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * @type {{\n\t\t\t\t\t\t\t *   nameStyle:string,\n\t\t\t\t\t\t\t *   order:string,\n\t\t\t\t\t\t\t *   prefixes:Array.<string>,\n\t\t\t\t\t\t\t *   suffixes:Array.<string>,\n\t\t\t\t\t\t\t *   auxillaries:Array.<string>,\n\t\t\t\t\t\t\t *   honorifics:Array.<string>,\n\t\t\t\t\t\t\t *   knownFamilyNames:Array.<string>,\n\t\t\t\t\t\t\t *   noCompoundFamilyNames:boolean,\n\t\t\t\t\t\t\t *   sortByHeadWord:boolean\n\t\t\t\t\t\t\t * }} */\n\t\t\t\t\t\t\tthis.info = info;\n\t\t\t\t\t\t\tthis._init(name);\n\t\t\t\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\t\t\t\t\toptions.onLoad(this);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t});\n\t\t\t\t}));\n\t\t\t}));\n\t\t}));\n\t}));\n};\n\nilib.Name.defaultInfo = ilib.data.name ||  {\n\t\"components\": {\n\t\t\"short\": {\n\t\t\t\"g\": 1,\n\t\t\t\"f\": 1\n\t\t},\n\t\t\"medium\": {\n\t\t\t\"g\": 1,\n\t\t\t\"m\": 1,\n\t\t\t\"f\": 1\n\t\t},\n\t\t\"long\": {\n\t\t\t\"p\": 1,\n\t\t\t\"g\": 1,\n\t\t\t\"m\": 1,\n\t\t\t\"f\": 1\n\t\t},\n\t\t\"full\": {\n\t\t\t\"p\": 1,\n\t\t\t\"g\": 1,\n\t\t\t\"m\": 1,\n\t\t\t\"f\": 1,\n\t\t\t\"s\": 1\n\t\t}\n\t},\n\t\"format\": \"{prefix} {givenName} {middleName} {familyName}{suffix}\",\n\t\"sortByHeadWord\": false,\n\t\"nameStyle\": \"western\",\n\t\"conjunctions\": {\n\t\t\"and1\": \"and\",\n\t\t\"and2\": \"and\",\n\t\t\"or1\": \"or\",\n\t\t\"or2\": \"or\"\n\t},\n\t\"auxillaries\": {\n\t\t\"von\": 1,\n\t\t\"von der\": 1,\n\t\t\"von den\": 1,\n\t\t\"van\": 1,\n\t\t\"van der\": 1,\n        \"van de\": 1,\n        \"van den\": 1,\n        \"de\": 1,\n        \"di\": 1,\n\t    \"de\": 1,\n\t\t\"la\": 1,\n\t\t\"lo\": 1,\n        \"des\": 1,\n        \"le\": 1,\n        \"les\": 1,\n\t\t\"du\": 1,\n        \"de la\": 1,\n        \"del\": 1,\n        \"de los\": 1,\n        \"de las\": 1\n\t},\n\t\"prefixes\": [\n\t\t\"doctor\",\n\t\t\"dr\",\n\t\t\"mr\",\n\t\t\"mrs\",\n\t\t\"ms\",\n\t\t\"mister\",\n\t\t\"madame\",\n\t\t\"madamoiselle\",\n\t\t\"miss\",\n\t\t\"monsieur\",\n\t\t\"señor\",\n        \"señora\",\n        \"señorita\"\n\t],\n\t\"suffixes\": [\n\t\t\",\",\n\t\t\"junior\",\n\t\t\"jr\",\n\t\t\"senior\",\n\t\t\"sr\",\n\t\t\"i\",\n\t\t\"ii\",\n\t\t\"iii\",\n\t\t\"esq\",\n\t\t\"phd\",\n\t\t\"md\"\n\t],\n    \"patronymicName\":[ ],\n    \"familyNames\":[ ]\n};\n\n/**\n * Return true if the given character is in the range of the Han, Hangul, or kana\n * scripts.\n * @static\n * @protected\n */\nilib.Name._isAsianChar = function(c) {\n\treturn ilib.CType.isIdeo(c) ||\n\t\tilib.CType.withinRange(c, \"hangul\") ||\n\t\tilib.CType.withinRange(c, \"hiragana\") ||\n\t\tilib.CType.withinRange(c, \"katakana\");\n};\n\n\n/**\n * @static\n * @protected\n */\nilib.Name._isAsianName = function (name, language) {\n    // the idea is to count the number of asian chars and the number\n    // of latin chars. If one is greater than the other, choose\n    // that style.\n    var asian = 0,\n        latin = 0,\n        i;\n\n    if (name && name.length > 0) {\n        for (i = 0; i < name.length; i++) {\n        \tvar c = name.charAt(i);\n\n            if (ilib.Name._isAsianChar(c)) {\n                if (language ==\"ko\" || language ==\"ja\" || language ==\"zh\") {\n                    return true;\n                }\n                asian++;\n            } else if (ilib.CType.isAlpha(c)) {\n                if (!language ==\"ko\" || !language ==\"ja\" || !language ==\"zh\") {\n                    return false;\n                }\n                latin++;\n            }\n        }\n\n        return latin < asian;\n    }\n\n    return false;\n};\n\n/**\n * Return true if any Latin letters are found in the string. Return\n * false if all the characters are non-Latin.\n * @static\n * @protected\n */\nilib.Name._isEuroName = function (name, language) {\n    var c,\n        n = new ilib.String(name),\n        it = n.charIterator();\n\n    while (it.hasNext()) {\n        c = it.next();\n\n        if (!ilib.Name._isAsianChar(c) && !ilib.CType.isPunct(c) && !ilib.CType.isSpace(c)) {\n            return true;\n        } else if (ilib.Name._isAsianChar(c) && (language ==\"ko\" || language ==\"ja\" || language ==\"zh\")) {\n            return false;\n        }\n    }\n    return false;\n};\n\nilib.Name.prototype = {\n    /**\n     * @protected\n     */\n    _init: function (name) {\n        var parts, prefixArray, prefix, prefixLower,\n            suffixArray, suffix, suffixLower,\n            i, info, hpSuffix;\n        var currentLanguage = this.locale.getLanguage();\n\n        if (name) {\n            // for DFISH-12905, pick off the part that the LDAP server automatically adds to our names in HP emails\n            i = name.search(/\\s*[,\\/\\(\\[\\{<]/);\n            if (i !== -1) {\n                hpSuffix = name.substring(i);\n                hpSuffix = hpSuffix.replace(/\\s+/g, ' '); // compress multiple whitespaces\n                suffixArray = hpSuffix.split(\" \");\n                var conjunctionIndex = this._findLastConjunction(suffixArray);\n                if (conjunctionIndex > -1) {\n                    // it's got conjunctions in it, so this is not really a suffix\n                    hpSuffix = undefined;\n                } else {\n                    name = name.substring(0, i);\n                }\n            }\n\n            this.isAsianName = ilib.Name._isAsianName(name, currentLanguage);\n            if (this.info.nameStyle === \"asian\" || this.info.order === \"fmg\" || this.info.order === \"fgm\") {\n                info = this.isAsianName ? this.info : ilib.data.name;\n            } else {\n                info = this.isAsianName ? ilib.data.name : this.info;\n            }\n\n            if (this.isAsianName) {\n                // all-asian names\n                if (this.useSpaces == false) {\n                    name = name.replace(/\\s+/g, ''); // eliminate all whitespaces\n                }\n                parts = name.trim().split('');\n            }\n            //}\n            else {\n                name = name.replace(/, /g, ' , ');\n                name = name.replace(/\\s+/g, ' '); // compress multiple whitespaces\n                parts = name.trim().split(' ');\n            }\n\n            // check for prefixes\n            if (parts.length > 1) {\n                for (i = parts.length; i > 0; i--) {\n                    prefixArray = parts.slice(0, i);\n                    prefix = prefixArray.join(this.isAsianName ? '' : ' ');\n                    prefixLower = prefix.toLowerCase();\n                    prefixLower = prefixLower.replace(/[,\\.]/g, ''); // ignore commas and periods\n                    if (this.info.prefixes &&\n                        (this.info.prefixes.indexOf(prefixLower) > -1 || this._isConjunction(prefixLower))) {\n                        if (this.prefix) {\n                            if (!this.isAsianName) {\n                                this.prefix += ' ';\n                            }\n                            this.prefix += prefix;\n                        } else {\n                            this.prefix = prefix;\n                        }\n                        parts = parts.slice(i);\n                        i = parts.length;\n                    }\n                }\n            }\n            // check for suffixes\n            if (parts.length > 1) {\n                for (i = parts.length; i > 0; i--) {\n                    suffixArray = parts.slice(-i);\n                    suffix = suffixArray.join(this.isAsianName ? '' : ' ');\n                    suffixLower = suffix.toLowerCase();\n                    suffixLower = suffixLower.replace(/[\\.]/g, ''); // ignore periods\n                    if (this.info.suffixes && this.info.suffixes.indexOf(suffixLower) > -1) {\n                        if (this.suffix) {\n                            if (!this.isAsianName && !ilib.CType.isPunct(this.suffix.charAt(0))) {\n                                this.suffix = ' ' + this.suffix;\n                            }\n                            this.suffix = suffix + this.suffix;\n                        } else {\n                            this.suffix = suffix;\n                        }\n                        parts = parts.slice(0, parts.length - i);\n                        i = parts.length;\n                    }\n                }\n            }\n\n            if (hpSuffix) {\n                this.suffix = (this.suffix && this.suffix + hpSuffix) || hpSuffix;\n            }\n\n            // adjoin auxillary words to their headwords\n            if (parts.length > 1 && !this.isAsianName) {\n                parts = this._joinAuxillaries(parts, this.isAsianName);\n            }\n\n            if (this.isAsianName) {\n                this._parseAsianName(parts, currentLanguage);\n            } else {\n                this._parseWesternName(parts);\n            }\n\n            this._joinNameArrays();\n        }\n    },\n\n    /**\n\t * @return {number}\n\t *\n\t_findSequence: function(parts, hash, isAsian) {\n\t\tvar sequence, sequenceLower, sequenceArray, aux = [], i, ret = {};\n\n\t\tif (parts.length > 0 && hash) {\n\t\t\t//console.info(\"_findSequence: finding sequences\");\n\t\t\tfor (var start = 0; start < parts.length-1; start++) {\n\t\t\t\tfor ( i = parts.length; i > start; i-- ) {\n\t\t\t\t\tsequenceArray = parts.slice(start, i);\n\t\t\t\t\tsequence = sequenceArray.join(isAsian ? '' : ' ');\n\t\t\t\t\tsequenceLower = sequence.toLowerCase();\n\t\t\t\t\tsequenceLower = sequenceLower.replace(/[,\\.]/g, '');  // ignore commas and periods\n\n\t\t\t\t\t//console.info(\"_findSequence: checking sequence: '\" + sequenceLower + \"'\");\n\n\t\t\t\t\tif ( sequenceLower in hash ) {\n\t\t\t\t\t\tret.match = sequenceArray;\n\t\t\t\t\t\tret.start = start;\n\t\t\t\t\t\tret.end = i;\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t//console.info(\"_findSequence: Found sequence '\" + sequence + \"' New parts list is \" + JSON.stringify(parts));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t},\n\t*/\n\n    /**\n     * @protected\n     * @param {Array} parts\n     * @param {Array} names\n     * @param {boolean} isAsian\n     * @param {boolean=} noCompoundPrefix\n     */\n    _findPrefix: function (parts, names, isAsian, noCompoundPrefix) {\n        var i, prefix, prefixLower, prefixArray, aux = [];\n\n        if (parts.length > 0 && names) {\n            for (i = parts.length; i > 0; i--) {\n                prefixArray = parts.slice(0, i);\n                prefix = prefixArray.join(isAsian ? '' : ' ');\n                prefixLower = prefix.toLowerCase();\n                prefixLower = prefixLower.replace(/[,\\.]/g, ''); // ignore commas and periods\n\n                if (prefixLower in names) {\n                    aux = aux.concat(isAsian ? prefix : prefixArray);\n                    if (noCompoundPrefix) {\n                    \t// don't need to parse further. Just return it as is.\n                    \treturn aux;\n                    }\n                    parts = parts.slice(i);\n                    i = parts.length + 1;\n                }\n            }\n        }\n\n        return aux;\n    },\n\n    /**\n     * @protected\n     */\n    _findSuffix: function (parts, names, isAsian) {\n        var i, j, seq = \"\";\n\n        for (i = 0; i < names.length; i++) {\n            if (parts.length >= names[i].length) {\n                j = 0;\n                while (j < names[i].length && parts[parts.length - j] === names[i][names[i].length - j]) {\n                    j++;\n                }\n                if (j >= names[i].length) {\n                    seq = parts.slice(parts.length - j).join(isAsian ? \"\" : \" \") + (isAsian ? \"\" : \" \") + seq;\n                    parts = parts.slice(0, parts.length - j);\n                    i = -1; // restart the search\n                }\n            }\n        }\n\n        this.suffix = seq;\n        return parts;\n    },\n\n    /**\n     * @protected\n     * Tell whether or not the given word is a conjunction in this language.\n     * @param {string} word the word to test\n     * @return {boolean} true if the word is a conjunction\n     */\n    _isConjunction: function _isConjunction(word) {\n        return (this.info.conjunctions.and1 === word ||\n            this.info.conjunctions.and2 === word ||\n            this.info.conjunctions.or1 === word ||\n            this.info.conjunctions.or2 === word ||\n            (\"&\" === word) ||\n            (\"+\" === word));\n    },\n\n    /**\n     * Find the last instance of 'and' in the name\n     * @protected\n     * @param {Array.<string>} parts\n     * @return {number}\n     */\n    _findLastConjunction: function _findLastConjunction(parts) {\n        var conjunctionIndex = -1,\n            index, part;\n\n        for (index = 0; index < parts.length; index++) {\n            part = parts[index];\n            if (typeof (part) === 'string') {\n                part = part.toLowerCase();\n                // also recognize English\n                if (\"and\" === part || \"or\" === part || \"&\" === part || \"+\" === part) {\n                    conjunctionIndex = index;\n                }\n                if (this._isConjunction(part)) {\n                    conjunctionIndex = index;\n                }\n            }\n        }\n        return conjunctionIndex;\n    },\n\n    /**\n     * @protected\n     * @param {Array.<string>} parts the current array of name parts\n     * @param {boolean} isAsian true if the name is being parsed as an Asian name\n     * @return {Array.<string>} the remaining parts after the prefixes have been removed\n     */\n    _extractPrefixes: function (parts, isAsian) {\n        var i = this._findPrefix(parts, this.info.prefixes, isAsian);\n        if (i > 0) {\n            this.prefix = parts.slice(0, i).join(isAsian ? \"\" : \" \");\n            return parts.slice(i);\n        }\n        // prefixes not found, so just return the array unmodified\n        return parts;\n    },\n\n    /**\n     * @protected\n     * @param {Array.<string>} parts the current array of name parts\n     * @param {boolean} isAsian true if the name is being parsed as an Asian name\n     * @return {Array.<string>} the remaining parts after the suffices have been removed\n     */\n    _extractSuffixes: function (parts, isAsian) {\n        var i = this._findSuffix(parts, this.info.suffixes, isAsian);\n        if (i > 0) {\n            this.suffix = parts.slice(i).join(isAsian ? \"\" : \" \");\n            return parts.slice(0, i);\n        }\n        // suffices not found, so just return the array unmodified\n        return parts;\n    },\n\n    /**\n     * Adjoin auxillary words to their head words.\n     * @protected\n     * @param {Array.<string>} parts the current array of name parts\n     * @param {boolean} isAsian true if the name is being parsed as an Asian name\n     * @return {Array.<string>} the parts after the auxillary words have been plucked onto their head word\n     */\n    _joinAuxillaries: function (parts, isAsian) {\n        var start, i, prefixArray, prefix, prefixLower;\n\n        if (this.info.auxillaries && (parts.length > 2 || this.prefix)) {\n            for (start = 0; start < parts.length - 1; start++) {\n                for (i = parts.length; i > start; i--) {\n                    prefixArray = parts.slice(start, i);\n                    prefix = prefixArray.join(' ');\n                    prefixLower = prefix.toLowerCase();\n                    prefixLower = prefixLower.replace(/[,\\.]/g, ''); // ignore commas and periods\n\n                    if (prefixLower in this.info.auxillaries) {\n                        parts.splice(start, i + 1 - start, prefixArray.concat(parts[i]));\n                        i = start;\n                    }\n                }\n            }\n        }\n\n        return parts;\n    },\n\n    /**\n     * Recursively join an array or string into a long string.\n     * @protected\n     */\n    _joinArrayOrString: function _joinArrayOrString(part) {\n        var i;\n        if (typeof (part) === 'object') {\n            for (i = 0; i < part.length; i++) {\n                part[i] = this._joinArrayOrString(part[i]);\n            }\n            var ret = \"\";\n            part.forEach(function (segment) {\n                if (ret.length > 0 && !ilib.CType.isPunct(segment.charAt(0))) {\n                    ret += ' ';\n                }\n                ret += segment;\n            });\n\n            return ret;\n        }\n\n        return part;\n    },\n\n    /**\n     * @protected\n     */\n    _joinNameArrays: function _joinNameArrays() {\n        var prop;\n        for (prop in this) {\n\n            if (this[prop] !== undefined && typeof (this[prop]) === 'object' && this[prop] instanceof Array) {\n\n                this[prop] = this._joinArrayOrString(this[prop]);\n            }\n        }\n    },\n\n    /**\n     * @protected\n     */\n    _parseAsianName: function (parts, language) {\n        var familyNameArray = this._findPrefix(parts, this.info.knownFamilyNames, true, this.info.noCompoundFamilyNames);\n        var tempFullName = parts.join('');\n\n        if (familyNameArray && familyNameArray.length > 0) {\n            this.familyName = familyNameArray.join('');\n            this.givenName = parts.slice(this.familyName.length).join('');\n\n            //Overide parsing rules if spaces are found in korean\n            if (language === \"ko\" && tempFullName.search(/\\s*[/\\s]/) > -1 && !this.suffix) {\n                this._parseKoreanName(tempFullName);\n            }\n        } else if (this.locale.getLanguage() === \"ja\") {\n            this._parseJapaneseName(parts);\n        } else if (this.suffix || this.prefix) {\n            this.familyName = parts.join('');\n        } else {\n            this.givenName = parts.join('');\n        }\n    },\n\n    /**\n     * @protected\n     */\n    _parseKoreanName: function (name) {\n        var tempName = name;\n\n        var spaceSplit = tempName.split(\" \");\n        var spceCount = spaceSplit.length;\n        var fistSpaceIndex = tempName.indexOf(\" \");\n        var lastSpaceIndex = tempName.lastIndexOf(\" \");\n\n        if (spceCount === 2) {\n            this.familyName = spaceSplit[0];\n            this.givenName = tempName.slice(fistSpaceIndex, tempName.length);\n        } else {\n            this.familyName = spaceSplit[0];\n            this.middleName = tempName.slice(fistSpaceIndex, lastSpaceIndex);\n            this.givenName = tempName.slice(lastSpaceIndex, tempName.length);\n        }\n\n    },\n\n    /**\n     * @protected\n     */\n    _parseJapaneseName: function (parts) {\n    \tif (this.suffix && this.suffix.length > 1 && this.info.honorifics.indexOf(this.suffix)>-1) {\n    \t\tif (parts.length === 1) {\n    \t\t\tif (ilib.CType.withinRange(parts[0], \"cjk\")) {\n    \t\t\t\tthis.familyName = parts[0];\n    \t\t\t} else {\n    \t\t\t\tthis.givenName = parts[0];\n    \t\t\t}\n    \t\t\treturn;\n    \t\t} else if (parts.length === 2) {\n    \t\t\tthis.familyName = parts.slice(0,parts.length).join(\"\")\n    \t\t\treturn;\n    \t\t}\n    \t}\n    \tif (parts.length > 1) {\n    \t\tvar fn = \"\";\n    \t\tfor (var i = 0; i < parts.length; i++) {\n    \t\t\tif (ilib.CType.withinRange(parts[i], \"cjk\")) {\n    \t\t\t\tfn += parts[i];\n    \t\t\t} else if (fn.length > 1 && ilib.CType.withinRange(parts[i], \"hiragana\")) {\n    \t\t\t\tthis.familyName = fn;\n    \t\t\t\tthis.givenName = parts.slice(i,parts.length).join(\"\");\n    \t\t\t\treturn;\n    \t\t\t} else {\n    \t\t\t\tbreak;\n    \t\t\t}\n    \t\t}\n    \t}\n    \tif (parts.length === 1) {\n    \t\tthis.familyName = parts[0];\n    \t} else if (parts.length === 2) {\n    \t\tthis.familyName = parts[0];\n    \t\tthis.givenName = parts[1];\n    \t} else if (parts.length === 3) {\n    \t\tthis.familyName = parts[0];\n    \t\tthis.givenName = parts.slice(1,parts.length).join(\"\");\n    \t} else if (parts.length > 3) {\n    \t\tthis.familyName = parts.slice(0,2).join(\"\")\n    \t\tthis.givenName = parts.slice(2,parts.length).join(\"\");\n    \t}\n    },\n\n    /**\n     * @protected\n     */\n    _parseSpanishName: function (parts) {\n        var conjunctionIndex;\n\n        if (parts.length === 1) {\n            if (this.prefix || typeof (parts[0]) === 'object') {\n                this.familyName = parts[0];\n            } else {\n                this.givenName = parts[0];\n            }\n        } else if (parts.length === 2) {\n            // we do G F\n            this.givenName = parts[0];\n            this.familyName = parts[1];\n        } else if (parts.length === 3) {\n            conjunctionIndex = this._findLastConjunction(parts);\n            // if there's an 'and' in the middle spot, put everything in the first name\n            if (conjunctionIndex === 1) {\n                this.givenName = parts;\n            } else {\n                // else, do G F F\n                this.givenName = parts[0];\n                this.familyName = parts.slice(1);\n            }\n        } else if (parts.length > 3) {\n            //there are at least 4 parts to this name\n\n            conjunctionIndex = this._findLastConjunction(parts);\n            ////console.log(\"@@@@@@@@@@@@@@@@\"+conjunctionIndex)\n            if (conjunctionIndex > 0) {\n                // if there's a conjunction that's not the first token, put everything up to and\n                // including the token after it into the first name, the last 2 tokens into\n                // the family name (if they exist) and everything else in to the middle name\n                // 0 1 2 3 4 5\n                // G A G\n                // G A G F\n                // G G A G\n                // G A G F F\n                // G G A G F\n                // G G G A G\n                // G A G M F F\n                // G G A G F F\n                // G G G A G F\n                // G G G G A G\n                this.givenName = parts.splice(0, conjunctionIndex + 2);\n                if (parts.length > 1) {\n                    this.familyName = parts.splice(parts.length - 2, 2);\n                    if (parts.length > 0) {\n                        this.middleName = parts;\n                    }\n                } else if (parts.length === 1) {\n                    this.familyName = parts[0];\n                }\n            } else {\n                this.givenName = parts.splice(0, 1);\n                this.familyName = parts.splice(parts.length - 2, 2);\n                this.middleName = parts;\n            }\n        }\n    },\n\n    /**\n     * @protected\n     */\n    _parseIndonesianName: function (parts) {\n        var conjunctionIndex;\n\n        if (parts.length === 1) {\n            //if (this.prefix || typeof(parts[0]) === 'object') {\n            //this.familyName = parts[0];\n            //} else {\n            this.givenName = parts[0];\n            //}\n            //} else if (parts.length === 2) {\n            // we do G F\n            //this.givenName = parts[0];\n            //this.familyName = parts[1];\n        } else if (parts.length >= 2) {\n            //there are at least 3 parts to this name\n\n            conjunctionIndex = this._findLastConjunction(parts);\n            if (conjunctionIndex > 0) {\n                // if there's a conjunction that's not the first token, put everything up to and\n                // including the token after it into the first name, the last 2 tokens into\n                // the family name (if they exist) and everything else in to the middle name\n                // 0 1 2 3 4 5\n                // G A G\n                // G A G F\n                // G G A G\n                // G A G F F\n                // G G A G F\n                // G G G A G\n                // G A G M F F\n                // G G A G F F\n                // G G G A G F\n                // G G G G A G\n                this.givenName = parts.splice(0, conjunctionIndex + 2);\n                if (parts.length > 1) {\n                    //this.familyName = parts.splice(parts.length-2, 2);\n                    //if ( parts.length > 0 ) {\n                    this.middleName = parts;\n                }\n                //} else if (parts.length === 1) {\n                //\tthis.familyName = parts[0];\n                //}\n            } else {\n                this.givenName = parts.splice(0, 1);\n                //this.familyName = parts.splice(parts.length-2, 2);\n                this.middleName = parts;\n            }\n        }\n    },\n\n    /**\n     * @protected\n     */\n    _parseGenericWesternName: function (parts) {\n        /* Western names are parsed as follows, and rules are applied in this\n         * order:\n         *\n         * G\n         * G F\n         * G M F\n         * G M M F\n         * P F\n         * P G F\n         */\n        var conjunctionIndex;\n\n        if (parts.length === 1) {\n            if (this.prefix || typeof (parts[0]) === 'object') {\n                // already has a prefix, so assume it goes with the family name like \"Dr. Roberts\" or\n                // it is a name with auxillaries, which is almost always a family name\n                this.familyName = parts[0];\n            } else {\n                this.givenName = parts[0];\n            }\n        } else if (parts.length === 2) {\n            // we do G F\n            if (this.info.order == 'fgm') {\n                this.givenName = parts[1];\n                this.familyName = parts[0];\n            } else if (this.info.order == \"gmf\" || typeof (this.info.order) == 'undefined') {\n                this.givenName = parts[0];\n                this.familyName = parts[1];\n            }\n        } else if (parts.length >= 3) {\n            //find the first instance of 'and' in the name\n            conjunctionIndex = this._findLastConjunction(parts);\n\n            if (conjunctionIndex > 0) {\n                // if there's a conjunction that's not the first token, put everything up to and\n                // including the token after it into the first name, the last token into\n                // the family name (if it exists) and everything else in to the middle name\n                // 0 1 2 3 4 5\n                // G A G M M F\n                // G G A G M F\n                // G G G A G F\n                // G G G G A G\n                //if(this.order == \"gmf\") {\n                this.givenName = parts.slice(0, conjunctionIndex + 2);\n\n                if (conjunctionIndex + 1 < parts.length - 1) {\n                    this.familyName = parts.splice(parts.length - 1, 1);\n                    ////console.log(this.familyName);\n                    if (conjunctionIndex + 2 < parts.length - 1) {\n                        this.middleName = parts.slice(conjunctionIndex + 2, parts.length - conjunctionIndex - 3);\n                    }\n                } else if (this.order == \"fgm\") {\n                    this.familyName = parts.slice(0, conjunctionIndex + 2);\n                    if (conjunctionIndex + 1 < parts.length - 1) {\n                        this.middleName = parts.splice(parts.length - 1, 1);\n                        if (conjunctionIndex + 2 < parts.length - 1) {\n                            this.givenName = parts.slice(conjunctionIndex + 2, parts.length - conjunctionIndex - 3);\n                        }\n                    }\n                }\n            } else {\n                this.givenName = parts[0];\n\n                this.middleName = parts.slice(1, parts.length - 1);\n\n                this.familyName = parts[parts.length - 1];\n            }\n        }\n    },\n\n     /**\n     * parse patrinomic name from the russian names\n     * @protected\n     * @param {Array.<string>} parts the current array of name parts\n     * @return number  index of the part which contains patronymic name\n     */\n    _findPatronymicName: function(parts) {\n    \tvar index, part;\n    \tfor (index = 0; index < parts.length; index++) {\n    \t\tpart = parts[index];\n    \t\tif (typeof (part) === 'string') {\n    \t\t\tpart = part.toLowerCase();\n\n    \t\t\tvar subLength = this.info.patronymicName.length;\n    \t\t\twhile(subLength--) {\n    \t\t\t\tif(part.indexOf(this.info.patronymicName[subLength])!== -1 )\n    \t\t\t\t\treturn index;\n    \t\t\t}\n    \t\t}\n    \t}\n    \treturn -1;\n    },\n\n    /**\n\t * find if the given part is patronymic name\n\t *\n\t * @protected\n\t * @param {string} part string from name parts @\n\t * @return number index of the part which contains familyName\n\t */\n    _isPatronymicName: function(part) {\n\t    var pName;\n\t    if ( typeof (part) === 'string') {\n\t\t    pName = part.toLowerCase();\n\n\t\t    var subLength = this.info.patronymicName.length;\n\t\t    while (subLength--) {\n\t\t\t    if (pName.indexOf(this.info.patronymicName[subLength]) !== -1)\n\t\t\t\t    return true;\n\t\t    }\n\t    }\n\t    return false;\n    },\n\n    /**\n\t * find family name from the russian name\n\t *\n\t * @protected\n\t * @param {Array.<string>} parts the current array of name parts\n\t * @return boolean true if patronymic, false otherwise\n\t */\n    _findFamilyName: function(parts) {\n\t    var index, part, substring;\n\t    for (index = 0; index < parts.length; index++) {\n\t\t    part = parts[index];\n\n\t\t    if ( typeof (part) === 'string') {\n\t\t\t    part = part.toLowerCase();\n\t\t\t    var length = part.length - 1;\n\n\t\t\t    if (this.info.familyName.indexOf(part) !== -1) {\n\t\t\t\t    return index;\n\t\t\t    } else if (part[length] === 'в' || part[length] === 'н' ||\n\t\t\t        part[length] === 'й') {\n\t\t\t\t    substring = part.slice(0, -1);\n\t\t\t\t    if (this.info.familyName.indexOf(substring) !== -1) {\n\t\t\t\t\t    return index;\n\t\t\t\t    }\n\t\t\t    } else if ((part[length - 1] === 'в' && part[length] === 'а') ||\n\t\t\t        (part[length - 1] === 'н' && part[length] === 'а') ||\n\t\t\t        (part[length - 1] === 'а' && part[length] === 'я')) {\n\t\t\t\t    substring = part.slice(0, -2);\n\t\t\t\t    if (this.info.familyName.indexOf(substring) !== -1) {\n\t\t\t\t\t    return index;\n\t\t\t\t    }\n\t\t\t    }\n\t\t    }\n\t    }\n\t    return -1;\n    },\n\n    /**\n\t * parse russian name\n\t *\n\t * @protected\n\t * @param {Array.<string>} parts the current array of name parts\n\t * @return\n\t */\n    _parseRussianName: function(parts) {\n\t    var conjunctionIndex, familyIndex = -1;\n\n\t    if (parts.length === 1) {\n\t\t    if (this.prefix || typeof (parts[0]) === 'object') {\n\t\t\t    // already has a prefix, so assume it goes with the family name\n\t\t\t\t// like \"Dr. Roberts\" or\n\t\t\t    // it is a name with auxillaries, which is almost always a\n\t\t\t\t// family name\n\t\t\t    this.familyName = parts[0];\n\t\t    } else {\n\t\t\t    this.givenName = parts[0];\n\t\t    }\n\t    } else if (parts.length === 2) {\n\t\t    // we do G F\n\t\t    if (this.info.order === 'fgm') {\n\t\t\t    this.givenName = parts[1];\n\t\t\t    this.familyName = parts[0];\n\t\t    } else if (this.info.order === \"gmf\") {\n\t\t\t    this.givenName = parts[0];\n\t\t\t    this.familyName = parts[1];\n\t\t    } else if ( typeof (this.info.order) === 'undefined') {\n\t\t\t    if (this._isPatronymicName(parts[1]) === true) {\n\t\t\t\t    this.middleName = parts[1];\n\t\t\t\t    this.givenName = parts[0];\n\t\t\t    } else if ((familyIndex = this._findFamilyName(parts)) !== -1) {\n\t\t\t\t    if (familyIndex === 1) {\n\t\t\t\t\t    this.givenName = parts[0];\n\t\t\t\t\t    this.familyName = parts[1];\n\t\t\t\t    } else {\n\t\t\t\t\t    this.familyName = parts[0];\n\t\t\t\t\t    this.givenName = parts[1];\n\t\t\t\t    }\n\n\t\t\t    } else {\n\t\t\t\t    this.givenName = parts[0];\n\t\t\t\t    this.familyName = parts[1];\n\t\t\t    }\n\n\t\t    }\n\t    } else if (parts.length >= 3) {\n\t\t    // find the first instance of 'and' in the name\n\t\t    conjunctionIndex = this._findLastConjunction(parts);\n\t\t    var patronymicNameIndex = this._findPatronymicName(parts);\n\t\t    if (conjunctionIndex > 0) {\n\t\t\t    // if there's a conjunction that's not the first token, put\n\t\t\t\t// everything up to and\n\t\t\t    // including the token after it into the first name, the last\n\t\t\t\t// token into\n\t\t\t    // the family name (if it exists) and everything else in to the\n\t\t\t\t// middle name\n\t\t\t    // 0 1 2 3 4 5\n\t\t\t    // G A G M M F\n\t\t\t    // G G A G M F\n\t\t\t    // G G G A G F\n\t\t\t    // G G G G A G\n\t\t\t    // if(this.order == \"gmf\") {\n\t\t\t    this.givenName = parts.slice(0, conjunctionIndex + 2);\n\n\t\t\t    if (conjunctionIndex + 1 < parts.length - 1) {\n\t\t\t\t    this.familyName = parts.splice(parts.length - 1, 1);\n\t\t\t\t    // //console.log(this.familyName);\n\t\t\t\t    if (conjunctionIndex + 2 < parts.length - 1) {\n\t\t\t\t\t    this.middleName = parts.slice(conjunctionIndex + 2,\n\t\t\t\t\t        parts.length - conjunctionIndex - 3);\n\t\t\t\t    }\n\t\t\t    } else if (this.order == \"fgm\") {\n\t\t\t\t    this.familyName = parts.slice(0, conjunctionIndex + 2);\n\t\t\t\t    if (conjunctionIndex + 1 < parts.length - 1) {\n\t\t\t\t\t    this.middleName = parts.splice(parts.length - 1, 1);\n\t\t\t\t\t    if (conjunctionIndex + 2 < parts.length - 1) {\n\t\t\t\t\t\t    this.givenName = parts.slice(conjunctionIndex + 2,\n\t\t\t\t\t\t        parts.length - conjunctionIndex - 3);\n\t\t\t\t\t    }\n\t\t\t\t    }\n\t\t\t    }\n\t\t    } else if (patronymicNameIndex !== -1) {\n\t\t\t    this.middleName = parts[patronymicNameIndex];\n\n\t\t\t    if (patronymicNameIndex === (parts.length - 1)) {\n\t\t\t\t    this.familyName = parts[0];\n\t\t\t\t    this.givenName = parts.slice(1, patronymicNameIndex);\n\t\t\t    } else {\n\t\t\t\t    this.givenName = parts.slice(0, patronymicNameIndex);\n\n\t\t\t\t    this.familyName = parts[parts.length - 1];\n\t\t\t    }\n\t\t    } else {\n\t\t\t    this.givenName = parts[0];\n\n\t\t\t    this.middleName = parts.slice(1, parts.length - 1);\n\n\t\t\t    this.familyName = parts[parts.length - 1];\n\t\t    }\n\t    }\n    },\n\n\n    /**\n     * @protected\n     */\n    _parseWesternName: function (parts) {\n\n        if (this.locale.getLanguage() === \"es\" || this.locale.getLanguage() === \"pt\") {\n            // in spain and mexico and portugal, we parse names differently than in the rest of the world\n            // because of the double family names\n            this._parseSpanishName(parts);\n        } else if (this.locale.getLanguage() === \"ru\") {\n            /*\n             * In Russian, names can be given equally validly as given-family\n             * or family-given. Use the value of the \"order\" property of the\n             * constructor options to give the default when the order is ambiguous.\n             */\n            this._parseRussianName(parts);\n        } else if (this.locale.getLanguage() === \"id\") {\n            // in indonesia, we parse names differently than in the rest of the world\n            // because names don't have family names usually.\n            this._parseIndonesianName(parts);\n        } else {\n        \tthis._parseGenericWesternName(parts);\n        }\n    },\n\n    /**\n     * When sorting names with auxiliary words (like \"van der\" or \"de los\"), determine\n     * which is the \"head word\" and return a string that can be easily sorted by head\n     * word. In English, names are always sorted by initial characters. In places like\n     * the Netherlands or Germany, family names are sorted by the head word of a list\n     * of names rather than the first element of that name.\n     * @return {string|undefined} a string containing the family name[s] to be used for sorting\n     * in the current locale, or undefined if there is no family name in this object\n     */\n    getSortFamilyName: function () {\n        var name,\n            auxillaries,\n            auxString,\n            parts,\n            i;\n\n        // no name to sort by\n        if (!this.familyName) {\n            return undefined;\n        }\n\n        // first break the name into parts\n        if (this.info) {\n            if (this.info.sortByHeadWord) {\n                if (typeof (this.familyName) === 'string') {\n                    name = this.familyName.replace(/\\s+/g, ' '); // compress multiple whitespaces\n                    parts = name.trim().split(' ');\n                } else {\n                    // already split\n                    parts = /** @type Array */ this.familyName;\n                }\n\n                auxillaries = this._findPrefix(parts, this.info.auxillaries, false);\n                if (auxillaries && auxillaries.length > 0) {\n                    if (typeof (this.familyName) === 'string') {\n                        auxString = auxillaries.join(' ');\n                        name = this.familyName.substring(auxString.length + 1) + ', ' + auxString;\n                    } else {\n                        name = parts.slice(auxillaries.length).join(' ') +\n                            ', ' +\n                            parts.slice(0, auxillaries.length).join(' ');\n                    }\n                }\n            } else if (this.info.knownFamilyNames && this.familyName) {\n                parts = this.familyName.split('');\n                var familyNameArray = this._findPrefix(parts, this.info.knownFamilyNames, true, this.info.noCompoundFamilyNames);\n                name = \"\";\n                for (i = 0; i < familyNameArray.length; i++) {\n                    name += (this.info.knownFamilyNames[familyNameArray[i]] || \"\");\n                }\n            }\n        }\n\n        return name || this.familyName;\n    },\n\n    getHeadFamilyName: function () {},\n\n    /**\n     * @protected\n     * Return a shallow copy of the current instance.\n     */\n    clone: function () {\n        return new ilib.Name(this);\n    }\n};\n\n/*\n * namefmt.js - Format person names for display\n *\n * Copyright © 2013-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\nilibglobal.js\nlocale.js\nstrings.js\nnameprs.js\nctype.ispunct.js\n*/\n\n// !data name\n\n/**\n * @class\n * Creates a formatter that can format person name instances (ilib.Name) for display to\n * a user. The options may contain the following properties:\n *\n * <ul>\n * <li><i>locale</i> - Use the conventions of the given locale to construct the name format.\n * <li><i>style</i> - Format the name with the given style. The value of this property\n * should be one of the following strings:\n *   <ul>\n *     <li><i>short</i> - Format a short name with just the given and family names.\n *     <li><i>medium</i> - Format a medium-length name with the given, middle, and family names.\n *     <li><i>long</i> - Format a long name with all names available in the given name object, including\n *     prefixes.\n *     <li><i>full</i> - Format a long name with all names available in the given name object, including\n *     prefixes and suffixes.\n *   </ul>\n * <li><i>components</i> - Format the name with the given components in the correct\n * order for those components. Components are encoded as a string of letters representing\n * the desired components:\n *   <ul>\n *     <li><i>p</i> - prefixes\n *     <li><i>g</i> - given name\n *     <li><i>m</i> - middle names\n *     <li><i>f</i> - family name\n *     <li><i>s</i> - suffixes\n *   </ul>\n * <p>\n *\n * For example, the string \"pf\" would mean to only format any prefixes and family names\n * together and leave out all the other parts of the name.<p>\n *\n * The components can be listed in any order in the string. The <i>components</i> option\n * overrides the <i>style</i> option if both are specified.\n *\n * <li>onLoad - a callback function to call when the locale info object is fully\n * loaded. When the onLoad option is given, the localeinfo object will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the\n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n *\n * <li>sync - tell whether to load any missing locale data synchronously or\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the\n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object\n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n *\n * Formatting names is a locale-dependent function, as the order of the components\n * depends on the locale. The following explains some of the details:<p>\n *\n * <ul>\n * <li>In Western countries, the given name comes first, followed by a space, followed\n * by the family name. In Asian countries, the family name comes first, followed immediately\n * by the given name with no space. But, that format is only used with Asian names written\n * in ideographic characters. In Asian countries, especially ones where both an Asian and\n * a Western language are used (Hong Kong, Singapore, etc.), the convention is often to\n * follow the language of the name. That is, Asian names are written in Asian style, and\n * Western names are written in Western style. This class follows that convention as\n * well.\n * <li>In other Asian countries, Asian names\n * written in Latin script are written with Asian ordering. eg. \"Xu Ping-an\" instead\n * of the more Western order \"Ping-an Xu\", as the order is thought to go with the style\n * that is appropriate for the name rather than the style for the language being written.\n * <li>In some Spanish speaking countries, people often take both their maternal and\n * paternal last names as their own family name. When formatting a short or medium style\n * of that family name, only the paternal name is used. In the long style, all the names\n * are used. eg. \"Juan Julio Raul Lopez Ortiz\" took the name \"Lopez\" from his father and\n * the name \"Ortiz\" from his mother. His family name would be \"Lopez Ortiz\". The formatted\n * short style of his name would be simply \"Juan Lopez\" which only uses his paternal\n * family name of \"Lopez\".\n * <li>In many Western languages, it is common to use auxillary words in family names. For\n * example, the family name of \"Ludwig von Beethoven\" in German is \"von Beethoven\", not\n * \"Beethoven\". This class ensures that the family name is formatted correctly with\n * all auxillary words.\n * </ul>\n *\n * Depends directive: !depends namefmt.js\n *\n * @constructor\n * @param {Object} options A set of options that govern how the formatter will behave\n */\nilib.NameFmt = function(options) {\n\tvar sync = true;\n\n\tthis.style = \"short\";\n\tthis.loadParams = {};\n\n\tif (options) {\n\t\tif (options.locale) {\n\t\t\tthis.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;\n\t\t}\n\n\t\tif (options.style) {\n\t\t\tthis.style = options.style;\n\t\t}\n\n\t\tif (options.components) {\n\t\t\tthis.components = options.components;\n\t\t}\n\n\t\tif (typeof(options.sync) !== 'undefined') {\n\t\t\tsync = (options.sync == true);\n\t\t}\n\n\t\tif (typeof(options.loadParams) !== 'undefined') {\n\t\t\tthis.loadParams = options.loadParams;\n\t\t}\n\t}\n\n\t// set up defaults in case we need them\n\tthis.defaultEuroTemplate = new ilib.String(\"{prefix} {givenName} {middleName} {familyName}{suffix}\");\n\tthis.defaultAsianTemplate = new ilib.String(\"{prefix}{familyName}{givenName}{middleName}{suffix}\");\n\tthis.useFirstFamilyName = false;\n\n\tswitch (this.style) {\n\t\tdefault:\n\t\tcase \"s\":\n\t\tcase \"short\":\n\t\t\tthis.style = \"short\";\n\t\t\tbreak;\n\t\tcase \"m\":\n\t\tcase \"medium\":\n\t\t\tthis.style = \"medium\";\n\t\t\tbreak;\n\t\tcase \"l\":\n\t\tcase \"long\":\n\t\t\tthis.style = \"long\";\n\t\t\tbreak;\n\t\tcase \"f\":\n\t\tcase \"full\":\n\t\t\tthis.style = \"full\";\n\t\t\tbreak;\n\t}\n\n\tif (!ilib.Name.cache) {\n\t\tilib.Name.cache = {};\n\t}\n\n\tthis.locale = this.locale || new ilib.Locale();\n\n\tilib.CType.isPunct._init(sync, this.loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {\n\t\tilib.loadData({\n\t\t\tobject: ilib.Name,\n\t\t\tlocale: this.locale,\n\t\t\tname: \"name.json\",\n\t\t\tsync: sync,\n\t\t\tloadParams: this.loadParams,\n\t\t\tcallback: ilib.bind(this, function (info) {\n\t\t\t\tif (!info) {\n\t\t\t\t\tinfo = ilib.Name.defaultInfo;\n\t\t\t\t\tvar spec = this.locale.getSpec().replace(/-/g, \"_\");\n\t\t\t\t\tilib.Name.cache[spec] = info;\n\t\t\t\t}\n\t\t\t\tthis.info = info;\n\t\t\t\tthis._init();\n\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\t\toptions.onLoad(this);\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t}));\n};\n\nilib.NameFmt.prototype = {\n\t/**\n\t * @protected\n\t */\n\t_init: function() {\n\t\tif (this.components) {\n\t\t\tvar valids = {\"p\":1,\"g\":1,\"m\":1,\"f\":1,\"s\":1},\n\t\t\t\tarr = this.components.split(\"\");\n\t\t\tthis.comps = {};\n\t\t\tfor (var i = 0; i < arr.length; i++) {\n\t\t\t\tif (valids[arr[i].toLowerCase()]) {\n\t\t\t\t\tthis.comps[arr[i].toLowerCase()] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis.comps = this.info.components[this.style];\n\t\t}\n\n\t\tthis.template = new ilib.String(this.info.format);\n\n\t\tif (this.locale.language === \"es\" && (this.style !== \"long\" && this.style !== \"full\")) {\n\t\t\tthis.useFirstFamilyName = true;\t// in spanish, they have 2 family names, the maternal and paternal\n\t\t}\n\n\t\tthis.isAsianLocale = (this.info.nameStyle === \"asian\");\n\t},\n\n\t/**\n\t * adjoin auxillary words to their head words\n\t * @protected\n\t */\n\t_adjoinAuxillaries: function (parts, namePrefix) {\n\t\tvar start, i, prefixArray, prefix, prefixLower;\n\n\t\t//console.info(\"_adjoinAuxillaries: finding and adjoining aux words in \" + parts.join(' '));\n\n\t\tif ( this.info.auxillaries && (parts.length > 2 || namePrefix) ) {\n\t\t\tfor ( start = 0; start < parts.length-1; start++ ) {\n\t\t\t\tfor ( i = parts.length; i > start; i-- ) {\n\t\t\t\t\tprefixArray = parts.slice(start, i);\n\t\t\t\t\tprefix = prefixArray.join(' ');\n\t\t\t\t\tprefixLower = prefix.toLowerCase();\n\t\t\t\t\tprefixLower = prefixLower.replace(/[,\\.]/g, '');  // ignore commas and periods\n\n\t\t\t\t\t//console.info(\"_adjoinAuxillaries: checking aux prefix: '\" + prefixLower + \"' which is \" + start + \" to \" + i);\n\n\t\t\t\t\tif ( prefixLower in this.info.auxillaries ) {\n\t\t\t\t\t\t//console.info(\"Found! Old parts list is \" + JSON.stringify(parts));\n\t\t\t\t\t\tparts.splice(start, i+1-start, prefixArray.concat(parts[i]));\n\t\t\t\t\t\t//console.info(\"_adjoinAuxillaries: Found! New parts list is \" + JSON.stringify(parts));\n\t\t\t\t\t\ti = start;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//console.info(\"_adjoinAuxillaries: done. Result is \" + JSON.stringify(parts));\n\n\t\treturn parts;\n\t},\n\n\t/**\n\t * Return the locale for this formatter instance.\n\t * @return {ilib.Locale} the locale instance for this formatter\n\t */\n\tgetLocale: function () {\n\t\treturn this.locale;\n\t},\n\n\t/**\n\t * Return the style of names returned by this formatter\n\t * @return {string} the style of names returned by this formatter\n\t */\n\tgetStyle: function () {\n\t\treturn this.style;\n\t},\n\n\t/**\n\t * Return the list of components used to format names in this formatter\n\t * @return {string} the list of components\n\t */\n\tgetComponents: function () {\n\t\treturn this.components;\n\t},\n\n\t/**\n\t * Format the name for display in the current locale with the options set up\n\t * in the constructor of this formatter instance.<p>\n\t *\n\t * If the name does not contain all the parts required for the style, those parts\n\t * will be left blank.<p>\n\t *\n\t * There are two basic styles of formatting: European, and Asian. If this formatter object\n\t * is set for European style, but an Asian name is passed to the format method, then this\n\t * method will format the Asian name with a generic Asian template. Similarly, if the\n\t * formatter is set for an Asian style, and a European name is passed to the format method,\n\t * the formatter will use a generic European template.<p>\n\t *\n\t * This means it is always safe to format any name with a formatter for any locale. You should\n\t * always get something at least reasonable as output.<p>\n\t *\n\t * @param {ilib.Name} name the name to format\n\t * @return {string|undefined} the name formatted according to the style of this formatter instance\n\t */\n\tformat: function(name) {\n\t\tvar formatted, temp, modified, isAsianName;\n\t\tvar currentLanguage = this.locale.getLanguage();\n\n\t\tif (!name || typeof(name) !== 'object') {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif ((typeof(name.isAsianName) === 'boolean' && !name.isAsianName) ||\n\t\t\t\tilib.Name._isEuroName([name.givenName, name.middleName, name.familyName].join(\"\"), currentLanguage)) {\n\t\t\tisAsianName = false;\t// this is a euro name, even if the locale is asian\n\t\t\tmodified = name.clone();\n\n\t\t\t// handle the case where there is no space if there is punctuation in the suffix like \", Phd\".\n\t\t\t// Otherwise, put a space in to transform \"PhD\" to \" PhD\"\n\t\t\t/*\n\t\t\tconsole.log(\"suffix is \" + modified.suffix);\n\t\t\tif ( modified.suffix ) {\n\t\t\t\tconsole.log(\"first char is \" + modified.suffix.charAt(0));\n\t\t\t\tconsole.log(\"isPunct(modified.suffix.charAt(0)) is \" + ilib.CType.isPunct(modified.suffix.charAt(0)));\n\t\t\t}\n\t\t\t*/\n\t\t\tif (modified.suffix && ilib.CType.isPunct(modified.suffix.charAt(0)) === false) {\n\t\t\t\tmodified.suffix = ' ' + modified.suffix;\n\t\t\t}\n\n\t\t\tif (this.useFirstFamilyName && name.familyName) {\n\t\t\t\tvar familyNameParts = modified.familyName.trim().split(' ');\n\t\t\t\tif (familyNameParts.length > 1) {\n\t\t\t\t\tfamilyNameParts = this._adjoinAuxillaries(familyNameParts, name.prefix);\n\t\t\t\t}\t//in spain and mexico, we parse names differently than in the rest of the world\n\n\t\t\t\tmodified.familyName = familyNameParts[0];\n\t\t\t}\n\n\t\t\tmodified._joinNameArrays();\n\t\t} else {\n\t\t\tisAsianName = true;\n\t\t\tmodified = name;\n\t\t\tif (modified.suffix && currentLanguage === \"ko\" && this.info.honorifics.indexOf(name.suffix) == -1) {\n\t\t\t\tmodified.suffix = ' ' + modified.suffix;\n\t\t\t}\n\t\t}\n\n\t\tif (!this.template || isAsianName !== this.isAsianLocale) {\n\t\t\ttemp = isAsianName ? this.defaultAsianTemplate : this.defaultEuroTemplate;\n\t\t} else {\n\t\t\ttemp = this.template;\n\t\t}\n\n\t\tvar parts = {\n\t\t\tprefix: this.comps[\"p\"] && modified.prefix || \"\",\n\t\t\tgivenName: this.comps[\"g\"] && modified.givenName || \"\",\n\t\t\tmiddleName: this.comps[\"m\"] && modified.middleName || \"\",\n\t\t\tfamilyName: this.comps[\"f\"] && modified.familyName || \"\",\n\t\t\tsuffix: this.comps[\"s\"] && modified.suffix || \"\"\n\t\t};\n\n\t\tformatted = temp.format(parts);\n\t\treturn formatted.replace(/\\s+/g, ' ').trim();\n\t}\n};\n\n/**\n * addressprs.js - Represent a mailing address\n *\n * Copyright © 2013-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*globals console RegExp */\n\n/* !depends\nilibglobal.js\nlocale.js\nctype.isideo.js\nctype.isascii.js\nctype.isdigit.js\n*/\n\n// !data address countries nativecountries ctrynames\n\n/**\n * @class\n * Create a new Address instance and parse a physical address.<p>\n *\n * This function parses a physical address written in a free-form string.\n * It returns an object with a number of properties from the list below\n * that it may have extracted from that address.<p>\n *\n * The following is a list of properties that the algorithm will return:<p>\n *\n * <ul>\n * <li><i>streetAddress</i>: The street address, including house numbers and all.\n * <li><i>locality</i>: The locality of this address (usually a city or town).\n * <li><i>region</i>: The region where the locality is located. In the US, this\n * corresponds to states. In other countries, this may be provinces,\n * cantons, prefectures, etc. In some smaller countries, there are no\n * such divisions.\n * <li><i>postalCode</i>: Country-specific code for expediting mail. In the US,\n * this is the zip code.\n * <li><i>country</i>: The country of the address.\n * <li><i>countryCode</i>: The ISO 3166 2-letter region code for the destination\n * country in this address.\n * </ul>\n *\n * The above properties will not necessarily appear in the instance. For\n * any individual property, if the free-form address does not contain\n * that property or it cannot be parsed out, the it is left out.<p>\n *\n * The options parameter may contain any of the following properties:\n *\n * <ul>\n * <li><i>locale</i> - locale or localeSpec to use to parse the address. If not\n * specified, this function will use the current ilib locale\n *\n * <li><i>onLoad</i> - a callback function to call when the address info for the\n * locale is fully loaded and the address has been parsed. When the onLoad\n * option is given, the address object\n * will attempt to load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the\n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n *\n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the\n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object\n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n *\n * When an address cannot be parsed properly, the entire address will be placed\n * into the streetAddress property.<p>\n *\n * When the freeformAddress is another ilib.Address, this will act like a copy\n * constructor.<p>\n *\n * Depends directive: !depends addressprs.js\n *\n * @constructor\n * @param {string|ilib.Address} freeformAddress free-form address to parse, or a\n * javascript object containing the fields\n * @param {Object} options options to the parser\n */\nilib.Address = function (freeformAddress, options) {\n\tvar address;\n\n\tif (!freeformAddress) {\n\t\treturn undefined;\n\t}\n\n\tthis.sync = true;\n\tthis.loadParams = {};\n\n\tif (options) {\n\t\tif (options.locale) {\n\t\t\tthis.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;\n\t\t}\n\n\t\tif (typeof(options.sync) !== 'undefined') {\n\t\t\tthis.sync = (options.sync == true);\n\t\t}\n\n\t\tif (options.loadParams) {\n\t\t\tthis.loadParams = options.loadParams;\n\t\t}\n\t}\n\n\tthis.locale = this.locale || new ilib.Locale();\n\t// initialize from an already parsed object\n\tif (typeof(freeformAddress) === 'object') {\n\t\t/**\n\t\t * The street address, including house numbers and all.\n\t\t * @expose\n\t\t * @type {string|undefined}\n\t\t */\n\t\tthis.streetAddress = freeformAddress.streetAddress;\n\t\t/**\n\t\t * The locality of this address (usually a city or town).\n\t\t * @expose\n\t\t * @type {string|undefined}\n\t\t */\n\t\tthis.locality = freeformAddress.locality;\n\t\t/**\n\t\t * The region (province, canton, prefecture, state, etc.) where the address is located.\n\t\t * @expose\n\t\t * @type {string|undefined}\n\t\t */\n\t\tthis.region = freeformAddress.region;\n\t\t/**\n\t\t * Country-specific code for expediting mail. In the US, this is the zip code.\n\t\t * @expose\n\t\t * @type {string|undefined}\n\t\t */\n\t\tthis.postalCode = freeformAddress.postalCode;\n\t\t/**\n\t\t * Optional city-specific code for a particular post office, used to expidite\n\t\t * delivery.\n\t\t * @expose\n\t\t * @type {string|undefined}\n\t\t */\n\t\tthis.postOffice = freeformAddress.postOffice;\n\t\t/**\n\t\t * The country of the address.\n\t\t * @expose\n\t\t * @type {string|undefined}\n\t\t */\n\t\tthis.country = freeformAddress.country;\n\t\tif (freeformAddress.countryCode) {\n\t\t\t/**\n\t\t\t * The 2 or 3 letter ISO 3166 region code for the destination country in this address.\n\t\t\t * @expose\n\t\t\t * @type {string}\n\t\t\t *\n\t\t\t */\n\t\t\tthis.countryCode = freeformAddress.countryCode;\n\t\t}\n\t\tif (freeformAddress.format) {\n\t\t\t/**\n\t\t\t * private\n\t\t\t * @type {string}\n\t\t\t */\n\t\t\tthis.format = freeformAddress.format;\n\t\t}\n\t\treturn this;\n\t}\n\n\taddress = freeformAddress.replace(/[ \\t\\r]+/g, \" \").trim();\n\taddress = address.replace(/[\\s\\n]+$/, \"\");\n\taddress = address.replace(/^[\\s\\n]+/, \"\");\n\t//console.log(\"\\n\\n-------------\\nAddress is '\" + address + \"'\");\n\n\tthis.lines = address.split(/[,，\\n]/g);\n\tthis.removeEmptyLines(this.lines);\n\n\tilib.Address.shared = ilib.Address.shared || {};\n\tif (typeof(ilib.Address.ctry) === 'undefined') {\n\t\tilib.Address.ctry = {}; // make sure not to conflict with the address info\n\t}\n\tilib.CType.isAscii._init(this.sync, this.loadParams, /** @type {function(*)|undefined} */ ilib.bind(this, function() {\n\t\tilib.CType.isIdeo._init(this.sync, this.loadParams, /** @type {function(*)|undefined} */ ilib.bind(this, function() {\n\t\t\tilib.CType.isDigit._init(this.sync, this.loadParams, /** @type {function(*)|undefined} */ ilib.bind(this, function() {\n\t\t\t\tif (typeof(ilib.data.nativecountries) === 'undefined') {\n\t\t\t\t\tilib.loadData({\n\t\t\t\t\t\tname: \"nativecountries.json\", // countries in their own language\n\t\t\t\t\t\tlocale: \"-\", // only need to load the root file\n\t\t\t\t\t\tsync: this.sync,\n\t\t\t\t\t\tloadParams: this.loadParams,\n\t\t\t\t\t\tcallback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(nativecountries) {\n\t\t\t\t\t\t\tilib.data.nativecountries = nativecountries;\n\t\t\t\t\t\t\tthis._loadCountries(options && options.onLoad);\n\t\t\t\t\t\t})\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis._loadCountries(options && options.onLoad);\n\t\t\t\t}\n\t\t\t}));\n\t\t}));\n\t}));\n};\n\n/** @protected */\nilib.Address.prototype = {\n\t/**\n\t * @private\n\t */\n\t_loadCountries: function(onLoad) {\n\t\tif (typeof(ilib.data.countries) === 'undefined') {\n\t\t\tilib.loadData({\n\t\t\t\tname: \"countries.json\", // countries in English\n\t\t\t\tlocale: \"-\", // only need to load the root file\n\t\t\t\tsync: this.sync,\n\t\t\t\tloadParams: this.loadParams,\n\t\t\t\tcallback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(countries) {\n\t\t\t\t\tilib.data.countries = countries;\n\t\t\t\t\tthis._loadCtrynames(onLoad);\n\t\t\t\t})\n\t\t\t});\n\t\t} else {\n\t\t\tthis._loadCtrynames(onLoad);\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_loadCtrynames: function(onLoad) {\n\t\tilib.loadData({\n\t\t\tname: \"ctrynames.json\",\n\t\t\tobject: ilib.Address.ctry,\n\t\t\tlocale: this.locale,\n\t\t\tsync: this.sync,\n\t\t\tloadParams: this.loadParams,\n\t\t\tcallback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(ctrynames) {\n\t\t\t\tthis._determineDest(ctrynames, onLoad);\n\t\t\t})\n\t\t});\n\t},\n\n\t/**\n\t * @private\n\t * @param {Object?} ctrynames\n\t */\n\t_findDest: function (ctrynames) {\n\t\tvar match;\n\n\t\tfor (var countryName in ctrynames) {\n\t\t\tif (countryName && countryName !== \"generated\") {\n\t\t\t\t// find the longest match in the current table\n\t\t\t\t// ctrynames contains the country names mapped to region code\n\t\t\t\t// for efficiency, only test for things longer than the current match\n\t\t\t\tif (!match || match.text.length < countryName.length) {\n\t\t\t\t\tvar temp = this._findCountry(countryName);\n\t\t\t\t\tif (temp) {\n\t\t\t\t\t\tmatch = temp;\n\t\t\t\t\t\tthis.country = match.text;\n\t\t\t\t\t\tthis.countryCode = ctrynames[countryName];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn match;\n\t},\n\n\t/**\n\t * @private\n\t * @param {Object?} localizedCountries\n\t * @param {function(ilib.Address):undefined} callback\n\t */\n\t_determineDest: function (localizedCountries, callback) {\n\t\tvar match;\n\n\t\t/*\n\t\t * First, find the name of the destination country, as that determines how to parse\n\t\t * the rest of the address. For any address, there are three possible ways\n\t\t * that the name of the country could be written:\n\t\t * 1. In the current language\n\t\t * 2. In its own native language\n\t\t * 3. In English\n\t\t * We'll try all three.\n\t\t */\n\t\tvar tables = [];\n\t\tif (localizedCountries) {\n\t\t\ttables.push(localizedCountries);\n\t\t}\n\t\ttables.push(ilib.data.nativecountries);\n\t\ttables.push(ilib.data.countries);\n\n\t\tfor (var i = 0; i < tables.length; i++) {\n\t\t\tmatch = this._findDest(tables[i]);\n\n\t\t\tif (match) {\n\t\t\t\tthis.lines[match.line] = this.lines[match.line].substring(0, match.start) + this.lines[match.line].substring(match.start + match.text.length);\n\n\t\t\t\tthis._init(callback);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// no country, so try parsing it as if we were in the same country\n\t\tthis.country = undefined;\n\t\tthis.countryCode = this.locale.getRegion();\n\t\tthis._init(callback);\n\t},\n\n\t/**\n\t * @private\n\t * @param {function(ilib.Address):undefined} callback\n\t */\n\t_init: function(callback) {\n\t\tilib.loadData({\n\t\t\tobject: ilib.Address,\n\t\t\tlocale: new ilib.Locale(this.countryCode),\n\t\t\tname: \"address.json\",\n\t\t\tsync: this.sync,\n\t\t\tloadParams: this.loadParams,\n\t\t\tcallback: /** @type function(Object=):undefined */ ilib.bind(this, function(info) {\n\t\t\t\tif (!info || ilib.isEmpty(info)) {\n\t\t\t\t\t// load the \"unknown\" locale instead\n\t\t\t\t\tilib.loadData({\n\t\t\t\t\t\tobject: ilib.Address,\n\t\t\t\t\t\tlocale: new ilib.Locale(\"XX\"),\n\t\t\t\t\t\tname: \"address.json\",\n\t\t\t\t\t\tsync: this.sync,\n\t\t\t\t\t\tloadParams: this.loadParams,\n\t\t\t\t\t\tcallback: /** @type function(Object=):undefined */ ilib.bind(this, function(info) {\n\t\t\t\t\t\t\tthis.info = info;\n\t\t\t\t\t\t\tthis._parseAddress();\n\t\t\t\t\t\t\tif (typeof(callback) === 'function') {\n\t\t\t\t\t\t\t\tcallback(this);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis.info = info;\n\t\t\t\t\tthis._parseAddress();\n\t\t\t\t\tif (typeof(callback) === 'function') {\n\t\t\t\t\t\tcallback(this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_parseAddress: function() {\n\t\t// clean it up first\n\t\tvar i,\n\t\t\tasianChars = 0,\n\t\t\tlatinChars = 0,\n\t\t\tstartAt,\n\t\t\tinfoFields,\n\t\t\tfield,\n\t\t\tpattern,\n\t\t\tmatchFunction,\n\t\t\tmatch,\n\t\t\tfieldNumber;\n\n\t\t// for locales that support both latin and asian character addresses,\n\t\t// decide if we are parsing an asian or latin script address\n\t\tif (this.info && this.info.multiformat) {\n\t\t\tfor (var j = 0; j < this.lines.length; j++) {\n\t\t\t\tvar line = new ilib.String(this.lines[j]);\n\t\t\t\tvar it = line.charIterator();\n\t\t\t\twhile (it.hasNext()) {\n\t\t\t\t\tvar c = it.next();\n\t\t\t\t\tif (ilib.CType.isIdeo(c) || ilib.CType.withinRange(c, \"Hangul\")) {\n\t\t\t\t\t\tasianChars++;\n\t\t\t\t\t} else if (ilib.CType.isAscii(c) && !ilib.CType.isDigit(c)) {\n\t\t\t\t\t\tlatinChars++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.format = (asianChars >= latinChars) ? \"asian\" : \"latin\";\n\t\t\tstartAt = this.info.startAt[this.format];\n\t\t\tinfoFields = this.info.fields[this.format];\n\t\t\t// //console.log(\"multiformat locale: format is now \" + this.format);\n\t\t} else {\n\t\t\tstartAt = (this.info && this.info.startAt) || \"end\";\n\t\t\tinfoFields = this.info.fields;\n\t\t}\n\t\tthis.compare = (startAt === \"end\") ? this.endsWith : this.startsWith;\n\n\t\t//console.log(\"this.lines is: \" + JSON.stringify(this.lines));\n\n\t\tfor (i = 0; i < infoFields.length && this.lines.length > 0; i++) {\n\t\t\t/** @type {{name:string, line:string, pattern:(string|Array.<string>), matchGroup:number}} */\n\t\t\tfield = infoFields[i];\n\t\t\tthis.removeEmptyLines(this.lines);\n\t\t\t//console.log(\"Searching for field \" + field.name);\n\t\t\tif (field.pattern) {\n\t\t\t\tif (typeof(field.pattern) === 'string') {\n\t\t\t\t\tpattern = new RegExp(field.pattern, \"img\");\n\t\t\t\t\tmatchFunction = this.matchRegExp;\n\t\t\t\t} else {\n\t\t\t\t\tpattern = field.pattern;\n\t\t\t\t\tmatchFunction = this.matchPattern;\n\t\t\t\t}\n\n\t\t\t\tswitch (field.line) {\n\t\t\t\tcase 'startAtFirst':\n\t\t\t\t\tfor (fieldNumber = 0; fieldNumber < this.lines.length; fieldNumber++) {\n\t\t\t\t\t\tmatch = matchFunction(this, this.lines[fieldNumber], pattern, field.matchGroup, startAt);\n\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'startAtLast':\n\t\t\t\t\tfor (fieldNumber = this.lines.length-1; fieldNumber >= 0; fieldNumber--) {\n\t\t\t\t\t\tmatch = matchFunction(this, this.lines[fieldNumber], pattern, field.matchGroup, startAt);\n\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'first':\n\t\t\t\t\tfieldNumber = 0;\n\t\t\t\t\tmatch = matchFunction(this, this.lines[fieldNumber], pattern, field.matchGroup, startAt);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'last':\n\t\t\t\tdefault:\n\t\t\t\t\tfieldNumber = this.lines.length - 1;\n\t\t\t\t\tmatch = matchFunction(this, this.lines[fieldNumber], pattern, field.matchGroup, startAt);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (match) {\n\t\t\t\t\t// //console.log(\"found match for \" + field.name + \": \" + JSON.stringify(match));\n\t\t\t\t\t// //console.log(\"remaining line is \" + match.line);\n\t\t\t\t\tthis.lines[fieldNumber] = match.line;\n\t\t\t\t\tthis[field.name] = match.match;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// if nothing is given, default to taking the whole field\n\t\t\t\tthis[field.name] = this.lines.splice(fieldNumber,1)[0].trim();\n\t\t\t\t//console.log(\"typeof(this[field.name]) is \" + typeof(this[field.name]) + \" and value is \" + JSON.stringify(this[field.name]));\n\t\t\t}\n\t\t}\n\n\t\t// all the left overs go in the street address field\n\t\tthis.removeEmptyLines(this.lines);\n\t\tif (this.lines.length > 0) {\n\t\t\t//console.log(\"this.lines is \" + JSON.stringify(this.lines) + \" and splicing to get streetAddress\");\n\t\t\t// Korea uses spaces between words, despite being an \"asian\" locale\n\t\t\tvar joinString = (this.info.joinString && this.info.joinString[this.format]) || ((this.format && this.format === \"asian\") ? \"\" : \", \");\n\t\t\tthis.streetAddress = this.lines.join(joinString).trim();\n\t\t}\n\n\t\tthis.lines = undefined;\n\t\t//console.log(\"final result is \" + JSON.stringify(this));\n\t},\n\n\t/**\n\t * @protected\n\t * Find the named country either at the end or the beginning of the address.\n\t */\n\t_findCountry: function(name) {\n\t\tvar start = -1, match, line = 0;\n\n\t\tif (this.lines.length > 0) {\n\t\t\tstart = this.startsWith(this.lines[line], name);\n\t\t\tif (start === -1) {\n\t\t\t\tline = this.lines.length-1;\n\t\t\t\tstart = this.endsWith(this.lines[line], name);\n\t\t\t}\n\t\t\tif (start !== -1) {\n\t\t\t\tmatch = {\n\t\t\t\t\ttext: this.lines[line].substring(start, start + name.length),\n\t\t\t\t\tline: line,\n\t\t\t\t\tstart: start\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn match;\n\t},\n\n\tendsWith: function (subject, query) {\n\t\tvar start = subject.length-query.length,\n\t\t\ti,\n\t\t\tpat;\n\t\t//console.log(\"endsWith: checking \" + query + \" against \" + subject);\n\t\tfor (i = 0; i < query.length; i++) {\n\t\t\t// TODO: use case mapper instead of toLowerCase()\n\t\t\tif (subject.charAt(start+i).toLowerCase() !== query.charAt(i).toLowerCase()) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\tif (start > 0) {\n\t\t\tpat = /\\s/;\n\t\t\tif (!pat.test(subject.charAt(start-1))) {\n\t\t\t\t// make sure if we are not at the beginning of the string, that the match is\n\t\t\t\t// not the end of some other word\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\treturn start;\n\t},\n\n\tstartsWith: function (subject, query) {\n\t\tvar i;\n\t\t// //console.log(\"startsWith: checking \" + query + \" against \" + subject);\n\t\tfor (i = 0; i < query.length; i++) {\n\t\t\t// TODO: use case mapper instead of toLowerCase()\n\t\t\tif (subject.charAt(i).toLowerCase() !== query.charAt(i).toLowerCase()) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t},\n\n\tremoveEmptyLines: function (arr) {\n\t\tvar i = 0;\n\n\t\twhile (i < arr.length) {\n\t\t\tif (arr[i]) {\n\t\t\t\tarr[i] = arr[i].trim();\n\t\t\t\tif (arr[i].length === 0) {\n\t\t\t\t\tarr.splice(i,1);\n\t\t\t\t} else {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tarr.splice(i,1);\n\t\t\t}\n\t\t}\n\t},\n\n\tmatchRegExp: function(address, line, expression, matchGroup, startAt) {\n\t\tvar lastMatch,\n\t\t\tmatch,\n\t\t\tret = {},\n\t\t\tlast;\n\n\t\t//console.log(\"searching for regexp \" + expression.source + \" in line \" + line);\n\n\t\tmatch = expression.exec(line);\n\t\tif (startAt === 'end') {\n\t\t\twhile (match !== null && match.length > 0) {\n\t\t\t\t//console.log(\"found matches \" + JSON.stringify(match));\n\t\t\t\tlastMatch = match;\n\t\t\t\tmatch = expression.exec(line);\n\t\t\t}\n\t\t\tmatch = lastMatch;\n\t\t}\n\n\t\tif (match && match !== null) {\n\t\t\t//console.log(\"found matches \" + JSON.stringify(match));\n\t\t\tmatchGroup = matchGroup || 0;\n\t\t\tif (match[matchGroup] !== undefined) {\n\t\t\t\tret.match = match[matchGroup].trim();\n\t\t\t\tret.match = ret.match.replace(/^\\-|\\-+$/, '');\n\t\t\t\tret.match = ret.match.replace(/\\s+$/, '');\n\t\t\t\tlast = (startAt === 'end') ? line.lastIndexOf(match[matchGroup]) : line.indexOf(match[matchGroup]);\n\t\t\t\t//console.log(\"last is \" + last);\n\t\t\t\tret.line = line.slice(0,last);\n\t\t\t\tif (address.format !== \"asian\") {\n\t\t\t\t\tret.line += \" \";\n\t\t\t\t}\n\t\t\t\tret.line += line.slice(last+match[matchGroup].length);\n\t\t\t\tret.line = ret.line.trim();\n\t\t\t\t//console.log(\"found match \" + ret.match + \" from matchgroup \" + matchGroup + \" and rest of line is \" + ret.line);\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t//} else {\n\t\t\t//console.log(\"no match\");\n\t\t}\n\n\t\treturn undefined;\n\t},\n\n\tmatchPattern: function(address, line, pattern, matchGroup) {\n\t\tvar start,\n\t\t\tj,\n\t\t\tret = {};\n\n\t\t//console.log(\"searching in line \" + line);\n\n\t\t// search an array of possible fixed strings\n\t\t//console.log(\"Using fixed set of strings.\");\n\t\tfor (j = 0; j < pattern.length; j++) {\n\t\t\tstart = address.compare(line, pattern[j]);\n\t\t\tif (start !== -1) {\n                            ret.match = line.substring(start, start+pattern[j].length);\n                            if (start !== 0) {\n                                ret.line = line.substring(0,start).trim();\n                            } else {\n                                ret.line = line.substring(pattern[j].length).trim();\n                            }\n\t\t\t\t//console.log(\"found match \" + ret.match + \" and rest of line is \" + ret.line);\n                            return ret;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n};\n\n/*\n * addressfmt.js - Format an address\n *\n * Copyright © 2013-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\nilibglobal.js\nlocale.js\naddressprs.js\n*/\n\n// !data address\n\n/**\n * @class\n * Create a new formatter object to format physical addresses in a particular way.\n *\n * The options object may contain the following properties, both of which are optional:\n *\n * <ul>\n * <li><i>locale</i> - the locale to use to format this address. If not specified, it uses the default locale\n *\n * <li><i>style</i> - the style of this address. The default style for each country usually includes all valid\n * fields for that country.\n *\n * <li><i>onLoad</i> - a callback function to call when the address info for the\n * locale is fully loaded and the address has been parsed. When the onLoad\n * option is given, the address formatter object\n * will attempt to load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the\n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n *\n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the\n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object\n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n *\n * Depends directive: !depends addressfmt.js\n *\n * @constructor\n * @param {Object} options options that configure how this formatter should work\n * Returns a formatter instance that can format multiple addresses.\n */\nilib.AddressFmt = function(options) {\n\tthis.sync = true;\n\tthis.styleName = 'default';\n\tthis.loadParams = {};\n\tthis.locale = new ilib.Locale();\n\n\tif (options) {\n\t\tif (options.locale) {\n\t\t\tthis.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;\n\t\t}\n\n\t\tif (typeof(options.sync) !== 'undefined') {\n\t\t\tthis.sync = (options.sync == true);\n\t\t}\n\n\t\tif (options.style) {\n\t\t\tthis.styleName = options.style;\n\t\t}\n\n\t\tif (options.loadParams) {\n\t\t\tthis.loadParams = options.loadParams;\n\t\t}\n\t}\n\n\t// console.log(\"Creating formatter for region: \" + this.locale.region);\n\tilib.loadData({\n\t\tname: \"address.json\",\n\t\tobject: ilib.Address,\n\t\tlocale: this.locale,\n\t\tsync: this.sync,\n\t\tloadParams: this.loadParams,\n\t\tcallback: /** @type function(Object?):undefined */ ilib.bind(this, function(info) {\n\t\t\tif (!info || ilib.isEmpty(info)) {\n\t\t\t\t// load the \"unknown\" locale instead\n\t\t\t\tilib.loadData({\n\t\t\t\t\tname: \"address.json\",\n\t\t\t\t\tobject: ilib.Address,\n\t\t\t\t\tlocale: new ilib.Locale(\"XX\"),\n\t\t\t\t\tsync: this.sync,\n\t\t\t\t\tloadParams: this.loadParams,\n\t\t\t\t\tcallback: /** @type function(Object?):undefined */ ilib.bind(this, function(info) {\n\t\t\t\t\t\tthis.info = info;\n\t\t\t\t\t\tthis._init();\n\t\t\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\t\t\t\toptions.onLoad(this);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.info = info;\n\t\t\t\tthis._init();\n\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\t\toptions.onLoad(this);\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t});\n};\n\n/**\n * @private\n */\nilib.AddressFmt.prototype._init = function () {\n\tthis.style = this.info && this.info.formats && this.info.formats[this.styleName];\n\n\t// use generic default -- should not happen, but just in case...\n\tthis.style = this.style || (this.info && this.info.formats[\"default\"]) || \"{streetAddress}\\n{locality} {region} {postalCode}\\n{country}\";\n};\n\n/**\n * This function formats a physical address (ilib.Address instance) for display.\n * Whitespace is trimmed from the beginning and end of final resulting string, and\n * multiple consecutive whitespace characters in the middle of the string are\n * compressed down to 1 space character.\n *\n * If the Address instance is for a locale that is different than the locale for this\n * formatter, then a hybrid address is produced. The country name is located in the\n * correct spot for the current formatter's locale, but the rest of the fields are\n * formatted according to the default style of the locale of the actual address.\n *\n * Example: a mailing address in China, but formatted for the US might produce the words\n * \"People's Republic of China\" in English at the last line of the address, and the\n * Chinese-style address will appear in the first line of the address. In the US, the\n * country is on the last line, but in China the country is usually on the first line.\n *\n * @param {ilib.Address} address Address to format\n * @eturns {string} Returns a string containing the formatted address\n */\nilib.AddressFmt.prototype.format = function (address) {\n\tvar ret, template, other, format;\n\n\tif (!address) {\n\t\treturn \"\";\n\t}\n\t// console.log(\"formatting address: \" + JSON.stringify(address));\n\tif (address.countryCode &&\n\t\t\taddress.countryCode !== this.locale.region &&\n\t\t\tilib.Locale._isRegionCode(this.locale.region) &&\n\t\t\tthis.locale.region !== \"XX\") {\n\t\t// we are formatting an address that is sent from this country to another country,\n\t\t// so only the country should be in this locale, and the rest should be in the other\n\t\t// locale\n\t\t// console.log(\"formatting for another locale. Loading in its settings: \" + address.countryCode);\n\t\tother = new ilib.AddressFmt({\n\t\t\tlocale: new ilib.Locale(address.countryCode),\n\t\t\tstyle: this.styleName\n\t\t});\n\t\treturn other.format(address);\n\t}\n\n\tif (typeof(this.style) === 'object') {\n\t\tformat = this.style[address.format || \"latin\"];\n\t} else {\n\t\tformat = this.style;\n\t}\n\n\t// console.log(\"Using format: \" + format);\n\t// make sure we have a blank string for any missing parts so that\n\t// those template parts get blanked out\n\tvar params = {\n\t\tcountry: address.country || \"\",\n\t\tregion: address.region || \"\",\n\t\tlocality: address.locality || \"\",\n\t\tstreetAddress: address.streetAddress || \"\",\n\t\tpostalCode: address.postalCode || \"\",\n\t\tpostOffice: address.postOffice || \"\"\n\t};\n\ttemplate = new ilib.String(format);\n\tret = template.format(params);\n\tret = ret.replace(/[ \\t]+/g, ' ');\n\tret = ret.replace(\"\\n \", \"\\n\");\n\tret = ret.replace(\" \\n\", \"\\n\");\n\treturn ret.replace(/\\n+/g, '\\n').trim();\n};\n\n/*\n * glyphstring.js - ilib string subclass that allows you to access\n * whole glyphs at a time\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends strings.js ctype.js\n// !data norm ctype_m\n\n/**\n * @class\n * Create a new glyph string instance. This string inherits from\n * the ilib.String class, and adds methods that allow you to access\n * whole glyphs at a time. <p>\n *\n * In Unicode, various accented characters can be created by using\n * a base character and one or more combining characters following\n * it. These appear on the screen to the user as a single glyph.\n * For example, the Latin character \"a\" (U+0061) followed by the\n * combining diaresis character \"¨\" (U+0308) combine together to\n * form the \"a with diaresis\" glyph \"ä\", which looks like a single\n * character on the screen.<p>\n *\n * The big problem with combining characters for web developers is\n * that many CSS engines do not ellipsize text between glyphs. They\n * only deal with single Unicode characters. So if a particular space\n * only allows for 4 characters, the CSS engine will truncate a\n * string at 4 Unicode characters and then add the ellipsis (...)\n * character. What if the fourth Unicode character is the \"a\" and\n * the fifth one is the diaresis? Then a string like \"xxxäxxx\" that\n * is ellipsized at 4 characters will appear as \"xxxa...\" on the\n * screen instead of \"xxxä...\".<p>\n *\n * In the Latin script as it is commonly used, it is not so common\n * to form accented characters using combining accents, so the above\n * example is mostly for illustrative purposes. It is not unheard of\n * however. The situation is much, much worse in scripts such as Thai and\n * Devanagari that normally make very heavy use of combining characters.\n * These scripts do so because Unicode does not include pre-composed\n * versions of the accented characters like it does for Latin, so\n * combining accents are the only way to create these accented and\n * combined versions of the characters.<p>\n *\n * The solution to thise problem is not to use the the CSS property\n * \"text-overflow: ellipsis\" in your web site, ever. Instead, use\n * a glyph string to truncate text between glyphs instead of between\n * characters.<p>\n *\n * Glyph strings are also useful for truncation, hyphenation, and\n * line wrapping, as all of these should be done between glyphs instead\n * of between characters.<p>\n *\n * The options parameter is optional, and may contain any combination\n * of the following properties:<p>\n *\n * <ul>\n * <li><i>onLoad</i> - a callback function to call when the locale data are\n * fully loaded. When the onLoad option is given, this object will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the\n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n *\n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the\n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object\n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n *\n *\n * Depends directive: !depends glyphstring.js\n *\n * @constructor\n * @param {string|ilib.String=} str initialize this instance with this string\n * @param {Object=} options options governing the way this instance works\n */\nilib.GlyphString = function (str, options) {\n\tilib.String.call(this, str);\n\n\tvar sync = true;\n\tvar loadParams = {};\n\tif (options) {\n\t\tif (typeof(options.sync) === 'boolean') {\n\t\t\tsync = options.sync;\n\t\t}\n\t\tif (options.loadParams) {\n\t\t\tloadParams = options.loadParams;\n\t\t}\n\t}\n\n\tilib.CType._load(\"ctype_m\", sync, loadParams, function() {\n\t\tif (typeof(ilib.data.norm) === 'undefined' || typeof(ilib.data.norm.ccc) === 'undefined') {\n\t\t\tilib.loadData({\n\t\t\t\tobject: ilib.GlyphString,\n\t\t\t\tlocale: \"-\",\n\t\t\t\tname: \"norm.json\",\n\t\t\t\tnonlocale: true,\n\t\t\t\tsync: sync,\n\t\t\t\tloadParams: loadParams,\n\t\t\t\tcallback: ilib.bind(this, function (norm) {\n\t\t\t\t\tilib.data.norm = norm;\n\t\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\t\t\toptions.onLoad(this);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t});\n\t\t} else {\n\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\toptions.onLoad(this);\n\t\t\t}\n\t\t}\n\t});\n};\n\nilib.GlyphString.prototype = new ilib.String();\nilib.GlyphString.parent = ilib.String;\nilib.GlyphString.prototype.constructor = ilib.GlyphString;\n\n//ilib.GlyphString.prototype.iterator = function () {\n\n//};\n\n/**\n * Return true if the given character is a leading Jamo (Choseong) character.\n *\n * @private\n * @static\n * @param {number} n code point to check\n * @return {boolean} true if the character is a leading Jamo character,\n * false otherwise\n */\nilib.GlyphString._isJamoL = function (n) {\n\treturn (n >= 0x1100 && n <= 0x1112);\n};\n\n/**\n * Return true if the given character is a vowel Jamo (Jungseong) character.\n *\n * @private\n * @static\n * @param {number} n code point to check\n * @return {boolean} true if the character is a vowel Jamo character,\n * false otherwise\n */\nilib.GlyphString._isJamoV = function (n) {\n\treturn (n >= 0x1161 && n <= 0x1175);\n};\n\n/**\n * Return true if the given character is a trailing Jamo (Jongseong) character.\n *\n * @private\n * @static\n * @param {number} n code point to check\n * @return {boolean} true if the character is a trailing Jamo character,\n * false otherwise\n */\nilib.GlyphString._isJamoT = function (n) {\n\treturn (n >= 0x11A8 && n <= 0x11C2);\n};\n\n/**\n * Return true if the given character is a precomposed Hangul character.\n *\n * @private\n * @static\n * @param {number} n code point to check\n * @return {boolean} true if the character is a precomposed Hangul character,\n * false otherwise\n */\nilib.GlyphString._isHangul = function (n) {\n\treturn (n >= 0xAC00 && n <= 0xD7A3);\n};\n\n/**\n * Algorithmically compose an L and a V combining Jamo characters into\n * a precomposed Korean syllabic Hangul character. Both should already\n * be in the proper ranges for L and V characters.\n *\n * @private\n * @static\n * @param {number} lead the code point of the lead Jamo character to compose\n * @param {number} trail the code point of the trailing Jamo character to compose\n * @return {string} the composed Hangul character\n */\nilib.GlyphString._composeJamoLV = function (lead, trail) {\n\tvar lindex = lead - 0x1100;\n\tvar vindex = trail - 0x1161;\n\treturn ilib.String.fromCodePoint(0xAC00 + (lindex * 21 + vindex) * 28);\n};\n\n/**\n * Algorithmically compose a Hangul LV and a combining Jamo T character\n * into a precomposed Korean syllabic Hangul character.\n *\n * @private\n * @static\n * @param {number} lead the code point of the lead Hangul character to compose\n * @param {number} trail the code point of the trailing Jamo T character to compose\n * @return {string} the composed Hangul character\n */\nilib.GlyphString._composeJamoLVT = function (lead, trail) {\n\treturn ilib.String.fromCodePoint(lead + (trail - 0x11A7));\n};\n\n/**\n * Compose one character out of a leading character and a\n * trailing character. If the characters are Korean Jamo, they\n * will be composed algorithmically. If they are any other\n * characters, they will be looked up in the nfc tables.\n *\n * @private\n * @static\n * @param {string} lead leading character to compose\n * @param {string} trail the trailing character to compose\n * @return {string} the fully composed character, or undefined if\n * there is no composition for those two characters\n */\nilib.GlyphString._compose = function (lead, trail) {\n\tvar first = lead.charCodeAt(0);\n\tvar last = trail.charCodeAt(0);\n\tif (ilib.GlyphString._isHangul(first) && ilib.GlyphString._isJamoT(last)) {\n\t\treturn ilib.GlyphString._composeJamoLVT(first, last);\n\t} else if (ilib.GlyphString._isJamoL(first) && ilib.GlyphString._isJamoV(last)) {\n\t\treturn ilib.GlyphString._composeJamoLV(first, last);\n\t}\n\n\tvar c = lead + trail;\n\treturn (ilib.data.norm.nfc && ilib.data.norm.nfc[c]);\n};\n\n/**\n * Return an iterator that will step through all of the characters\n * in the string one at a time, taking care to step through decomposed\n * characters and through surrogate pairs in the UTF-16 encoding\n * as single characters. <p>\n *\n * The GlyphString class will return decomposed Unicode characters\n * as a single unit that a user might see on the screen as a single\n * glyph. If the\n * next character in the iteration is a base character and it is\n * followed by combining characters, the base and all its following\n * combining characters are returned as a single unit.<p>\n *\n * The standard Javascript String's charAt() method only\n * returns information about a particular 16-bit character in the\n * UTF-16 encoding scheme.\n * If the index is pointing to a low- or high-surrogate character,\n * it will return that surrogate character rather\n * than the surrogate pair which represents a character\n * in the supplementary planes.<p>\n *\n * The iterator instance returned has two methods, hasNext() which\n * returns true if the iterator has more characters to iterate through,\n * and next() which returns the next character.<p>\n *\n * @override\n * @return {Object} an iterator\n * that iterates through all the characters in the string\n */\nilib.GlyphString.prototype.charIterator = function() {\n\tvar it = ilib.String.prototype.charIterator.call(this);\n\n\t/**\n\t * @constructor\n\t */\n\tfunction _chiterator (istring) {\n\t\tthis.index = 0;\n\t\tthis.spacingCombining = false;\n\t\tthis.hasNext = function () {\n\t\t\treturn !!this.nextChar || it.hasNext();\n\t\t};\n\t\tthis.next = function () {\n\t\t\tvar ch = this.nextChar || it.next(),\n\t\t\t\tprevCcc = ilib.data.norm.ccc[ch],\n\t\t\t\tnextCcc,\n\t\t\t\tcomposed = ch;\n\n\t\t\tthis.nextChar = undefined;\n\t\t\tthis.spacingCombining = false;\n\n\t\t\tif (ilib.data.norm.ccc &&\n\t\t\t\t\t(typeof(ilib.data.norm.ccc[ch]) === 'undefined' || ilib.data.norm.ccc[ch] === 0)) {\n\t\t\t\t// found a starter... find all the non-starters until the next starter. Must include\n\t\t\t\t// the next starter because under some odd circumstances, two starters sometimes recompose\n\t\t\t\t// together to form another character\n\t\t\t\tvar notdone = true;\n\t\t\t\twhile (it.hasNext() && notdone) {\n\t\t\t\t\tthis.nextChar = it.next();\n\t\t\t\t\tnextCcc = ilib.data.norm.ccc[this.nextChar];\n\t\t\t\t\tvar codePoint = ilib.String.toCodePoint(this.nextChar, 0);\n\t\t\t\t\t// Mn characters are Marks that are non-spacing. These do not take more room than an accent, so they should be\n\t\t\t\t\t// considered part of the on-screen glyph, even if they are non-combining. Mc are marks that are spacing\n\t\t\t\t\t// and combining, which means they are part of the glyph, but they cause the glyph to use up more space than\n\t\t\t\t\t// just the base character alone.\n\t\t\t\t\tvar isMn = ilib.CType._inRange(codePoint, \"Mn\", ilib.data.ctype_m);\n\t\t\t\t\tvar isMc = ilib.CType._inRange(codePoint, \"Mc\", ilib.data.ctype_m);\n\t\t\t\t\tif (isMn || isMc || (typeof(nextCcc) !== 'undefined' && nextCcc !== 0)) {\n\t\t\t\t\t\tif (isMc) {\n\t\t\t\t\t\t\tthis.spacingCombining = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tch += this.nextChar;\n\t\t\t\t\t\tthis.nextChar = undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// found the next starter. See if this can be composed with the previous starter\n\t\t\t\t\t\tvar testChar = ilib.GlyphString._compose(composed, this.nextChar);\n\t\t\t\t\t\tif (prevCcc === 0 && typeof(testChar) !== 'undefined') {\n\t\t\t\t\t\t\t// not blocked and there is a mapping\n\t\t\t\t\t\t\tcomposed = testChar;\n\t\t\t\t\t\t\tch += this.nextChar;\n\t\t\t\t\t\t\tthis.nextChar = undefined;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// finished iterating, leave this.nextChar for the next next() call\n\t\t\t\t\t\t\tnotdone = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tprevCcc = nextCcc;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn ch;\n\t\t};\n\t\t// Returns true if the last character returned by the \"next\" method included\n\t\t// spacing combining characters. If it does, then the character was wider than\n\t\t// just the base character alone, and the truncation code will not add it.\n\t\tthis.wasSpacingCombining = function() {\n\t\t\treturn this.spacingCombining;\n\t\t};\n\t};\n\treturn new _chiterator(this);\n};\n\n/**\n * Truncate the current string at the given number of whole glyphs and return\n * the resulting string.\n *\n * @param {number} length the number of whole glyphs to keep in the string\n * @return {string} a string truncated to the requested number of glyphs\n */\nilib.GlyphString.prototype.truncate = function(length) {\n\tvar it = this.charIterator();\n\tvar tr = \"\";\n\tfor (var i = 0; i < length-1 && it.hasNext(); i++) {\n\t\ttr += it.next();\n\t}\n\n\t/*\n\t * handle the last character separately. If it contains spacing combining\n\t * accents, then we must assume that it uses up more horizontal space on\n\t * the screen than just the base character by itself, and therefore this\n\t * method will not truncate enough characters to fit in the given length.\n\t * In this case, we have to chop off not only the combining characters,\n\t * but also the base character as well because the base without the\n\t * combining accents is considered a different character.\n\t */\n\tif (i < length && it.hasNext()) {\n\t\tvar c = it.next();\n\t\tif (!it.wasSpacingCombining()) {\n\t\t\ttr += c;\n\t\t}\n\t}\n\treturn tr;\n};\n\n/**\n * Truncate the current string at the given number of glyphs and add an ellipsis\n * to indicate that is more to the string. The ellipsis forms the last character\n * in the string, so the string is actually truncated at length-1 glyphs.\n *\n * @param {number} length the number of whole glyphs to keep in the string\n * including the ellipsis\n * @return {string} a string truncated to the requested number of glyphs\n * with an ellipsis\n */\nilib.GlyphString.prototype.ellipsize = function(length) {\n\treturn this.truncate(length > 0 ? length-1 : 0) + \"…\";\n};\n\n\n/*\n * normstring.js - ilib normalized string subclass definition\n *\n * Copyright © 2013-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends strings.js glyphstring.js\n\n/**\n * @class\n * Create a new normalized string instance. This string inherits from\n * the ilib.GlyphString class, and adds the normalize method. It can be\n * used anywhere that a normal Javascript string is used. <p>\n *\n * Depends directive: !depends normstring.js\n *\n * @constructor\n * @param {string|ilib.String=} str initialize this instance with this string\n */\nilib.NormString = function (str) {\n\tilib.GlyphString.call(this, str);\n};\n\nilib.NormString.prototype = new ilib.GlyphString();\nilib.NormString.parent = ilib.GlyphString;\nilib.NormString.prototype.constructor = ilib.NormString;\n\n/**\n * Initialize the normalized string routines statically. This\n * is intended to be called in a dynamic-load version of ilib\n * to load the data need to normalize strings before any instances\n * of ilib.NormString are created.<p>\n *\n * The options parameter may contain any of the following properties:\n *\n * <ul>\n * <li><i>form</i> - {string} the normalization form to load\n * <li><i>script</i> - {string} load the normalization for this script. If the\n * script is given as \"all\" then the normalization data for all scripts\n * is loaded at the same time\n * <li><i>sync</i> - {boolean} whether to load the files synchronously or not\n * <li><i>loadParams</i> - {Object} parameters to the loader function\n * <li><i>onLoad</i> - {function()} a function to call when the\n * files are done being loaded\n * </ul>\n *\n * @param {Object} options an object containing properties that govern\n * how to initialize the data\n */\nilib.NormString.init = function(options) {\n\tif (!ilib._load || (typeof(ilib._load) !== 'function' && !(ilib._load instanceof ilib.Loader))) {\n\t\t// can't do anything\n\t\treturn;\n\t}\n\tvar form = \"nfkc\";\n\tvar script = \"all\";\n\tvar sync = true;\n\tvar onLoad = undefined;\n\tvar loadParams = undefined;\n\tif (options) {\n\t\tform = options.form || \"nfkc\";\n\t\tscript = options.script || \"all\";\n\t\tsync = typeof(options.sync) !== 'undefined' ? options.sync : true;\n\t\tonLoad = typeof(options.onLoad) === 'function' ? options.onLoad : undefined;\n\t\tif (options.loadParams) {\n\t\t\tloadParams = options.loadParams;\n\t\t}\n\t}\n\tvar formDependencies = {\n\t\t\"nfd\": [\"nfd\"],\n\t\t\"nfc\": [\"nfd\"],\n\t\t\"nfkd\": [\"nfkd\", \"nfd\"],\n\t\t\"nfkc\": [\"nfkd\", \"nfd\"]\n\t};\n\tvar files = [\"norm.json\"];\n\tvar forms = formDependencies[form];\n\tfor (var f in forms) {\n\t\tfiles.push(forms[f] + \"/\" + script + \".json\");\n\t}\n\n\tilib._callLoadData(files, sync, loadParams, function(arr) {\n\t\tilib.data.norm = arr[0];\n\t\tfor (var i = 1; i < arr.length; i++) {\n\t\t\tif (typeof(arr[i]) !== 'undefined') {\n\t\t\t\tilib.data.norm[forms[i-1]] = arr[i];\n\t\t\t}\n\t\t}\n\n\t\tif (onLoad) {\n\t\t\tonLoad(arr);\n\t\t}\n\t});\n};\n\n/**\n * Algorithmically decompose a precomposed Korean syllabic Hangul\n * character into its individual combining Jamo characters. The given\n * character must be in the range of Hangul characters U+AC00 to U+D7A3.\n *\n * @private\n * @static\n * @param {number} cp code point of a Korean Hangul character to decompose\n * @return {string} the decomposed string of Jamo characters\n */\nilib.NormString._decomposeHangul = function (cp) {\n\tvar sindex = cp - 0xAC00;\n\tvar result = String.fromCharCode(0x1100 + sindex / 588) +\n\t\t\tString.fromCharCode(0x1161 + (sindex % 588) / 28);\n\tvar t = sindex % 28;\n\tif (t !== 0) {\n\t\tresult += String.fromCharCode(0x11A7 + t);\n\t}\n\treturn result;\n};\n\n/**\n * Expand one character according to the given canonical and\n * compatibility mappings.\n *\n * @private\n * @static\n * @param {string} ch character to map\n * @param {Object} canon the canonical mappings to apply\n * @param {Object=} compat the compatibility mappings to apply, or undefined\n * if only the canonical mappings are needed\n * @return {string} the mapped character\n */\nilib.NormString._expand = function (ch, canon, compat) {\n\tvar i,\n\t\texpansion = \"\",\n\t\tn = ch.charCodeAt(0);\n\tif (ilib.GlyphString._isHangul(n)) {\n\t\texpansion = ilib.NormString._decomposeHangul(n);\n\t} else {\n\t\tvar result = canon[ch];\n\t\tif (!result && compat) {\n\t\t\tresult = compat[ch];\n\t\t}\n\t\tif (result && result !== ch) {\n\t\t\tfor (i = 0; i < result.length; i++) {\n\t\t\t\texpansion += ilib.NormString._expand(result[i], canon, compat);\n\t\t\t}\n\t\t} else {\n\t\t\texpansion = ch;\n\t\t}\n\t}\n\treturn expansion;\n};\n\n/**\n * Perform the Unicode Normalization Algorithm upon the string and return\n * the resulting new string. The current string is not modified.\n *\n * <h2>Forms</h2>\n *\n * The forms of possible normalizations are defined by the <a\n * href=\"http://www.unicode.org/reports/tr15/\">Unicode Standard\n * Annex (UAX) 15</a>. The form parameter is a string that may have one\n * of the following values:\n *\n * <ul>\n * <li>nfd - Canonical decomposition. This decomposes characters into\n * their exactly equivalent forms. For example, \"&uuml;\" would decompose\n * into a \"u\" followed by the combining diaeresis character.\n * <li>nfc - Canonical decomposition followed by canonical composition.\n * This decomposes and then recomposes character into their shortest\n * exactly equivalent forms by recomposing as many combining characters\n * as possible. For example, \"&uuml;\" followed by a combining\n * macron character would decompose into a \"u\" followed by the combining\n * macron characters the combining diaeresis character, and then be recomposed into\n * the u with macron and diaeresis \"&#x1E7B;\" character. The reason that\n * the \"nfc\" form decomposes and then recomposes is that combining characters\n * have a specific order under the Unicode Normalization Algorithm, and\n * partly composed characters such as the \"&uuml;\" followed by combining\n * marks may change the order of the combining marks when decomposed and\n * recomposed.\n * <li>nfkd - Compatibility decomposition. This decomposes characters\n * into compatible forms that may not be exactly equivalent semantically,\n * as well as performing canonical decomposition as well.\n * For example, the \"&oelig;\" ligature character decomposes to the two\n * characters \"oe\" because they are compatible even though they are not\n * exactly the same semantically.\n * <li>nfkc - Compatibility decomposition followed by canonical composition.\n * This decomposes characters into compatible forms, then recomposes\n * characters using the canonical composition. That is, it breaks down\n * characters into the compatible forms, and then recombines all combining\n * marks it can with their base characters. For example, the character\n * \"&#x01FD;\" would be normalized to \"a&eacute;\" by first decomposing\n * the character into \"a\" followed by \"e\" followed by the combining acute accent\n * combining mark, and then recomposed to an \"a\" followed by the \"e\"\n * with acute accent.\n * </ul>\n *\n * <h2>Operation</h2>\n *\n * Two strings a and b can be said to be canonically equivalent if\n * normalize(a) = normalize(b)\n * under the nfc normalization form. Two strings can be said to be compatible if\n * normalize(a) = normalize(b) under the nfkc normalization form.<p>\n *\n * The canonical normalization is often used to see if strings are\n * equivalent to each other, and thus is useful when implementing parsing\n * algorithms or exact matching algorithms. It can also be used to ensure\n * that any string output produces a predictable sequence of characters.<p>\n *\n * Compatibility normalization\n * does not always preserve the semantic meaning of all the characters,\n * although this is sometimes the behaviour that you are after. It is useful,\n * for example, when doing searches of user-input against text in documents\n * where the matches are supposed to \"fuzzy\". In this case, both the query\n * string and the document string would be mapped to their compatibility\n * normalized forms, and then compared.<p>\n *\n * Compatibility normalization also does not guarantee round-trip conversion\n * to and from legacy character sets as the normalization is \"lossy\". It is\n * akin to doing a lower- or upper-case conversion on text -- after casing,\n * you cannot tell what case each character is in the original string. It is\n * good for matching and searching, but it rarely good for output because some\n * distinctions or meanings in the original text have been lost.<p>\n *\n * Note that W3C normalization for HTML also escapes and unescapes\n * HTML character entities such as \"&amp;uuml;\" for u with diaeresis. This\n * method does not do such escaping or unescaping. If normalization is required\n * for HTML strings with entities, unescaping should be performed on the string\n * prior to calling this method.<p>\n *\n * <h2>Data</h2>\n *\n * Normalization requires a fair amount of mapping data, much of which you may\n * not need for the characters expected in your texts. It is possible to assemble\n * a copy of ilib that saves space by only including normalization data for\n * those scripts that you expect to encounter in your data.<p>\n *\n * The normalization data is organized by normalization form and within there\n * by script. To include the normalization data for a particular script with\n * a particular normalization form, use the directive:\n *\n * <pre><code>\n * !depends &lt;form&gt;/&lt;script&gt;.js\n * </code></pre>\n *\n * Where &lt;form&gt is the normalization form (\"nfd\", \"nfc\", \"nfkd\", or \"nfkc\"), and\n * &lt;script&gt; is the ISO 15924 code for the script you would like to\n * support. Example: to load in the NFC data for Cyrillic, you would use:\n *\n * <pre><code>\n * !depends nfc/Cyrl.js\n * </code></pre>\n *\n * Note that because certain normalization forms include others in their algorithm,\n * their data also depends on the data for the other forms. For example, if you\n * include the \"nfc\" data for a script, you will automatically get the \"nfd\" data\n * for that same script as well because the NFC algorithm does NFD normalization\n * first. Here are the dependencies:<p>\n *\n * <ul>\n * <li>NFD -> no dependencies\n * <li>NFC -> NFD\n * <li>NFKD -> NFD\n * <li>NFKC -> NFKD, NFD, NFC\n * </ul>\n *\n * A special value for the script dependency is \"all\" which will cause the data for\n * all scripts\n * to be loaded for that normalization form. This would be useful if you know that\n * you are going to normalize a lot of multilingual text or cannot predict which scripts\n * will appear in the input. Because the NFKC form depends on all others, you can\n * get all of the data for all forms automatically by depending on \"nfkc/all.js\".\n * Note that the normalization data for practically all script automatically depend\n * on data for the Common script (code \"Zyyy\") which contains all of the characters\n * that are commonly used in many different scripts. Examples of characters in the\n * Common script are the ASCII punctuation characters, or the ASCII Arabic\n * numerals \"0\" through \"9\".<p>\n *\n * By default, none of the data for normalization is automatically\n * included in the preassembled iliball.js file.\n * If you would like to normalize strings, you must assemble\n * your own copy of ilib and explicitly include the normalization data\n * for those scripts as per the instructions above. This normalization method will\n * produce output, even without the normalization data. However, the output will be\n * simply the same thing as its input for all scripts\n * except Korean Hangul and Jamo, which are decomposed and recomposed\n * algorithmically and therefore do not rely on data.<p>\n *\n * If characters are encountered for which there are no normalization data, they\n * will be passed through to the output string unmodified.\n *\n * @param {string} form The normalization form requested\n * @return {ilib.String} a new instance of an ilib.String that has been normalized\n * according to the requested form. The current instance is not modified.\n */\nilib.NormString.prototype.normalize = function (form) {\n\tvar i;\n\n\tif (typeof(form) !== 'string' || this.str.length === 0) {\n\t\treturn new ilib.String(this.str);\n\t}\n\n\tvar nfc = false,\n\t\tnfkd = false;\n\n\tswitch (form) {\n\tdefault:\n\t\tbreak;\n\n\tcase \"nfc\":\n\t\tnfc = true;\n\t\tbreak;\n\n\tcase \"nfkd\":\n\t\tnfkd = true;\n\t\tbreak;\n\n\tcase \"nfkc\":\n\t\tnfkd = true;\n\t\tnfc = true;\n\t\tbreak;\n\t}\n\n\t// decompose\n\tvar decomp = \"\";\n\n\tif (nfkd) {\n\t\tvar ch, it = ilib.String.prototype.charIterator.call(this);\n\t\twhile (it.hasNext()) {\n\t\t\tch = it.next();\n\t\t\tdecomp += ilib.NormString._expand(ch, ilib.data.norm.nfd, ilib.data.norm.nfkd);\n\t\t}\n\t} else {\n\t\tvar ch, it = ilib.String.prototype.charIterator.call(this);\n\t\twhile (it.hasNext()) {\n\t\t\tch = it.next();\n\t\t\tdecomp += ilib.NormString._expand(ch, ilib.data.norm.nfd);\n\t\t}\n\t}\n\n\t// now put the combining marks in a fixed order by\n\t// sorting on the combining class\n\tfunction compareByCCC(left, right) {\n\t\treturn ilib.data.norm.ccc[left] - ilib.data.norm.ccc[right];\n\t}\n\n\tfunction ccc(c) {\n\t\treturn ilib.data.norm.ccc[c] || 0;\n\t}\n\n\tvar dstr = new ilib.String(decomp);\n\tvar it = dstr.charIterator();\n\tvar cpArray = [];\n\n\t// easier to deal with as an array of chars\n\twhile (it.hasNext()) {\n\t\tcpArray.push(it.next());\n\t}\n\n\ti = 0;\n\twhile (i < cpArray.length) {\n\t\tif (typeof(ilib.data.norm.ccc[cpArray[i]]) !== 'undefined' && ccc(cpArray[i]) !== 0) {\n\t\t\t// found a non-starter... rearrange all the non-starters until the next starter\n\t\t\tvar end = i+1;\n\t\t\twhile (end < cpArray.length &&\n\t\t\t\t\ttypeof(ilib.data.norm.ccc[cpArray[end]]) !== 'undefined' &&\n\t\t\t\t\tccc(cpArray[end]) !== 0) {\n\t\t\t\tend++;\n\t\t\t}\n\n\t\t\t// simple sort of the non-starter chars\n\t\t\tif (end - i > 1) {\n\t\t\t\tcpArray = cpArray.slice(0,i).concat(cpArray.slice(i, end).sort(compareByCCC), cpArray.slice(end));\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\n\tif (nfc) {\n\t\ti = 0;\n\t\twhile (i < cpArray.length) {\n\t\t\tif (typeof(ilib.data.norm.ccc[cpArray[i]]) === 'undefined' || ilib.data.norm.ccc[cpArray[i]] === 0) {\n\t\t\t\t// found a starter... find all the non-starters until the next starter. Must include\n\t\t\t\t// the next starter because under some odd circumstances, two starters sometimes recompose\n\t\t\t\t// together to form another character\n\t\t\t\tvar end = i+1;\n\t\t\t\tvar notdone = true;\n\t\t\t\twhile (end < cpArray.length && notdone) {\n\t\t\t\t\tif (typeof(ilib.data.norm.ccc[cpArray[end]]) !== 'undefined' &&\n\t\t\t\t\t\tilib.data.norm.ccc[cpArray[end]] !== 0) {\n\t\t\t\t\t\tif (ccc(cpArray[end-1]) < ccc(cpArray[end])) {\n\t\t\t\t\t\t\t// not blocked\n\t\t\t\t\t\t\tvar testChar = ilib.GlyphString._compose(cpArray[i], cpArray[end]);\n\t\t\t\t\t\t\tif (typeof(testChar) !== 'undefined') {\n\t\t\t\t\t\t\t\tcpArray[i] = testChar;\n\n\t\t\t\t\t\t\t\t// delete the combining char\n\t\t\t\t\t\t\t\tcpArray.splice(end,1);\n\n\t\t\t\t\t\t\t\t// restart the iteration, just in case there is more to recompose with the new char\n\t\t\t\t\t\t\t\tend = i;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tend++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// found the next starter. See if this can be composed with the previous starter\n\t\t\t\t\t\tvar testChar = ilib.GlyphString._compose(cpArray[i], cpArray[end]);\n\t\t\t\t\t\tif (ccc(cpArray[end-1]) === 0 && typeof(testChar) !== 'undefined') {\n\t\t\t\t\t\t\t// not blocked and there is a mapping\n\t\t\t\t\t\t\tcpArray[i] = testChar;\n\n\t\t\t\t\t\t\t// delete the combining char\n\t\t\t\t\t\t\tcpArray.splice(end,1);\n\n\t\t\t\t\t\t\t// restart the iteration, just in case there is more to recompose with the new char\n\t\t\t\t\t\t\tend = i+1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// finished iterating\n\t\t\t\t\t\t\tnotdone = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t}\n\n\treturn new ilib.String(cpArray.length > 0 ? cpArray.join(\"\") : \"\");\n};\n\n/**\n * @override\n * Return an iterator that will step through all of the characters\n * in the string one at a time, taking care to step through decomposed\n * characters and through surrogate pairs in UTF-16 encoding\n * properly. <p>\n *\n * The NormString class will return decomposed Unicode characters\n * as a single unit that a user might see on the screen. If the\n * next character in the iteration is a base character and it is\n * followed by combining characters, the base and all its following\n * combining characters are returned as a single unit.<p>\n *\n * The standard Javascript String's charAt() method only\n * returns information about a particular 16-bit character in the\n * UTF-16 encoding scheme.\n * If the index is pointing to a low- or high-surrogate character,\n * it will return that surrogate character rather\n * than the surrogate pair which represents a character\n * in the supplementary planes.<p>\n *\n * The iterator instance returned has two methods, hasNext() which\n * returns true if the iterator has more characters to iterate through,\n * and next() which returns the next character.<p>\n *\n * @return {Object} an iterator\n * that iterates through all the characters in the string\n */\nilib.NormString.prototype.charIterator = function() {\n\tvar it = ilib.String.prototype.charIterator.call(this);\n\n\t/**\n\t * @constructor\n\t */\n\tfunction _chiterator (istring) {\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tvar ccc = function(c) {\n\t\t\treturn ilib.data.norm.ccc[c] || 0;\n\t\t};\n\n\t\tthis.index = 0;\n\t\tthis.hasNext = function () {\n\t\t\treturn !!this.nextChar || it.hasNext();\n\t\t};\n\t\tthis.next = function () {\n\t\t\tvar ch = this.nextChar || it.next(),\n\t\t\t\tprevCcc = ccc(ch),\n\t\t\t\tnextCcc,\n\t\t\t\tcomposed = ch;\n\n\t\t\tthis.nextChar = undefined;\n\n\t\t\tif (ilib.data.norm.ccc &&\n\t\t\t\t\t(typeof(ilib.data.norm.ccc[ch]) === 'undefined' || ccc(ch) === 0)) {\n\t\t\t\t// found a starter... find all the non-starters until the next starter. Must include\n\t\t\t\t// the next starter because under some odd circumstances, two starters sometimes recompose\n\t\t\t\t// together to form another character\n\t\t\t\tvar notdone = true;\n\t\t\t\twhile (it.hasNext() && notdone) {\n\t\t\t\t\tthis.nextChar = it.next();\n\t\t\t\t\tnextCcc = ccc(this.nextChar);\n\t\t\t\t\tif (typeof(ilib.data.norm.ccc[this.nextChar]) !== 'undefined' && nextCcc !== 0) {\n\t\t\t\t\t\tch += this.nextChar;\n\t\t\t\t\t\tthis.nextChar = undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// found the next starter. See if this can be composed with the previous starter\n\t\t\t\t\t\tvar testChar = ilib.GlyphString._compose(composed, this.nextChar);\n\t\t\t\t\t\tif (prevCcc === 0 && typeof(testChar) !== 'undefined') {\n\t\t\t\t\t\t\t// not blocked and there is a mapping\n\t\t\t\t\t\t\tcomposed = testChar;\n\t\t\t\t\t\t\tch += this.nextChar;\n\t\t\t\t\t\t\tthis.nextChar = undefined;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// finished iterating, leave this.nextChar for the next next() call\n\t\t\t\t\t\t\tnotdone = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tprevCcc = nextCcc;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn ch;\n\t\t};\n\t};\n\treturn new _chiterator(this);\n};\n\n\n/*\n * collate.js - Collation routines\n *\n * Copyright © 2013-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends locale.js ilibglobal.js numprs.js ctype.ispunct.js normstring.js util/math.js\n\n// !data collation\n\n/**\n * @class\n * Represents a buffered source of code points. The input string is first\n * normalized so that combining characters come out in a standardized order.\n * If the \"ignorePunctuation\" flag is turned on, then punctuation\n * characters are skipped.\n *\n * @constructor\n * @private\n * @param {ilib.NormString|string} str a string to get code points from\n * @param {boolean} ignorePunctuation whether or not to ignore punctuation\n * characters\n */\nilib.CodePointSource = function(str, ignorePunctuation) {\n\tthis.chars = [];\n\t// first convert the string to a normalized sequence of characters\n\tvar s = (typeof(str) === \"string\") ? new ilib.NormString(str) : str;\n\tthis.it = s.charIterator();\n\tthis.ignorePunctuation = typeof(ignorePunctuation) === \"boolean\" && ignorePunctuation;\n};\n\n/**\n * Return the first num code points in the source without advancing the\n * source pointer. If there are not enough code points left in the\n * string to satisfy the request, this method will return undefined.\n *\n * @param {number} num the number of characters to peek ahead\n * @return {string|undefined} a string formed out of up to num code points from\n * the start of the string, or undefined if there are not enough character left\n * in the source to complete the request\n */\nilib.CodePointSource.prototype.peek = function(num) {\n\tif (num < 1) {\n\t\treturn undefined;\n\t}\n\tif (this.chars.length < num && this.it.hasNext()) {\n\t\tfor (var i = 0; this.chars.length < 4 && this.it.hasNext(); i++) {\n\t\t\tvar c = this.it.next();\n\t\t\tif (c && !this.ignorePunctuation || !ilib.CType.isPunct(c)) {\n\t\t\t\tthis.chars.push(c);\n\t\t\t}\n\t\t}\n\t}\n\tif (this.chars.length < num) {\n\t\treturn undefined;\n\t}\n\treturn this.chars.slice(0, num).join(\"\");\n};\n/**\n * Advance the source pointer by the given number of code points.\n * @param {number} num number of code points to advance\n */\nilib.CodePointSource.prototype.consume = function(num) {\n\tif (num > 0) {\n\t\tthis.peek(num); // for the iterator to go forward if needed\n\t\tif (num < this.chars.length) {\n\t\t\tthis.chars = this.chars.slice(num);\n\t\t} else {\n\t\t\tthis.chars = [];\n\t\t}\n\t}\n};\n\n\n/**\n * @class\n * An iterator through a sequence of collation elements. This\n * iterator takes a source of code points, converts them into\n * collation elements, and allows the caller to get single\n * elements at a time.\n *\n * @constructor\n * @private\n * @param {ilib.CodePointSource} source source of code points to\n * convert to collation elements\n * @param {Object} map mapping from sequences of code points to\n * collation elements\n * @param {number} keysize size in bits of the collation elements\n */\nilib.ElementIterator = function (source, map, keysize) {\n\tthis.elements = [];\n\tthis.source = source;\n\tthis.map = map;\n\tthis.keysize = keysize;\n};\n\n/**\n * @private\n */\nilib.ElementIterator.prototype._fillBuffer = function () {\n\tvar str = undefined;\n\n\t// peek ahead by up to 4 characters, which may combine\n\t// into 1 or more collation elements\n\tfor (var i = 4; i > 0; i--) {\n\t\tstr = this.source.peek(i);\n\t\tif (str && this.map[str]) {\n\t\t\tthis.elements = this.elements.concat(this.map[str]);\n\t\t\tthis.source.consume(i);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (str) {\n\t\t// no mappings for the first code point, so just use its\n\t\t// Unicode code point as a proxy for its sort order. Shift\n\t\t// it by the key size so that everything unknown sorts\n\t\t// after things that have mappings\n\t\tthis.elements.push(str.charCodeAt(0) << this.keysize);\n\t\tthis.source.consume(1);\n\t} else {\n\t\t// end of the string\n\t\treturn undefined;\n\t}\n};\n\n/**\n * Return true if there are more collation elements left to\n * iterate through.\n * @returns {boolean} true if there are more elements left to\n * iterate through, and false otherwise\n */\nilib.ElementIterator.prototype.hasNext = function () {\n\tif (this.elements.length < 1) {\n\t\tthis._fillBuffer();\n\t}\n\treturn !!this.elements.length;\n};\n\n/**\n * Return the next collation element. If more than one collation\n * element is generated from a sequence of code points\n * (ie. an \"expansion\"), then this class will buffer the\n * other elements and return them on subsequent calls to\n * this method.\n *\n * @returns {number|undefined} the next collation element or\n * undefined for no more collation elements\n */\nilib.ElementIterator.prototype.next = function () {\n\tif (this.elements.length < 1) {\n\t\tthis._fillBuffer();\n\t}\n\tvar ret = this.elements[0];\n\tthis.elements = this.elements.slice(1);\n\treturn ret;\n};\n\n\n/**\n * @class\n * A class that implements a locale-sensitive comparator function\n * for use with sorting function. The comparator function\n * assumes that the strings it is comparing contain Unicode characters\n * encoded in UTF-16.<p>\n *\n * Collations usually depend only on the language, because most collation orders\n * are shared between locales that speak the same language. There are, however, a\n * number of instances where a locale collates differently than other locales\n * that share the same language. There are also a number of instances where a\n * locale collates differently based on the script used. This object can handle\n * these cases automatically if a full locale is specified in the options rather\n * than just a language code.<p>\n *\n * <h2>Options</h2>\n *\n * The options parameter can contain any of the following properties:\n *\n * <ul>\n * <li><i>locale</i> - String|Locale. The locale which the comparator function\n * will collate with. Default: the current iLib locale.\n *\n * <li><i>sensitivity</i> - String. Sensitivity or strength of collator. This is one of\n * \"primary\", \"base\", \"secondary\", \"accent\", \"tertiary\", \"case\", \"quaternary\", or\n * \"variant\". Default: \"primary\"\n *   <ol>\n *   <li>base or primary - Only the primary distinctions between characters are significant.\n *   Another way of saying that is that the collator will be case-, accent-, and\n *   variation-insensitive, and only distinguish between the base characters\n *   <li>case or secondary - Both the primary and secondary distinctions between characters\n *   are significant. That is, the collator will be accent- and variation-insensitive\n *   and will distinguish between base characters and character case.\n *   <li>accent or tertiary - The primary, secondary, and tertiary distinctions between\n *   characters are all significant. That is, the collator will be\n *   variation-insensitive, but accent-, case-, and base-character-sensitive.\n *   <li>variant or quaternary - All distinctions between characters are significant. That is,\n *   the algorithm is base character-, case-, accent-, and variation-sensitive.\n *   </ol>\n *\n * <li><i>upperFirst</i> - boolean. When collating case-sensitively in a script that\n * has the concept of case, put upper-case\n * characters first, otherwise lower-case will come first. Warning: some browsers do\n * not implement this feature or at least do not implement it properly, so if you are\n * using the native collator with this option, you may get different results in different\n * browsers. To guarantee the same results, set useNative to false to use the ilib\n * collator implementation. This of course will be somewhat slower, but more\n * predictable. Default: true\n *\n * <li><i>reverse</i> - boolean. Return the list sorted in reverse order. When the\n * upperFirst option is also set to true, upper-case characters would then come at\n * the end of the list. Default: false.\n *\n * <li><i>scriptOrder</i> - string. When collating strings in multiple scripts,\n * this property specifies what order those scripts should be sorted. The default\n * Unicode Collation Algorithm (UCA) already has a default order for scripts, but\n * this can be tailored via this property. The value of this option is a\n * space-separated list of ISO 15924 scripts codes. If a code is specified in this\n * property, its default data must be included using the JS assembly tool. If the\n * data is not included, the ordering for the script will be ignored. Default:\n * the default order defined by the UCA.\n *\n * <li><i>style</i> - The value of the style parameter is dependent on the locale.\n * For some locales, there are different styles of collating strings depending\n * on what kind of strings are being collated or what the preference of the user\n * is. For example, in German, there is a phonebook order and a dictionary ordering\n * that sort the same array of strings slightly differently.\n * The static method {@link ilib.Collator#getAvailableStyles} will return a list of styles that ilib\n * currently knows about for any given locale. If the value of the style option is\n * not recognized for a locale, it will be ignored. Default style is \"standard\".<p>\n *\n * <li><i>usage</i> - Whether this collator will be used for searching or sorting.\n * Valid values are simply the strings \"sort\" or \"search\". When used for sorting,\n * it is good idea if a collator produces a stable sort. That is, the order of the\n * sorted array of strings should not depend on the order of the strings in the\n * input array. As such, when a collator is supposed to act case insensitively,\n * it nonetheless still distinguishes between case after all other criteria\n * are satisfied so that strings that are distinguished only by case do not sort\n * randomly. For searching, we would like to match two strings that different only\n * by case, so the collator must return equals in that situation instead of\n * further distinguishing by case. Default is \"sort\".\n *\n * <li><i>numeric</i> - Treat the left and right strings as if they started with\n * numbers and sort them numerically rather than lexically.\n *\n * <li><i>ignorePunctuation</i> - Skip punctuation characters when comparing the\n * strings.\n *\n * <li>onLoad - a callback function to call when the collator object is fully\n * loaded. When the onLoad option is given, the collator object will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the\n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n *\n * <li>sync - tell whether to load any missing locale data synchronously or\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the\n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object\n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n *\n * <li><i>useNative</i> - when this option is true, use the native Intl object\n * provided by the Javascript engine, if it exists, to implement this class. If\n * it doesn't exist, or if this parameter is false, then this class uses a pure\n * Javascript implementation, which is slower and uses a lot more memory, but\n * works everywhere that ilib works. Default is \"true\".\n * </ul>\n *\n * <h2>Operation</h2>\n *\n * The Collator constructor returns a collator object tailored with the above\n * options. The object contains an internal compare() method which compares two\n * strings according to those options. This can be used directly to compare\n * two strings, but is not useful for passing to the javascript sort function\n * because then it will not have its collation data available. Instead, use the\n * getComparator() method to retrieve a function that is bound to the collator\n * object. (You could also bind it yourself using ilib.bind()). The bound function\n * can be used with the standard Javascript array sorting algorithm, or as a\n * comparator with your own sorting algorithm.<p>\n *\n * Example using the standard Javascript array sorting call with the bound\n * function:<p>\n *\n * <code>\n * <pre>\n * var arr = [\"ö\", \"oe\", \"ü\", \"o\", \"a\", \"ae\", \"u\", \"ß\", \"ä\"];\n * var collator = ilib.Collator({locale: 'de-DE', style: \"dictionary\"});\n * arr.sort(collator.getComparator());\n * console.log(JSON.stringify(arr));\n * </pre>\n * </code>\n * <p>\n *\n * Would give the output:<p>\n *\n * <code>\n * <pre>\n * [\"a\", \"ae\", \"ä\", \"o\", \"oe\", \"ö\", \"ß\", \"u\", \"ü\"]\n * </pre>\n * </code>\n *\n * When sorting an array of Javascript objects according to one of the\n * string properties of the objects, wrap the collator's compare function\n * in your own comparator function that knows the structure of the objects\n * being sorted:<p>\n *\n * <code>\n * <pre>\n * var collator = ilib.Collator({locale: 'de-DE'});\n * var myComparator = function (collator) {\n *   var comparator = collator.getComparator();\n *   // left and right are your own objects\n *   return function (left, right) {\n *   \treturn comparator(left.x.y.textProperty, right.x.y.textProperty);\n *   };\n * };\n * arr.sort(myComparator(collator));\n * </pre>\n * </code>\n * <p>\n *\n * <h2>Sort Keys</h2>\n *\n * The collator class also has a method to retrieve the sort key for a\n * string. The sort key is an array of values that represent how each\n * character in the string should be collated according to the characteristics\n * of the collation algorithm and the given options. Thus, sort keys can be\n * compared directly value-for-value with other sort keys that were generated\n * by the same collator, and the resulting ordering is guaranteed to be the\n * same as if the original strings were compared by the collator.\n * Sort keys generated by different collators are not guaranteed to give\n * any reasonable results when compared together unless the two collators\n * were constructed with\n * exactly the same options and therefore end up representing the exact same\n * collation sequence.<p>\n *\n * A good rule of thumb is that you would use a sort key if you had 10 or more\n * items to sort or if your array might be resorted arbitrarily. For example, if your\n * user interface was displaying a table with 100 rows in it, and each row had\n * 4 sortable text columns which could be sorted in acending or descending order,\n * the recommended practice would be to generate a sort key for each of the 4\n * sortable fields in each row and store that in the Javascript representation of the\n * table data. Then, when the user clicks on a column header to resort the\n * table according to that column, the resorting would be relatively quick\n * because it would only be comparing arrays of values, and not recalculating\n * the collation values for each character in each string for every comparison.<p>\n *\n * For tables that are large, it is usually a better idea to do the sorting\n * on the server side, especially if the table is the result of a database\n * query. In this case, the table is usually a view of the cursor of a large\n * results set, and only a few entries are sent to the front end at a time.\n * In order to sort the set efficiently, it should be done on the database\n * level instead.\n *\n * <h2>Data</h2>\n *\n * Doing correct collation entails a huge amount of mapping data, much of which is\n * not necessary when collating in one language with one script, which is the most\n * common case. Thus, ilib implements a number of ways to include the data you\n * need or leave out the data you don't need using the JS assembly tool:\n *\n * <ol>\n * <li>Full multilingual data - if you are sorting multilingual data and need to collate\n * text written in multiple scripts, you can use the directive \"!data collation/ducet\" to\n * load in the full collation data.  This allows the collator to perform the entire\n * Unicode Collation Algorithm (UCA) based on the Default Unicode Collation Element\n * Table (DUCET). The data is very large, on the order of multiple megabytes, but\n * sometimes it is necessary.\n * <li>A few scripts - if you are sorting text written in only a few scripts, you may\n * want to include only the data for those scripts. Each ISO 15924 script code has its\n * own data available in a separate file, so you can use the data directive to include\n * only the data for the scripts you need. For example, use\n * \"!data collation/Latn\" to retrieve the collation information for the Latin script.\n * Because the \"ducet\" table mentioned in the previous point is a superset of the\n * tables for all other scripts, you do not need to include explicitly the data for\n * any particular script when using \"ducet\". That is, you either include \"ducet\" or\n * you include a specific list of scripts.\n * <li>Only one script - if you are sorting text written only in one script, you can\n * either include the data directly as in the previous point, or you can rely on the\n * locale to include the correct data for you. In this case, you can use the directive\n * \"!data collate\" to load in the locale's collation data for its most common script.\n * </ol>\n *\n * With any of the above ways of including the data, the collator will only perform the\n * correct language-sensitive sorting for the given locale. All other scripts will be\n * sorted in the default manner according to the UCA. For example, if you include the\n * \"ducet\" data and pass in \"de-DE\" (German for Germany) as the locale spec, then\n * only the Latin script (the default script for German) will be sorted according to\n * German rules. All other scripts in the DUCET, such as Japanese or Arabic, will use\n * the default UCA collation rules.<p>\n *\n * If this collator encounters a character for which it has no collation data, it will\n * sort those characters by pure Unicode value after all characters for which it does have\n * collation data. For example, if you only loaded in the German collation data (ie. the\n * data for the Latin script tailored to German) to sort a list of person names, but that\n * list happens to include the names of a few Japanese people written in Japanese\n * characters, the Japanese names will sort at the end of the list after all German names,\n * and will sort according to the Unicode values of the characters.\n *\n * @constructor\n * @param {Object} options options governing how the resulting comparator\n * function will operate\n */\nilib.Collator = function(options) {\n\tvar sync = true,\n\t\tloadParams = undefined,\n\t\tuseNative = true;\n\n\t// defaults\n\t/**\n\t * @private\n\t * @type {ilib.Locale}\n\t */\n\tthis.locale = new ilib.Locale(ilib.getLocale());\n\n\t/** @private */\n\tthis.caseFirst = \"upper\";\n\t/** @private */\n\tthis.sensitivity = \"variant\";\n\t/** @private */\n\tthis.level = 4;\n\t/** @private */\n\tthis.usage = \"sort\";\n\t/** @private */\n\tthis.reverse = false;\n\t/** @private */\n\tthis.numeric = false;\n\t/** @private */\n\tthis.style = \"standard\";\n\t/** @private */\n\tthis.ignorePunctuation = false;\n\n\tif (options) {\n\t\tif (options.locale) {\n\t\t\tthis.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;\n\t\t}\n\t\tif (options.sensitivity) {\n\t\t\tswitch (options.sensitivity) {\n\t\t\t\tcase 'primary':\n\t\t\t\tcase 'base':\n\t\t\t\t\tthis.sensitivity = \"base\";\n\t\t\t\t\tthis.level = 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'secondary':\n\t\t\t\tcase 'case':\n\t\t\t\t\tthis.sensitivity = \"case\";\n\t\t\t\t\tthis.level = 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'tertiary':\n\t\t\t\tcase 'accent':\n\t\t\t\t\tthis.sensitivity = \"accent\";\n\t\t\t\t\tthis.level = 3;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'quaternary':\n\t\t\t\tcase 'variant':\n\t\t\t\t\tthis.sensitivity = \"variant\";\n\t\t\t\t\tthis.level = 4;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (typeof(options.upperFirst) !== 'undefined') {\n\t\t\tthis.caseFirst = options.upperFirst ? \"upper\" : \"lower\";\n\t\t}\n\n\t\tif (typeof(options.ignorePunctuation) !== 'undefined') {\n\t\t\tthis.ignorePunctuation = options.ignorePunctuation;\n\t\t}\n\t\tif (typeof(options.sync) !== 'undefined') {\n\t\t\tsync = (options.sync == true);\n\t\t}\n\n\t\tloadParams = options.loadParams;\n\t\tif (typeof(options.useNative) !== 'undefined') {\n\t\t\tuseNative = options.useNative;\n\t\t}\n\n\t\tif (options.usage === \"sort\" || options.usage === \"search\") {\n\t\t\tthis.usage = options.usage;\n\t\t}\n\n\t\tif (typeof(options.reverse) === 'boolean') {\n\t\t\tthis.reverse = options.reverse;\n\t\t}\n\n\t\tif (typeof(options.numeric) === 'boolean') {\n\t\t\tthis.numeric = options.numeric;\n\t\t}\n\n\t\tif (typeof(options.style) === 'string') {\n\t\t\tthis.style = options.style;\n\t\t}\n\t}\n\n\tif (this.usage === \"sort\") {\n\t\t// produces a stable sort\n\t\tthis.level = 4;\n\t}\n\n\tif (useNative && typeof(Intl) !== 'undefined' && Intl) {\n\t\t// this engine is modern and supports the new Intl object!\n\t\t//console.log(\"implemented natively\");\n\t\t/**\n\t\t * @private\n\t\t * @type {{compare:function(string,string)}}\n\t\t */\n\t\tthis.collator = new Intl.Collator(this.locale.getSpec(), this);\n\n\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\toptions.onLoad(this);\n\t\t}\n\t} else {\n\t\t//console.log(\"implemented in pure JS\");\n\t\tif (!ilib.Collator.cache) {\n\t\t\tilib.Collator.cache = {};\n\t\t}\n\n\t\t// else implement in pure Javascript\n\t\tilib.loadData({\n\t\t\tobject: ilib.Collator,\n\t\t\tlocale: this.locale,\n\t\t\tname: \"collation.json\",\n\t\t\treplace: true,\n\t\t\tsync: sync,\n\t\t\tloadParams: loadParams,\n\t\t\tcallback: ilib.bind(this, function (collation) {\n\t\t\t\tif (!collation) {\n\t\t\t\t\tcollation = ilib.data.collation;\n\t\t\t\t\tvar spec = this.locale.getSpec().replace(/-/g, '_');\n\t\t\t\t\tilib.Collator.cache[spec] = collation;\n\t\t\t\t}\n\t\t\t\tthis._init(collation);\n\t\t\t\tnew ilib.LocaleInfo(this.locale, {\n\t\t\t\t\tsync: sync,\n\t\t\t\t\tloadParams: loadParams,\n\t\t\t\t\tonLoad: ilib.bind(this, function(li) {\n\t\t\t\t\t\tthis.li = li;\n\t\t\t\t\t\tif (this.ignorePunctuation) {\n\t\t\t    \t\t\tilib.CType.isPunct._init(sync, loadParams, ilib.bind(this, function() {\n\t\t\t\t\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\t\t\t\t\t\toptions.onLoad(this);\n\t\t\t\t\t\t\t\t}\n\t\t\t    \t\t\t}));\n\t\t    \t\t\t} else {\n\t\t\t\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\t\t\t\t\toptions.onLoad(this);\n\t\t\t\t\t\t\t}\n\t\t    \t\t\t}\n\t\t    \t\t})\n\t\t\t\t});\n\t\t\t})\n\t\t});\n\t}\n};\n\nilib.Collator.prototype = {\n\t/**\n\t * @private\n\t * Bit pack an array of values into a single number\n\t * @param {number|null|Array.<number>} arr array of values to bit pack\n\t */\n\t_pack: function (arr) {\n\t\tvar value = 0;\n\t\tif (arr) {\n\t\t\tif (typeof(arr) === 'number') {\n\t\t\t\tarr = [ arr ];\n\t\t\t}\n\t\t\tfor (var i = 0; i < this.level; i++) {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tvalue <<= this.collation.bits[i];\n\t\t\t\t}\n\t\t\t\tif (i === 2 && this.caseFirst === \"lower\") {\n\t\t\t\t\t// sort the lower case first instead of upper\n\t\t\t\t\tvalue = value | (1 - (typeof(arr[i]) !== \"undefined\" ? arr[i] : 0));\n\t\t\t\t} else {\n\t\t\t\t\tvalue = value | arr[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t},\n\n\t/**\n\t * @private\n\t * Return the rule packed into an array of collation elements.\n\t * @param {Array.<number|null|Array.<number>>} rule\n\t * @return {Array.<number>} a bit-packed array of numbers\n\t */\n\t_packRule: function(rule) {\n\t\tif (rule[0] instanceof Array) {\n\t\t\tvar ret = [];\n\t\t\tfor (var i = 0; i < rule.length; i++) {\n\t\t\t\tret.push(this._pack(rule[i]));\n\t\t\t}\n\t\t\treturn ret;\n\t\t} else {\n\t\t\treturn [ this._pack(rule) ];\n\t\t}\n\t},\n\n\t/**\n     * @private\n     */\n    _init: function(rules) {\n    \t/**\n    \t * @private\n    \t * @type {{scripts:Array.<string>,bits:Array.<number>,maxes:Array.<number>,bases:Array.<number>,map:Object.<string,Array.<number|null|Array.<number>>>}}\n    \t */\n    \tthis.collation = rules[this.style];\n    \tthis.map = {};\n    \tthis.keysize = 0;\n    \tfor (var i = 0; i < this.level; i++) {\n    \t\tthis.keysize += this.collation.bits[i];\n    \t}\n    \tvar remainder = ilib.mod(this.keysize, 4);\n    \tthis.keysize += (remainder > 0) ? (4 - remainder) : 0; // round to the nearest 4 to find how many bits to use in hex\n\n    \tfor (var r in this.collation.map) {\n    \t\tif (r) {\n    \t\t\tthis.map[r] = this._packRule(this.collation.map[r]);\n    \t\t}\n    \t}\n    },\n\n    /**\n     * @private\n     */\n    _basicCompare: function(left, right) {\n\t\tif (this.numeric) {\n\t\t\tvar lvalue = new ilib.Number(left, {locale: this.locale});\n\t\t\tvar rvalue = new ilib.Number(right, {locale: this.locale});\n\t\t\tif (isNaN(lvalue.valueOf())) {\n\t\t\t\tif (isNaN(rvalue.valueOf())) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\treturn 1;\n\t\t\t} else if (isNaN(rvalue.valueOf())) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\treturn lvalue.valueOf() - rvalue.valueOf();\n\t\t} else {\n\t\t\tvar l = (left instanceof ilib.NormString) ? left : new ilib.NormString(left),\n\t\t\t\tr = (right instanceof ilib.NormString) ? right : new ilib.NormString(right),\n\t\t\t\tlelements,\n\t\t\t\trelements;\n\n\t\t\t// if the reverse sort is on, switch the char sources so that the result comes out swapped\n\t\t\tlelements = new ilib.ElementIterator(new ilib.CodePointSource(l, this.ignorePunctuation), this.map, this.keysize);\n\t\t\trelements = new ilib.ElementIterator(new ilib.CodePointSource(r, this.ignorePunctuation), this.map, this.keysize);\n\n\t\t\twhile (lelements.hasNext() && relements.hasNext()) {\n\t\t\t\tvar diff = lelements.next() - relements.next();\n\t\t\t\tif (diff) {\n\t\t\t\t\treturn diff;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!lelements.hasNext() && !relements.hasNext()) {\n\t\t\t\treturn 0;\n\t\t\t} else if (lelements.hasNext()) {\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n    },\n\n\t/**\n\t * Compare two strings together according to the rules of this\n\t * collator instance. Do not use this function directly with\n\t * Array.sort, as it will not have its collation data available\n\t * and therefore will not function properly. Use the function\n\t * returned by getComparator() instead.\n\t *\n\t * @param {string} left the left string to compare\n\t * @param {string} right the right string to compare\n\t * @return {number} a negative number if left comes before right, a\n\t * positive number if right comes before left, and zero if left and\n\t * right are equivalent according to this collator\n\t */\n\tcompare: function (left, right) {\n\t\t// last resort: use the \"C\" locale\n\t\tif (this.collator) {\n\t\t\t// implemented by the core engine\n\t\t\treturn this.collator.compare(left, right);\n\t\t}\n\n\t\tvar ret = this._basicCompare(left, right);\n\t\treturn this.reverse ? -ret : ret;\n\t},\n\n\t/**\n\t * Return a comparator function that can compare two strings together\n\t * according to the rules of this collator instance. The function\n\t * returns a negative number if the left\n\t * string comes before right, a positive number if the right string comes\n\t * before the left, and zero if left and right are equivalent. If the\n\t * reverse property was given as true to the collator constructor, this\n\t * function will\n\t * switch the sign of those values to cause sorting to happen in the\n\t * reverse order.\n\t *\n\t * @return {function(...)|undefined} a comparator function that\n\t * can compare two strings together according to the rules of this\n\t * collator instance\n\t */\n\tgetComparator: function() {\n\t\t// bind the function to this instance so that we have the collation\n\t\t// rules available to do the work\n\t\tif (this.collator) {\n\t\t\t// implemented by the core engine\n\t\t\treturn this.collator.compare;\n\t\t}\n\n\t\treturn /** @type function(string,string):number */ ilib.bind(this, this.compare);\n\t},\n\n\t/**\n\t * Return a sort key string for the given string. The sort key\n\t * string is a list of values that represent each character\n\t * in the original string. The sort key\n\t * values for any particular character consists of 3 numbers that\n\t * encode the primary, secondary, and tertiary characteristics\n\t * of that character. The values of each characteristic are\n\t * modified according to the strength of this collator instance\n\t * to give the correct collation order. The idea is that this\n\t * sort key string is directly comparable byte-for-byte to\n\t * other sort key strings generated by this collator without\n\t * any further knowledge of the collation rules for the locale.\n\t * More formally, if a < b according to the rules of this collation,\n\t * then it is guaranteed that sortkey(a) < sortkey(b) when compared\n\t * byte-for-byte. The sort key string can therefore be used\n\t * without the collator to sort an array of strings efficiently\n\t * because the work of determining the applicability of various\n\t * collation rules is done once up-front when generating\n\t * the sort key.<p>\n\t *\n\t * The sort key string can be treated as a regular, albeit somewhat\n\t * odd-looking, string. That is, it can be pass to regular\n\t * Javascript functions without problems.\n\t *\n\t * @param {string} str the original string to generate the sort key for\n\t * @return {string} a sort key string for the given string\n\t */\n\tsortKey: function (str) {\n\t\tif (!str) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tif (this.collator) {\n\t\t\t// native, no sort keys available\n\t\t\treturn str;\n\t\t}\n\n\t\tfunction pad(str, limit) {\n\t\t\treturn \"0000000000000000\".substring(0, limit - str.length) + str;\n\t\t}\n\n\t\tif (this.numeric) {\n\t\t\tvar v = new ilib.Number(str, {locale: this.locale});\n\t\t\tvar s = isNaN(v.valueOf()) ? \"\" : v.valueOf().toString(16);\n\t\t\treturn pad(s, 16);\n\t\t} else {\n\t\t\tvar n = (typeof(str) === \"string\") ? new ilib.NormString(str) : str,\n\t\t\t\tret = \"\",\n\t\t\t\tlelements = new ilib.ElementIterator(new ilib.CodePointSource(n, this.ignorePunctuation), this.map, this.keysize),\n\t\t\t\telement;\n\n\t\t\twhile (lelements.hasNext()) {\n\t\t\t\telement = lelements.next();\n\t\t\t\tif (this.reverse) {\n\t\t\t\t\telement = (1 << this.keysize) - element;\n\t\t\t\t}\n\t\t\t\tret += pad(element.toString(16), this.keysize/4);\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n};\n\n/**\n * Retrieve the list of collation style names that are available for the\n * given locale. This list varies depending on the locale, and depending\n * on whether or not the data for that locale was assembled into this copy\n * of ilib.\n *\n * @param {ilib.Locale|string=} locale The locale for which the available\n * styles are being sought\n * @return Array.<string> an array of style names that are available for\n * the given locale\n */\nilib.Collator.getAvailableStyles = function (locale) {\n\treturn [ \"standard\" ];\n};\n\n/**\n * Retrieve the list of ISO 15924 script codes that are available in this\n * copy of ilib. This list varies depending on whether or not the data for\n * various scripts was assembled into this copy of ilib. If the \"ducet\"\n * data is assembled into this copy of ilib, this method will report the\n * entire list of scripts as being available. If a collator instance is\n * instantiated with a script code that is not on the list returned by this\n * function, it will be ignored and text in that script will be sorted by\n * numeric Unicode values of the characters.\n *\n * @return Array.<string> an array of ISO 15924 script codes that are\n * available\n */\nilib.Collator.getAvailableScripts = function () {\n\treturn [ \"Latn\" ];\n};\n\n/*\n * all.js - include file for normalization data for a particular script\n *\n * Copyright © 2012, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* WARNING: THIS IS A FILE GENERATED BY gennorm.js. DO NOT EDIT BY HAND. */\n// !depends util/utils.js\n// !data norm nfd/all\nilib.data.norm.nfd = ilib.merge(ilib.data.norm.nfd || {}, ilib.data.nfd_all);\nilib.data.nfd_all = undefined;\n/*\n * all.js - include file for normalization data for a particular script\n *\n * Copyright © 2012, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* WARNING: THIS IS A FILE GENERATED BY gennorm.js. DO NOT EDIT BY HAND. */\n// !depends util/utils.js\n// !depends nfd/all.js\n// !data norm\n\n/*\n * all.js - include file for normalization data for a particular script\n *\n * Copyright © 2012, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* WARNING: THIS IS A FILE GENERATED BY gennorm.js. DO NOT EDIT BY HAND. */\n// !depends util/utils.js\n// !depends nfd/all.js\n// !data norm nfkd/all\nilib.data.norm.nfkd = ilib.merge(ilib.data.norm.nfkd || {}, ilib.data.nfkd_all);\nilib.data.nfkd_all = undefined;\n/*\n * all.js - include file for normalization data for a particular script\n *\n * Copyright © 2012, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* WARNING: THIS IS A FILE GENERATED BY gennorm.js. DO NOT EDIT BY HAND. */\n// !depends util/utils.js\n// !depends nfd/all.js nfc/all.js nfkd/all.js\n// !data norm\n\n/*\n * localematch.js - Locale matcher definition\n *\n * Copyright © 2013-2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends ilibglobal.js locale.js\n// !data likelylocales\n\n/**\n * @class\n * Create a new locale matcher instance. This is used\n * to see which locales can be matched with each other in\n * various ways.<p>\n *\n * The options object may contain any of the following properties:\n *\n * <ul>\n * <li><i>locale</i> - the locale to match\n *\n * <li><i>onLoad</i> - a callback function to call when the locale matcher object is fully\n * loaded. When the onLoad option is given, the locale matcher object will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the\n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n *\n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the\n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object\n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n *\n * Depends directive: !depends localematch.js\n *\n * @constructor\n * @param {Object} options parameters to initialize this matcher\n */\nilib.LocaleMatcher = function(options) {\n\tvar sync = true,\n\t    loadParams = undefined;\n\n\tthis.locale = new ilib.Locale();\n\n\tif (options) {\n\t\tif (typeof(options.locale) !== 'undefined') {\n\t\t\tthis.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;\n\t\t}\n\n\t\tif (typeof(options.sync) !== 'undefined') {\n\t\t\tsync = (options.sync == true);\n\t\t}\n\n\t\tif (typeof(options.loadParams) !== 'undefined') {\n\t\t\tloadParams = options.loadParams;\n\t\t}\n\t}\n\n\tif (!ilib.LocaleMatcher.cache) {\n\t\tilib.LocaleMatcher.cache = {};\n\t}\n\n\tif (typeof(ilib.data.likelylocales) === 'undefined') {\n\t\tilib.loadData({\n\t\t\tobject: ilib.LocaleMatcher,\n\t\t\tlocale: \"-\",\n\t\t\tname: \"likelylocales.json\",\n\t\t\tsync: sync,\n\t\t\tloadParams: loadParams,\n\t\t\tcallback: ilib.bind(this, function (info) {\n\t\t\t\tif (!info) {\n\t\t\t\t\tinfo = {};\n\t\t\t\t\tvar spec = this.locale.getSpec().replace(/-/g, \"_\");\n\t\t\t\t\tilib.LocaleMatcher.cache[spec] = info;\n\t\t\t\t}\n\t\t\t\t/** @type {Object.<string,string>} */\n\t\t\t\tthis.info = info;\n\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\t\toptions.onLoad(this);\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t} else {\n\t\tthis.info = /** @type {Object.<string,string>} */ ilib.data.likelylocales;\n\t}\n};\n\n\nilib.LocaleMatcher.prototype = {\n\t/**\n\t * Return the locale used to construct this instance.\n\t * @return {ilib.Locale|undefined} the locale for this matcher\n\t */\n\tgetLocale: function() {\n\t\treturn this.locale;\n\t},\n\n\t/**\n\t * Return an ilib.Locale instance that is fully specified based on partial information\n\t * given to the constructor of this locale matcher instance. For example, if the locale\n\t * spec given to this locale matcher instance is simply \"ru\" (for the Russian language),\n\t * then it will fill in the missing region and script tags and return a locale with\n\t * the specifier \"ru-Cyrl-RU\". (ie. Russian language, Cyrillic, Russian Federation).\n\t * Any one or two of the language, script, or region parts may be left unspecified,\n\t * and the other one or two parts will be filled in automatically. If this\n\t * class has no information about the given locale, then the locale of this\n\t * locale matcher instance is returned unchanged.\n\t *\n\t * @returns {ilib.Locale} the most likely completion of the partial locale given\n\t * to the constructor of this locale matcher instance\n\t */\n\tgetLikelyLocale: function () {\n\t\tif (typeof(this.info[this.locale.getSpec()]) === 'undefined') {\n\t\t\treturn this.locale;\n\t\t}\n\n\t\treturn new ilib.Locale(this.info[this.locale.getSpec()]);\n\t}\n};\n\n\n/*\n * casemapper.js - define upper- and lower-case mapper\n *\n * Copyright © 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// !depends locale.js util/utils.js\n\n/**\n * @class\n * Create a new string mapper instance that maps strings to upper or\n * lower case. This mapping will work for any string as characters\n * that have no case will be returned unchanged.<p>\n *\n * The options may contain any of the following properties:\n *\n * <ul>\n * <li><i>locale</i> - locale to use when loading the mapper. Some maps are\n * locale-dependent, and this locale selects the right one. Default if this is\n * not specified is the current locale.\n *\n * <li><i>direction</i> - \"toupper\" for upper-casing, or \"tolower\" for lower-casing.\n * Default if not specified is \"toupper\".\n * </ul>\n *\n * Depends directive: !depends casemapper.js\n *\n * @constructor\n * @param {Object=} options options to initialize this mapper\n */\nilib.CaseMapper = function (options) {\n\tthis.up = true;\n\tthis.locale = new ilib.Locale();\n\n\tif (options) {\n\t\tif (typeof(options.locale) !== 'undefined') {\n\t\t\tthis.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;\n\t\t}\n\n\t\tthis.up = (!options.direction || options.direction === \"toupper\");\n\t}\n\n\tthis.mapData = this.up ? {\n\t\t\"ß\": \"SS\",\t\t// German\n\t\t'ΐ': 'Ι',\t\t// Greek\n\t\t'ά': 'Α',\n\t\t'έ': 'Ε',\n\t\t'ή': 'Η',\n\t\t'ί': 'Ι',\n\t\t'ΰ': 'Υ',\n\t\t'ϊ': 'Ι',\n\t\t'ϋ': 'Υ',\n\t\t'ό': 'Ο',\n\t\t'ύ': 'Υ',\n\t\t'ώ': 'Ω',\n\t\t'Ӏ': 'Ӏ',\t\t// Russian and slavic languages\n\t\t'ӏ': 'Ӏ'\n\t} : {\n\t\t'Ӏ': 'Ӏ'\t\t// Russian and slavic languages\n\t};\n\n\tswitch (this.locale.getLanguage()) {\n\t\tcase \"az\":\n\t\tcase \"tr\":\n\t\tcase \"crh\":\n\t\tcase \"kk\":\n\t\tcase \"krc\":\n\t\tcase \"tt\":\n\t\t\tvar lower = \"iı\";\n\t\t\tvar upper = \"İI\";\n\t\t\tthis._setUpMap(lower, upper);\n\t\t\tbreak;\n\t\tcase \"fr\":\n\t\t\tif (this.up && this.locale.getRegion() !== \"CA\") {\n\t\t\t\tthis._setUpMap(\"àáâãäçèéêëìíîïñòóôöùúûü\", \"AAAAACEEEEIIIINOOOOUUUU\");\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\tif (ilib._getBrowser() === \"ie\") {\n\t\t// IE is missing these mappings for some reason\n\t\tif (this.up) {\n\t\t\tthis.mapData['ς'] = 'Σ';\n\t\t}\n\t\tthis._setUpMap(\"ⲁⲃⲅⲇⲉⲋⲍⲏⲑⲓⲕⲗⲙⲛⲝⲟⲡⲣⲥⲧⲩⲫⲭⲯⲱⳁⳉⳋ\", \"ⲀⲂⲄⲆⲈⲊⲌⲎⲐⲒⲔⲖⲘⲚⲜⲞⲠⲢⲤⲦⲨⲪⲬⲮⲰⳀⳈⳊ\"); // Coptic\n\t\t// Georgian Nuskhuri <-> Asomtavruli\n\t\tthis._setUpMap(\"ⴀⴁⴂⴃⴄⴅⴆⴇⴈⴉⴊⴋⴌⴍⴎⴏⴐⴑⴒⴓⴔⴕⴖⴗⴘⴙⴚⴛⴜⴝⴞⴟⴠⴡⴢⴣⴤⴥ\", \"ႠႡႢႣႤႥႦႧႨႩႪႫႬႭႮႯႰႱႲႳႴႵႶႷႸႹႺႻႼႽႾႿჀჁჂჃჄჅ\");\n\t}\n};\n\nilib.CaseMapper.prototype = {\n\t/**\n\t * @private\n\t */\n\t_charMapper: function(string) {\n\t\tif (!string) {\n\t\t\treturn string;\n\t\t}\n\t\tvar input = (typeof(string) === 'string') ? new ilib.String(string) : string.toString();\n\t\tvar ret = \"\";\n\t\tvar it = input.charIterator();\n\t\tvar c;\n\n\t\twhile (it.hasNext()) {\n\t\t\tc = it.next();\n\t\t\tif (!this.up && c === 'Σ') {\n\t\t\t\tif (it.hasNext()) {\n\t\t\t\t\tc = it.next();\n\t\t\t\t\tvar code = c.charCodeAt(0);\n\t\t\t\t\t// if the next char is not a greek letter, this is the end of the word so use the\n\t\t\t\t\t// final form of sigma. Otherwise, use the mid-word form.\n\t\t\t\t\tret += ((code < 0x0388 && code !== 0x0386) || code > 0x03CE) ? 'ς' : 'σ';\n\t\t\t\t\tret += c.toLowerCase();\n\t\t\t\t} else {\n\t\t\t\t\t// no next char means this is the end of the word, so use the final form of sigma\n\t\t\t\t\tret += 'ς';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this.mapData[c]) {\n\t\t\t\t\tret += this.mapData[c];\n\t\t\t\t} else {\n\t\t\t\t\tret += this.up ? c.toUpperCase() : c.toLowerCase();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\t/** @private */\n\t_setUpMap: function(lower, upper) {\n\t\tvar from, to;\n\t\tif (this.up) {\n\t\t\tfrom = lower;\n\t\t\tto = upper;\n\t\t} else {\n\t\t\tfrom = upper;\n\t\t\tto = lower;\n\t\t}\n\t\tfor (var i = 0; i < upper.length; i++) {\n\t\t\tthis.mapData[from[i]] = to[i];\n\t\t}\n\t},\n\n\t/**\n\t * Return the locale that this mapper was constructed with.\n\t * @returns {ilib.Locale} the locale that this mapper was constructed with\n\t */\n\tgetLocale: function () {\n\t\treturn this.locale;\n\t},\n\n\t/**\n\t * Map a string to lower case in a locale-sensitive manner.\n\t *\n\t * @param {string|undefined} string\n\t * @return {string|undefined}\n\t */\n\tmap: function (string) {\n\t\treturn this._charMapper(string);\n\t}\n};\n/*\n * numplan.js - Represent a phone numbering plan.\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n!depends\nilibglobal.js\nlocale.js\nlocaleinfo.js\n*/\n\n// !data numplan\n\n/**\n * @class\n * Create a numbering plan information instance for a particular country's plan.<p>\n *\n * The options may contain any of the following properties:\n *\n * <ul>\n * <li><i>locale</i> - locale for which the numbering plan is sought. This locale\n * will be mapped to the actual numbering plan, which may be shared amongst a\n * number of countries.\n *\n * <li>onLoad - a callback function to call when the date format object is fully\n * loaded. When the onLoad option is given, the DateFmt object will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the\n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n *\n * <li>sync - tell whether to load any missing locale data synchronously or\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the\n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object\n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n *\n * Depends directive: !depends phone/numplan.js\n *\n * @constructor\n * @package\n * @param {Object} options options governing the way this plan is loaded\n */\nilib.NumPlan = function (options) {\n\tvar sync = true,\n\t    loadParams = {};\n\n\tthis.locale = new ilib.Locale();\n\n\tif (options) {\n\t\tif (options.locale) {\n\t\t\tthis.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;\n\t\t}\n\n\t\tif (typeof(options.sync) !== 'undefined') {\n\t\t\tsync = (options.sync == true);\n\t\t}\n\n\t\tif (options.loadParams) {\n\t\t\tloadParams = options.loadParams;\n\t\t}\n\t}\n\n\tilib.loadData({\n\t\tname: \"numplan.json\",\n\t\tobject: ilib.NumPlan,\n\t\tlocale: this.locale,\n\t\tsync: sync,\n\t\tloadParams: loadParams,\n\t\tcallback: ilib.bind(this, function (npdata) {\n\t\t\tif (!npdata) {\n\t\t\t\tnpdata = {\n\t\t\t\t\t\"region\": \"XX\",\n\t\t\t\t\t\"skipTrunk\": false,\n\t\t\t\t\t\"trunkCode\": \"0\",\n\t\t\t\t\t\"iddCode\": \"00\",\n\t\t\t\t\t\"dialingPlan\": \"closed\",\n\t\t\t\t\t\"commonFormatChars\": \" ()-./\",\n\t\t\t\t\t\"fieldLengths\": {\n\t\t\t\t\t\t\"areaCode\": 0,\n\t\t\t\t\t\t\"cic\": 0,\n\t\t\t\t\t\t\"mobilePrefix\": 0,\n\t\t\t\t\t\t\"serviceCode\": 0\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @type {{\n\t\t\t *   region:string,\n\t\t\t *   skipTrunk:boolean,\n\t\t\t *   trunkCode:string,\n\t\t\t *   iddCode:string,\n\t\t\t *   dialingPlan:string,\n\t\t\t *   commonFormatChars:string,\n\t\t\t *   fieldLengths:Object.<string,number>,\n\t\t\t *   contextFree:boolean,\n\t\t\t *   findExtensions:boolean,\n\t\t\t *   trunkRequired:boolean,\n\t\t\t *   extendedAreaCodes:boolean\n\t\t\t * }}\n\t\t\t */\n\t\t\tthis.npdata = npdata;\n\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\toptions.onLoad(this);\n\t\t\t}\n\t\t})\n\t});\n};\n\nilib.NumPlan.prototype = {\n\t/**\n\t * Return the name of this plan. This may be different than the\n\t * name of the region because sometimes multiple countries share\n\t * the same plan.\n\t * @return {string} the name of the plan\n\t */\n\tgetName: function() {\n\t\treturn this.npdata.region;\n\t},\n\n\t/**\n\t * Return the trunk code of the current plan as a string.\n\t * @return {string|undefined} the trunk code of the plan or\n\t * undefined if there is no trunk code in this plan\n\t */\n\tgetTrunkCode: function() {\n\t\treturn this.npdata.trunkCode;\n\t},\n\n\t/**\n\t * Return the international direct dialing code of this plan.\n\t * @return {string} the IDD code of this plan\n\t */\n\tgetIDDCode: function() {\n\t\treturn this.npdata.iddCode;\n\t},\n\n\t/**\n\t * Return the plan style for this plan. The plan style may be\n\t * one of:\n\t *\n\t * <ul>\n\t * <li>\"open\" - area codes may be left off if the caller is\n\t * dialing to another number within the same area code\n\t * <li>\"closed\" - the area code must always be specified, even\n\t * if calling another number within the same area code\n\t * </ul>\n\t *\n\t * @return {string} the plan style, \"open\" or \"closed\"\n\t */\n\tgetPlanStyle: function() {\n\t\treturn this.npdata.dialingPlan;\n\t},\n\t/** [Need Comment]\n\t * Return a contextFree\n\t *\n\t * @return {boolean}\n\t */\n\tgetContextFree: function() {\n\t\treturn this.npdata.contextFree;\n\t},\n\t/** [Need Comment]\n\t * Return a findExtensions\n\t *\n\t * @return {boolean}\n\t */\n\tgetFindExtensions: function() {\n\t\treturn this.npdata.findExtensions;\n\t},\n\t/** [Need Comment]\n\t * Return a skipTrunk\n\t *\n\t * @return {boolean}\n\t */\n\tgetSkipTrunk: function() {\n\t\treturn this.npdata.skipTrunk;\n\t},\n\t/** [Need Comment]\n\t * Return a skipTrunk\n\t *\n\t * @return {boolean}\n\t */\n\tgetTrunkRequired: function() {\n\t\treturn this.npdata.trunkRequired;\n\t},\n\t/**\n\t * Return true if this plan uses extended area codes.\n\t * @return {boolean} true if the plan uses extended area codes\n\t */\n\tgetExtendedAreaCode: function() {\n\t\treturn this.npdata.extendedAreaCodes;\n\t},\n\t/**\n\t * Return a string containing all of the common format characters\n\t * used to format numbers.\n\t * @return {string} the common format characters fused in this locale\n\t */\n\tgetCommonFormatChars: function() {\n\t\treturn this.npdata.commonFormatChars;\n\t},\n\n\t/**\n\t * Return the length of the field with the given name. If the length\n\t * is returned as 0, this means it is variable length.\n\t *\n\t * @param {string} field name of the field for which the length is\n\t * being sought\n\t * @return {number} if positive, this gives the length of the given\n\t * field. If zero, the field is variable length. If negative, the\n\t * field is not known.\n\t */\n\tgetFieldLength: function (field) {\n\t\tvar dataField = this.npdata.fieldLengths;\n\n\t\treturn dataField[field];\n\t}\n};\n\n/*\n * phoneloc.js - Represent a phone locale object.\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n!depends\nilibglobal.js\nlocale.js\nlocaleinfo.js\n*/\n\n// !data phoneloc\n\n/**\n * @class\n *\n * @param {Object} options Options that govern how this phone locale works\n * @constructor\n * @private\n * @extends ilib.Locale\n */\nilib.Locale.PhoneLoc = function(options) {\n\tvar region,\n\t\tmcc,\n\t\tcc,\n\t\tsync = true,\n\t\tloadParams = {},\n\t\tlocale;\n\n\tlocale = (options && options.locale) || ilib.getLocale();\n\n\tthis.parent.call(this, locale);\n\n\tregion = this.region;\n\n\tif (options) {\n\t\tif (typeof(options.mcc) !== 'undefined') {\n\t\t\tmcc = options.mcc;\n\t\t}\n\n\t\tif (typeof(options.countryCode) !== 'undefined') {\n\t\t\tcc = options.countryCode;\n\t\t}\n\n\t\tif (typeof(options.sync) !== 'undefined') {\n\t\t\tsync = (options.sync == true);\n\t\t}\n\n\t\tif (options.loadParams) {\n\t\t\tloadParams = options.loadParams;\n\t\t}\n\t}\n\n\tilib.loadData({\n\t\tname: \"phoneloc.json\",\n\t\tobject: ilib.Locale.PhoneLoc,\n\t\tnonlocale: true,\n\t\tsync: sync,\n\t\tloadParams: loadParams,\n\t\tcallback: ilib.bind(this, function (data) {\n\t\t\t/** @type {{mcc2reg:Object.<string,string>,cc2reg:Object.<string,string>,reg2cc:Object.<string,string>,area2reg:Object.<string,string>}} */\n\t\t\tthis.mappings = data;\n\n\t\t\tif (typeof(mcc) !== 'undefined') {\n\t\t\t\tregion = this.mappings.mcc2reg[mcc];\n\t\t\t}\n\n\t\t\tif (typeof(cc) !== 'undefined') {\n\t\t\t\tregion = this.mappings.cc2reg[cc];\n\t\t\t}\n\n\t\t\tif (!region) {\n\t\t\t\tregion = \"XX\";\n\t\t\t}\n\n\t\t\tthis.region = this._normPhoneReg(region);\n\t\t\tthis._genSpec();\n\n\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\toptions.onLoad(this);\n\t\t\t}\n\t\t})\n\t});\n};\n\nilib.Locale.PhoneLoc.prototype = new ilib.Locale();\nilib.Locale.PhoneLoc.prototype.parent = ilib.Locale;\nilib.Locale.PhoneLoc.prototype.constructor = ilib.Locale.PhoneLoc;\n\n/**\n * Map a mobile carrier code to a region code.\n *\n * @static\n * @package\n * @param {string|undefined} mcc the MCC to map\n * @return {string|undefined} the region code\n */\n\nilib.Locale.PhoneLoc.prototype._mapMCCtoRegion = function(mcc) {\n\tif (!mcc) {\n\t\treturn undefined;\n\t}\n\treturn this.mappings.mcc2reg && this.mappings.mcc2reg[mcc] || \"XX\";\n};\n\n/**\n * Map a country code to a region code.\n *\n * @static\n * @package\n * @param {string|undefined} cc the country code to map\n * @return {string|undefined} the region code\n */\nilib.Locale.PhoneLoc.prototype._mapCCtoRegion = function(cc) {\n\tif (!cc) {\n\t\treturn undefined;\n\t}\n\treturn this.mappings.cc2reg && this.mappings.cc2reg[cc] || \"XX\";\n};\n\n/**\n * Map a region code to a country code.\n *\n * @static\n * @package\n * @param {string|undefined} region the region code to map\n * @return {string|undefined} the country code\n */\nilib.Locale.PhoneLoc.prototype._mapRegiontoCC = function(region) {\n\tif (!region) {\n\t\treturn undefined;\n\t}\n\treturn this.mappings.reg2cc && this.mappings.reg2cc[region] || \"0\";\n};\n\n/**\n * Map a country code to a region code.\n *\n * @static\n * @package\n * @param {string|undefined} cc the country code to map\n * @param {string|undefined} area the area code within the country code's numbering plan\n * @return {string|undefined} the region code\n */\nilib.Locale.PhoneLoc.prototype._mapAreatoRegion = function(cc, area) {\n\tif (!cc) {\n\t\treturn undefined;\n\t}\n\tif (cc in this.mappings.area2reg) {\n\t\treturn this.mappings.area2reg[cc][area] || this.mappings.area2reg[cc][\"default\"];\n\t} else {\n\t\treturn this.mappings.cc2reg[cc];\n\t}\n};\n\n/**\n * Return the region that controls the dialing plan in the given\n * region. (ie. the \"normalized phone region\".)\n *\n * @static\n * @package\n * @param {string} region the region code to normalize\n * @return {string} the normalized region code\n */\nilib.Locale.PhoneLoc.prototype._normPhoneReg = function(region) {\n\tvar norm;\n\n\t// Map all NANP regions to the right region, so that they get parsed using the\n\t// correct state table\n\tswitch (region) {\n\t\tcase \"US\": // usa\n\t\tcase \"CA\": // canada\n\t\tcase \"AG\": // antigua and barbuda\n\t\tcase \"BS\": // bahamas\n\t\tcase \"BB\": // barbados\n\t\tcase \"DM\": // dominica\n\t\tcase \"DO\": // dominican republic\n\t\tcase \"GD\": // grenada\n\t\tcase \"JM\": // jamaica\n\t\tcase \"KN\": // st. kitts and nevis\n\t\tcase \"LC\": // st. lucia\n\t\tcase \"VC\": // st. vincent and the grenadines\n\t\tcase \"TT\": // trinidad and tobago\n\t\tcase \"AI\": // anguilla\n\t\tcase \"BM\": // bermuda\n\t\tcase \"VG\": // british virgin islands\n\t\tcase \"KY\": // cayman islands\n\t\tcase \"MS\": // montserrat\n\t\tcase \"TC\": // turks and caicos\n\t\tcase \"AS\": // American Samoa\n\t\tcase \"VI\": // Virgin Islands, U.S.\n\t\tcase \"PR\": // Puerto Rico\n\t\tcase \"MP\": // Northern Mariana Islands\n\t\tcase \"T:\": // East Timor\n\t\tcase \"GU\": // Guam\n\t\t\tnorm = \"US\";\n\t\t\tbreak;\n\n\t\t// these all use the Italian dialling plan\n\t\tcase \"IT\": // italy\n\t\tcase \"SM\": // san marino\n\t\tcase \"VA\": // vatican city\n\t\t\tnorm = \"IT\";\n\t\t\tbreak;\n\n\t\t// all the French dependencies are on the French dialling plan\n\t\tcase \"FR\": // france\n\t\tcase \"GF\": // french guiana\n\t\tcase \"MQ\": // martinique\n\t\tcase \"GP\": // guadeloupe,\n\t\tcase \"BL\": // saint barthélemy\n\t\tcase \"MF\": // saint martin\n\t\tcase \"RE\": // réunion, mayotte\n\t\t\tnorm = \"FR\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tnorm = region;\n\t\t\tbreak;\n\t}\n\treturn norm;\n};\n/*\n * handler.js - Handle phone number parse states\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n!depends\nilibglobal.js\nphone/phoneloc.js\n*/\n\n/**\n * @class\n * [Need Comments] globals console ilib PhoneLoc\n *\n * @private\n * @constructor\n */\nilib.StateHandler = function _StateHandler () {\n\treturn this;\n};\n\nilib.StateHandler.prototype = {\n\t/**\n\t * @private\n\t * @param {string} number phone number\n\t * @param {Object} fields the fields that have been extracted so far\n\t * @param {Object} regionSettings settings used to parse the rest of the number\n\t */\n\tprocessSubscriberNumber: function(number, fields, regionSettings) {\n\t\tvar last;\n\n\t\tlast = number.search(/[xwtp,;]/i);\t// last digit of the local number\n\n\t\tif (last > -1) {\n\t\t\tif (last > 0) {\n\t\t\t\tfields.subscriberNumber = number.substring(0, last);\n\t\t\t}\n\t\t\t// strip x's which are there to indicate a break between the local subscriber number and the extension, but\n\t\t\t// are not themselves a dialable character\n\t\t\tfields.extension = number.substring(last).replace('x', '');\n\t\t} else {\n\t\t\tif (number.length) {\n\t\t\t\tfields.subscriberNumber = number;\n\t\t\t}\n\t\t}\n\n\t\tif (regionSettings.plan.getFieldLength('maxLocalLength') &&\n\t\t\t\tfields.subscriberNumber &&\n\t\t\t\tfields.subscriberNumber.length > regionSettings.plan.getFieldLength('maxLocalLength')) {\n\t\t\tfields.invalid = true;\n\t\t}\n\t},\n\t/**\n\t * @private\n\t * @param {string} fieldName\n\t * @param {number} length length of phone number\n\t * @param {string} number phone number\n\t * @param {number} currentChar currentChar to be parsed\n\t * @param {Object} fields the fields that have been extracted so far\n\t * @param {Object} regionSettings settings used to parse the rest of the number\n\t * @param {boolean} noExtractTrunk\n\t */\n\tprocessFieldWithSubscriberNumber: function(fieldName, length, number, currentChar, fields, regionSettings, noExtractTrunk) {\n\t\tvar ret, end;\n\n\t\tif (length !== undefined && length > 0) {\n\t\t\t// fixed length\n\t\t\tend = length;\n\t\t\tif (regionSettings.plan.getTrunkCode() === \"0\" && number.charAt(0) === \"0\") {\n\t\t\t\tend += regionSettings.plan.getTrunkCode().length;  // also extract the trunk access code\n\t\t\t}\n\t\t} else {\n\t\t\t// variable length\n\t\t\t// the setting is the negative of the length to add, so subtract to make it positive\n\t\t\tend = currentChar + 1 - length;\n\t\t}\n\n\t\tif (fields[fieldName] !== undefined) {\n\t\t\t// we have a spurious recognition, because this number already contains that field! So, just put\n\t\t\t// everything into the subscriberNumber as the default\n\t\t\tthis.processSubscriberNumber(number, fields, regionSettings);\n\t\t} else {\n\t\t\tfields[fieldName] = number.substring(0, end);\n\t\t\tif (number.length > end) {\n\t\t\t\tthis.processSubscriberNumber(number.substring(end), fields, regionSettings);\n\t\t\t}\n\t\t}\n\n\t\tret = {\n\t\t\tnumber: \"\"\n\t\t};\n\n\t\treturn ret;\n\t},\n\t/**\n\t * @private\n\t * @param {string} fieldName\n\t * @param {number} length length of phone number\n\t * @param {string} number phone number\n\t * @param {number} currentChar currentChar to be parsed\n\t * @param {Object} fields the fields that have been extracted so far\n\t * @param {Object} regionSettings settings used to parse the rest of the number\n\t */\n\tprocessField: function(fieldName, length, number, currentChar, fields, regionSettings) {\n\t\tvar ret = {}, end;\n\n\t\tif (length !== undefined && length > 0) {\n\t\t\t// fixed length\n\t\t\tend = length;\n\t\t\tif (regionSettings.plan.getTrunkCode() === \"0\" && number.charAt(0) === \"0\") {\n\t\t\t\tend += regionSettings.plan.getTrunkCode().length;  // also extract the trunk access code\n\t\t\t}\n\t\t} else {\n\t\t\t// variable length\n\t\t\t// the setting is the negative of the length to add, so subtract to make it positive\n\t\t\tend = currentChar + 1 - length;\n\t\t}\n\n\t\tif (fields[fieldName] !== undefined) {\n\t\t\t// we have a spurious recognition, because this number already contains that field! So, just put\n\t\t\t// everything into the subscriberNumber as the default\n\t\t\tthis.processSubscriberNumber(number, fields, regionSettings);\n\t\t\tret.number = \"\";\n\t\t} else {\n\t\t\tfields[fieldName] = number.substring(0, end);\n\t\t\tret.number = (number.length > end) ? number.substring(end) : \"\";\n\t\t}\n\n\t\treturn ret;\n\t},\n\t/**\n\t * @private\n\t * @param {string} number phone number\n\t * @param {number} currentChar currentChar to be parsed\n\t * @param {Object} fields the fields that have been extracted so far\n\t * @param {Object} regionSettings settings used to parse the rest of the number\n\t */\n\ttrunk: function(number, currentChar, fields, regionSettings) {\n\t\tvar ret, trunkLength;\n\n\t\tif (fields.trunkAccess !== undefined) {\n\t\t\t// What? We already have one? Okay, put the rest of this in the subscriber number as the default behaviour then.\n\t\t\tthis.processSubscriberNumber(number, fields, regionSettings);\n\t\t\tnumber = \"\";\n\t\t} else {\n\t\t\ttrunkLength = regionSettings.plan.getTrunkCode().length;\n\t\t\tfields.trunkAccess = number.substring(0, trunkLength);\n\t\t\tnumber = (number.length > trunkLength) ? number.substring(trunkLength) : \"\";\n\t\t}\n\n\t\tret = {\n\t\t\tnumber: number\n\t\t};\n\n\t\treturn ret;\n\t},\n\t/**\n\t * @private\n\t * @param {string} number phone number\n\t * @param {number} currentChar currentChar to be parsed\n\t * @param {Object} fields the fields that have been extracted so far\n\t * @param {Object} regionSettings settings used to parse the rest of the number\n\t */\n\tplus: function(number, currentChar, fields, regionSettings) {\n\t\tvar ret = {};\n\n\t\tif (fields.iddPrefix !== undefined) {\n\t\t\t// What? We already have one? Okay, put the rest of this in the subscriber number as the default behaviour then.\n\t\t\tthis.processSubscriberNumber(number, fields, regionSettings);\n\t\t\tret.number = \"\";\n\t\t} else {\n\t\t\t// found the idd prefix, so save it and cause the function to parse the next part\n\t\t\t// of the number with the idd table\n\t\t\tfields.iddPrefix = number.substring(0, 1);\n\n\t\t\tret = {\n\t\t\t\tnumber: number.substring(1),\n\t\t\t\ttable: 'idd'    // shared subtable that parses the country code\n\t\t\t};\n\t\t}\n\t\treturn ret;\n\t},\n\t/**\n\t * @private\n\t * @param {string} number phone number\n\t * @param {number} currentChar currentChar to be parsed\n\t * @param {Object} fields the fields that have been extracted so far\n\t * @param {Object} regionSettings settings used to parse the rest of the number\n\t */\n\tidd: function(number, currentChar, fields, regionSettings) {\n\t\tvar ret = {};\n\n\t\tif (fields.iddPrefix !== undefined) {\n\t\t\t// What? We already have one? Okay, put the rest of this in the subscriber number as the default behaviour then.\n\t\t\tthis.processSubscriberNumber(number, fields, regionSettings);\n\t\t\tret.number = \"\";\n\t\t} else {\n\t\t\t// found the idd prefix, so save it and cause the function to parse the next part\n\t\t\t// of the number with the idd table\n\t\t\tfields.iddPrefix = number.substring(0, currentChar+1);\n\n\t\t\tret = {\n\t\t\t\tnumber: number.substring(currentChar+1),\n\t\t\t\ttable: 'idd'    // shared subtable that parses the country code\n\t\t\t};\n\t\t}\n\n\t\treturn ret;\n\t},\n\t/**\n\t * @private\n\t * @param {string} number phone number\n\t * @param {number} currentChar currentChar to be parsed\n\t * @param {Object} fields the fields that have been extracted so far\n\t * @param {Object} regionSettings settings used to parse the rest of the number\n\t */\n\tcountry: function(number, currentChar, fields, regionSettings) {\n\t\tvar ret, cc;\n\n\t\t// found the country code of an IDD number, so save it and cause the function to\n\t\t// parse the rest of the number with the regular table for this locale\n\t\tfields.countryCode = number.substring(0, currentChar+1);\n\t\tcc = fields.countryCode.replace(/[wWpPtT\\+#\\*]/g, ''); // fix for NOV-108200\n\t\t// console.log(\"Found country code \" + fields.countryCode + \". Switching to country \" + locale.region + \" to parse the rest of the number\");\n\n\t\tret = {\n\t\t\tnumber: number.substring(currentChar+1),\n\t\t\tcountryCode: cc\n\t\t};\n\n\t\treturn ret;\n\t},\n\t/**\n\t * @private\n\t * @param {string} number phone number\n\t * @param {number} currentChar currentChar to be parsed\n\t * @param {Object} fields the fields that have been extracted so far\n\t * @param {Object} regionSettings settings used to parse the rest of the number\n\t */\n\tcic: function(number, currentChar, fields, regionSettings) {\n\t\treturn this.processField('cic', regionSettings.plan.getFieldLength('cic'), number, currentChar, fields, regionSettings);\n\t},\n\t/**\n\t * @private\n\t * @param {string} number phone number\n\t * @param {number} currentChar currentChar to be parsed\n\t * @param {Object} fields the fields that have been extracted so far\n\t * @param {Object} regionSettings settings used to parse the rest of the number\n\t */\n\tservice: function(number, currentChar, fields, regionSettings) {\n\t\treturn this.processFieldWithSubscriberNumber('serviceCode', regionSettings.plan.getFieldLength('serviceCode'), number, currentChar, fields, regionSettings, false);\n\t},\n\t/**\n\t * @private\n\t * @param {string} number phone number\n\t * @param {number} currentChar currentChar to be parsed\n\t * @param {Object} fields the fields that have been extracted so far\n\t * @param {Object} regionSettings settings used to parse the rest of the number\n\t */\n\tarea: function(number, currentChar, fields, regionSettings) {\n\t\tvar ret, last, end, localLength;\n\n\t\tlast = number.search(/[xwtp]/i);\t// last digit of the local number\n\t\tlocalLength = (last > -1) ? last : number.length;\n\n\t\tif (regionSettings.plan.getFieldLength('areaCode') > 0) {\n\t\t\t// fixed length\n\t\t\tend = regionSettings.plan.getFieldLength('areaCode');\n\t\t\tif (regionSettings.plan.getTrunkCode() === number.charAt(0)) {\n\t\t\t\tend += regionSettings.plan.getTrunkCode().length;  // also extract the trunk access code\n\t\t\t\tlocalLength -= regionSettings.plan.getTrunkCode().length;\n\t\t\t}\n\t\t} else {\n\t\t\t// variable length\n\t\t\t// the setting is the negative of the length to add, so subtract to make it positive\n\t\t\tend = currentChar + 1 - regionSettings.plan.getFieldLength('areaCode');\n\t\t}\n\n\t\t// substring() extracts the part of the string up to but not including the end character,\n\t\t// so add one to compensate\n\t\tif (regionSettings.plan.getFieldLength('maxLocalLength') !== undefined) {\n\t\t\tif (fields.trunkAccess !== undefined || fields.mobilePrefix !== undefined ||\n\t\t\t\t\tfields.countryCode !== undefined ||\n\t\t\t\t\tlocalLength > regionSettings.plan.getFieldLength('maxLocalLength')) {\n\t\t\t\t// too long for a local number by itself, or a different final state already parsed out the trunk\n\t\t\t\t// or mobile prefix, then consider the rest of this number to be an area code + part of the subscriber number\n\t\t\t\tfields.areaCode = number.substring(0, end);\n\t\t\t\tif (number.length > end) {\n\t\t\t\t\tthis.processSubscriberNumber(number.substring(end), fields, regionSettings);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// shorter than the length needed for a local number, so just consider it a local number\n\t\t\t\tthis.processSubscriberNumber(number, fields, regionSettings);\n\t\t\t}\n\t\t} else {\n\t\t\tfields.areaCode = number.substring(0, end);\n\t\t\tif (number.length > end) {\n\t\t\t\tthis.processSubscriberNumber(number.substring(end), fields, regionSettings);\n\t\t\t}\n\t\t}\n\n\t\t// extensions are separated from the number by a dash in Germany\n\t\tif (regionSettings.plan.getFindExtensions() !== undefined && fields.subscriberNumber !== undefined) {\n\t\t\tvar dash = fields.subscriberNumber.indexOf(\"-\");\n\t\t\tif (dash > -1) {\n\t\t\t\tfields.subscriberNumber = fields.subscriberNumber.substring(0, dash);\n\t\t\t\tfields.extension = fields.subscriberNumber.substring(dash+1);\n\t\t\t}\n\t\t}\n\n\t\tret = {\n\t\t\tnumber: \"\"\n\t\t};\n\n\t\treturn ret;\n\t},\n\t/**\n\t * @private\n\t * @param {string} number phone number\n\t * @param {number} currentChar currentChar to be parsed\n\t * @param {Object} fields the fields that have been extracted so far\n\t * @param {Object} regionSettings settings used to parse the rest of the number\n\t */\n\tnone: function(number, currentChar, fields, regionSettings) {\n\t\tvar ret;\n\n\t\t// this is a last resort function that is called when nothing is recognized.\n\t\t// When this happens, just put the whole stripped number into the subscriber number\n\n\t\tif (number.length > 0) {\n\t\t\tthis.processSubscriberNumber(number, fields, regionSettings);\n\t\t\tif (currentChar > 0 && currentChar < number.length) {\n\t\t\t\t// if we were part-way through parsing, and we hit an invalid digit,\n\t\t\t\t// indicate that the number could not be parsed properly\n\t\t\t\tfields.invalid = true;\n\t\t\t}\n\t\t}\n\n\t\tret = {\n\t\t\tnumber:\"\"\n\t\t};\n\n\t\treturn ret;\n\t},\n\t/**\n\t * @private\n\t * @param {string} number phone number\n\t * @param {number} currentChar currentChar to be parsed\n\t * @param {Object} fields the fields that have been extracted so far\n\t * @param {Object} regionSettings settings used to parse the rest of the number\n\t */\n\tvsc: function(number, currentChar, fields, regionSettings) {\n\t\tvar ret, length, end;\n\n\t\tif (fields.vsc === undefined) {\n\t\t\tlength = regionSettings.plan.getFieldLength('vsc') || 0;\n\t\t\tif (length !== undefined && length > 0) {\n\t\t\t\t// fixed length\n\t\t\t\tend = length;\n\t\t\t} else {\n\t\t\t\t// variable length\n\t\t\t\t// the setting is the negative of the length to add, so subtract to make it positive\n\t\t\t\tend = currentChar + 1 - length;\n\t\t\t}\n\n\t\t\t// found a VSC code (ie. a \"star code\"), so save it and cause the function to\n\t\t\t// parse the rest of the number with the same table for this locale\n\t\t\tfields.vsc = number.substring(0, end);\n\t\t\tnumber = (number.length > end) ? \"^\" + number.substring(end) : \"\";\n\t\t} else {\n\t\t\t// got it twice??? Okay, this is a bogus number then. Just put everything else into the subscriber number as the default\n\t\t\tthis.processSubscriberNumber(number, fields, regionSettings);\n\t\t\tnumber = \"\";\n\t\t}\n\n\t\t// treat the rest of the number as if it were a completely new number\n\t\tret = {\n\t\t\tnumber: number\n\t\t};\n\n\t\treturn ret;\n\t},\n\t/**\n\t * @private\n\t * @param {string} number phone number\n\t * @param {number} currentChar currentChar to be parsed\n\t * @param {Object} fields the fields that have been extracted so far\n\t * @param {Object} regionSettings settings used to parse the rest of the number\n\t */\n\tcell: function(number, currentChar, fields, regionSettings) {\n\t\treturn this.processFieldWithSubscriberNumber('mobilePrefix', regionSettings.plan.getFieldLength('mobilePrefix'), number, currentChar, fields, regionSettings, false);\n\t},\n\t/**\n\t * @private\n\t * @param {string} number phone number\n\t * @param {number} currentChar currentChar to be parsed\n\t * @param {Object} fields the fields that have been extracted so far\n\t * @param {Object} regionSettings settings used to parse the rest of the number\n\t */\n\tpersonal: function(number, currentChar, fields, regionSettings) {\n\t\treturn this.processFieldWithSubscriberNumber('serviceCode', regionSettings.plan.getFieldLength('personal'), number, currentChar, fields, regionSettings, false);\n\t},\n\t/**\n\t * @private\n\t * @param {string} number phone number\n\t * @param {number} currentChar currentChar to be parsed\n\t * @param {Object} fields the fields that have been extracted so far\n\t * @param {Object} regionSettings settings used to parse the rest of the number\n\t */\n\temergency: function(number, currentChar, fields, regionSettings) {\n\t\treturn this.processFieldWithSubscriberNumber('emergency', regionSettings.plan.getFieldLength('emergency'), number, currentChar, fields, regionSettings, true);\n\t},\n\t/**\n\t * @private\n\t * @param {string} number phone number\n\t * @param {number} currentChar currentChar to be parsed\n\t * @param {Object} fields the fields that have been extracted so far\n\t * @param {Object} regionSettings settings used to parse the rest of the number\n\t */\n\tpremium: function(number, currentChar, fields, regionSettings) {\n\t\treturn this.processFieldWithSubscriberNumber('serviceCode', regionSettings.plan.getFieldLength('premium'), number, currentChar, fields, regionSettings, false);\n\t},\n\t/**\n\t * @private\n\t * @param {string} number phone number\n\t * @param {number} currentChar currentChar to be parsed\n\t * @param {Object} fields the fields that have been extracted so far\n\t * @param {Object} regionSettings settings used to parse the rest of the number\n\t */\n\tspecial: function(number, currentChar, fields, regionSettings) {\n\t\treturn this.processFieldWithSubscriberNumber('serviceCode', regionSettings.plan.getFieldLength('special'), number, currentChar, fields, regionSettings, false);\n\t},\n\t/**\n\t * @private\n\t * @param {string} number phone number\n\t * @param {number} currentChar currentChar to be parsed\n\t * @param {Object} fields the fields that have been extracted so far\n\t * @param {Object} regionSettings settings used to parse the rest of the number\n\t */\n\tservice2: function(number, currentChar, fields, regionSettings) {\n\t\treturn this.processFieldWithSubscriberNumber('serviceCode', regionSettings.plan.getFieldLength('service2'), number, currentChar, fields, regionSettings, false);\n\t},\n\t/**\n\t * @private\n\t * @param {string} number phone number\n\t * @param {number} currentChar currentChar to be parsed\n\t * @param {Object} fields the fields that have been extracted so far\n\t * @param {Object} regionSettings settings used to parse the rest of the number\n\t */\n\tservice3: function(number, currentChar, fields, regionSettings) {\n\t\treturn this.processFieldWithSubscriberNumber('serviceCode', regionSettings.plan.getFieldLength('service3'), number, currentChar, fields, regionSettings, false);\n\t},\n\t/**\n\t * @private\n\t * @param {string} number phone number\n\t * @param {number} currentChar currentChar to be parsed\n\t * @param {Object} fields the fields that have been extracted so far\n\t * @param {Object} regionSettings settings used to parse the rest of the number\n\t */\n\tservice4: function(number, currentChar, fields, regionSettings) {\n\t\treturn this.processFieldWithSubscriberNumber('serviceCode', regionSettings.plan.getFieldLength('service4'), number, currentChar, fields, regionSettings, false);\n\t},\n\t/**\n\t * @private\n\t * @param {string} number phone number\n\t * @param {number} currentChar currentChar to be parsed\n\t * @param {Object} fields the fields that have been extracted so far\n\t * @param {Object} regionSettings settings used to parse the rest of the number\n\t */\n\tcic2: function(number, currentChar, fields, regionSettings) {\n\t\treturn this.processField('cic', regionSettings.plan.getFieldLength('cic2'), number, currentChar, fields, regionSettings);\n\t},\n\t/**\n\t * @private\n\t * @param {string} number phone number\n\t * @param {number} currentChar currentChar to be parsed\n\t * @param {Object} fields the fields that have been extracted so far\n\t * @param {Object} regionSettings settings used to parse the rest of the number\n\t */\n\tcic3: function(number, currentChar, fields, regionSettings) {\n\t\treturn this.processField('cic', regionSettings.plan.getFieldLength('cic3'), number, currentChar, fields, regionSettings);\n\t},\n\t/**\n\t * @private\n\t * @param {string} number phone number\n\t * @param {number} currentChar currentChar to be parsed\n\t * @param {Object} fields the fields that have been extracted so far\n\t * @param {Object} regionSettings settings used to parse the rest of the number\n\t */\n\tstart: function(number, currentChar, fields, regionSettings) {\n\t\t// don't do anything except transition to the next state\n\t\treturn {\n\t\t\tnumber: number\n\t\t};\n\t},\n\t/**\n\t * @private\n\t * @param {string} number phone number\n\t * @param {number} currentChar currentChar to be parsed\n\t * @param {Object} fields the fields that have been extracted so far\n\t * @param {Object} regionSettings settings used to parse the rest of the number\n\t */\n\tlocal: function(number, currentChar, fields, regionSettings) {\n\t\t// in open dialling plans, we can tell that this number is a local subscriber number because it\n\t\t// starts with a digit that indicates as such\n\t\tthis.processSubscriberNumber(number, fields, regionSettings);\n\t\treturn {\n\t\t\tnumber: \"\"\n\t\t};\n\t}\n};\n\n// context-sensitive handler\n/**\n * @class\n * @private\n * @constructor\n */\nilib.CSStateHandler = function () {\n\treturn this;\n};\n\nilib.CSStateHandler.prototype = new ilib.StateHandler();\nilib.CSStateHandler.prototype.special = function (number, currentChar, fields, regionSettings) {\n\tvar ret;\n\n\t// found a special area code that is both a node and a leaf. In\n\t// this state, we have found the leaf, so chop off the end\n\t// character to make it a leaf.\n\tif (number.charAt(0) === \"0\") {\n\t\tfields.trunkAccess = number.charAt(0);\n\t\tfields.areaCode = number.substring(1, currentChar);\n\t} else {\n\t\tfields.areaCode = number.substring(0, currentChar);\n\t}\n\tthis.processSubscriberNumber(number.substring(currentChar), fields, regionSettings);\n\n\tret = {\n\t\tnumber: \"\"\n\t};\n\n\treturn ret;\n};\n\n/**\n * @class\n * @private\n * @constructor\n */\nilib.USStateHandler = function () {\n\treturn this;\n};\n\nilib.USStateHandler.prototype = new ilib.StateHandler();\nilib.USStateHandler.prototype.vsc = function (number, currentChar, fields, regionSettings) {\n\tvar ret;\n\n\t// found a VSC code (ie. a \"star code\")\n\tfields.vsc = number;\n\n\t// treat the rest of the number as if it were a completely new number\n\tret = {\n\t\tnumber: \"\"\n\t};\n\n\treturn ret;\n};\n\n/**\n * @protected\n * @static\n */\nilib._handlerFactory = function (locale, plan) {\n\tif (plan.getContextFree() !== undefined && typeof(plan.getContextFree()) === 'boolean' && plan.getContextFree() === false) {\n\t\treturn new ilib.CSStateHandler();\n\t}\n\tvar region = (locale && locale.getRegion()) || \"ZZ\";\n\tswitch (region) {\n\tcase 'US':\n\t\treturn new ilib.USStateHandler();\n\t\tbreak;\n\tdefault:\n\t\treturn new ilib.StateHandler();\n\t}\n};\n/*\n * phonenum.js - Represent a phone number.\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n!depends\nilibglobal.js\nlocale.js\nlocaleinfo.js\nphone/numplan.js\nphone/phoneloc.js\nphone/handler.js\n*/\n\n// !data states idd mnc\n\n/**\n * @class\n * Create a new phone number instance that parses the phone number parameter for its\n * constituent parts, and store them as separate fields in the returned object.\n *\n * The options object may include any of these properties:\n *\n * <ul>\n * <li><i>locale</i> The locale with which to parse the number. This gives a clue as to which\n * numbering plan to use.\n * <li><i>mcc</i> The mobile carrier code (MCC) associated with the carrier that the phone is\n * currently connected to, if known. This also can give a clue as to which numbering plan to\n * use\n * <li>onLoad - a callback function to call when this instance is fully\n * loaded. When the onLoad option is given, this class will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the\n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n * <li>sync - tell whether to load any missing locale data synchronously or\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n * <li><i>loadParams</i> - an object containing parameters to pass to the\n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object\n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n *\n * This function is locale-sensitive, and will assume any number passed to it is\n * appropriate for the given locale. If the MCC is given, this method will assume\n * that numbers without an explicit country code have been dialled within the country\n * given by the MCC. This affects how things like area codes are parsed. If the MCC\n * is not given, this method will use the given locale to determine the country\n * code. If the locale is not explicitly given either, then this function uses the\n * region of current locale as the default.<p>\n *\n * The input number may contain any formatting characters for the given locale. Each\n * field that is returned in the json object is a simple string of digits with\n * all formatting and whitespace characters removed.<p>\n *\n * The number is decomposed into its parts, regardless if the number\n * contains formatting characters. If a particular part cannot be extracted from given\n * number, the field will not be returned as a field in the object. If no fields can be\n * extracted from the number at all, then all digits found in the string will be\n * returned in the subscriberNumber field. If the number parameter contains no\n * digits, an empty object is returned.<p>\n *\n * This instance can contain any of the following fields after parsing is done:\n *\n * <ul>\n * <li>vsc - if this number starts with a VSC (Vertical Service Code, or \"star code\"), this field will contain the star and the code together\n * <li>iddPrefix - the prefix for international direct dialing. This can either be in the form of a plus character or the IDD access code for the given locale\n * <li>countryCode - if this number is an international direct dial number, this is the country code\n * <li>cic - for \"dial-around\" services (access to other carriers), this is the prefix used as the carrier identification code\n * <li>emergency - an emergency services number\n * <li>mobilePrefix - prefix that introduces a mobile phone number\n * <li>trunkAccess - trunk access code (long-distance access)\n * <li>serviceCode - like a geographic area code, but it is a required prefix for various services\n * <li>areaCode - geographic area codes\n * <li>subscriberNumber - the unique number of the person or company that pays for this phone line\n * <li>extension - in some countries, extensions are dialed directly without going through an operator or a voice prompt system. If the number includes an extension, it is given in this field.\n * <li>invalid - this property is added and set to true if the parser found that the number is invalid in the numbering plan for the country. This method will make its best effort at parsing, but any digits after the error will go into the subscriberNumber field\n * </ul>\n *\n * The following rules determine how the number is parsed:\n *\n * <ol>\n * <li>If the number starts with a character that is alphabetic instead of numeric, do\n * not parse the number at all. There is a good chance that it is not really a phone number.\n * In this case, an empty instance will be returned.\n * <li>If the phone number uses the plus notation or explicitly uses the international direct\n * dialing prefix for the given locale, then the country code is identified in\n * the number. The rules of given locale are used to parse the IDD prefix, and then the rules\n * of the country in the prefix are used to parse the rest of the number.\n * <li>If a country code is provided as an argument to the function call, use that country's\n * parsing rules for the number. This is intended for programs like a Contacts application that\n * know what the country is of the person that owns the phone number and can pass that on as\n * a hint.\n * <li>If the appropriate locale cannot be easily determined, default to using the rules\n * for the current user's region.\n * </ol>\n *\n * Example: parsing the number \"+49 02101345345-78\" will give the following properties in the\n * resulting phone number instance:\n *\n * <pre>\n *      {\n *        iddPrefix: \"+\",\n *        countryCode: \"49\",\n *        areaCode: \"02101\",\n *        subscriberNumber: \"345345\",\n *        extension: \"78\"\n *      }\n * </pre>\n *\n * Note that in this example, because international direct dialing is explicitly used\n * in the number, the part of this number after the IDD prefix and country code will be\n * parsed exactly the same way in all locales with German rules (country code 49).\n *\n * Regions currently supported are:\n *\n * <ul>\n * <li>NANP (North American Numbering Plan) countries - USA, Canada, Bermuda, various Caribbean nations\n * <li>UK\n * <li>Republic of Ireland\n * <li>Germany\n * <li>France\n * <li>Spain\n * <li>Italy\n * <li>Mexico\n * <li>India\n * <li>People's Republic of China\n * <li>Netherlands\n * <li>Belgium\n * <li>Luxembourg\n * <li>Australia\n * <li>New Zealand\n * <li>Singapore\n * <li>Korea\n * <li>Japan\n * <li>Russia\n * <li>Brazil\n * </ul>\n *\n * @constructor\n * @param {!string|ilib.PhoneNumber} number A free-form phone number to be parsed, or another phone\n * number instance to copy\n * @param {Object=} options options that guide the parser in parsing the number\n */\nilib.PhoneNumber = function(number, options) {\n\tvar stateData,\n\t\tregionSettings;\n\n\tthis.sync = true;\n\tthis.loadParams = {};\n\n\tif (!number || (typeof number === \"string\" && number.length === 0)) {\n\t\treturn this;\n\t}\n\n\tif (options) {\n\t\tif (typeof(options.sync) === 'boolean') {\n\t\t\tthis.sync = options.sync;\n\t\t}\n\n\t\tif (options.loadParams) {\n\t\t\tthis.loadParams = options.loadParams;\n\t\t}\n\n\t\tif (typeof(options.onLoad) === 'function') {\n\t\t\t/**\n\t\t\t * @private\n\t\t\t * @type {function(ilib.PhoneNumber)}\n\t\t\t */\n\t\t\tthis.onLoad = options.onLoad;\n\t\t}\n\t}\n\n\tif (typeof number === \"object\") {\n\t\t/**\n\t\t * The vertical service code. These are codes that typically\n\t\t * start with a star or hash, like \"*69\" for \"dial back the\n\t\t * last number that called me\".\n\t\t * @type {string|undefined}\n\t\t */\n\t\tthis.vsc = number.vsc;\n\n\t\t/**\n\t\t * The international direct dialing prefix. This is always\n\t\t * followed by the country code.\n\t\t * @type {string}\n\t\t */\n\t\tthis.iddPrefix = number.iddPrefix;\n\n\t\t/**\n\t\t * The unique IDD country code for the country where the\n\t\t * phone number is serviced.\n\t\t * @type {string|undefined}\n\t\t */\n\t\tthis.countryCode = number.countryCode;\n\n\t\t/**\n\t\t * The digits required to access the trunk.\n\t\t * @type {string|undefined}\n\t\t */\n\t\tthis.trunkAccess = number.trunkAccess;\n\n\t\t/**\n\t\t * The carrier identification code used to identify\n\t\t * alternate long distance or international carriers.\n\t\t * @type {string|undefined}\n\t\t */\n\t\tthis.cic = number.cic;\n\n\t\t/**\n\t\t * Identifies an emergency number that is typically\n\t\t * short, such as \"911\" in North America or \"112\" in\n\t\t * many other places in the world.\n\t\t * @type {string|undefined}\n\t\t */\n\t\tthis.emergency = number.emergency;\n\n\t\t/**\n\t\t * The prefix of the subscriber number that indicates\n\t\t * that this is the number of a mobile phone.\n\t\t * @type {string|undefined}\n\t\t */\n\t\tthis.mobilePrefix = number.mobilePrefix;\n\n\t\t/**\n\t\t * The prefix that identifies this number as commercial\n\t\t * service number.\n\t\t * @type {string|undefined}\n\t\t */\n\t\tthis.serviceCode = number.serviceCode;\n\n\t\t/**\n\t\t * The area code prefix of a land line number.\n\t\t * @type {string|undefined}\n\t\t */\n\t\tthis.areaCode = number.areaCode;\n\n\t\t/**\n\t\t * The unique number associated with the subscriber\n\t\t * of this phone.\n\t\t * @type {string|undefined}\n\t\t */\n\t\tthis.subscriberNumber = number.subscriberNumber;\n\n\t\t/**\n\t\t * The direct dial extension number.\n\t\t * @type {string|undefined}\n\t\t */\n\t\tthis.extension = number.extension;\n\n\t\t/**\n\t\t * @private\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.invalid = number.invalid;\n\n\t\tif (number.plan && number.locale) {\n\t\t\t/**\n\t\t\t * @private\n\t\t\t * @type {ilib.NumPlan}\n\t\t\t */\n\t\t\tthis.plan = number.plan;\n\n\t\t\t/**\n\t\t\t * @private\n\t\t\t * @type {ilib.Locale.PhoneLoc}\n\t\t\t */\n\t\t\tthis.locale = number.locale;\n\n\t\t\t/**\n\t\t\t * @private\n\t\t\t * @type {ilib.NumPlan}\n\t\t\t */\n\t\t\tthis.destinationPlan = number.destinationPlan;\n\n\t\t\t/**\n\t\t\t * @private\n\t\t\t * @type {ilib.Locale.PhoneLoc}\n\t\t\t */\n\t\t\tthis.destinationLocale = number.destinationLocale;\n\n\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\toptions.onLoad(this);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\n\tnew ilib.Locale.PhoneLoc({\n\t\tlocale: options && options.locale,\n\t\tmcc: options && options.mcc,\n\t\tsync: this.sync,\n\t\tloadParams: this.loadParams,\n\t\tonLoad: ilib.bind(this, function(loc) {\n\t\t\tthis.locale = this.destinationLocale = loc;\n\t\t\tnew ilib.NumPlan({\n\t\t\t\tlocale: this.locale,\n\t\t\t\tsync: this.sync,\n\t\t\t\tloadParms: this.loadParams,\n\t\t\t\tonLoad: ilib.bind(this, function (plan) {\n\t\t\t\t\tthis.plan = this.destinationPlan = plan;\n\n\t\t\t\t\tif (typeof number === \"object\") {\n\t\t\t\t\t\t// the copy constructor code above did not find the locale\n\t\t\t\t\t\t// or plan before, but now they are loaded, so we can return\n\t\t\t\t\t\t// already without going further\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tilib.loadData({\n\t\t\t\t\t\tname: \"states.json\",\n\t\t\t\t\t\tobject: ilib.PhoneNumber,\n\t\t\t\t\t\tlocale: this.locale,\n\t\t\t\t\t\tsync: this.sync,\n\t\t\t\t\t\tloadParams: ilib.merge(this.loadParams, {\n\t\t\t\t\t\t\treturnOne: true\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tcallback: ilib.bind(this, function (stdata) {\n\t\t\t\t\t\t\tif (!stdata) {\n\t\t\t\t\t\t\t\tstdata = ilib.PhoneNumber._defaultStates;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tstateData = stdata;\n\n\t\t\t\t\t\t\tregionSettings = {\n\t\t\t\t\t\t\t\tstateData: stateData,\n\t\t\t\t\t\t\t\tplan: plan,\n\t\t\t\t\t\t\t\thandler: ilib._handlerFactory(this.locale, plan)\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// use ^ to indicate the beginning of the number, because certain things only match at the beginning\n\t\t\t\t\t\t\tnumber = \"^\" + number.replace(/\\^/g, '');\n\t\t\t\t\t\t\tnumber = ilib.PhoneNumber._stripFormatting(number);\n\n\t\t\t\t\t\t\tthis._parseNumber(number, regionSettings, options);\n\t\t\t\t\t\t})\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t});\n\t\t})\n\t});\n};\n\n/**\n * Parse an International Mobile Subscriber Identity (IMSI) number into its 3 constituent parts:\n *\n * <ol>\n * <li>mcc - Mobile Country Code, which identifies the country where the phone is currently receiving\n * service.\n * <li>mnc - Mobile Network Code, which identifies the carrier which is currently providing service to the phone\n * <li>msin - Mobile Subscription Identifier Number. This is a unique number identifying the mobile phone on\n * the network, which usually maps to an account/subscriber in the carrier's database.\n * </ol>\n *\n * Because this function may need to load data to identify the above parts, you can pass an options\n * object that controls how the data is loaded. The options may contain any of the following properties:\n *\n * <ul>\n * <li>onLoad - a callback function to call when the parsing is done. When the onLoad option is given,\n * this method will attempt to load the locale data using the ilib loader callback. When it is done\n * (even if the data is already preassembled), the onLoad function is called with the parsing results\n * as a parameter, so this callback can be used with preassembled or dynamic, synchronous or\n * asynchronous loading or a mix of the above.\n * <li>sync - tell whether to load any missing locale data synchronously or asynchronously. If this\n * option is given as \"false\", then the \"onLoad\" callback must be given, as the results returned from\n * this constructor will not be usable for a while.\n * <li><i>loadParams</i> - an object containing parameters to pass to the loader callback function\n * when locale data is missing. The parameters are not interpretted or modified in any way. They are\n * simply passed along. The object may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n *\n * @static\n * @param {string} imsi IMSI number to parse\n * @param {Object} options options controlling the loading of the locale data\n * @return {{mcc:string,mnc:string,msin:string}|undefined} components of the IMSI number, when the locale data\n * is loaded synchronously, or undefined if asynchronous\n */\nilib.PhoneNumber.parseImsi = function(imsi, options) {\n\tvar sync = true,\n\t\tloadParams = {},\n\t\tfields = {};\n\n\tif (!imsi) {\n\t\treturn undefined;\n\t}\n\n\tif (options) {\n\t\tif (typeof(options.sync) !== 'undefined') {\n\t\t\tsync = (options.sync == true);\n\t\t}\n\n\t\tif (options.loadParams) {\n\t\t\tloadParams = options.loadParams;\n\t\t}\n\t}\n\n\tif (ilib.data.mnc) {\n\t\tfields = ilib.PhoneNumber._parseImsi(ilib.data.mnc, imsi);\n\n\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\toptions.onLoad(fields);\n\t\t}\n\t} else {\n\t\tilib.loadData({\n\t\t\tname: \"mnc.json\",\n\t\t\tobject: ilib.PhoneNumber,\n\t\t\tnonlocale: true,\n\t\t\tsync: sync,\n\t\t\tloadParams: loadParams,\n\t\t\tcallback: ilib.bind(this, function(data) {\n\t\t\t\tilib.data.mnc = data;\n\t\t\t\tfields = ilib.PhoneNumber._parseImsi(data, imsi);\n\n\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\t\toptions.onLoad(fields);\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t}\n\treturn fields;\n};\n\n\n/**\n * @static\n * @protected\n */\nilib.PhoneNumber._parseImsi = function(data, imsi) {\n\tvar ch,\n\t\ti,\n\t\tcurrentState,\n\t\tend,\n\t\thandlerMethod,\n\t\tstate = 0,\n\t\tnewState,\n\t\tfields = {},\n\t\tlastLeaf,\n\t\tconsumed = 0;\n\n\tcurrentState = data;\n\tif (!currentState) {\n\t\t// can't parse anything\n\t\treturn undefined;\n\t}\n\n\ti = 0;\n\twhile (i < imsi.length) {\n\t\tch = ilib.PhoneNumber._getCharacterCode(imsi.charAt(i));\n\t\t// console.info(\"parsing char \" + imsi.charAt(i) + \" code: \" + ch);\n\t\tif (ch >= 0) {\n\t\t\tnewState = currentState.s && currentState.s[ch];\n\n\t\t\tif (typeof(newState) === 'object') {\n\t\t\t\tif (typeof(newState.l) !== 'undefined') {\n\t\t\t\t\t// save for latter if needed\n\t\t\t\t\tlastLeaf = newState;\n\t\t\t\t\tconsumed = i;\n\t\t\t\t}\n\t\t\t\t// console.info(\"recognized digit \" + ch + \" continuing...\");\n\t\t\t\t// recognized digit, so continue parsing\n\t\t\t\tcurrentState = newState;\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tif ((typeof(newState) === 'undefined' || newState === 0 ||\n\t\t\t\t\t(typeof(newState) === 'object' && typeof(newState.l) === 'undefined')) &&\n\t\t\t\t\t lastLeaf) {\n\t\t\t\t\t// this is possibly a look-ahead and it didn't work...\n\t\t\t\t\t// so fall back to the last leaf and use that as the\n\t\t\t\t\t// final state\n\t\t\t\t\tnewState = lastLeaf;\n\t\t\t\t\ti = consumed;\n\t\t\t\t}\n\n\t\t\t\tif ((typeof(newState) === 'number' && newState) ||\n\t\t\t\t\t(typeof(newState) === 'object' && typeof(newState.l) !== 'undefined')) {\n\t\t\t\t\t// final state\n\t\t\t\t\tvar stateNumber = typeof(newState) === 'number' ? newState : newState.l;\n\t\t\t\t\thandlerMethod = ilib.PhoneNumber._states[stateNumber];\n\n\t\t\t\t\t// console.info(\"reached final state \" + newState + \" handler method is \" + handlerMethod + \" and i is \" + i);\n\n\t\t\t\t\t// deal with syntactic ambiguity by using the \"special\" end state instead of \"area\"\n\t\t\t\t\tif ( handlerMethod === \"area\" ) {\n\t\t\t\t\t\tend = i+1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// unrecognized imsi, so just assume the mnc is 3 digits\n\t\t\t\t\t\tend = 6;\n\t\t\t\t\t}\n\n\t\t\t\t\tfields.mcc = imsi.substring(0,3);\n\t\t\t\t\tfields.mnc = imsi.substring(3,end);\n\t\t\t\t\tfields.msin = imsi.substring(end);\n\n\t\t\t\t\treturn fields;\n\t\t\t\t} else {\n\t\t\t\t\t// parse error\n\t\t\t\t\tif (imsi.length >= 6) {\n\t\t\t\t\t\tfields.mcc = imsi.substring(0,3);\n\t\t\t\t\t\tfields.mnc = imsi.substring(3,6);\n\t\t\t\t\t\tfields.msin = imsi.substring(6);\n\t\t\t\t\t}\n\t\t\t\t\treturn fields;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (ch === -1) {\n\t\t\t// non-transition character, continue parsing in the same state\n\t\t\ti++;\n\t\t} else {\n\t\t\t// should not happen\n\t\t\t// console.info(\"skipping character \" + ch);\n\t\t\t// not a digit, plus, pound, or star, so this is probably a formatting char. Skip it.\n\t\t\ti++;\n\t\t}\n\t}\n\n\tif (i >= imsi.length && imsi.length >= 6) {\n\t\t// we reached the end of the imsi, but did not finish recognizing anything.\n\t\t// Default to last resort and assume 3 digit mnc\n\t\tfields.mcc = imsi.substring(0,3);\n\t\tfields.mnc = imsi.substring(3,6);\n\t\tfields.msin = imsi.substring(6);\n\t} else {\n\t\t// unknown or not enough characters for a real imsi\n\t\tfields = undefined;\n\t}\n\n\t// console.info(\"Globalization.Phone.parseImsi: final result is: \" + JSON.stringify(fields));\n\treturn fields;\n};\n\n/**\n * @static\n * @private\n */\nilib.PhoneNumber._stripFormatting = function(str) {\n\tvar ret = \"\";\n\tvar i;\n\n\tfor (i = 0; i < str.length; i++) {\n\t\tif (ilib.PhoneNumber._getCharacterCode(str.charAt(i)) >= -1) {\n\t\t\tret += str.charAt(i);\n\t\t}\n\t}\n\treturn ret;\n};\n\n/**\n * @static\n * @protected\n */\nilib.PhoneNumber._getCharacterCode = function(ch) {\n\tif (ch >= '0' && ch <= '9') {\n\t\t\treturn ch - '0';\n\t\t}\n\tswitch (ch) {\n\tcase '+':\n\t\treturn 10;\n\tcase '*':\n\t\treturn 11;\n\tcase '#':\n\t\treturn 12;\n\tcase '^':\n\t\treturn 13;\n\tcase 'p':\t\t// pause chars\n\tcase 'P':\n\tcase 't':\n\tcase 'T':\n\tcase 'w':\n\tcase 'W':\n\t\treturn -1;\n\tcase 'x':\n\tcase 'X':\n\tcase ',':\n\tcase ';':\t\t// extension char\n\t\treturn -1;\n\t}\n\treturn -2;\n};\n\n/**\n * @private\n */\nilib.PhoneNumber._states = [\n\t\"none\",\n\t\"unknown\",\n\t\"plus\",\n\t\"idd\",\n\t\"cic\",\n\t\"service\",\n\t\"cell\",\n\t\"area\",\n\t\"vsc\",\n\t\"country\",\n\t\"personal\",\n\t\"special\",\n\t\"trunk\",\n\t\"premium\",\n\t\"emergency\",\n\t\"service2\",\n\t\"service3\",\n\t\"service4\",\n\t\"cic2\",\n\t\"cic3\",\n\t\"start\",\n\t\"local\"\n];\n\n/**\n * @private\n */\nilib.PhoneNumber._fieldOrder = [\n\t\"vsc\",\n\t\"iddPrefix\",\n\t\"countryCode\",\n\t\"trunkAccess\",\n\t\"cic\",\n\t\"emergency\",\n\t\"mobilePrefix\",\n\t\"serviceCode\",\n\t\"areaCode\",\n\t\"subscriberNumber\",\n\t\"extension\"\n];\n\nilib.PhoneNumber._defaultStates = {\n\t\"s\": [\n        0,\n\t\t21,  // 1 -> local\n        21,  // 2 -> local\n        21,  // 3 -> local\n        21,  // 4 -> local\n        21,  // 5 -> local\n        21,  // 6 -> local\n        21,  // 7 -> local\n        21,  // 8 -> local\n        21,  // 9 -> local\n        0,0,0,\n\t    { // ^\n\t    \t\"s\": [\n\t\t\t\t{ // ^0\n\t\t\t\t\t\"s\": [3], // ^00 -> idd\n\t\t\t\t\t\"l\": 12   // ^0  -> trunk\n\t\t\t\t},\n\t\t\t\t21,  // ^1 -> local\n\t            21,  // ^2 -> local\n\t            21,  // ^3 -> local\n\t            21,  // ^4 -> local\n\t            21,  // ^5 -> local\n\t            21,  // ^6 -> local\n\t            21,  // ^7 -> local\n\t            21,  // ^8 -> local\n\t            21,  // ^9 -> local\n\t            2    // ^+ -> plus\n\t        ]\n\t    }\n\t]\n};\n\nilib.PhoneNumber.prototype = {\n\t/**\n\t * @protected\n\t * @param {string} number\n\t * @param {Object} regionData\n\t * @param {Object} options\n\t * @param {string} countryCode\n\t */\n\t_parseOtherCountry: function(number, regionData, options, countryCode) {\n\t\tnew ilib.Locale.PhoneLoc({\n\t\t\tlocale: this.locale,\n\t\t\tcountryCode: countryCode,\n\t\t\tsync: this.sync,\n\t\t\tloadParms: this.loadParams,\n\t\t\tonLoad: ilib.bind(this, function (loc) {\n\t\t\t\t/*\n\t\t\t\t * this.locale is the locale where this number is being parsed,\n\t\t\t\t * and is used to parse the IDD prefix, if any, and this.destinationLocale is\n\t\t\t\t * the locale of the rest of this number after the IDD prefix.\n\t\t\t\t */\n\t\t\t\t/** @type {ilib.Locale.PhoneLoc} */\n\t\t\t\tthis.destinationLocale = loc;\n\n\t\t\t\tilib.loadData({\n\t\t\t\t\tname: \"states.json\",\n\t\t\t\t\tobject: ilib.PhoneNumber,\n\t\t\t\t\tlocale: this.destinationLocale,\n\t\t\t\t\tsync: this.sync,\n\t\t\t\t\tloadParams: ilib.merge(this.loadParams, {\n\t\t\t\t\t\treturnOne: true\n\t\t\t\t\t}),\n\t\t\t\t\tcallback: ilib.bind(this, function (stateData) {\n\t\t\t\t\t\tif (!stateData) {\n\t\t\t\t\t\t\tstateData = ilib.PhoneNumber._defaultStates;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnew ilib.NumPlan({\n\t\t\t\t\t\t\tlocale: this.destinationLocale,\n\t\t\t\t\t\t\tsync: this.sync,\n\t\t\t\t\t\t\tloadParms: this.loadParams,\n\t\t\t\t\t\t\tonLoad: ilib.bind(this, function (plan) {\n\t\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t\t * this.plan is the plan where this number is being parsed,\n\t\t\t\t\t\t\t\t * and is used to parse the IDD prefix, if any, and this.destinationPlan is\n\t\t\t\t\t\t\t\t * the plan of the rest of this number after the IDD prefix in the\n\t\t\t\t\t\t\t\t * destination locale.\n\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t\t/** @type {ilib.NumPlan} */\n\t\t\t\t\t\t\t\tthis.destinationPlan = plan;\n\n\t\t\t\t\t\t\t\tvar regionSettings = {\n\t\t\t\t\t\t\t\t\tstateData: stateData,\n\t\t\t\t\t\t\t\t\tplan: plan,\n\t\t\t\t\t\t\t\t\thandler: ilib._handlerFactory(this.destinationLocale, plan)\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t// for plans that do not skip the trunk code when dialing from\n\t\t\t\t\t\t\t\t// abroad, we need to treat the number from here on in as if it\n\t\t\t\t\t\t\t\t// were parsing a local number from scratch. That way, the parser\n\t\t\t\t\t\t\t\t// does not get confused between parts of the number at the\n\t\t\t\t\t\t\t\t// beginning of the number, and parts in the middle.\n\t\t\t\t\t\t\t\tif (!plan.getSkipTrunk()) {\n\t\t\t\t\t\t\t\t\tnumber = '^' + number;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// recursively call the parser with the new states data\n\t\t\t\t\t\t\t\t// to finish the parsing\n\t\t\t\t\t\t\t\tthis._parseNumber(number, regionSettings, options);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t\t})\n\t\t});\n\t},\n\n\t/**\n\t * @protected\n\t * @param {string} number\n\t * @param {Object} regionData\n\t * @param {Object} options\n\t */\n\t_parseNumber: function(number, regionData, options) {\n\t\tvar i, ch,\n\t\t\tregionSettings,\n\t\t\tnewState,\n\t\t\tdot,\n\t\t\thandlerMethod,\n\t\t\tresult,\n\t\t\tcurrentState = regionData.stateData,\n\t\t\tlastLeaf = undefined,\n\t\t\tconsumed = 0;\n\n\t\tregionSettings = regionData;\n\t\tdot = 14; // special transition which matches all characters. See AreaCodeTableMaker.java\n\n\t\ti = 0;\n\t\twhile (i < number.length) {\n\t\t\tch = ilib.PhoneNumber._getCharacterCode(number.charAt(i));\n\t\t\tif (ch >= 0) {\n\t\t\t\t// newState = stateData.states[state][ch];\n\t\t\t\tnewState = currentState.s && currentState.s[ch];\n\n\t\t\t\tif (!newState && currentState.s && currentState.s[dot]) {\n\t\t\t\t\tnewState = currentState.s[dot];\n\t\t\t\t}\n\n\t\t\t\tif (typeof(newState) === 'object' && i+1 < number.length) {\n\t\t\t\t\tif (typeof(newState.l) !== 'undefined') {\n\t\t\t\t\t\t// this is a leaf node, so save that for later if needed\n\t\t\t\t\t\tlastLeaf = newState;\n\t\t\t\t\t\tconsumed = i;\n\t\t\t\t\t}\n\t\t\t\t\t// console.info(\"recognized digit \" + ch + \" continuing...\");\n\t\t\t\t\t// recognized digit, so continue parsing\n\t\t\t\t\tcurrentState = newState;\n\t\t\t\t\ti++;\n\t\t\t\t} else {\n\t\t\t\t\tif ((typeof(newState) === 'undefined' || newState === 0 ||\n\t\t\t\t\t\t(typeof(newState) === 'object' && typeof(newState.l) === 'undefined')) &&\n\t\t\t\t\t\t lastLeaf) {\n\t\t\t\t\t\t// this is possibly a look-ahead and it didn't work...\n\t\t\t\t\t\t// so fall back to the last leaf and use that as the\n\t\t\t\t\t\t// final state\n\t\t\t\t\t\tnewState = lastLeaf;\n\t\t\t\t\t\ti = consumed;\n\t\t\t\t\t\tconsumed = 0;\n\t\t\t\t\t\tlastLeaf = undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((typeof(newState) === 'number' && newState) ||\n\t\t\t\t\t\t(typeof(newState) === 'object' && typeof(newState.l) !== 'undefined')) {\n\t\t\t\t\t\t// final state\n\t\t\t\t\t\tvar stateNumber = typeof(newState) === 'number' ? newState : newState.l;\n\t\t\t\t\t\thandlerMethod = ilib.PhoneNumber._states[stateNumber];\n\n\t\t\t\t\t\tif (number.charAt(0) === '^') {\n\t\t\t\t\t\t\tresult = regionSettings.handler[handlerMethod](number.slice(1), i-1, this, regionSettings);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult = regionSettings.handler[handlerMethod](number, i, this, regionSettings);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// reparse whatever is left\n\t\t\t\t\t\tnumber = result.number;\n\t\t\t\t\t\ti = consumed = 0;\n\t\t\t\t\t\tlastLeaf = undefined;\n\n\t\t\t\t\t\t//console.log(\"reparsing with new number: \" +  number);\n\t\t\t\t\t\tcurrentState = regionSettings.stateData;\n\t\t\t\t\t\t// if the handler requested a special sub-table, use it for this round of parsing,\n\t\t\t\t\t\t// otherwise, set it back to the regular table to continue parsing\n\n\t\t\t\t\t\tif (result.countryCode !== undefined) {\n\t\t\t\t\t\t\tthis._parseOtherCountry(number, regionData, options, result.countryCode);\n\t\t\t\t\t\t\t// don't process any further -- let the work be done in the onLoad callbacks\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else if (result.table !== undefined) {\n\t\t\t\t\t\t\tilib.loadData({\n\t\t\t\t\t\t\t\tname: result.table + \".json\",\n\t\t\t\t\t\t\t\tobject: ilib.PhoneNumber,\n\t\t\t\t\t\t\t\tnonlocale: true,\n\t\t\t\t\t\t\t\tsync: this.sync,\n\t\t\t\t\t\t\t\tloadParams: this.loadParams,\n\t\t\t\t\t\t\t\tcallback: ilib.bind(this, function (data) {\n\t\t\t\t\t\t\t\t\tif (!data) {\n\t\t\t\t\t\t\t\t\t\tdata = ilib.PhoneNumber._defaultStates;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tregionSettings = {\n\t\t\t\t\t\t\t\t\t\tstateData: data,\n\t\t\t\t\t\t\t\t\t\tplan: regionSettings.plan,\n\t\t\t\t\t\t\t\t\t\thandler: regionSettings.handler\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t// recursively call the parser with the new states data\n\t\t\t\t\t\t\t\t\t// to finish the parsing\n\t\t\t\t\t\t\t\t\tthis._parseNumber(number, regionSettings, options);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t// don't process any further -- let the work be done in the onLoad callbacks\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else if (result.skipTrunk !== undefined) {\n\t\t\t\t\t\t\tch = ilib.PhoneNumber._getCharacterCode(regionSettings.plan.getTrunkCode());\n\t\t\t\t\t\t\tcurrentState = currentState.s && currentState.s[ch];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\thandlerMethod = (typeof(newState) === 'number') ? \"none\" : \"local\";\n\t\t\t\t\t\t// failed parse. Either no last leaf to fall back to, or there was an explicit\n\t\t\t\t\t\t// zero in the table. Put everything else in the subscriberNumber field as the\n\t\t\t\t\t\t// default place\n\t\t\t\t\t\tif (number.charAt(0) === '^') {\n\t\t\t\t\t\t\tresult = regionSettings.handler[handlerMethod](number.slice(1), i-1, this, regionSettings);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult = regionSettings.handler[handlerMethod](number, i, this, regionSettings);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (ch === -1) {\n\t\t\t\t// non-transition character, continue parsing in the same state\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\t// should not happen\n\t\t\t\t// console.info(\"skipping character \" + ch);\n\t\t\t\t// not a digit, plus, pound, or star, so this is probably a formatting char. Skip it.\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\tif (i >= number.length && currentState !== regionData.stateData) {\n\t\t\thandlerMethod = (typeof(currentState.l) === 'undefined' || currentState === 0) ? \"none\" : \"local\";\n\t\t\t// we reached the end of the phone number, but did not finish recognizing anything.\n\t\t\t// Default to last resort and put everything that is left into the subscriber number\n\t\t\t//console.log(\"Reached end of number before parsing was complete. Using handler for method none.\")\n\t\t\tif (number.charAt(0) === '^') {\n\t\t\t\tresult = regionSettings.handler[handlerMethod](number.slice(1), i-1, this, regionSettings);\n\t\t\t} else {\n\t\t\t\tresult = regionSettings.handler[handlerMethod](number, i, this, regionSettings);\n\t\t\t}\n\t\t}\n\n\t\t// let the caller know we are done parsing\n\t\tif (this.onLoad) {\n\t\t\tthis.onLoad(this);\n\t\t}\n\t},\n\t/**\n\t * @protected\n\t */\n\t_getPrefix: function() {\n\t\treturn this.areaCode || this.serviceCode || this.mobilePrefix || \"\";\n\t},\n\n\t/**\n\t * @protected\n\t */\n\t_hasPrefix: function() {\n\t\treturn (this._getPrefix() !== \"\");\n\t},\n\n\t/**\n\t * Exclusive or -- return true, if one is defined and the other isn't\n\t * @protected\n\t */\n\t_xor : function(left, right) {\n\t\tif ((left === undefined && right === undefined ) || (left !== undefined && right !== undefined)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t},\n\n\t/**\n\t * return a version of the phone number that contains only the dialable digits in the correct order\n\t * @protected\n\t */\n\t_join: function () {\n\t\tvar fieldName, formatted = \"\";\n\n\t\ttry {\n\t\t\tfor (var field in ilib.PhoneNumber._fieldOrder) {\n\t\t\t\tif (typeof field === 'string' && typeof ilib.PhoneNumber._fieldOrder[field] === 'string') {\n\t\t\t\t\tfieldName = ilib.PhoneNumber._fieldOrder[field];\n\t\t\t\t\t// console.info(\"normalize: formatting field \" + fieldName);\n\t\t\t\t\tif (this[fieldName] !== undefined) {\n\t\t\t\t\t\tformatted += this[fieldName];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch ( e ) {\n\t\t\t//console.warn(\"caught exception in _join: \" + e);\n\t\t\tthrow e;\n\t\t}\n\t\treturn formatted;\n\t},\n\n\t/**\n\t * This routine will compare the two phone numbers in an locale-sensitive\n\t * manner to see if they possibly reference the same phone number.<p>\n\t *\n\t * In many places,\n\t * there are multiple ways to reach the same phone number. In North America for\n\t * example, you might have a number with the trunk access code of \"1\" and another\n\t * without, and they reference the exact same phone number. This is considered a\n\t * strong match. For a different pair of numbers, one may be a local number and\n\t * the other a full phone number with area code, which may reference the same\n\t * phone number if the local number happens to be located in that area code.\n\t * However, you cannot say for sure if it is in that area code, so it will\n\t * be considered a somewhat weaker match.<p>\n\t *\n\t * Similarly, in other countries, there are sometimes different ways of\n\t * reaching the same destination, and the way that numbers\n\t * match depends on the locale.<p>\n\t *\n\t * The various phone number fields are handled differently for matches. There\n\t * are various fields that do not need to match at all. For example, you may\n\t * type equally enter \"00\" or \"+\" into your phone to start international direct\n\t * dialling, so the iddPrefix field does not need to match at all.<p>\n\t *\n\t * Typically, fields that require matches need to match exactly if both sides have a value\n\t * for that field. If both sides specify a value and those values differ, that is\n\t * a strong non-match. If one side does not have a value and the other does, that\n\t * causes a partial match, because the number with the missing field may possibly\n\t * have an implied value that matches the other number. For example, the numbers\n\t * \"650-555-1234\" and \"555-1234\" have a partial match as the local number \"555-1234\"\n\t * might possibly have the same 650 area code as the first number, and might possibly\n\t * not. If both side do not specify a value for a particular field, that field is\n\t * considered matching.<p>\n\t *\n\t * The values of following fields are ignored when performing matches:\n\t *\n\t * <ul>\n\t * <li>vsc\n\t * <li>iddPrefix\n\t * <li>cic\n\t * <li>trunkAccess\n\t * </ul>\n\t *\n\t * The values of the following fields matter if they do not match:\n\t *\n\t * <ul>\n\t * <li>countryCode - A difference causes a moderately strong problem except for\n\t * certain countries where there is a way to access the same subscriber via IDD\n\t * and via intranetwork dialling\n\t * <li>mobilePrefix - A difference causes a possible non-match\n\t * <li>serviceCode - A difference causes a possible non-match\n\t * <li>areaCode - A difference causes a possible non-match\n\t * <li>subscriberNumber - A difference causes a very strong non-match\n\t * <li>extension - A difference causes a minor non-match\n\t * </ul>\n\t *\n\t * @param {string|ilib.PhoneNumber} other other phone number to compare this one to\n\t * @return {number} non-negative integer describing the percentage quality of the\n\t * match. 100 means a very strong match (100%), and lower numbers are less and\n\t * less strong, down to 0 meaning not at all a match.\n\t */\n\tcompare: function (other) {\n\t\tvar match = 100,\n\t\t\tFRdepartments = {\"590\":1, \"594\":1, \"596\":1, \"262\":1},\n\t\t\tITcountries = {\"378\":1, \"379\":1},\n\t\t\tthisPrefix,\n\t\t\totherPrefix,\n\t\t\tcurrentCountryCode = 0;\n\n\t\tif (typeof this.locale.region === \"string\") {\n\t\t\tcurrentCountryCode = this.locale._mapRegiontoCC(this.locale.region);\n\t\t}\n\n\t\t// subscriber number must be present and must match\n\t\tif (!this.subscriberNumber || !other.subscriberNumber || this.subscriberNumber !== other.subscriberNumber) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// extension must match if it is present\n\t\tif (this._xor(this.extension, other.extension) || this.extension !== other.extension) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tif (this._xor(this.countryCode, other.countryCode)) {\n\t\t\t// if one doesn't have a country code, give it some demerit points, but if the\n\t\t\t// one that has the country code has something other than the current country\n\t\t\t// add even more. Ignore the special cases where you can dial the same number internationally or via\n\t\t\t// the local numbering system\n\t\t\tswitch (this.locale.getRegion()) {\n\t\t\tcase 'FR':\n\t\t\t\tif (this.countryCode in FRdepartments || other.countryCode in FRdepartments) {\n\t\t\t\t\tif (this.areaCode !== other.areaCode || this.mobilePrefix !== other.mobilePrefix) {\n\t\t\t\t\t\tmatch -= 100;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tmatch -= 16;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'IT':\n\t\t\t\tif (this.countryCode in ITcountries || other.countryCode in ITcountries) {\n\t\t\t\t\tif (this.areaCode !== other.areaCode) {\n\t\t\t\t\t\tmatch -= 100;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tmatch -= 16;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tmatch -= 16;\n\t\t\t\tif ((this.countryCode !== undefined && this.countryCode !== currentCountryCode) ||\n\t\t\t\t\t(other.countryCode !== undefined && other.countryCode !== currentCountryCode)) {\n\t\t\t\t\tmatch -= 16;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (this.countryCode !== other.countryCode) {\n\t\t\t// ignore the special cases where you can dial the same number internationally or via\n\t\t\t// the local numbering system\n\t\t\tif (other.countryCode === '33' || this.countryCode === '33') {\n\t\t\t\t// france\n\t\t\t\tif (this.countryCode in FRdepartments || other.countryCode in FRdepartments) {\n\t\t\t\t\tif (this.areaCode !== other.areaCode || this.mobilePrefix !== other.mobilePrefix) {\n\t\t\t\t\t\tmatch -= 100;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tmatch -= 100;\n\t\t\t\t}\n\t\t\t} else if (this.countryCode === '39' || other.countryCode === '39') {\n\t\t\t\t// italy\n\t\t\t\tif (this.countryCode in ITcountries || other.countryCode in ITcountries) {\n\t\t\t\t\tif (this.areaCode !== other.areaCode) {\n\t\t\t\t\t\tmatch -= 100;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tmatch -= 100;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmatch -= 100;\n\t\t\t}\n\t\t}\n\n\t\tif (this._xor(this.serviceCode, other.serviceCode)) {\n\t\t\tmatch -= 20;\n\t\t} else if (this.serviceCode !== other.serviceCode) {\n\t\t\tmatch -= 100;\n\t\t}\n\n\t\tif (this._xor(this.mobilePrefix, other.mobilePrefix)) {\n\t\t\tmatch -= 20;\n\t\t} else if (this.mobilePrefix !== other.mobilePrefix) {\n\t\t\tmatch -= 100;\n\t\t}\n\n\t\tif (this._xor(this.areaCode, other.areaCode)) {\n\t\t\t// one has an area code, the other doesn't, so dock some points. It could be a match if the local\n\t\t\t// number in the one number has the same implied area code as the explicit area code in the other number.\n\t\t\tmatch -= 12;\n\t\t} else if (this.areaCode !== other.areaCode) {\n\t\t\tmatch -= 100;\n\t\t}\n\n\t\tthisPrefix = this._getPrefix();\n\t\totherPrefix = other._getPrefix();\n\n\t\tif (thisPrefix && otherPrefix && thisPrefix !== otherPrefix) {\n\t\t\tmatch -= 100;\n\t\t}\n\n\t\t// make sure we are between 0 and 100\n\t\tif (match < 0) {\n\t\t\tmatch = 0;\n\t\t} else if (match > 100) {\n\t\t\tmatch = 100;\n\t\t}\n\n\t\treturn match;\n\t},\n\n\t/**\n\t * Determine whether or not the other phone number is exactly equal to the current one.<p>\n\t *\n\t * The difference between the compare method and the equals method is that the compare\n\t * method compares normalized numbers with each other and returns the degree of match,\n\t * whereas the equals operator returns true iff the two numbers contain the same fields\n\t * and the fields are exactly the same. Functions and other non-phone number properties\n\t * are not compared.\n\t * @param {string|ilib.PhoneNumber} other another phone number to compare to this one\n\t * @return {boolean} true if the numbers are the same, false otherwise\n\t */\n\tequals: function equals(other) {\n\t\tif (other.locale && this.locale && !this.locale.equals(other.locale) && (!this.countryCode || !other.countryCode)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (var p in other) {\n\t\t\tif (p !== undefined && this[p] !== undefined && typeof(this[p]) !== 'object') {\n\t\t\t\tif (other[p] === undefined) {\n\t\t\t\t\t/*console.error(\"PhoneNumber.equals: other is missing property \" + p + \" which has the value \" + this[p] + \" in this\");\n\t\t\t\t\tconsole.error(\"this is : \" + JSON.stringify(this));\n\t\t\t\t\tconsole.error(\"other is: \" + JSON.stringify(other));*/\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (this[p] !== other[p]) {\n\t\t\t\t\t/*console.error(\"PhoneNumber.equals: difference in property \" + p);\n\t\t\t\t\tconsole.error(\"this is : \" + JSON.stringify(this));\n\t\t\t\t\tconsole.error(\"other is: \" + JSON.stringify(other));*/\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (var p in other) {\n\t\t\tif (p !== undefined && other[p] !== undefined && typeof(other[p]) !== 'object') {\n\t\t\t\tif (this[p] === undefined) {\n\t\t\t\t\t/*console.error(\"PhoneNumber.equals: this is missing property \" + p + \" which has the value \" + other[p] + \" in the other\");\n\t\t\t\t\tconsole.error(\"this is : \" + JSON.stringify(this));\n\t\t\t\t\tconsole.error(\"other is: \" + JSON.stringify(other));*/\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (this[p] !== other[p]) {\n\t\t\t\t\t/*console.error(\"PhoneNumber.equals: difference in property \" + p);\n\t\t\t\t\tconsole.error(\"this is : \" + JSON.stringify(this));\n\t\t\t\t\tconsole.error(\"other is: \" + JSON.stringify(other));*/\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t},\n\n\n\t/**\n\t * @private\n\t * @param {{\n\t *   mcc:string,\n\t *   defaultAreaCode:string,\n\t *   country:string,\n\t *   networkType:string,\n\t *   assistedDialing:boolean,\n\t *   sms:boolean,\n\t *   manualDialing:boolean\n\t * }} options an object containing options to help in normalizing.\n\t * @param {ilib.PhoneNumber} norm\n\t * @param {ilib.Locale.PhoneLoc} homeLocale\n\t * @param {ilib.Locale.PhoneLoc} currentLocale\n\t * @param {ilib.NumPlan} currentPlan\n\t * @param {ilib.Locale.PhoneLoc} destinationLocale\n\t * @param {ilib.NumPlan} destinationPlan\n\t * @param {boolean} sync\n\t * @param {Object|undefined} loadParams\n\t */\n\t_doNormalize: function(options, norm, homeLocale, currentLocale, currentPlan, destinationLocale, destinationPlan, sync, loadParams) {\n\t\tvar formatted = \"\";\n\n\t\tif (!norm.invalid && options && options.assistedDialing) {\n\t\t\t// don't normalize things that don't have subscriber numbers. Also, don't normalize\n\t\t\t// manually dialed local numbers. Do normalize local numbers in contact entries.\n\t\t\tif (norm.subscriberNumber &&\n\t\t\t\t\t(!options.manualDialing ||\n\t\t\t\t\t norm.iddPrefix ||\n\t\t\t\t\t norm.countryCode ||\n\t\t\t\t\t norm.trunkAccess)) {\n\t\t\t\t// console.log(\"normalize: assisted dialling normalization of \" + JSON.stringify(norm));\n\t\t\t\tif (currentLocale.getRegion() !== destinationLocale.getRegion()) {\n\t\t\t\t\t// we are currently calling internationally\n\t\t\t\t\tif (!norm._hasPrefix() &&\n\t\t\t\t\t\t\toptions.defaultAreaCode &&\n\t\t\t\t\t\t\tdestinationLocale.getRegion() === homeLocale.getRegion() &&\n\t\t\t\t\t\t\t(!destinationPlan.getFieldLength(\"minLocalLength\") ||\n\t\t\t\t\t\t\t\tnorm.subscriberNumber.length >= destinationPlan.getFieldLength(\"minLocalLength\"))) {\n\t\t\t\t\t\t// area code is required when dialling from international, but only add it if we are dialing\n\t\t\t\t\t\t// to our home area. Otherwise, the default area code is not valid!\n\t\t\t\t\t\tnorm.areaCode = options.defaultAreaCode;\n\t\t\t\t\t\tif (!destinationPlan.getSkipTrunk() && destinationPlan.getTrunkCode()) {\n\t\t\t\t\t\t\t// some phone systems require the trunk access code, even when dialling from international\n\t\t\t\t\t\t\tnorm.trunkAccess = destinationPlan.getTrunkCode();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (norm.trunkAccess && destinationPlan.getSkipTrunk()) {\n\t\t\t\t\t\t// on some phone systems, the trunk access code is dropped when dialling from international\n\t\t\t\t\t\tdelete norm.trunkAccess;\n\t\t\t\t\t}\n\n\t\t\t\t\t// make sure to get the country code for the destination region, not the current region!\n\t\t\t\t\tif (options.sms) {\n\t\t\t\t\t\tif (homeLocale.getRegion() === \"US\" && currentLocale.getRegion() !== \"US\") {\n\t\t\t\t\t\t\tif (destinationLocale.getRegion() !== \"US\") {\n\t\t\t\t\t\t\t\tnorm.iddPrefix = \"011\"; // non-standard code to make it go through the US first\n\t\t\t\t\t\t\t\tnorm.countryCode = norm.countryCode || homeLocale._mapRegiontoCC(destinationLocale.getRegion());\n\t\t\t\t\t\t\t} else if (options.networkType === \"cdma\") {\n\t\t\t\t\t\t\t\tdelete norm.iddPrefix;\n\t\t\t\t\t\t\t\tdelete norm.countryCode;\n\t\t\t\t\t\t\t\tif (norm.areaCode) {\n\t\t\t\t\t\t\t\t\tnorm.trunkAccess = \"1\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (norm.areaCode) {\n\t\t\t\t\t\t\t\tnorm.iddPrefix = \"+\";\n\t\t\t\t\t\t\t\tnorm.countryCode = \"1\";\n\t\t\t\t\t\t\t\tdelete norm.trunkAccess;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnorm.iddPrefix = (options.networkType === \"cdma\") ? currentPlan.getIDDCode() : \"+\";\n\t\t\t\t\t\t\tnorm.countryCode = norm.countryCode || homeLocale._mapRegiontoCC(destinationLocale.region);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (norm._hasPrefix() && !norm.countryCode) {\n\t\t\t\t\t\tnorm.countryCode = homeLocale._mapRegiontoCC(destinationLocale.region);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (norm.countryCode && !options.sms) {\n\t\t\t\t\t\t// for CDMA, make sure to get the international dialling access code for the current region, not the destination region\n\t\t\t\t\t\t// all umts carriers support plus dialing\n\t\t\t\t\t\tnorm.iddPrefix = (options.networkType === \"cdma\") ? currentPlan.getIDDCode() : \"+\";\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// console.log(\"normalize: dialing within the country\");\n\t\t\t\t\tif (options.defaultAreaCode) {\n\t\t\t\t\t\tif (destinationPlan.getPlanStyle() === \"open\") {\n\t\t\t\t\t\t\tif (!norm.trunkAccess && norm._hasPrefix() && destinationPlan.getTrunkCode()) {\n\t\t\t\t\t\t\t\t// call is not local to this area code, so you have to dial the trunk code and the area code\n\t\t\t\t\t\t\t\tnorm.trunkAccess = destinationPlan.getTrunkCode();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// In closed plans, you always have to dial the area code, even if the call is local.\n\t\t\t\t\t\t\tif (!norm._hasPrefix()) {\n\t\t\t\t\t\t\t\tif (destinationLocale.getRegion() === homeLocale.getRegion()) {\n\t\t\t\t\t\t\t\t\tnorm.areaCode = options.defaultAreaCode;\n\t\t\t\t\t\t\t\t\tif (destinationPlan.getTrunkRequired() && destinationPlan.getTrunkCode()) {\n\t\t\t\t\t\t\t\t\t\tnorm.trunkAccess = norm.trunkAccess || destinationPlan.getTrunkCode();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (destinationPlan.getTrunkRequired() && destinationPlan.getTrunkCode()) {\n\t\t\t\t\t\t\t\t\tnorm.trunkAccess = norm.trunkAccess || destinationPlan.getTrunkCode();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (options.sms &&\n\t\t\t\t\t\t\thomeLocale.getRegion() === \"US\" &&\n\t\t\t\t\t\t\tcurrentLocale.getRegion() !== \"US\") {\n\t\t\t\t\t\tnorm.iddPrefix = \"011\"; // make it go through the US first\n\t\t\t\t\t\tif (destinationPlan.getSkipTrunk() && norm.trunkAccess) {\n\t\t\t\t\t\t\tdelete norm.trunkAccess;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (norm.iddPrefix || norm.countryCode) {\n\t\t\t\t\t\t// we are in our destination country, so strip the international dialling prefixes\n\t\t\t\t\t\tdelete norm.iddPrefix;\n\t\t\t\t\t\tdelete norm.countryCode;\n\n\t\t\t\t\t\tif ((destinationPlan.getPlanStyle() === \"open\" || destinationPlan.getTrunkRequired()) && destinationPlan.getTrunkCode()) {\n\t\t\t\t\t\t\tnorm.trunkAccess = destinationPlan.getTrunkCode();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!norm.invalid) {\n\t\t\t// console.log(\"normalize: non-assisted normalization\");\n\t\t\tif (!norm._hasPrefix() && options && options.defaultAreaCode && destinationLocale.getRegion() === homeLocale.region) {\n\t\t\t\tnorm.areaCode = options.defaultAreaCode;\n\t\t\t}\n\n\t\t\tif (!norm.countryCode && norm._hasPrefix()) {\n\t\t\t\tnorm.countryCode = homeLocale._mapRegiontoCC(destinationLocale.getRegion());\n\t\t\t}\n\n\t\t\tif (norm.countryCode) {\n\t\t\t\tif (options && options.networkType && options.networkType === \"cdma\") {\n\t\t\t\t\tnorm.iddPrefix = currentPlan.getIDDCode();\n\t\t\t\t} else {\n\t\t\t\t\t// all umts carriers support plus dialing\n\t\t\t\t\tnorm.iddPrefix = \"+\";\n\t\t\t\t}\n\n\t\t\t\tif (destinationPlan.getSkipTrunk() && norm.trunkAccess) {\n\t\t\t\t\tdelete norm.trunkAccess;\n\t\t\t\t} else if (!destinationPlan.getSkipTrunk() && !norm.trunkAccess && destinationPlan.getTrunkCode()) {\n\t\t\t\t\tnorm.trunkAccess = destinationPlan.getTrunkCode();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// console.info(\"normalize: after normalization, the normalized phone number is: \" + JSON.stringify(norm));\n\t\tformatted = norm._join();\n\n\t\treturn formatted;\n\t},\n\n\t/**\n\t * @private\n\t * @param {{\n\t *   mcc:string,\n\t *   defaultAreaCode:string,\n\t *   country:string,\n\t *   networkType:string,\n\t *   assistedDialing:boolean,\n\t *   sms:boolean,\n\t *   manualDialing:boolean\n\t * }} options an object containing options to help in normalizing.\n\t * @param {ilib.PhoneNumber} norm\n\t * @param {ilib.Locale.PhoneLoc} homeLocale\n\t * @param {ilib.Locale.PhoneLoc} currentLocale\n\t * @param {ilib.NumPlan} currentPlan\n\t * @param {ilib.Locale.PhoneLoc} destinationLocale\n\t * @param {ilib.NumPlan} destinationPlan\n\t * @param {boolean} sync\n\t * @param {Object|undefined} loadParams\n\t * @param {function(string)} callback\n\t */\n\t_doReparse: function(options, norm, homeLocale, currentLocale, currentPlan, destinationLocale, destinationPlan, sync, loadParams, callback) {\n\t\tvar formatted,\n\t\t\ttempRegion;\n\n\t\tif (options &&\n\t\t\t\toptions.assistedDialing &&\n\t\t\t\t!norm.trunkAccess &&\n\t\t\t\t!norm.iddPrefix &&\n\t\t\t\tnorm.subscriberNumber &&\n\t\t\t\tnorm.subscriberNumber.length > destinationPlan.getFieldLength(\"maxLocalLength\")) {\n\n\t\t\t// numbers that are too long are sometimes international direct dialed numbers that\n\t\t\t// are missing the IDD prefix. So, try reparsing it using a plus in front to see if that works.\n\t\t\tnew ilib.PhoneNumber(\"+\" + this._join(), {\n\t\t\t\tlocale: this.locale,\n\t\t\t\tsync: sync,\n\t\t\t\tloadParms: loadParams,\n\t\t\t\tonLoad: ilib.bind(this, function (data) {\n\t\t\t\t\ttempRegion = (data.countryCode && data.locale._mapCCtoRegion(data.countryCode));\n\n\t\t\t\t\tif (tempRegion && tempRegion !== \"unknown\" && tempRegion !== \"SG\") {\n\t\t\t\t\t\t// only use it if it is a recognized country code. Singapore (SG) is a special case.\n\t\t\t\t\t\tnorm = data;\n\t\t\t\t\t\tdestinationLocale = data.destinationLocale;\n\t\t\t\t\t\tdestinationPlan = data.destinationPlan;\n\t\t\t\t\t}\n\n\t\t\t\t\tformatted = this._doNormalize(options, norm, homeLocale, currentLocale, currentPlan, destinationLocale, destinationPlan, sync, loadParams);\n\t\t\t\t\tif (typeof(callback) === 'function') {\n\t\t\t\t\t\tcallback(formatted);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t});\n\t\t} else if (options && options.assistedDialing && norm.invalid && currentLocale.region !== norm.locale.region) {\n\t\t\t// if this number is not valid for the locale it was parsed with, try again with the current locale\n\t\t\t// console.log(\"norm is invalid. Attempting to reparse with the current locale\");\n\n\t\t\tnew ilib.PhoneNumber(this._join(), {\n\t\t\t\tlocale: currentLocale,\n\t\t\t\tsync: sync,\n\t\t\t\tloadParms: loadParams,\n\t\t\t\tonLoad: ilib.bind(this, function (data) {\n\t\t\t\t\tif (data && !data.invalid) {\n\t\t\t\t\t\tnorm = data;\n\t\t\t\t\t}\n\n\t\t\t\t\tformatted = this._doNormalize(options, norm, homeLocale, currentLocale, currentPlan, destinationLocale, destinationPlan, sync, loadParams);\n\t\t\t\t\tif (typeof(callback) === 'function') {\n\t\t\t\t\t\tcallback(formatted);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t});\n\t\t} else {\n\t\t\tformatted = this._doNormalize(options, norm, homeLocale, currentLocale, currentPlan, destinationLocale, destinationPlan, sync, loadParams);\n\t\t\tif (typeof(callback) === 'function') {\n\t\t\t\tcallback(formatted);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * This function normalizes the current phone number to a canonical format and returns a\n\t * string with that phone number. If parts are missing, this function attempts to fill in\n\t * those parts.<p>\n\t *\n\t * The options object contains a set of properties that can possibly help normalize\n\t * this number by providing \"extra\" information to the algorithm. The options\n\t * parameter may be null or an empty object if no hints can be determined before\n\t * this call is made. If any particular hint is not\n\t * available, it does not need to be present in the options object.<p>\n\t *\n\t * The following is a list of hints that the algorithm will look for in the options\n\t * object:\n\t *\n\t * <ul>\n\t * <li><i>mcc</i> the mobile carrier code of the current network upon which this\n\t * phone is operating. This is translated into an IDD country code. This is\n\t * useful if the number being normalized comes from CNAP (callerid) and the\n\t * MCC is known.\n\t * <li><i>defaultAreaCode</i> the area code of the phone number of the current\n\t * device, if available. Local numbers in a person's contact list are most\n\t * probably in this same area code.\n\t * <li><i>country</i> the 2 letter ISO 3166 code of the country if it is\n\t * known from some other means such as parsing the physical address of the\n\t * person associated with the phone number, or the from the domain name\n\t * of the person's email address\n\t * <li><i>networkType</i> specifies whether the phone is currently connected to a\n\t * CDMA network or a UMTS network. Valid values are the strings \"cdma\" and \"umts\".\n\t * If one of those two strings are not specified, or if this property is left off\n\t * completely, this method will assume UMTS.\n\t * </ul>\n\t *\n\t * The following are a list of options that control the behaviour of the normalization:\n\t *\n\t * <ul>\n\t * <li><i>assistedDialing</i> if this is set to true, the number will be normalized\n\t * so that it can dialled directly on the type of network this phone is\n\t * currently connected to. This allows customers to dial numbers or use numbers\n\t * in their contact list that are specific to their \"home\" region when they are\n\t * roaming and those numbers would not otherwise work with the current roaming\n\t * carrier as they are. The home region is\n\t * specified as the phoneRegion system preference that is settable in the\n\t * regional settings app. With assisted dialling, this method will add or\n\t * remove international direct dialling prefixes and country codes, as well as\n\t * national trunk access codes, as required by the current roaming carrier and the\n\t * home region in order to dial the number properly. If it is not possible to\n\t * construct a full international dialling sequence from the options and hints given,\n\t * this function will not modify the phone number, and will return \"undefined\".\n\t * If assisted dialling is false or not specified, then this method will attempt\n\t * to add all the information it can to the number so that it is as fully\n\t * specified as possible. This allows two numbers to be compared more easily when\n\t * those two numbers were otherwise only partially specified.\n\t * <li><i>sms</i> set this option to true for the following conditions:\n\t *   <ul>\n\t *   <li>assisted dialing is turned on\n\t *   <li>the phone number represents the destination of an SMS message\n\t *   <li>the phone is UMTS\n\t *   <li>the phone is SIM-locked to its carrier\n\t *   </ul>\n\t * This enables special international direct dialling codes to route the SMS message to\n\t * the correct carrier. If assisted dialling is not turned on, this option has no\n\t * affect.\n\t * <li><i>manualDialing</i> set this option to true if the user is entering this number on\n\t * the keypad directly, and false when the number comes from a stored location like a\n\t * contact entry or a call log entry. When true, this option causes the normalizer to\n\t * not perform any normalization on numbers that look like local numbers in the home\n\t * country. If false, all numbers go through normalization. This option only has an effect\n\t * when the assistedDialing option is true as well, otherwise it is ignored.\n\t * </ul>\n\t *\n\t * If both a set of options and a locale are given, and they offer conflicting\n\t * information, the options will take precedence. The idea is that the locale\n\t * tells you the region setting that the user has chosen (probably in\n\t * firstuse), whereas the the hints are more current information such as\n\t * where the phone is currently operating (the MCC).<p>\n\t *\n\t * This function performs the following types of normalizations with assisted\n\t * dialling turned on:\n\t *\n\t * <ol>\n\t * <li>If the current location of the phone matches the home country, this is a\n\t * domestic call.\n\t *   <ul>\n\t *   <li>Remove any iddPrefix and countryCode fields, as they are not needed\n\t *   <li>Add in a trunkAccess field that may be necessary to call a domestic numbers\n\t *     in the home country\n\t *   </ul>\n\t * <li> If the current location of the phone does not match the home country,\n\t * attempt to form a whole international number.\n\t *   <ul>\n\t *   <li>Add in the area code if it is missing from the phone number and the area code\n\t *     of the current phone is available in the hints\n\t *   <li>Add the country dialling code for the home country if it is missing from the\n\t *     phone number\n\t *   <li>Add or replace the iddPrefix with the correct one for the current country. The\n\t *     phone number will have been parsed with the settings for the home country, so\n\t *     the iddPrefix may be incorrect for the\n\t *     current country. The iddPrefix for the current country can be \"+\" if the phone\n\t *     is connected to a UMTS network, and either a \"+\" or a country-dependent\n\t *     sequences of digits for CDMA networks.\n\t *   </ul>\n\t * </ol>\n\t *\n\t * This function performs the following types of normalization with assisted\n\t * dialling turned off:\n\t *\n\t * <ul>\n\t * <li>Normalize the international direct dialing prefix to be a plus or the\n\t * international direct dialling access code for the current country, depending\n\t * on the network type.\n\t * <li>If a number is a local number (ie. it is missing its area code),\n\t * use a default area code from the hints if available. CDMA phones always know their area\n\t * code, and GSM/UMTS phones know their area code in many instances, but not always\n\t * (ie. not on Vodaphone or Telcel phones). If the default area code is not available,\n\t * do not add it.\n\t * <li>In assisted dialling mode, if a number is missing its country code,\n\t * use the current MCC number if\n\t * it is available to figure out the current country code, and prepend that\n\t * to the number. If it is not available, leave it off. Also, use that\n\t * country's settings to parse the number instead of the current format\n\t * locale.\n\t * <li>For North American numbers with an area code but no trunk access\n\t * code, add in the trunk access code.\n\t * <li>For other countries, if the country code is added in step 3, remove the\n\t * trunk access code when required by that country's conventions for\n\t * international calls. If the country requires a trunk access code for\n\t * international calls and it doesn't exist, add one.\n\t * </ul>\n\t *\n\t * This method modifies the current object, and also returns a string\n\t * containing the normalized phone number that can be compared directly against\n\t * other normalized numbers. The canonical format for phone numbers that is\n\t * returned from thhomeLocaleis method is simply an uninterrupted and unformatted string\n\t * of dialable digits.\n\t *\n\t * @param {{\n\t *   mcc:string,\n\t *   defaultAreaCode:string,\n\t *   country:string,\n\t *   networkType:string,\n\t *   assistedDialing:boolean,\n\t *   sms:boolean,\n\t *   manualDialing:boolean\n\t * }} options an object containing options to help in normalizing.\n\t * @return {string|undefined} the normalized string, or undefined if the number\n\t * could not be normalized\n\t */\n\tnormalize: function(options) {\n\t\tvar norm,\n\t\t\tsync = true,\n\t\t\tloadParams = {};\n\n\n\t\tif (options) {\n\t\t\tif (typeof(options.sync) !== 'undefined') {\n\t\t\t\tsync = (options.sync == true);\n\t\t\t}\n\n\t\t\tif (options.loadParams) {\n\t\t\t\tloadParams = options.loadParams;\n\t\t\t}\n\t\t}\n\n\t\t// Clone this number, so we don't mess with the original.\n\t\t// No need to do this asynchronously because it's a copy constructor which doesn't\n\t\t// load any extra files.\n\t\tnorm = new ilib.PhoneNumber(this);\n\n\t\tvar normalized;\n\n\t\tif (options && (typeof(options.mcc) !== 'undefined' || typeof(options.country) !== 'undefined')) {\n\t\t\tnew ilib.Locale.PhoneLoc({\n\t\t\t\tmcc: options.mcc,\n\t\t\t\tcountryCode: options.countryCode,\n\t\t\t\tlocale: this.locale,\n\t\t\t\tsync: sync,\n\t\t\t\tloadParams: loadParams,\n\t\t\t\tonLoad: ilib.bind(this, function(loc) {\n\t\t\t\t\tnew ilib.NumPlan({\n\t\t\t\t\t\tlocale: loc,\n\t\t\t\t\t\tsync: sync,\n\t\t\t\t\t\tloadParms: loadParams,\n\t\t\t\t\t\tonLoad: ilib.bind(this, function (plan) {\n\t\t\t\t\t\t\tthis._doReparse(options, norm, this.locale, loc, plan, this.destinationLocale, this.destinationPlan, sync, loadParams, function (fmt) {\n\t\t\t\t\t\t\t\tnormalized = fmt;\n\n\t\t\t\t\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\t\t\t\t\t\toptions.onLoad(fmt);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t})\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t});\n\t\t} else {\n\t\t\tthis._doReparse(options, norm, this.locale, this.locale, this.plan, this.destinationLocale, this.destinationPlan, sync, loadParams, function (fmt) {\n\t\t\t\tnormalized = fmt;\n\n\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\t\toptions.onLoad(fmt);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// return the value for the synchronous case\n\t\treturn normalized;\n\t}\n};\n/*\n * phonefmt.js - Represent a phone number formatter.\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n!depends\nilibglobal.js\nlocale.js\nlocaleinfo.js\nphone/numplan.js\nphone/phonenum.js\n*/\n\n// !data phonefmt\n\n/**\n * @class\n * Create a new phone number formatter object that formats numbers according to the parameters.<p>\n *\n * The options object can contain zero or more of the following parameters:\n *\n * <ul>\n * <li><i>locale</i> locale to use to format this number, or undefined to use the default locale\n * <li><i>style</i> the name of style to use to format numbers, or undefined to use the default style\n * <li><i>mcc</i> the MCC of the country to use if the number is a local number and the country code is not known\n *\n * <li><i>onLoad</i> - a callback function to call when the locale data is fully loaded and the address has been\n * parsed. When the onLoad option is given, the address formatter object\n * will attempt to load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the\n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n *\n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the\n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object\n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n *\n * Some regions have more than one style of formatting, and the style parameter\n * selects which style the user prefers. An array of style names that this locale\n * supports can be found by calling {@link ilib.PhoneFmt.getAvailableStyles}.\n * Example phone numbers can be retrieved for each style by calling\n * {@link ilib.PhoneFmt.getStyleExample}.\n * <p>\n *\n * If the MCC is given, numbers will be formatted in the manner of the country\n * specified by the MCC. If it is not given, but the locale is, the manner of\n * the country in the locale will be used. If neither the locale or MCC are not given,\n * then the country of the current ilib locale is used.\n *\n * @constructor\n * @param {Object} options properties that control how this formatter behaves\n */\nilib.PhoneFmt = function(options) {\n\tthis.sync = true;\n\tthis.styleName = 'default',\n\tthis.loadParams = {};\n\n\tvar locale = new ilib.Locale();\n\n\tif (options) {\n\t\tif (options.locale) {\n\t\t\tlocale = options.locale;\n\t\t}\n\n\t\tif (typeof(options.sync) !== 'undefined') {\n\t\t\tthis.sync = (options.sync == true);\n\t\t}\n\n\t\tif (options.loadParams) {\n\t\t\tthis.loadParams = options.loadParams;\n\t\t}\n\n\t\tif (options.style) {\n\t\t\tthis.style = options.style;\n\t\t}\n\t}\n\n\tnew ilib.Locale.PhoneLoc({\n\t\tlocale: locale,\n\t\tmcc: options && options.mcc,\n\t\tcountryCode: options && options.countryCode,\n\t\tonLoad: ilib.bind(this, function (data) {\n\t\t\t/** @type {ilib.Locale.PhoneLoc} */\n\t\t\tthis.locale = data;\n\n\t\t\tnew ilib.NumPlan({\n\t\t\t\tlocale: this.locale,\n\t\t\t\tsync: this.sync,\n\t\t\t\tloadParms: this.loadParams,\n\t\t\t\tonLoad: ilib.bind(this, function (plan) {\n\t\t\t\t\t/** @type {ilib.NumPlan} */\n\t\t\t\t\tthis.plan = plan;\n\n\t\t\t\t\tilib.loadData({\n\t\t\t\t\t\tname: \"phonefmt.json\",\n\t\t\t\t\t\tobject: ilib.PhoneFmt,\n\t\t\t\t\t\tlocale: this.locale,\n\t\t\t\t\t\tsync: this.sync,\n\t\t\t\t\t\tloadParams: ilib.merge(this.loadParams, {\n\t\t\t\t\t\t\treturnOne: true\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tcallback: ilib.bind(this, function (fmtdata) {\n\t\t\t\t\t\t\tthis.fmtdata = fmtdata;\n\n\t\t\t\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\t\t\t\t\toptions.onLoad(this);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t});\n\t\t})\n\t});\n};\n\nilib.PhoneFmt.prototype = {\n\t/**\n\t *\n\t * @protected\n\t * @param {string} part\n\t * @param {Object} formats\n\t * @param {boolean} mustUseAll\n\t */\n\t_substituteDigits: function(part, formats, mustUseAll) {\n\t\tvar formatString,\n\t\t\tformatted = \"\",\n\t\t\tpartIndex = 0,\n\t\t\ttemplates,\n\t\t\ti;\n\n\t\t// console.info(\"Globalization.Phone._substituteDigits: typeof(formats) is \" + typeof(formats));\n\t\tif (!part) {\n\t\t\treturn formatted;\n\t\t}\n\n\t\tif (typeof(formats) === \"object\") {\n\t\t\ttemplates = (typeof(formats.template) !== 'undefined') ? formats.template : formats;\n\t\t\tif (part.length > templates.length) {\n\t\t\t\t// too big, so just use last resort rule.\n\t\t\t\tthrow \"part \" + part + \" is too big. We do not have a format template to format it.\";\n\t\t\t}\n\t\t\t// use the format in this array that corresponds to the digit length of this\n\t\t\t// part of the phone number\n\t\t\tformatString =  templates[part.length-1];\n\t\t\t// console.info(\"Globalization.Phone._substituteDigits: formats is an Array: \" + JSON.stringify(formats));\n\t\t} else {\n\t\t\tformatString = formats;\n\t\t}\n\n\t\tfor (i = 0; i < formatString.length; i++) {\n\t\t\tif (formatString.charAt(i) === \"X\") {\n\t\t\t\tformatted += part.charAt(partIndex);\n\t\t\t\tpartIndex++;\n\t\t\t} else {\n\t\t\t\tformatted += formatString.charAt(i);\n\t\t\t}\n\t\t}\n\n\t\tif (mustUseAll && partIndex < part.length-1) {\n\t\t\t// didn't use the whole thing in this format? Hmm... go to last resort rule\n\t\t\tthrow \"too many digits in \" + part + \" for format \" + formatString;\n\t\t}\n\n\t\treturn formatted;\n\t},\n\n\t/**\n\t * Returns the style with the given name, or the default style if there\n\t * is no style with that name.\n\t * @protected\n\t * @return {{example:string,whole:Object.<string,string>,partial:Object.<string,string>}|Object.<string,string>}\n\t */\n\t_getStyle: function (name, fmtdata) {\n\t\treturn fmtdata[name] || fmtdata[\"default\"];\n\t},\n\n\t/**\n\t * Do the actual work of formatting the phone number starting at the given\n\t * field in the regular field order.\n\t *\n\t * @param {!ilib.PhoneNumber} number\n\t * @param {{\n\t *   partial:boolean,\n\t *   style:string,\n\t *   mcc:string,\n\t *   locale:(string|ilib.Locale),\n\t *   sync:boolean,\n\t *   loadParams:Object,\n\t *   onLoad:function(string)\n\t * }} options Parameters which control how to format the number\n\t * @param {number} startField\n\t */\n\t_doFormat: function(number, options, startField, locale, fmtdata, callback) {\n\t\tvar sync = true,\n\t\t\tloadParams = {},\n\t\t\ttemp,\n\t\t\ttemplates,\n\t\t\tfieldName,\n\t\t\tcountryCode,\n\t\t\tisWhole,\n\t\t\tstyle,\n\t\t\tformatted = \"\",\n\t\t\tstyleTemplates,\n\t\t\tlastFieldName;\n\n\t\tif (options) {\n\t\t\tif (typeof(options.sync) !== 'undefined') {\n\t\t\t\tsync = (options.sync == true);\n\t\t\t}\n\n\t\t\tif (options.loadParams) {\n\t\t\t\tloadParams = options.loadParams;\n\t\t\t}\n\t\t}\n\n\t\tstyle = this.style; // default style for this formatter\n\n\t\t// figure out what style to use for this type of number\n\t\tif (number.countryCode) {\n\t\t\t// dialing from outside the country\n\t\t\t// check to see if it to a mobile number because they are often formatted differently\n\t\t\tstyle = (number.mobilePrefix) ? \"internationalmobile\" : \"international\";\n\t\t} else if (number.mobilePrefix !== undefined) {\n\t\t\tstyle = \"mobile\";\n\t\t} else if (number.serviceCode !== undefined && typeof(fmtdata[\"service\"]) !== 'undefined') {\n\t\t\t// if there is a special format for service numbers, then use it\n\t\t\tstyle = \"service\";\n\t\t}\n\n\t\tisWhole = (!options || !options.partial);\n\t\tstyleTemplates = this._getStyle(style, fmtdata);\n\n\t\t// console.log(\"Style ends up being \" + style + \" and using subtype \" + (isWhole ? \"whole\" : \"partial\"));\n\t\tstyleTemplates = (isWhole ? styleTemplates.whole : styleTemplates.partial) || styleTemplates;\n\n\t\tfor (var i = startField; i < ilib.PhoneNumber._fieldOrder.length; i++) {\n\t\t\tfieldName = ilib.PhoneNumber._fieldOrder[i];\n\t\t\t// console.info(\"format: formatting field \" + fieldName + \" value: \" + number[fieldName]);\n\t\t\tif (number[fieldName] !== undefined) {\n\t\t\t\tif (styleTemplates[fieldName] !== undefined) {\n\t\t\t\t\ttemplates = styleTemplates[fieldName];\n\t\t\t\t\tif (fieldName === \"trunkAccess\") {\n\t\t\t\t\t\tif (number.areaCode === undefined && number.serviceCode === undefined && number.mobilePrefix === undefined) {\n\t\t\t\t\t\t\ttemplates = \"X\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (lastFieldName && typeof(styleTemplates[lastFieldName].suffix) !== 'undefined') {\n\t\t\t\t\t\tif (fieldName !== \"extension\" && number[fieldName].search(/[xwtp,;]/i) <= -1) {\n\t\t\t\t\t\t\tformatted += styleTemplates[lastFieldName].suffix;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlastFieldName = fieldName;\n\n\t\t\t\t\t// console.info(\"format: formatting field \" + fieldName + \" with templates \" + JSON.stringify(templates));\n\t\t\t\t\ttemp = this._substituteDigits(number[fieldName], templates, (fieldName === \"subscriberNumber\"));\n\t\t\t\t\t// console.info(\"format: formatted is: \" + temp);\n\t\t\t\t\tformatted += temp;\n\n\t\t\t\t\tif (fieldName === \"countryCode\") {\n\t\t\t\t\t\t// switch to the new country to format the rest of the number\n\t\t\t\t\t\tcountryCode = number.countryCode.replace(/[wWpPtT\\+#\\*]/g, '');\t// fix for NOV-108200\n\n\t\t\t\t\t\tnew ilib.Locale.PhoneLoc({\n\t\t\t\t\t\t\tlocale: this.locale,\n\t\t\t\t\t\t\tsync: sync,\n\t\t\t\t\t\t\tloadParms: loadParams,\n\t\t\t\t\t\t\tcountryCode: countryCode,\n\t\t\t\t\t\t\tonLoad: ilib.bind(this, function (/** @type {ilib.Locale.PhoneLoc} */ locale) {\n\t\t\t\t\t\t\t\tilib.loadData({\n\t\t\t\t\t\t\t\t\tname: \"phonefmt.json\",\n\t\t\t\t\t\t\t\t\tobject: ilib.PhoneFmt,\n\t\t\t\t\t\t\t\t\tlocale: locale,\n\t\t\t\t\t\t\t\t\tsync: sync,\n\t\t\t\t\t\t\t\t\tloadParams: ilib.merge(loadParams, {\n\t\t\t\t\t\t\t\t\t\treturnOne: true\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\tcallback: ilib.bind(this, function (fmtdata) {\n\t\t\t\t\t\t\t\t\t\t// console.info(\"format: switching to region \" + locale.region + \" and style \" + style + \" to format the rest of the number \");\n\n\t\t\t\t\t\t\t\t\t\tvar subfmt = \"\";\n\n\t\t\t\t\t\t\t\t\t\tthis._doFormat(number, options, i+1, locale, fmtdata, function (subformat) {\n\t\t\t\t\t\t\t\t\t\t\tsubfmt = subformat;\n\t\t\t\t\t\t\t\t\t\t\tif (typeof(callback) === 'function') {\n\t\t\t\t\t\t\t\t\t\t\t\tcallback(formatted + subformat);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\tformatted += subfmt;\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn formatted;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t//console.warn(\"PhoneFmt.format: cannot find format template for field \" + fieldName + \", region \" + locale.region + \", style \" + style);\n\t\t\t\t\t// use default of \"minimal formatting\" so we don't miss parts because of bugs in the format templates\n\t\t\t\t\tformatted += number[fieldName];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(callback) === 'function') {\n\t\t\tcallback(formatted);\n\t\t}\n\n\t\treturn formatted;\n\t},\n\n\t/**\n\t * Format the parts of a phone number appropriately according to the settings in\n\t * this formatter instance.\n\t *\n\t * The options can contain zero or more of these properties:\n\t *\n\t * <ul>\n\t * <li><i>partial</i> boolean which tells whether or not this phone number\n\t * represents a partial number or not. The default is false, which means the number\n\t * represents a whole number.\n\t * <li><i>style</i> style to use to format the number, if different from the\n\t * default style or the style specified in the constructor\n\t * <li><i>locale</i> The locale with which to parse the number. This gives a clue as to which\n     * numbering plan to use.\n     * <li><i>mcc</i> The mobile carrier code (MCC) associated with the carrier that the phone is\n     * currently connected to, if known. This also can give a clue as to which numbering plan to\n     * use\n     * <li><i>onLoad</i> - a callback function to call when the date format object is fully\n     * loaded. When the onLoad option is given, the DateFmt object will attempt to\n     * load any missing locale data using the ilib loader callback.\n     * When the constructor is done (even if the data is already preassembled), the\n     * onLoad function is called with the current instance as a parameter, so this\n     * callback can be used with preassembled or dynamic loading or a mix of the two.\n     * <li><i>sync</i> - tell whether to load any missing locale data synchronously or\n     * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n     * callback must be given, as the instance returned from this constructor will\n     * not be usable for a while.\n     * <li><i>loadParams</i> - an object containing parameters to pass to the\n     * loader callback function when locale data is missing. The parameters are not\n     * interpretted or modified in any way. They are simply passed along. The object\n     * may contain any property/value pairs as long as the calling code is in\n     * agreement with the loader callback function as to what those parameters mean.\n\t * </ul>\n\t *\n\t * The partial parameter specifies whether or not the phone number contains\n\t * a partial phone number or if it is a whole phone number. A partial\n\t * number is usually a number as the user is entering it with a dial pad. The\n\t * reason is that certain types of phone numbers should be formatted differently\n\t * depending on whether or not it represents a whole number. Specifically, SMS\n\t * short codes are formatted differently.<p>\n\t *\n\t * Example: a subscriber number of \"48773\" in the US would get formatted as:\n\t *\n\t * <ul>\n\t * <li>partial: 487-73  (perhaps the user is in the process of typing a whole phone\n\t * number such as 487-7379)\n\t * <li>whole:   48773   (this is the entire SMS short code)\n\t * </ul>\n\t *\n\t * Any place in the UI where the user types in phone numbers, such as the keypad in\n\t * the phone app, should pass in partial: true to this formatting routine. All other\n\t * places, such as the call log in the phone app, should pass in partial: false, or\n\t * leave the partial flag out of the parameters entirely.\n\t *\n\t * @param {!ilib.PhoneNumber} number object containing the phone number to format\n\t * @param {{\n\t *   partial:boolean,\n\t *   style:string,\n\t *   mcc:string,\n\t *   locale:(string|ilib.Locale),\n\t *   sync:boolean,\n\t *   loadParams:Object,\n\t *   onLoad:function(string)\n\t * }} options Parameters which control how to format the number\n\t * @return {string} Returns the formatted phone number as a string.\n\t */\n\tformat: function (number, options) {\n\t\tvar formatted = \"\",\n\t\t    callback;\n\n\t\tcallback = options && options.onLoad;\n\n\t\ttry {\n\t\t\tthis._doFormat(number, options, 0, this.locale, this.fmtdata, function (fmt) {\n\t\t\t\tformatted = fmt;\n\n\t\t\t\tif (typeof(callback) === 'function') {\n\t\t\t\t\tcallback(fmt);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tif (typeof(e) === 'string') {\n\t\t\t\t// console.warn(\"caught exception: \" + e + \". Using last resort rule.\");\n\t\t\t\t// if there was some exception, use this last resort rule\n\t\t\t\tformatted = \"\";\n\t\t\t\tfor (var field in ilib.PhoneNumber._fieldOrder) {\n\t\t\t\t\tif (typeof field === 'string' && typeof ilib.PhoneNumber._fieldOrder[field] === 'string' && number[ilib.PhoneNumber._fieldOrder[field]] !== undefined) {\n\t\t\t\t\t\t// just concatenate without any formatting\n\t\t\t\t\t\tformatted += number[ilib.PhoneNumber._fieldOrder[field]];\n\t\t\t\t\t\tif (ilib.PhoneNumber._fieldOrder[field] === 'countryCode') {\n\t\t\t\t\t\t\tformatted += ' ';\t\t// fix for NOV-107894\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\n\t\t\tif (typeof(callback) === 'function') {\n\t\t\t\tcallback(formatted);\n\t\t\t}\n\t\t}\n\t\treturn formatted;\n\t},\n\n\t/**\n\t * Return an array of names of all available styles that can be used with the current\n\t * formatter.\n\t * @return {Array.<string>} an array of names of styles that are supported by this formatter\n\t */\n\tgetAvailableStyles: function () {\n\t\tvar ret = [],\n\t\t\tstyle;\n\n\t\tif (this.fmtdata) {\n\t\t\tfor (style in this.fmtdata) {\n\t\t\t\tif (this.fmtdata[style].example) {\n\t\t\t\t\tret.push(style);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t},\n\n\t/**\n\t * Return an example phone number formatted with the given style.\n\t *\n\t * @param {string|undefined} style style to get an example of, or undefined to use\n\t * the current default style for this formatter\n\t * @return {string|undefined} an example phone number formatted according to the\n\t * given style, or undefined if the style is not recognized or does not have an\n\t * example\n\t */\n\tgetStyleExample: function (style) {\n\t\treturn this.fmtdata[style].example || undefined;\n\t}\n};\n\n/*\n * phonegeo.js - Represent a phone number geolocator object.\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n!depends\nilibglobal.js\nlocale.js\nlocaleinfo.js\nphone/numplan.js\nphone/phoneloc.js\nphone/phonenum.js\n*/\n\n// !data iddarea area extarea extstates phoneres\n\n/**\n * @class\n * Create an instance that can geographically locate a phone number.<p>\n *\n * The location of the number is calculated according to the following rules:\n *\n * <ol>\n * <li>If the areaCode property is undefined or empty, or if the number specifies a\n * country code for which we do not have information, then the area property may be\n * missing from the returned object. In this case, only the country object will be returned.\n *\n * <li>If there is no area code, but there is a mobile prefix, service code, or emergency\n * code, then a fixed string indicating the type of number will be returned.\n *\n * <li>The country object is filled out according to the countryCode property of the phone\n * number.\n *\n * <li>If the phone number does not have an explicit country code, the MCC will be used if\n * it is available. The country code can be gleaned directly from the MCC. If the MCC\n * of the carrier to which the phone is currently connected is available, it should be\n * passed in so that local phone numbers will look correct.\n *\n * <li>If the country's dialling plan mandates a fixed length for phone numbers, and a\n * particular number exceeds that length, then the area code will not be given on the\n * assumption that the number has problems in the first place and we cannot guess\n * correctly.\n * </ol>\n *\n * The returned area property varies in specificity according\n * to the locale. In North America, the area is no finer than large parts of states\n * or provinces. In Germany and the UK, the area can be as fine as small towns.<p>\n *\n * If the number passed in is invalid, no geolocation will be performed. If the location\n * information about the country where the phone number is located is not available,\n * then the area information will be missing and only the country will be available.<p>\n *\n * The options parameter can contain any one of the following properties:\n *\n * <ul>\n * <li><i>locale</i> The locale parameter is used to load translations of the names of regions and\n * areas if available. For example, if the locale property is given as \"en-US\" (English for USA),\n * but the phone number being geolocated is in Germany, then this class would return the the names\n * of the country (Germany) and region inside of Germany in English instead of German. That is, a\n * phone number in Munich and return the country \"Germany\" and the area code \"Munich\"\n * instead of \"Deutschland\" and \"München\". The default display locale is the current ilib locale.\n * If translations are not available, the region and area names are given in English, which should\n * always be available.\n * <li><i>mcc</i> The mcc of the current mobile carrier, if known.\n *\n * <li><i>onLoad</i> - a callback function to call when the data for the\n * locale is fully loaded. When the onLoad option is given, this object\n * will attempt to load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the\n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n *\n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the\n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object\n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n *\n * @constructor\n * @param {Object} options parameters controlling the geolocation of the phone number.\n */\nilib.GeoLocator = function(options) {\n\tvar sync = true,\n\t\tloadParams = {},\n\t\tlocale = ilib.getLocale();\n\n\tif (options) {\n\t\tif (options.locale) {\n\t\t\tlocale = options.locale;\n\t\t}\n\n\t\tif (typeof(options.sync) === 'boolean') {\n\t\t\tsync = options.sync;\n\t\t}\n\n\t\tif (options.loadParams) {\n\t\t\tloadParams = options.loadParams;\n\t\t}\n\t}\n\n\tnew ilib.Locale.PhoneLoc({\n\t\tlocale: locale,\n\t\tmcc: options && options.mcc,\n\t\tcountryCode: options && options.countryCode,\n\t\tsync: sync,\n\t\tloadParams: loadParams,\n\t\tonLoad: ilib.bind(this, function (loc) {\n\t\t\tthis.locale = loc;\n\t\t\tnew ilib.NumPlan({\n\t\t\t\tlocale: this.locale,\n\t\t\t\tsync: sync,\n\t\t\t\tloadParams: loadParams,\n\t\t\t\tonLoad: ilib.bind(this, function (plan) {\n\t\t\t\t\tthis.plan = plan;\n\n\t\t\t\t\tnew ilib.ResBundle({\n\t\t\t\t\t\tlocale: this.locale,\n\t\t\t\t\t\tname: \"phoneres\",\n\t\t\t\t\t\tsync: sync,\n\t\t\t\t\t\tloadParams: loadParams,\n\t\t\t\t\t\tonLoad: ilib.bind(this, function (rb) {\n\t\t\t\t\t\t\tthis.rb = rb;\n\n\t\t\t\t\t\t\tilib.loadData({\n\t\t\t\t\t\t\t\tname: \"iddarea.json\",\n\t\t\t\t\t\t\t\tobject: ilib.GeoLocator,\n\t\t\t\t\t\t\t\tnonlocale: true,\n\t\t\t\t\t\t\t\tsync: sync,\n\t\t\t\t\t\t\t\tloadParams: loadParams,\n\t\t\t\t\t\t\t\tcallback: ilib.bind(this, function (data) {\n\t\t\t\t\t\t\t\t\tthis.regiondata = data;\n\t\t\t\t\t\t\t\t\tilib.loadData({\n\t\t\t\t\t\t\t\t\t\tname: \"area.json\",\n\t\t\t\t\t\t\t\t\t\tobject: ilib.GeoLocator,\n\t\t\t\t\t\t\t\t\t\tlocale: this.locale,\n\t\t\t\t\t\t\t\t\t\tsync: sync,\n\t\t\t\t\t\t\t\t\t\tloadParams: ilib.merge(loadParams, {\n\t\t\t\t\t\t\t\t\t\t\treturnOne: true\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\tcallback: ilib.bind(this, function (areadata) {\n\t\t\t\t\t\t\t\t\t\t\tthis.areadata = areadata;\n\n\t\t\t\t\t\t\t\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\t\t\t\t\t\t\t\t\toptions.onLoad(this);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t})\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t});\n\t\t})\n\t});\n};\n\nilib.GeoLocator.prototype = {\n\t/**\n\t * @private\n\t *\n\t * Used for locales where the area code is very general, and you need to add in\n\t * the initial digits of the subscriber number in order to get the area\n\t *\n\t * @param {string} number\n\t * @param {Object} stateTable\n\t */\n\t_parseAreaAndSubscriber: function (number, stateTable) {\n\t\tvar ch,\n\t\t\ti,\n\t\t\thandlerMethod,\n\t\t\tnewState,\n\t\t\tprefix = \"\",\n\t\t\tconsumed,\n\t\t\tlastLeaf,\n\t\t\tcurrentState,\n\t\t\tdot = 14;\t// special transition which matches all characters. See AreaCodeTableMaker.java\n\n\t\tif (!number || !stateTable) {\n\t\t\t// can't parse anything\n\t\t\treturn undefined;\n\t\t}\n\n\t\t//console.log(\"GeoLocator._parseAreaAndSubscriber: parsing number \" + number);\n\n\t\tcurrentState = stateTable;\n\t\ti = 0;\n\t\twhile (i < number.length) {\n\t\t\tch = ilib.PhoneNumber._getCharacterCode(number.charAt(i));\n\t\t\tif (ch >= 0) {\n\t\t\t\t// newState = stateData.states[state][ch];\n\t\t\t\tnewState = currentState.s && currentState.s[ch];\n\n\t\t\t\tif (!newState && currentState.s && currentState.s[dot]) {\n\t\t\t\t\tnewState = currentState.s[dot];\n\t\t\t\t}\n\n\t\t\t\tif (typeof(newState) === 'object') {\n\t\t\t\t\tif (typeof(newState.l) !== 'undefined') {\n\t\t\t\t\t\t// save for latter if needed\n\t\t\t\t\t\tlastLeaf = newState;\n\t\t\t\t\t\tconsumed = i;\n\t\t\t\t\t}\n\t\t\t\t\t// console.info(\"recognized digit \" + ch + \" continuing...\");\n\t\t\t\t\t// recognized digit, so continue parsing\n\t\t\t\t\tcurrentState = newState;\n\t\t\t\t\ti++;\n\t\t\t\t} else {\n\t\t\t\t\tif (typeof(newState) === 'undefined' || newState === 0) {\n\t\t\t\t\t\t// this is possibly a look-ahead and it didn't work...\n\t\t\t\t\t\t// so fall back to the last leaf and use that as the\n\t\t\t\t\t\t// final state\n\t\t\t\t\t\tnewState = lastLeaf;\n\t\t\t\t\t\ti = consumed;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((typeof(newState) === 'number' && newState) ||\n\t\t\t\t\t\t(typeof(newState) === 'object' && typeof(newState.l) !== 'undefined')) {\n\t\t\t\t\t\t// final state\n\t\t\t\t\t\tvar stateNumber = typeof(newState) === 'number' ? newState : newState.l;\n\t\t\t\t\t\thandlerMethod = ilib.PhoneNumber._states[stateNumber];\n\n\t\t\t\t\t\t//console.info(\"reached final state \" + newState + \" handler method is \" + handlerMethod + \" and i is \" + i);\n\n\t\t\t\t\t\treturn (handlerMethod === \"area\") ? number.substring(0, i+1) : undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// failed parse. Either no last leaf to fall back to, or there was an explicit\n\t\t\t\t\t\t// zero in the table\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (ch === -1) {\n\t\t\t\t// non-transition character, continue parsing in the same state\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\t// should not happen\n\t\t\t\t// console.info(\"skipping character \" + ch);\n\t\t\t\t// not a digit, plus, pound, or star, so this is probably a formatting char. Skip it.\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t},\n\t/**\n\t * @private\n\t * @param prefix\n\t * @param table\n\t * @returns\n\t */\n\t_matchPrefix: function(prefix, table)  {\n\t\tvar i, matchedDot, matchesWithDots = [];\n\n\t\tif (table[prefix]) {\n\t\t\treturn table[prefix];\n\t\t}\n\t\tfor (var entry in table) {\n\t\t\tif (entry && typeof(entry) === 'string') {\n\t\t\t\ti = 0;\n\t\t\t\tmatchedDot = false;\n\t\t\t\twhile (i < entry.length && (entry.charAt(i) === prefix.charAt(i) || entry.charAt(i) === '.')) {\n\t\t\t\t\tif (entry.charAt(i) === '.') {\n\t\t\t\t\t\tmatchedDot = true;\n\t\t\t\t\t}\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\tif (i >= entry.length) {\n\t\t\t\t\tif (matchedDot) {\n\t\t\t\t\t\tmatchesWithDots.push(entry);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn table[entry];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// match entries with dots last, so sort the matches so that the entry with the\n\t\t// most dots sorts last. The entry that ends up at the beginning of the list is\n\t\t// the best match because it has the fewest dots\n\t\tif (matchesWithDots.length > 0) {\n\t\t\tmatchesWithDots.sort(function (left, right) {\n\t\t\t\treturn (right < left) ? -1 : ((left < right) ? 1 : 0);\n\t\t\t});\n\t\t\treturn table[matchesWithDots[0]];\n\t\t}\n\n\t\treturn undefined;\n\t},\n\t/**\n\t * @private\n\t * @param number\n\t * @param data\n\t * @param locale\n\t * @param plan\n\t * @param options\n\t * @returns {Object}\n\t */\n\t_getAreaInfo: function(number, data, locale, plan, options) {\n\t\tvar sync = true,\n\t\t\tret = {},\n\t\t\tcountryCode,\n\t\t\tareaInfo,\n\t\t\ttemp,\n\t\t\tareaCode,\n\t\t\tgeoTable,\n\t\t\ttempNumber,\n\t\t\tprefix;\n\n\t\tif (options && typeof(options.sync) === 'boolean') {\n\t\t\tsync = options.sync;\n\t\t}\n\n\t\tprefix = number.areaCode || number.serviceCode;\n\t\tgeoTable = data;\n\n\t\tif (prefix !== undefined) {\n\t\t\tif (plan.getExtendedAreaCode()) {\n\t\t\t\t// for countries where the area code is very general and large, and you need a few initial\n\t\t\t\t// digits of the subscriber number in order find the actual area\n\t\t\t\ttempNumber = prefix + number.subscriberNumber;\n\t\t\t\ttempNumber = tempNumber.replace(/[wWpPtT\\+#\\*]/g, '');\t// fix for NOV-108200\n\n\t\t\t\tilib.loadData({\n\t\t\t\t\tname: \"extarea.json\",\n\t\t\t\t\tobject: ilib.GeoLocator,\n\t\t\t\t\tlocale: locale,\n\t\t\t\t\tsync: sync,\n\t\t\t\t\tloadParams: ilib.merge((options && options.loadParams) || {}, {returnOne: true}),\n\t\t\t\t\tcallback: ilib.bind(this, function (data) {\n\t\t\t\t\t\tthis.extarea = data;\n\t\t\t\t\t\tilib.loadData({\n\t\t\t\t\t\t\tname: \"extstates.json\",\n\t\t\t\t\t\t\tobject: ilib.GeoLocator,\n\t\t\t\t\t\t\tlocale: locale,\n\t\t\t\t\t\t\tsync: sync,\n\t\t\t\t\t\t\tloadParams: ilib.merge((options && options.loadParams) || {}, {returnOne: true}),\n\t\t\t\t\t\t\tcallback: ilib.bind(this, function (data) {\n\t\t\t\t\t\t\t\tthis.extstates = data;\n\t\t\t\t\t\t\t\tgeoTable = this.extarea;\n\t\t\t\t\t\t\t\tif (this.extarea && this.extstates) {\n\t\t\t\t\t\t\t\t\tprefix = this._parseAreaAndSubscriber(tempNumber, this.extstates);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (!prefix) {\n\t\t\t\t\t\t\t\t\t// not a recognized prefix, so now try the general table\n\t\t\t\t\t\t\t\t\tgeoTable = this.areadata;\n\t\t\t\t\t\t\t\t\tprefix = number.areaCode || number.serviceCode;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ((!plan.fieldLengths ||\n\t\t\t\t\t\t\t\t  plan.getFieldLength('maxLocalLength') === undefined ||\n\t\t\t\t\t\t\t\t  !number.subscriberNumber ||\n\t\t\t\t\t\t\t\t \tnumber.subscriberNumber.length <= plan.fieldLengths('maxLocalLength'))) {\n\t\t\t\t\t\t\t\t  \tareaInfo = this._matchPrefix(prefix, geoTable);\n\t\t\t\t\t\t\t\t\tif (areaInfo && areaInfo.sn && areaInfo.ln) {\n\t\t\t\t\t\t\t\t\t\t//console.log(\"Found areaInfo \" + JSON.stringify(areaInfo));\n\t\t\t\t\t\t\t\t\t\tret.area = {\n\t\t\t\t\t\t\t\t\t\t\tsn: this.rb.getString(areaInfo.sn).toString(),\n\t\t\t\t\t\t\t\t\t\t\tln: this.rb.getString(areaInfo.ln).toString()\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t});\n\n\t\t\t} else if (!plan ||\n\t\t\t\t\tplan.getFieldLength('maxLocalLength') === undefined ||\n\t\t\t\t\t!number.subscriberNumber ||\n\t\t\t\t\tnumber.subscriberNumber.length <= plan.getFieldLength('maxLocalLength')) {\n\t\t\t\tif (geoTable) {\n\t\t\t\t\tareaCode = prefix.replace(/[wWpPtT\\+#\\*]/g, '');\n\t\t\t\t\tareaInfo = this._matchPrefix(areaCode, geoTable);\n\n\t\t\t\t\tif (areaInfo && areaInfo.sn && areaInfo.ln) {\n\t\t\t\t\t\tret.area = {\n\t\t\t\t\t\t\tsn: this.rb.getString(areaInfo.sn).toString(),\n\t\t\t\t\t\t\tln: this.rb.getString(areaInfo.ln).toString()\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if (number.serviceCode) {\n\t\t\t\t\t\tret.area = {\n\t\t\t\t\t\t\tsn: this.rb.getString(\"Service Number\").toString(),\n\t\t\t\t\t\t\tln: this.rb.getString(\"Service Number\").toString()\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcountryCode = number.locale._mapRegiontoCC(this.locale.getRegion());\n\t\t\t\t\tif (countryCode !== \"0\" && this.regiondata) {\n\t\t\t\t\t\ttemp = this.regiondata[countryCode];\n\t\t\t\t\t\tif (temp && temp.sn) {\n\t\t\t\t\t\t\tret.country = {\n\t\t\t\t\t\t\t\tsn: this.rb.getString(temp.sn).toString(),\n\t\t\t\t\t\t\t\tln: this.rb.getString(temp.ln).toString(),\n\t\t\t\t\t\t\t\tcode: this.locale.getRegion()\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcountryCode = number.locale._mapRegiontoCC(this.locale.getRegion());\n\t\t\t\tif (countryCode !== \"0\" && this.regiondata) {\n\t\t\t\t\ttemp = this.regiondata[countryCode];\n\t\t\t\t\tif (temp && temp.sn) {\n\t\t\t\t\t\tret.country = {\n\t\t\t\t\t\t\tsn: this.rb.getString(temp.sn).toString(),\n\t\t\t\t\t\t\tln: this.rb.getString(temp.ln).toString(),\n\t\t\t\t\t\t\tcode: this.locale.getRegion()\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else if (number.mobilePrefix) {\n\t\t\tret.area = {\n\t\t\t\tsn: this.rb.getString(\"Mobile Number\").toString(),\n\t\t\t\tln: this.rb.getString(\"Mobile Number\").toString()\n\t\t\t};\n\t\t} else if (number.emergency) {\n\t\t\tret.area = {\n\t\t\t\tsn: this.rb.getString(\"Emergency Services Number\").toString(),\n\t\t\t\tln: this.rb.getString(\"Emergency Services Number\").toString()\n\t\t\t};\n\t\t}\n\n\t\treturn ret;\n\t},\n\t/**\n\t * Returns a the location of the given phone number, if known.\n\t * The returned object has 2 properties, each of which has an sn (short name)\n\t * and an ln (long name) string. Additionally, the country code, if given,\n\t * includes the 2 letter ISO code for the recognized country.\n\t *\t \t{\n\t *\t\t\t\"country\": {\n\t *\t        \t\"sn\": \"North America\",\n\t *            \t\"ln\": \"North America and the Caribbean Islands\",\n\t *\t\t\t\t\"code\": \"us\"\n\t *         \t },\n\t *         \t \"area\": {\n\t *       \t    \"sn\": \"California\",\n\t *          \t \"ln\": \"Central California: San Jose, Los Gatos, Milpitas, Sunnyvale, Cupertino, Gilroy\"\n\t *         \t }\n\t *    \t }\n\t *\n\t * The location name is subject to the following rules:\n\t *\n\t * If the areaCode property is undefined or empty, or if the number specifies a\n\t * country code for which we do not have information, then the area property may be\n\t * missing from the returned object. In this case, only the country object will be returned.\n\t *\n\t * If there is no area code, but there is a mobile prefix, service code, or emergency\n\t * code, then a fixed string indicating the type of number will be returned.\n\t *\n\t * The country object is filled out according to the countryCode property of the phone\n\t * number.\n\t *\n\t * If the phone number does not have an explicit country code, the MCC will be used if\n\t * it is available. The country code can be gleaned directly from the MCC. If the MCC\n\t * of the carrier to which the phone is currently connected is available, it should be\n\t * passed in so that local phone numbers will look correct.\n\t *\n\t * If the country's dialling plan mandates a fixed length for phone numbers, and a\n\t * particular number exceeds that length, then the area code will not be given on the\n\t * assumption that the number has problems in the first place and we cannot guess\n\t * correctly.\n\t *\n\t * The returned area property varies in specificity according\n\t * to the locale. In North America, the area is no finer than large parts of states\n\t * or provinces. In Germany and the UK, the area can be as fine as small towns.\n\t *\n\t * The strings returned from this function are already localized to the\n\t * given locale, and thus are ready for display to the user.\n\t *\n\t * If the number passed in is invalid, an empty object is returned. If the location\n\t * information about the country where the phone number is located is not available,\n\t * then the area information will be missing and only the country will be returned.\n     *\n\t * The options parameter can contain any one of the following properties:\n \t *\n \t * <ul>\n \t * <li><i>locale</i> The locale parameter is used to load translations of the names of regions and\n \t * areas if available. For example, if the locale property is given as \"en-US\" (English for USA),\n \t * but the phone number being geolocated is in Germany, then this class would return the the names\n \t * of the country (Germany) and region inside of Germany in English instead of German. That is, a\n \t * phone number in Munich and return the country \"Germany\" and the area code \"Munich\"\n \t * instead of \"Deutschland\" and \"München\". The default display locale is the current ilib locale.\n \t * If translations are not available, the region and area names are given in English, which should\n \t * always be available.\n \t * <li><i>mcc</i> The mcc of the current mobile carrier, if known.\n \t *\n \t * <li><i>onLoad</i> - a callback function to call when the data for the\n \t * locale is fully loaded. When the onLoad option is given, this object\n \t * will attempt to load any missing locale data using the ilib loader callback.\n \t * When the constructor is done (even if the data is already preassembled), the\n \t * onLoad function is called with the current instance as a parameter, so this\n \t * callback can be used with preassembled or dynamic loading or a mix of the two.\n \t *\n \t * <li><i>sync</i> - tell whether to load any missing locale data synchronously or\n \t * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n \t * callback must be given, as the instance returned from this constructor will\n \t * not be usable for a while.\n \t *\n \t * <li><i>loadParams</i> - an object containing parameters to pass to the\n \t * loader callback function when locale data is missing. The parameters are not\n \t * interpretted or modified in any way. They are simply passed along. The object\n \t * may contain any property/value pairs as long as the calling code is in\n \t * agreement with the loader callback function as to what those parameters mean.\n \t * </ul>\n\t *\n\t * @param {ilib.PhoneNumber} number phone number to locate\n\t * @param {Object} options options governing the way this ares is loaded\n\t * @return {Object} an object\n\t * that describes the country and the area in that country corresponding to this\n\t * phone number. Each of the country and area contain a short name (sn) and long\n\t * name (ln) that describes the location.\n\t */\n\tlocate: function(number, options) {\n\t\tvar loadParams = {},\n\t\t\tret = {},\n\t\t\tregion,\n\t\t\tcountryCode,\n\t\t\ttemp,\n\t\t\tplan,\n\t\t\tareaResult,\n\t\t\tphoneLoc = this.locale,\n\t\t\tsync = true;\n\n\t\tif (number === undefined || typeof(number) !== 'object' || !(number instanceof ilib.PhoneNumber)) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (options) {\n\t\t\tif (typeof(options.sync) !== 'undefined') {\n\t\t\t\tsync = (options.sync == true);\n\t\t\t}\n\n\t\t\tif (options.loadParams) {\n\t\t\t\tloadParams = options.loadParams;\n\t\t\t}\n\t\t}\n\n\t\t// console.log(\"GeoLocator.locate: looking for geo for number \" + JSON.stringify(number));\n\t\tregion = this.locale.getRegion();\n\t\tif (number.countryCode !== undefined && this.regiondata) {\n\t\t\tcountryCode = number.countryCode.replace(/[wWpPtT\\+#\\*]/g, '');\n\t\t\ttemp = this.regiondata[countryCode];\n\t\t\tphoneLoc = number.destinationLocale;\n\t\t\tplan = number.destinationPlan;\n\t\t\tret.country = {\n\t\t\t\tsn: this.rb.getString(temp.sn).toString(),\n\t\t\t\tln: this.rb.getString(temp.ln).toString(),\n\t\t\t\tcode: phoneLoc.getRegion()\n\t\t\t};\n\t\t}\n\n\t\tif (!plan) {\n\t\t\tplan = this.plan;\n\t\t}\n\n\t\tilib.loadData({\n\t\t\tname: \"area.json\",\n\t\t\tobject: ilib.GeoLocator,\n\t\t\tlocale: phoneLoc,\n\t\t\tsync: sync,\n\t\t\tloadParams: ilib.merge(loadParams, {\n\t\t\t\treturnOne: true\n\t\t\t}),\n\t\t\tcallback: ilib.bind(this, function (areadata) {\n\t\t\t\tif (areadata) {\n\t\t\t\t\tthis.areadata = areadata;\n\t\t\t\t}\n\t\t\t\tareaResult = this._getAreaInfo(number, this.areadata, phoneLoc, plan, options);\n\t\t\t\tret = ilib.merge(ret, areaResult);\n\n\t\t\t\tif (ret.country === undefined) {\n\t\t\t\t\tcountryCode = number.locale._mapRegiontoCC(region);\n\n\t\t\t\t\tif (countryCode !== \"0\" && this.regiondata) {\n\t\t\t\t\t\ttemp = this.regiondata[countryCode];\n\t\t\t\t\t\tif (temp && temp.sn) {\n\t\t\t\t\t\t\tret.country = {\n\t\t\t\t\t\t\t\tsn: this.rb.getString(temp.sn).toString(),\n\t\t\t\t\t\t\t\tln: this.rb.getString(temp.ln).toString(),\n\t\t\t\t\t\t\t\tcode: this.locale.getRegion()\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\n\t\treturn ret;\n\t},\n\n\t/**\n\t * Returns a string that describes the ISO-3166-2 country code of the given phone\n\t * number.<p>\n\t *\n\t * If the phone number is a local phone number and does not contain\n\t * any country information, this routine will return the region for the current\n\t * formatter instance.\n     *\n\t * @param {ilib.PhoneNumber} number An ilib.PhoneNumber instance\n\t * @return {string}\n\t */\n\tcountry: function(number) {\n\t\tvar countryCode,\n\t\t\tregion,\n\t\t\tphoneLoc;\n\n\t\tif (!number || !(number instanceof ilib.PhoneNumber)) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tphoneLoc = number.locale;\n\n\t\tregion = (number.countryCode && phoneLoc._mapCCtoRegion(number.countryCode)) ||\n\t\t\t(number.locale && number.locale.region) ||\n\t\t\tphoneLoc.locale.getRegion() ||\n\t\t\tthis.locale.getRegion();\n\n\t\tcountryCode = number.countryCode || phoneLoc._mapRegiontoCC(region);\n\n\t\tif (number.areaCode) {\n\t\t\tregion = phoneLoc._mapAreatoRegion(countryCode, number.areaCode);\n\t\t} else if (countryCode === \"33\" && number.serviceCode) {\n\t\t\t// french departments are in the service code, not the area code\n\t\t\tregion = phoneLoc._mapAreatoRegion(countryCode, number.serviceCode);\n\t\t}\n\t\treturn region;\n\t}\n};\n/*\n * unit.js - Unit class\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n!depends\nilibglobal.js\nlocale.js\nlocaleinfo.js\n*/\n\n\n/**\n * @class\n * Create a measurement instance. The measurement is immutable once\n * it is created, but can be converted to other measurements later.<p>\n *\n * The options may contain any of the following properties:\n *\n * <ul>\n * <li><i>amount</i> - either a numeric amount for this measurement given\n * as a number of the specified units, or another ilib.Measurement instance\n * to convert to the requested units. If converting to new units, the type\n * of measure between the other instance's units and the current units\n * must be the same. That is, you can only convert one unit of mass to\n * another. You cannot convert a unit of mass into a unit of length.\n *\n * <li><i>unit</i> - units of this measurement. Use the\n * static call {@link ilib.Measurement.getAvailableUnits}\n * to find out what units this version of ilib supports. If the given unit\n * is not a base unit, the amount will be normalized to the number of base units\n * and stored as that number of base units.\n * For example, if an instance is constructed with 1 kg, this will be converted\n * automatically into 1000 g, as grams are the base unit and kg is merely a\n * commonly used scale of grams.\n * </ul>\n *\n * Here are some examples of converting a length into new units. The first method\n * is via the constructor by passing the old measurement in as the amount property.\n *\n * <pre>\n * var measurement1 = new ilib.Measurement({\n *   amount: 5,\n *   units: \"kilometers\"\n * });\n * var measurement2 = new ilib.Measurement({\n *   amount: measurement1,\n *   units: \"miles\"\n * });\n * </pre>\n *\n * The value in measurement2 will end up being about 3.125 miles.\n *\n * The second method will be using the convert method.\n *\n * <pre>\n * var measurement1 = new ilib.Measurement({\n *   amount: 5,\n *   units: \"kilometers\"\n * });\n * var measurement2 = measurement1.convert(\"miles\");\n * });\n * </pre>\n *\n * The value in measurement2 will again end up being about 3.125 miles.\n *\n * @constructor\n * @param {Object} options options that control the construction of this instance\n */\nilib.Measurement = function(options) {\n\tif (!options || typeof(options.unit) === 'undefined') {\n\t\treturn undefined;\n\t}\n\n\tthis.amount = options.amount || 0;\n\tvar measure = undefined;\n\n\tfor (var c in ilib.Measurement._constructors) {\n\t\tvar measurement = ilib.Measurement._constructors[c];\n\t\tif (typeof(measurement.aliases[options.unit]) !== 'undefined') {\n\t\t\tmeasure = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (!measure || typeof(measure) === 'undefined') {\n\t\treturn new ilib.Measurement.Unknown({\n\t\t\tunit: options.unit,\n\t\t\tamount: options.amount\n\t\t});\n\t} else {\n\t\treturn new ilib.Measurement._constructors[measure](options);\n\t}\n};\n\n/**\n * @private\n */\nilib.Measurement._constructors = {};\n\n/**\n * Return a list of all possible units that this version of ilib supports.\n * Typically, the units are given as their full names in English. Unit names\n * are case-insensitive.\n *\n * @static\n * @return {Array.<string>} an array of strings containing names of units available\n */\nilib.Measurement.getAvailableUnits = function () {\n\tvar units = [];\n\tfor (var c in ilib.Measurement._constructors) {\n\t\tvar measure = ilib.Measurement._constructors[c];\n\t\tunits = units.concat(measure.getMeasures());\n\t}\n\treturn units;\n};\n\nilib.Measurement.metricScales = {\n\t\"femto\": {\"symbol\": \"f\", \"scale\": -15},\n\t\"pico\": {\"symbol\": \"p\", \"scale\": -12},\n\t\"nano\": {\"symbol\": \"n\", \"scale\": -9},\n\t\"micro\": {\"symbol\": \"µ\", \"scale\": -6},\n\t\"milli\": {\"symbol\": \"m\", \"scale\": -3},\n\t\"centi\": {\"symbol\": \"c\", \"scale\": -2},\n\t\"deci\": {\"symbol\": \"d\", \"scale\": -1},\n\t\"deca\": {\"symbol\": \"da\", \"scale\": 1},\n\t\"hecto\": {\"symbol\": \"h\", \"scale\": 2},\n\t\"kilo\": {\"symbol\": \"k\", \"scale\": 3},\n\t\"mega\": {\"symbol\": \"M\", \"scale\": 6},\n\t\"giga\": {\"symbol\": \"G\", \"scale\": 9},\n\t\"peta\": {\"symbol\": \"P\", \"scale\": 12},\n\t\"exa\": {\"symbol\": \"E\", \"scale\": 18}\n};\n\nilib.Measurement.prototype = {\n\t/**\n\t * Return the normalized name of the given units. If the units are\n\t * not recognized, this method returns its parameter unmodified.<p>\n\t *\n\t * Examples:\n\t *\n\t * <ui>\n\t * <li>\"metres\" gets normalized to \"meter\"<br>\n\t * <li>\"ml\" gets normalized to \"milliliter\"<br>\n\t * <li>\"foobar\" gets normalized to \"foobar\" (no change because it is not recognized)\n\t * </ul>\n\t *\n\t * @param {string} name name of the units to normalize.\n\t * @returns {string} normalized name of the units\n\t */\n\tnormalizeUnits: function(name) {\n\t\treturn this.aliases[name] || name;\n\t},\n\n\t/**\n\t * Return the normalized units used in this measurement.\n\t * @return {string} name of the unit of measurement\n\t */\n\tgetUnit: function() {\n\t\treturn this.unit;\n\t},\n\n\t/**\n\t * Return the units originally used to construct this measurement\n\t * before it was normalized.\n\t * @return {string} name of the unit of measurement\n\t */\n\tgetOriginalUnit: function() {\n\t\treturn this.originalUnit;\n\t},\n\n\t/**\n\t * Return the numeric amount of this measurement.\n\t * @return {number} the numeric amount of this measurement\n\t */\n\tgetAmount: function() {\n\t\treturn this.amount;\n\t},\n\n\t/**\n\t * Return the type of this measurement. Examples are \"mass\",\n\t * \"length\", \"speed\", etc. Measurements can only be converted\n\t * to measurements of the same type.<p>\n\t *\n\t * The type of the units is determined automatically from the\n\t * units. For example, the unit \"grams\" is type \"mass\". Use the\n\t * static call {@link ilib.Measurement.getAvailableUnits}\n\t * to find out what units this version of ilib supports.\n\t *\n\t * @abstract\n\t * @return {string} the name of the type of this measurement\n\t */\n\tgetMeasure: function() {},\n\n\t/**\n\t * Return a new measurement instance that is converted to a new\n\t * measurement unit. Measurements can only be converted\n\t * to measurements of the same type.<p>\n\t *\n\t * @abstract\n\t * @param {string} to The name of the units to convert to\n\t * @return {ilib.Measurement|undefined} the converted measurement\n\t * or undefined if the requested units are for a different\n\t * measurement type\n\t */\n\tconvert: function(to) {},\n\n        /**\n\t * Scale the measurement unit to an acceptable level. The scaling\n\t * happens so that the integer part of the amount is as small as\n\t * possible without being below zero. This will result in the\n\t * largest units that can represent this measurement without\n\t * fractions. Measurements can only be scaled to other measurements\n\t * of the same type.\n\t *\n\t * @abstract\n\t * @param {string=} measurementsystem system to use (uscustomary|imperial|metric),\n\t * or undefined if the system can be inferred from the current measure\n\t * @return {ilib.Measurement} a new instance that is scaled to the\n\t * right level\n\t */\n\tscale: function(measurementsystem) {},\n\n\t/**\n\t * Localize the measurement to the commonly used measurement in that locale, for example\n\t * If a user's locale is \"en-US\" and the measurement is given as \"60 kmh\",\n\t * the formatted number should be automatically converted to the most appropriate\n\t * measure in the other system, in this case, mph. The formatted result should\n\t * appear as \"37.3 mph\".\n\t *\n\t * @abstract\n\t * @param {string} locale current locale string\n\t * @returns {ilib.Measurement} a new instance that is converted to locale\n\t */\n\tlocalize: function(locale) {}\n};\n\n/*\n * unitfmt.js - Unit formatter class\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n!depends\nilibglobal.js\nlocale.js\nresources.js\nlocaleinfo.js\nstrings.js\n*/\n\n// !data unitfmt\n\n/**\n * @class\n * Create a new unit formatter instance. The unit formatter is immutable once\n * it is created, but can format as many different strings with different values\n * as needed with the same options. Create different unit formatter instances\n * for different purposes and then keep them cached for use later if you have\n * more than one unit string to format.<p>\n *\n * The options may contain any of the following properties:\n *\n * <ul>\n * <li><i>locale</i> - locale to use when formatting the units. The locale also\n * controls the translation of the names of the units. If the locale is\n * not specified, then the default locale of the app or web page will be used.\n *\n * <li><i>autoScale</i> - when true, automatically scale the amount to get the smallest\n * number greater than 1, where possible, possibly by converting units within the locale's\n * measurement system. For example, if the current locale is \"en-US\", and we have\n * a measurement containing 278 fluid ounces, then the number \"278\" can be scaled down\n * by converting the units to a larger one such as gallons. The scaled size would be\n * 2.17188 gallons. Since iLib does not have a US customary measure larger than gallons,\n * it cannot scale it down any further. If the amount is less than the smallest measure\n * already, it cannot be scaled down any further and no autoscaling will be applied.\n * Default for the autoScale property is \"true\", so it only needs to be specified when\n * you want to turn off autoscaling.\n *\n * <li><i>autoConvert</i> - automatically convert the units to the nearest appropriate\n * measure of the same type in the measurement system used by the locale. For example,\n * if a measurement of length is given in meters, but the current locale is \"en-US\"\n * which uses the US Customary system, then the nearest appropriate measure would be\n * \"yards\", and the amount would be converted from meters to yards automatically before\n * being formatted. Default for the autoConvert property is \"true\", so it only needs to\n * be specified when you want to turn off autoconversion.\n *\n * <li><i>maxFractionDigits</i> - the maximum number of digits that should appear in the\n * formatted output after the decimal. A value of -1 means unlimited, and 0 means only print\n * the integral part of the number.\n *\n * <li><i>minFractionDigits</i> - the minimum number of fractional digits that should\n * appear in the formatted output. If the number does not have enough fractional digits\n * to reach this minimum, the number will be zero-padded at the end to get to the limit.\n *\n * <li><i>roundingMode</i> - When the maxFractionDigits or maxIntegerDigits is specified,\n * this property governs how the least significant digits are rounded to conform to that\n * maximum. The value of this property is a string with one of the following values:\n * <ul>\n *   <li><i>up</i> - round away from zero\n *   <li><i>down</i> - round towards zero. This has the effect of truncating the number\n *   <li><i>ceiling</i> - round towards positive infinity\n *   <li><i>floor</i> - round towards negative infinity\n *   <li><i>halfup</i> - round towards nearest neighbour. If equidistant, round up.\n *   <li><i>halfdown</i> - round towards nearest neighbour. If equidistant, round down.\n *   <li><i>halfeven</i> - round towards nearest neighbour. If equidistant, round towards the even neighbour\n *   <li><i>halfodd</i> - round towards nearest neighbour. If equidistant, round towards the odd neighbour\n * </ul>\n *\n * <li><i>onLoad</i> - a callback function to call when the date format object is fully\n * loaded. When the onLoad option is given, the UnitFmt object will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the\n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n *\n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the\n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object\n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n *\n * Here is an example of how you might use the unit formatter to format a string with\n * the correct units.<p>\n *\n * Depends directive: !depends unitfmt.js\n *\n * @constructor\n * @param {Object} options options governing the way this date formatter instance works\n */\nilib.UnitFmt = function(options) {\n\tvar sync = true,\n\t\tloadParams = undefined;\n\n    this.length = \"long\";\n    this.scale  = true;\n    this.measurementType = 'undefined';\n    this.convert = true;\n\tthis.locale = new ilib.Locale();\n\n    if (options) {\n    \tif (options.locale) {\n    \t\tthis.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;\n    \t}\n\n    \tif (typeof(options.sync) === 'boolean') {\n    \t\tsync = options.sync;\n    \t}\n\n    \tif (typeof(options.loadParams) !== 'undefined') {\n    \t\tloadParams = options.loadParams;\n    \t}\n\n    \tif (options.length) {\n    \t\tthis.length = options.length;\n    \t}\n\n    \tif (typeof(options.autoScale) === 'boolean') {\n    \t\tthis.scale = options.autoScale;\n    \t}\n\n    \tif (typeof(options.autoConvert) === 'boolean') {\n    \t\tthis.convert = options.autoConvert;\n    \t}\n\n        if (typeof(options.useNative) === 'boolean') {\n    \t\tthis.useNative = options.useNative;\n    \t}\n\n    \tif (options.measurementSystem) {\n    \t\tthis.measurementSystem = options.measurementSystem;\n    \t}\n\n        if (typeof (options.maxFractionDigits) === 'number') {\n            /**\n             * @private\n             * @type {number|undefined}\n             */\n            this.maxFractionDigits = options.maxFractionDigits;\n        }\n        if (typeof (options.minFractionDigits) === 'number') {\n            /**\n             * @private\n             * @type {number|undefined}\n             */\n            this.minFractionDigits = options.minFractionDigits;\n        }\n        /**\n         * @private\n         * @type {string}\n         */\n        this.roundingMode = options.roundingMode;\n    }\n\n    if (!ilib.UnitFmt.cache) {\n    \tilib.UnitFmt.cache = {};\n    }\n\n\tilib.loadData({\n\t\tobject: ilib.UnitFmt,\n\t\tlocale: this.locale,\n\t\tname: \"unitfmt.json\",\n\t\tsync: sync,\n\t\tloadParams: loadParams,\n\t\tcallback: ilib.bind(this, function (format) {\n\t\t\tvar formatted = format;\n\t\t\tthis.template = formatted[\"unitfmt\"][this.length];\n\t\t\tif (options && typeof(options.onLoad) === 'function') {\n\t\t\t\toptions.onLoad(this);\n\t\t\t}\n\t\t})\n\t});\n};\n\nilib.UnitFmt.prototype = {\n\n\t/**\n\t * Return the locale used with this formatter instance.\n\t * @return {ilib.Locale} the ilib.Locale instance for this formatter\n\t */\n\tgetLocale: function() {\n\t\treturn this.locale;\n\t},\n\n\t/**\n\t * Return the template string that is used to format date/times for this\n\t * formatter instance. This will work, even when the template property is not explicitly\n\t * given in the options to the constructor. Without the template option, the constructor\n\t * will build the appropriate template according to the options and use that template\n\t * in the format method.\n\t *\n\t * @return {string} the format template for this formatter\n\t */\n\tgetTemplate: function() {\n\t\treturn this.template;\n\t},\n\n\t/**\n\t * Convert this formatter to a string representation by returning the\n\t * format template. This method delegates to getTemplate.\n\t *\n\t * @return {string} the format template\n\t */\n\ttoString: function() {\n\t\treturn this.getTemplate();\n\t},\n\n\t/**\n\t * Return whether or not this formatter will auto-scale the units while formatting.\n\t * @returns {boolean} true if auto-scaling is turned on\n\t */\n    getScale: function() {\n        return this.scale;\n    },\n\n    /**\n     * Return the measurement system that is used for this formatter.\n     * @returns {string} the measurement system used in this formatter\n     */\n    getMeasurementSystem: function() {\n        return this.measurementSystem;\n    },\n\n\t/**\n\t * Format a particular unit instance according to the settings of this\n\t * formatter object.\n\t *\n\t * @param {ilib.Measurement} measurement measurement to format\n\t * @return {string} the formatted version of the given date instance\n\t */\n    format: function (measurement) {\n    \tvar u = this.convert ? measurement.localize(this.locale.getSpec()) : measurement;\n    \tu = this.scale ? u.scale(this.measurementSystem) : u;\n    \tvar formatted = new ilib.String(this.template[u.getUnit()]);\n    \t// make sure to use the right plural rules\n    \tformatted.setLocale(this.locale, true, undefined, undefined);\n    \tvar numFmt = new ilib.NumFmt({\n    \t\tlocale: this.locale,\n    \t\tuseNative: this.useNative,\n            maxFractionDigits: this.maxFractionDigits,\n            minFractionDigits: this.minFractionDigits,\n            roundingMode: this.roundingMode\n    \t});\n    \tformatted = formatted.formatChoice(u.amount,{n:numFmt.format(u.amount)});\n    \treturn formatted.length > 0 ? formatted : u.amount +\" \" + u.unit;\n    }\n};\n\n/*\n * Length.js - Unit conversions for Lengths/lengths\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n!depends\nilibglobal.js\n*/\n\n/**\n * @class\n * Create a new length measurement instance.\n *\n * @constructor\n * @extends ilib.Measurement\n * @param options {{unit:string,amount:number|string|undefined}} Options controlling\n * the construction of this instance\n */\nilib.Measurement.Length = function (options) {\n\tthis.unit = \"meter\";\n\tthis.amount = 0;\n\tthis.aliases = ilib.Measurement.Length.aliases; // share this table in all instances\n\n\tif (options) {\n\t\tif (typeof(options.unit) !== 'undefined') {\n\t\t\tthis.originalUnit = options.unit;\n\t\t\tthis.unit = this.aliases[options.unit] || options.unit;\n\t\t}\n\n\t\tif (typeof(options.amount) === 'object') {\n\t\t\tif (options.amount.getMeasure() === \"length\") {\n\t\t\t\tthis.amount = ilib.Measurement.Length.convert(this.unit, options.amount.getUnit(), options.amount.getAmount());\n\t\t\t} else {\n\t\t\t\tthrow \"Cannot convert unit \" + options.amount.unit + \" to a length\";\n\t\t\t}\n\t\t} else if (typeof(options.amount) !== 'undefined') {\n\t\t\tthis.amount = parseFloat(options.amount);\n\t\t}\n\t}\n\n\tif (typeof(ilib.Measurement.Length.ratios[this.unit]) === 'undefined') {\n\t\tthrow \"Unknown unit: \" + options.unit;\n\t}\n};\n\nilib.Measurement.Length.ratios = {\n\t/*              index, µm           mm           cm           inch         dm           foot          yard          m             dam            hm              km              mile            nm            Mm             Gm             */\n\t\"micrometer\":   [ 1,   1,           1e-3,        1e-4,        3.93701e-5,  1e-5,        3.28084e-6,   1.09361e-6,   1e-6,         1e-7,          1e-8,           1e-9,           6.21373e-10,  5.39957e-10,  1e-12,          1e-15           ],\n\t\"millimeter\":   [ 2,   1000,        1,           0.1,         0.0393701,   0.01,        0.00328084,   1.09361e-3,   0.001,        1e-4,          1e-5,           1e-6,           6.21373e-7,   5.39957e-7,   1e-9,           1e-12           ],\n\t\"centimeter\":   [ 3,   1e4,         10,          1,           0.393701,    0.1,         0.0328084,    0.0109361,    0.01,         0.001,         1e-4,           1e-5,           6.21373e-6,   5.39957e-6,   1e-8,           1e-9            ],\n    \"inch\":         [ 4,   25399.986,   25.399986,   2.5399986,   1,           0.25399986,  0.083333333,  0.027777778,  0.025399986,  2.5399986e-3,  2.5399986e-4,   2.5399986e-5,   1.5783e-5,    1.3715e-5,    2.5399986e-8,   2.5399986e-11   ],\n    \"decimeter\":    [ 5,   1e5,         100,         10,          3.93701,     1,           0.328084,     0.109361,     0.1,          0.01,          0.001,          1e-4,           6.21373e-5,   5.39957e-5,   1e-7,           1e-8            ],\n    \"foot\":         [ 6,   304799.99,   304.79999,   30.479999,   12,          3.0479999,   1,            0.33333333,   0.30479999,   0.030479999,   3.0479999e-3,   3.0479999e-4,   1.89394e-4,   1.64579e-4,   3.0479999e-7,   3.0479999e-10   ],\n    \"yard\":         [ 7,   914402.758,  914.402758,  91.4402758,  36,          9.14402758,  3,            1,            0.914402758,  0.0914402758,  9.14402758e-3,  9.14402758e-4,  5.68182e-4,   4.93737e-4,   9.14402758e-7,  9.14402758e-10  ],\n\t\"meter\":        [ 8,   1e6,         1000,        100,         39.3701,     10,          3.28084,      1.09361,      1,            0.1,           0.01,           0.001,          6.213712e-4,  5.39957e-4,   1e-6,           1e-7            ],\n\t\"decameter\":    [ 9,   1e7,         1e4,         1000,        393.701,     100,         32.8084,      10.9361,      10,           1,             0.1,            0.01,           6.21373e-3,   5.39957e-3,   1e-5,           1e-6            ],\n\t\"hectometer\":   [ 10,  1e8,         1e5,         1e4,         3937.01,     1000,        328.084,      109.361,      100,          10,            1,              0.1,            0.0621373,    0.0539957,    1e-4,           1e-5            ],\n\t\"kilometer\":    [ 11,  1e9,         1e6,         1e5,         39370.1,     1e4,         3280.84,      1093.61,      1000,         100,           10,             1,              0.621373,     0.539957,     0.001,          1e-4            ],\n    \"mile\":         [ 12,  1.60934e9,   1.60934e6,   1.60934e5,   63360,       1.60934e4,   5280,         1760,         1609.34,      160.934,       16.0934,        1.60934,        1,            0.868976,     1.60934e-3,     1.60934e-6      ],\n    \"nauticalmile\": [ 13,  1.852e9,     1.852e6,     1.852e5,     72913.4,     1.852e4,     6076.12,      2025.37,      1852,         185.2,         18.52,          1.852,          1.15078,      1,            1.852e-3,       1.852e-6        ],\n\t\"megameter\":    [ 14,  1e12,        1e9,         1e6,         3.93701e7,   1e5,         3.28084e6,    1.09361e6,    1e4,          1000,          100,            10,             621.373,      539.957,      1,              0.001           ],\n    \"gigameter\":    [ 15,  1e15,        1e12,        1e9,         3.93701e10,  1e8,         3.28084e9,    1.09361e9,    1e7,          1e6,           1e5,            1e4,            621373.0,     539957.0,     1000,           1               ]\n};\n\nilib.Measurement.Length.metricSystem = {\n    \"micrometer\": 1,\n    \"millimeter\": 2,\n    \"centimeter\": 3,\n    \"decimeter\": 5,\n    \"meter\": 8,\n    \"decameter\": 9,\n    \"hectometer\": 10,\n    \"kilometer\": 11,\n    \"megameter\": 14,\n    \"gigameter\": 15\n};\nilib.Measurement.Length.imperialSystem = {\n    \"inch\": 4,\n    \"foot\": 6,\n    \"yard\": 7,\n    \"mile\": 12,\n    \"nauticalmile\": 13\n};\nilib.Measurement.Length.uscustomarySystem = {\n    \"inch\": 4,\n    \"foot\": 6,\n    \"yard\": 7,\n    \"mile\": 12,\n    \"nauticalmile\": 13\n};\n\nilib.Measurement.Length.metricToUScustomary = {\n    \"micrometer\": \"inch\",\n    \"millimeter\": \"inch\",\n    \"centimeter\": \"inch\",\n    \"decimeter\": \"inch\",\n    \"meter\": \"yard\",\n    \"decameter\": \"yard\",\n    \"hectometer\": \"mile\",\n    \"kilometer\": \"mile\",\n    \"megameter\": \"nauticalmile\",\n    \"gigameter\": \"nauticalmile\"\n};\nilib.Measurement.Length.usCustomaryToMetric = {\n    \"inch\": \"centimeter\",\n    \"foot\": \"centimeter\",\n    \"yard\": \"meter\",\n    \"mile\": \"kilometer\",\n    \"nauticalmile\": \"kilometer\"\n};\n\nilib.Measurement.Length.prototype = new ilib.Measurement({});\nilib.Measurement.Length.prototype.parent = ilib.Measurement;\nilib.Measurement.Length.prototype.constructor = ilib.Measurement.Length;\n\n/**\n * Return the type of this measurement. Examples are \"mass\",\n * \"length\", \"speed\", etc. Measurements can only be converted\n * to measurements of the same type.<p>\n *\n * The type of the units is determined automatically from the\n * units. For example, the unit \"grams\" is type \"mass\". Use the\n * static call {@link ilib.Measurement.getAvailableUnits}\n * to find out what units this version of ilib supports.\n *\n * @return {string} the name of the type of this measurement\n */\nilib.Measurement.Length.prototype.getMeasure = function() {\n\treturn \"length\";\n};\n\n/**\n * Localize the measurement to the commonly used measurement in that locale. For example\n * If a user's locale is \"en-US\" and the measurement is given as \"60 kmh\",\n * the formatted number should be automatically converted to the most appropriate\n * measure in the other system, in this case, mph. The formatted result should\n * appear as \"37.3 mph\".\n *\n * @abstract\n * @param {string} locale current locale string\n * @returns {ilib.Measurement} a new instance that is converted to locale\n */\nilib.Measurement.Length.prototype.localize = function(locale) {\n    var to;\n    if (locale === \"en-US\" || locale === \"en-GB\") {\n        to = ilib.Measurement.Length.metricToUScustomary[this.unit] || this.unit;\n    } else {\n        to = ilib.Measurement.Length.usCustomaryToMetric[this.unit] || this.unit;\n    }\n    return new ilib.Measurement.Length({\n        unit: to,\n        amount: this\n    });\n};\n\n/**\n * Return a new measurement instance that is converted to a new\n * measurement unit. Measurements can only be converted\n * to measurements of the same type.<p>\n *\n * @param {string} to The name of the units to convert to\n * @return {ilib.Measurement|undefined} the converted measurement\n * or undefined if the requested units are for a different\n * measurement type\n */\nilib.Measurement.Length.prototype.convert = function(to) {\n\tif (!to || typeof(ilib.Measurement.Length.ratios[this.normalizeUnits(to)]) === 'undefined') {\n\t\treturn undefined;\n\t}\n\treturn new ilib.Measurement({\n\t\tunit: to,\n\t\tamount: this\n\t});\n};\n\n/**\n * Scale the measurement unit to an acceptable level. The scaling\n * happens so that the integer part of the amount is as small as\n * possible without being below zero. This will result in the\n * largest units that can represent this measurement without\n * fractions. Measurements can only be scaled to other measurements\n * of the same type.\n *\n * @param {string=} measurementsystem system to use (uscustomary|imperial|metric),\n * or undefined if the system can be inferred from the current measure\n * @return {ilib.Measurement} a new instance that is scaled to the\n * right level\n */\nilib.Measurement.Length.prototype.scale = function(measurementsystem) {\n    var mSystem;\n    if (measurementsystem === \"metric\" || (typeof(measurementsystem) === 'undefined'\n            && typeof(ilib.Measurement.Length.metricSystem[this.unit]) !== 'undefined')) {\n        mSystem = ilib.Measurement.Length.metricSystem;\n    } else if (measurementsystem === \"imperial\" || (typeof(measurementsystem) === 'undefined'\n            && typeof(ilib.Measurement.Length.imperialSystem[this.unit]) !== 'undefined')) {\n        mSystem = ilib.Measurement.Length.imperialSystem;\n    } else if (measurementsystem === \"uscustomary\" || (typeof(measurementsystem) === 'undefined'\n            && typeof(ilib.Measurement.Length.uscustomarySystem[this.unit]) !== 'undefined')) {\n        mSystem = ilib.Measurement.Length.uscustomarySystem;\n    } else {\n        return new ilib.Measurement.Length({\n\t\t\tunit: this.unit,\n\t\t\tamount: this.amount\n\t\t});\n    }\n\n    var length = this.amount;\n    var munit = this.unit;\n    var fromRow = ilib.Measurement.Length.ratios[this.unit];\n\n    for (var m in mSystem) {\n        var tmp = this.amount * fromRow[mSystem[m]];\n        if (tmp < 1) break;\n        length = tmp;\n        munit = m;\n    }\n\n    return new ilib.Measurement.Length({\n\t\tunit: munit,\n\t\tamount: length\n    });\n};\n\nilib.Measurement.Length.aliases = {\n\t\"miles\": \"mile\",\n\t\"mile\":\"mile\",\n\t\"nauticalmiles\": \"nauticalmile\",\n\t\"nautical mile\": \"nauticalmile\",\n\t\"nautical miles\": \"nauticalmile\",\n\t\"nauticalmile\":\"nauticalmile\",\n\t\"yards\": \"yard\",\n\t\"yard\": \"yard\",\n\t\"feet\": \"foot\",\n\t\"foot\": \"foot\",\n\t\"inches\": \"inch\",\n\t\"inch\": \"inch\",\n\t\"meters\": \"meter\",\n\t\"metre\": \"meter\",\n\t\"metres\": \"meter\",\n\t\"m\": \"meter\",\n\t\"meter\": \"meter\",\n\t\"micrometers\": \"micrometer\",\n\t\"micrometres\": \"micrometer\",\n\t\"micrometre\": \"micrometer\",\n\t\"µm\": \"micrometer\",\n\t\"micrometer\": \"micrometer\",\n\t\"millimeters\": \"millimeter\",\n\t\"millimetres\": \"millimeter\",\n\t\"millimetre\": \"millimeter\",\n\t\"mm\": \"millimeter\",\n\t\"millimeter\": \"millimeter\",\n\t\"centimeters\": \"centimeter\",\n\t\"centimetres\": \"centimeter\",\n\t\"centimetre\": \"centimeter\",\n\t\"cm\": \"centimeter\",\n\t\"centimeter\": \"centimeter\",\n\t\"decimeters\": \"decimeter\",\n\t\"decimetres\": \"decimeter\",\n\t\"decimetre\": \"decimeter\",\n\t\"dm\": \"decimeter\",\n\t\"decimeter\": \"decimeter\",\n\t\"decameters\": \"decameter\",\n\t\"decametres\": \"decameter\",\n\t\"decametre\": \"decameter\",\n\t\"dam\": \"decameter\",\n\t\"decameter\": \"decameter\",\n\t\"hectometers\": \"hectometer\",\n\t\"hectometres\": \"hectometer\",\n\t\"hectometre\": \"hectometer\",\n\t\"hm\": \"hectometer\",\n\t\"hectometer\": \"hectometer\",\n\t\"kilometers\": \"kilometer\",\n\t\"kilometres\": \"kilometer\",\n\t\"kilometre\": \"kilometer\",\n\t\"km\": \"kilometer\",\n\t\"kilometer\": \"kilometer\",\n\t\"megameters\": \"megameter\",\n\t\"megametres\": \"megameter\",\n\t\"megametre\": \"megameter\",\n\t\"Mm\": \"megameter\",\n\t\"megameter\": \"megameter\",\n\t\"gigameters\": \"gigameter\",\n\t\"gigametres\": \"gigameter\",\n\t\"gigametre\": \"gigameter\",\n\t\"Gm\": \"gigameter\",\n\t\"gigameter\": \"gigameter\"\n};\n\n/**\n * Convert a length to another measure.\n * @static\n * @param to {string} unit to convert to\n * @param from {string} unit to convert from\n * @param length {number} amount to be convert\n * @returns {number|undefined} the converted amount\n */\nilib.Measurement.Length.convert = function(to, from, length) {\n    from = ilib.Measurement.Length.aliases[from] || from;\n    to = ilib.Measurement.Length.aliases[to] || to;\n\tvar fromRow = ilib.Measurement.Length.ratios[from];\n\tvar toRow = ilib.Measurement.Length.ratios[to];\n\tif (typeof(from) === 'undefined' || typeof(to) === 'undefined') {\n\t\treturn undefined;\n\t}\n\treturn length * fromRow[toRow[0]];\n};\n\n/**\n * @private\n * @static\n */\nilib.Measurement.Length.getMeasures = function () {\n\tvar ret = [];\n\tfor (var m in ilib.Measurement.Length.ratios) {\n\t\tret.push(m);\n\t}\n\treturn ret;\n};\n\n//register with the factory method\nilib.Measurement._constructors[\"length\"] = ilib.Measurement.Length;\n\n/*\n * Speed.js - Unit conversions for Speeds/speeds\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n!depends\nilibglobal.js\nunit.js\n*/\n\n/**\n * @class\n * Create a new speed measurement instance.\n *\n * @constructor\n * @extends ilib.Measurement\n * @param options {{unit:string,amount:number|string|undefined}} Options controlling\n * the construction of this instance\n */\nilib.Measurement.Speed = function (options) {\n\tthis.unit = \"meters/second\";\n\tthis.amount = 0;\n\tthis.aliases = ilib.Measurement.Speed.aliases; // share this table in all instances\n\n\tif (options) {\n\t\tif (typeof(options.unit) !== 'undefined') {\n\t\t\tthis.originalUnit = options.unit;\n\t\t\tthis.unit = this.aliases[options.unit] || options.unit;\n\t\t}\n\n\t\tif (typeof(options.amount) === 'object') {\n\t\t\tif (options.amount.getMeasure() === \"speed\") {\n\t\t\t\tthis.amount = ilib.Measurement.Speed.convert(this.unit, options.amount.getUnit(), options.amount.getAmount());\n\t\t\t} else {\n\t\t\t\tthrow \"Cannot convert units \" + options.amount.unit + \" to a speed\";\n\t\t\t}\n\t\t} else if (typeof(options.amount) !== 'undefined') {\n\t\t\tthis.amount = parseFloat(options.amount);\n\t\t}\n\t}\n\n\tif (typeof(ilib.Measurement.Speed.ratios[this.unit]) === 'undefined') {\n\t\tthrow \"Unknown unit: \" + options.unit;\n\t}\n};\n\nilib.Measurement.Speed.ratios = {\n\t/*                 index, k/h         f/s         miles/h      knot         m/s        km/s         miles/s */\n    \"kilometer/hour\":   [ 1,  1,          0.911344,   0.621371,    0.539957,    0.277778,  2.77778e-4,  1.72603109e-4 ],\n\t\"feet/second\":      [ 2,  1.09728,    1,          0.681818,    0.592484,    0.3048,    3.048e-4,    1.89393939e-4 ],\n    \"miles/hour\":       [ 3,  1.60934,    1.46667,    1,           0.868976,    0.44704,   4.4704e-4,   2.77777778e-4 ],\n    \"knot\":             [ 4,  1.852,      1.68781,    1.15078,     1,           0.514444,  5.14444e-4,  3.19660958e-4 ],\n  \t\"meters/second\":    [ 5,  3.6,        3.28084,    2.236936,    1.94384,     1,         0.001,       6.21371192e-4 ],\n    \"kilometer/second\": [ 6,  3600,       3280.8399,  2236.93629,  1943.84449,  1000,      1,           0.621371192   ],\n    \"miles/second\":     [ 7,  5793.6384,  5280,       3600,        3128.31447,  1609.344,  1.609344,    1             ]\n};\n\nilib.Measurement.Speed.metricSystem = {\n    \"kilometer/hour\": 1,\n    \"meters/second\": 5,\n    \"kilometer/second\": 6\n};\nilib.Measurement.Speed.imperialSystem = {\n    \"feet/second\": 2,\n    \"miles/hour\": 3,\n    \"knot\": 4,\n    \"miles/second\": 7\n};\nilib.Measurement.Speed.uscustomarySystem = {\n    \"feet/second\": 2,\n    \"miles/hour\": 3,\n    \"knot\": 4,\n    \"miles/second\": 7\n};\n\nilib.Measurement.Speed.metricToUScustomary = {\n    \"kilometer/hour\": \"miles/hour\",\n    \"meters/second\": \"feet/second\",\n    \"kilometer/second\": \"miles/second\"\n};\nilib.Measurement.Speed.UScustomaryTometric = {\n    \"miles/hour\": \"kilometer/hour\",\n    \"feet/second\": \"meters/second\",\n    \"miles/second\": \"kilometer/second\",\n    \"knot\": \"kilometer/hour\"\n};\n\nilib.Measurement.Speed.prototype = new ilib.Measurement({});\nilib.Measurement.Speed.prototype.parent = ilib.Measurement;\nilib.Measurement.Speed.prototype.constructor = ilib.Measurement.Speed;\n\n/**\n * Return the type of this measurement. Examples are \"mass\",\n * \"length\", \"speed\", etc. Measurements can only be converted\n * to measurements of the same type.<p>\n *\n * The type of the units is determined automatically from the\n * units. For example, the unit \"grams\" is type \"mass\". Use the\n * static call {@link ilib.Measurement.getAvailableUnits}\n * to find out what units this version of ilib supports.\n *\n * @return {string} the name of the type of this measurement\n */\nilib.Measurement.Speed.prototype.getMeasure = function() {\n\treturn \"speed\";\n};\n\n/**\n * Return a new measurement instance that is converted to a new\n * measurement unit. Measurements can only be converted\n * to measurements of the same type.<p>\n *\n * @param {string} to The name of the units to convert to\n * @return {ilib.Measurement|undefined} the converted measurement\n * or undefined if the requested units are for a different\n * measurement type\n */\nilib.Measurement.Speed.prototype.convert = function(to) {\n\tif (!to || typeof(ilib.Measurement.Speed.ratios[this.normalizeUnits(to)]) === 'undefined') {\n\t\treturn undefined;\n\t}\n\treturn new ilib.Measurement({\n\t\tunit: to,\n\t\tamount: this\n\t});\n};\n\n/**\n * Scale the measurement unit to an acceptable level. The scaling\n * happens so that the integer part of the amount is as small as\n * possible without being below zero. This will result in the\n * largest units that can represent this measurement without\n * fractions. Measurements can only be scaled to other measurements\n * of the same type.\n *\n * @param {string=} measurementsystem system to use (uscustomary|imperial|metric),\n * or undefined if the system can be inferred from the current measure\n * @return {ilib.Measurement} a new instance that is scaled to the\n * right level\n */\nilib.Measurement.Speed.prototype.scale = function(measurementsystem) {\n\tvar mSystem;\n\tif (measurementsystem === \"metric\" ||\n\t    (typeof (measurementsystem) === 'undefined' && typeof (ilib.Measurement.Speed.metricSystem[this.unit]) !== 'undefined')) {\n\t\tmSystem = ilib.Measurement.Speed.metricSystem;\n\t} else if (measurementsystem === \"imperial\" ||\n\t    (typeof (measurementsystem) === 'undefined' && typeof (ilib.Measurement.Speed.imperialSystem[this.unit]) !== 'undefined')) {\n\t\tmSystem = ilib.Measurement.Speed.imperialSystem;\n\t} else if (measurementsystem === \"uscustomary\" ||\n\t    (typeof (measurementsystem) === 'undefined' && typeof (ilib.Measurement.Speed.uscustomarySystem[this.unit]) !== 'undefined')) {\n\t\tmSystem = ilib.Measurement.Speed.uscustomarySystem;\n\t} else {\n\t\treturn new ilib.Measurement.Speed({\n\t\t    unit: this.unit,\n\t\t    amount: this.amount\n\t\t});\n\t}\n\n\tvar speed = this.amount;\n\tvar munit = this.unit;\n\tvar fromRow = ilib.Measurement.Speed.ratios[this.unit];\n\n\tfor ( var m in mSystem) {\n\t\tvar tmp = this.amount * fromRow[mSystem[m]];\n\t\tif (tmp < 1)\n\t\t\tbreak;\n\t\tspeed = tmp;\n\t\tmunit = m;\n\t}\n\n\treturn new ilib.Measurement.Speed({\n\t    unit: munit,\n\t    amount: speed\n\t});\n};\n\n/**\n * Localize the measurement to the commonly used measurement in that locale. For example\n * If a user's locale is \"en-US\" and the measurement is given as \"60 kmh\",\n * the formatted number should be automatically converted to the most appropriate\n * measure in the other system, in this case, mph. The formatted result should\n * appear as \"37.3 mph\".\n *\n * @abstract\n * @param {string} locale current locale string\n * @returns {ilib.Measurement} a new instance that is converted to locale\n */\nilib.Measurement.Speed.prototype.localize = function(locale) {\n    var to;\n    if (locale === \"en-US\" || locale === \"en-GB\") {\n        to = ilib.Measurement.Speed.metricToUScustomary[this.unit] || this.unit;\n    } else {\n        to = ilib.Measurement.Speed.UScustomaryTometric[this.unit] || this.unit;\n    }\n    return new ilib.Measurement.Speed({\n\t\tunit: to,\n\t\tamount: this\n    });\n};\n\nilib.Measurement.Speed.aliases = {\n    \"foot/sec\": \"feet/second\",\n    \"foot/s\": \"feet/second\",\n    \"feet/s\": \"feet/second\",\n    \"f/s\": \"feet/second\",\n    \"feet/second\": \"feet/second\",\n    \"feet/sec\": \"feet/second\",\n    \"meter/sec\": \"meters/second\",\n    \"meter/s\": \"meters/second\",\n    \"meters/s\": \"meters/second\",\n    \"metre/sec\": \"meters/second\",\n    \"metre/s\": \"meters/second\",\n    \"metres/s\": \"meters/second\",\n    \"mt/sec\": \"meters/second\",\n    \"m/sec\": \"meters/second\",\n    \"mt/s\": \"meters/second\",\n    \"m/s\": \"meters/second\",\n    \"mps\": \"meters/second\",\n    \"meters/second\": \"meters/second\",\n    \"meters/sec\": \"meters/second\",\n    \"kilometer/hour\": \"kilometer/hour\",\n    \"km/hour\": \"kilometer/hour\",\n    \"kilometers/hour\": \"kilometer/hour\",\n    \"kmh\": \"kilometer/hour\",\n    \"km/h\": \"kilometer/hour\",\n    \"kilometer/h\": \"kilometer/hour\",\n    \"kilometers/h\": \"kilometer/hour\",\n    \"km/hr\": \"kilometer/hour\",\n    \"kilometer/hr\": \"kilometer/hour\",\n    \"kilometers/hr\": \"kilometer/hour\",\n    \"kilometre/hour\": \"kilometer/hour\",\n    \"mph\": \"miles/hour\",\n    \"mile/hour\": \"miles/hour\",\n    \"mile/hr\": \"miles/hour\",\n    \"mile/h\": \"miles/hour\",\n    \"miles/h\": \"miles/hour\",\n    \"miles/hr\": \"miles/hour\",\n    \"miles/hour\": \"miles/hour\",\n    \"kn\": \"knot\",\n    \"kt\": \"knot\",\n    \"kts\": \"knot\",\n    \"knots\": \"knot\",\n    \"nm/h\": \"knot\",\n    \"nm/hr\": \"knot\",\n    \"nauticalmile/h\": \"knot\",\n    \"nauticalmile/hr\": \"knot\",\n    \"nauticalmile/hour\": \"knot\",\n    \"nauticalmiles/hr\": \"knot\",\n    \"nauticalmiles/hour\": \"knot\",\n    \"knot\": \"knot\",\n    \"kilometer/second\": \"kilometer/second\",\n    \"kilometer/sec\": \"kilometer/second\",\n    \"kilometre/sec\": \"kilometer/second\",\n    \"Kilometre/sec\": \"kilometer/second\",\n    \"kilometers/second\": \"kilometer/second\",\n    \"kilometers/sec\": \"kilometer/second\",\n    \"kilometres/sec\": \"kilometer/second\",\n    \"Kilometres/sec\": \"kilometer/second\",\n    \"km/sec\": \"kilometer/second\",\n    \"Km/s\": \"kilometer/second\",\n    \"km/s\": \"kilometer/second\",\n    \"miles/second\": \"miles/second\",\n    \"miles/sec\": \"miles/second\",\n    \"miles/s\": \"miles/second\",\n    \"mile/s\": \"miles/second\",\n    \"mile/sec\": \"miles/second\",\n    \"Mile/s\": \"miles/second\"\n};\n\n/**\n * Convert a speed to another measure.\n * @static\n * @param to {string} unit to convert to\n * @param from {string} unit to convert from\n * @param speed {number} amount to be convert\n * @returns {number|undefined} the converted amount\n */\nilib.Measurement.Speed.convert = function(to, from, speed) {\n    from = ilib.Measurement.Speed.aliases[from] || from;\n    to = ilib.Measurement.Speed.aliases[to] || to;\n\tvar fromRow = ilib.Measurement.Speed.ratios[from];\n\tvar toRow = ilib.Measurement.Speed.ratios[to];\n\tif (typeof(from) === 'undefined' || typeof(to) === 'undefined') {\n\t\treturn undefined;\n\t}\n\tvar result = speed * fromRow[toRow[0]];\n    return result;\n};\n\n/**\n * @private\n * @static\n */\nilib.Measurement.Speed.getMeasures = function () {\n\tvar ret = [];\n\tfor (var m in ilib.Measurement.Speed.ratios) {\n\t\tret.push(m);\n\t}\n\treturn ret;\n};\n\n//register with the factory method\nilib.Measurement._constructors[\"speed\"] = ilib.Measurement.Speed;\n\n/*\n * digitalStorage.js - Unit conversions for Digital Storage\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n!depends\nilibglobal.js\nunit.js\n*/\n\n/**\n * @class\n * Create a new DigitalStorage measurement instance.\n *\n * @constructor\n * @extends ilib.Measurement\n * @param options {{unit:string,amount:number|string|undefined}} Options controlling\n * the construction of this instance\n */\nilib.Measurement.DigitalStorage = function (options) {\n\tthis.unit = \"bit\";\n\tthis.amount = 0;\n\tthis.aliases = ilib.Measurement.DigitalStorage.aliases; // share this table in all instances\n\n\tif (options) {\n\t\tif (typeof(options.unit) !== 'undefined') {\n\t\t\tthis.originalUnit = options.unit;\n\t\t\tthis.unit = this.aliases[options.unit] || options.unit;\n\t\t}\n\n\t\tif (typeof(options.amount) === 'object') {\n\t\t\tif (options.amount.getMeasure() === \"digitalStorage\") {\n\t\t\t\tthis.amount = ilib.Measurement.DigitalStorage.convert(this.unit, options.amount.getUnit(), options.amount.getAmount());\n\t\t\t} else {\n\t\t\t\tthrow \"Cannot convert unit \" + options.amount.unit + \" to a digitalStorage\";\n\t\t\t}\n\t\t} else if (typeof(options.amount) !== 'undefined') {\n\t\t\tthis.amount = parseFloat(options.amount);\n\t\t}\n\t}\n\n\tif (typeof(ilib.Measurement.DigitalStorage.ratios[this.unit]) === 'undefined') {\n\t\tthrow \"Unknown unit: \" + options.unit;\n\t}\n};\n\nilib.Measurement.DigitalStorage.ratios = {\n    /*                 bit             byte            kb              kB              mb              mB              gb               gB               tb               tB               pb               pB   */\n\t\"bit\":      [ 1,   1,              0.125,          0.0009765625,   1.220703125e-4, 9.536743164e-7, 1.192092896e-7, 9.313225746e-10, 1.164153218e-10, 9.094947017e-13, 1.136868377e-13, 8.881784197e-16, 1.110223025e-16 ],\n    \"byte\":     [ 2,   8,              1,              0.0078125,      0.0009765625,   7.629394531e-6, 9.536743164e-7, 7.450580597e-9,  9.313225746e-10, 7.275957614e-12, 9.094947017e-13, 7.105427358e-15, 8.881784197e-16 ],\n    \"kilobit\":  [ 3,   1024,           128,            1,              0.125,          0.0009765625,   1.220703125e-4, 9.536743164e-7,  1.192092896e-7,  9.313225746e-10, 1.164153218e-10, 9.094947017e-13, 1.136868377e-13 ],\n    \"kilobyte\": [ 4,   8192,           1024,           8,              1,              0.0078125,      0.0009765625,   7.629394531e-6,  9.536743164e-7,  7.450580597e-9,  9.313225746e-10, 7.275957614e-12, 9.094947017e-13 ],\n    \"megabit\":  [ 5,   1048576,        131072,         1024,           128,            1,              0.125,          0.0009765625,    1.220703125e-4,  9.536743164e-7,  1.192092896e-7,  9.313225746e-10, 1.164153218e-10 ],\n    \"megabyte\": [ 6,   8388608,        1048576,        8192,           1024,           8,              1,              0.0078125,       0.0009765625,    7.629394531e-6,  9.536743164e-7,  7.450580597e-9,  9.313225746e-10 ],\n    \"gigabit\":  [ 7,   1073741824,     134217728,      1048576,        131072,         1024,           128,            1,               0.125,           0.0009765625,    1.220703125e-4,  9.536743164e-7,  1.192092896e-7  ],\n    \"gigabyte\": [ 8,   8589934592,     1073741824,     8388608,        1048576,        8192,           1024,           8,               1,               0.0078125,       0.0009765625,    7.629394531e-6,  9.536743164e-7  ],\n    \"terabit\":  [ 9,   1.099511628e12, 137438953472,   1073741824,     134217728,      1048576,        131072,         1024,            128,             1,               0.125,           0.0009765625,    1.220703125e-4  ],\n    \"terabyte\": [ 10,  8.796093022e12, 1.099511628e12, 8589934592,     1073741824,     8388608,        1048576,        8192,            1024,            8,               1,               0.0078125,       0.0009765625    ],\n    \"petabit\":  [ 11,  1.125899907e15, 1.407374884e14, 1.099511628e12, 137438953472,   1073741824,     134217728,      1048576,         131072,          1024,            128,             1,               0.125           ],\n    \"petabyte\": [ 12,  9.007199255e15, 1.125899907e15, 8.796093022e12, 1.099511628e12, 8589934592,     1073741824,     8388608,         1048576,         8192,            1024,            8,               1               ]\n};\nilib.Measurement.DigitalStorage.prototype = new ilib.Measurement({});\nilib.Measurement.DigitalStorage.prototype.parent = ilib.Measurement;\nilib.Measurement.DigitalStorage.prototype.constructor = ilib.Measurement.DigitalStorage;\n\n/**\n * Return the type of this measurement. Examples are \"mass\",\n * \"length\", \"speed\", etc. Measurements can only be converted\n * to measurements of the same type.<p>\n *\n * The type of the units is determined automatically from the\n * units. For example, the unit \"grams\" is type \"mass\". Use the\n * static call {@link ilib.Measurement.getAvailableUnits}\n * to find out what units this version of ilib supports.\n *\n * @return {string} the name of the type of this measurement\n */\nilib.Measurement.DigitalStorage.prototype.getMeasure = function() {\n\treturn \"digitalStorage\";\n};\n\n/**\n * Return a new measurement instance that is converted to a new\n * measurement unit. Measurements can only be converted\n * to measurements of the same type.<p>\n *\n * @param {string} to The name of the units to convert to\n * @return {ilib.Measurement|undefined} the converted measurement\n * or undefined if the requested units are for a different\n * measurement type\n *\n */\nilib.Measurement.DigitalStorage.prototype.convert = function(to) {\n\tif (!to || typeof(ilib.Measurement.DigitalStorage.ratios[this.normalizeUnits(to)]) === 'undefined') {\n\t\treturn undefined;\n\t}\n\treturn new ilib.Measurement({\n\t\tunit: to,\n\t\tamount: this\n\t});\n};\n\n/**\n * Localize the measurement to the commonly used measurement in that locale. For example\n * If a user's locale is \"en-US\" and the measurement is given as \"60 kmh\",\n * the formatted number should be automatically converted to the most appropriate\n * measure in the other system, in this case, mph. The formatted result should\n * appear as \"37.3 mph\".\n *\n * @abstract\n * @param {string} locale current locale string\n * @returns {ilib.Measurement} a new instance that is converted to locale\n */\nilib.Measurement.DigitalStorage.prototype.localize = function(locale) {\n    return new ilib.Measurement.DigitalStorage({\n        unit: this.unit,\n        amount: this.amount\n    });\n};\n\n/**\n * Scale the measurement unit to an acceptable level. The scaling\n * happens so that the integer part of the amount is as small as\n * possible without being below zero. This will result in the\n * largest units that can represent this measurement without\n * fractions. Measurements can only be scaled to other measurements\n * of the same type.\n *\n * @param {string=} measurementsystem system to use (uscustomary|imperial|metric),\n * or undefined if the system can be inferred from the current measure\n * @return {ilib.Measurement} a new instance that is scaled to the\n * right level\n */\nilib.Measurement.DigitalStorage.prototype.scale = function(measurementsystem) {\n\n    var fromRow = ilib.Measurement.DigitalStorage.ratios[this.unit];\n    var dStorage = this.amount;\n    var munit = this.unit;\n    var i=1;\n\n    for (var m in ilib.Measurement.DigitalStorage.ratios) {\n        var tmp = this.amount * fromRow[i];\n        if (tmp < 1) break;\n        dStorage = tmp;\n        munit = m;\n        ++i\n    }\n\n    return new ilib.Measurement.DigitalStorage({\n\tunit: munit,\n\tamount: dStorage\n    });\n};\n\nilib.Measurement.DigitalStorage.aliases = {\n    \"bits\": \"bit\",\n    \"bit\": \"bit\",\n    \"Bits\": \"bit\",\n    \"Bit\": \"bit\",\n    \"byte\": \"byte\",\n    \"bytes\": \"byte\",\n    \"Byte\": \"byte\",\n    \"Bytes\": \"byte\",\n    \"kilobits\": \"kilobit\",\n    \"Kilobits\": \"kilobit\",\n    \"KiloBits\": \"kilobit\",\n    \"kiloBits\": \"kilobit\",\n    \"kilobit\": \"kilobit\",\n    \"Kilobit\": \"kilobit\",\n    \"kiloBit\": \"kilobit\",\n    \"KiloBit\": \"kilobit\",\n    \"kb\": \"kilobit\",\n    \"Kb\": \"kilobit\",\n    \"kilobyte\": \"kilobyte\",\n    \"Kilobyte\": \"kilobyte\",\n    \"kiloByte\": \"kilobyte\",\n    \"KiloByte\": \"kilobyte\",\n    \"kilobytes\": \"kilobyte\",\n    \"Kilobytes\": \"kilobyte\",\n    \"kiloBytes\": \"kilobyte\",\n    \"KiloBytes\": \"kilobyte\",\n    \"kB\": \"kilobyte\",\n    \"KB\": \"kilobyte\",\n    \"megabit\": \"megabit\",\n    \"Megabit\": \"megabit\",\n    \"megaBit\": \"megabit\",\n    \"MegaBit\": \"megabit\",\n    \"megabits\": \"megabit\",\n    \"Megabits\": \"megabit\",\n    \"megaBits\": \"megabit\",\n    \"MegaBits\": \"megabit\",\n    \"Mb\": \"megabit\",\n    \"mb\": \"megabit\",\n    \"megabyte\": \"megabyte\",\n    \"Megabyte\": \"megabyte\",\n    \"megaByte\": \"megabyte\",\n    \"MegaByte\": \"megabyte\",\n    \"megabytes\": \"megabyte\",\n    \"Megabytes\": \"megabyte\",\n    \"megaBytes\": \"megabyte\",\n    \"MegaBytes\": \"megabyte\",\n    \"MB\": \"megabyte\",\n    \"mB\": \"megabyte\",\n    \"gigabit\": \"gigabit\",\n    \"Gigabit\": \"gigabit\",\n    \"gigaBit\": \"gigabit\",\n    \"GigaBit\": \"gigabit\",\n    \"gigabits\": \"gigabit\",\n    \"Gigabits\": \"gigabit\",\n    \"gigaBits\": \"gigabyte\",\n    \"GigaBits\": \"gigabit\",\n    \"Gb\": \"gigabit\",\n    \"gb\": \"gigabit\",\n    \"gigabyte\": \"gigabyte\",\n    \"Gigabyte\": \"gigabyte\",\n    \"gigaByte\": \"gigabyte\",\n    \"GigaByte\": \"gigabyte\",\n    \"gigabytes\": \"gigabyte\",\n    \"Gigabytes\": \"gigabyte\",\n    \"gigaBytes\": \"gigabyte\",\n    \"GigaBytes\": \"gigabyte\",\n    \"GB\": \"gigabyte\",\n    \"gB\": \"gigabyte\",\n    \"terabit\": \"terabit\",\n    \"Terabit\": \"terabit\",\n    \"teraBit\": \"terabit\",\n    \"TeraBit\": \"terabit\",\n    \"terabits\": \"terabit\",\n    \"Terabits\": \"terabit\",\n    \"teraBits\": \"terabit\",\n    \"TeraBits\": \"terabit\",\n    \"tb\": \"terabit\",\n    \"Tb\": \"terabit\",\n    \"terabyte\": \"terabyte\",\n    \"Terabyte\": \"terabyte\",\n    \"teraByte\": \"terabyte\",\n    \"TeraByte\": \"terabyte\",\n    \"terabytes\": \"terabyte\",\n    \"Terabytes\": \"terabyte\",\n    \"teraBytes\": \"terabyte\",\n    \"TeraBytes\": \"terabyte\",\n    \"TB\": \"terabyte\",\n    \"tB\": \"terabyte\",\n    \"petabit\": \"petabit\",\n    \"Petabit\": \"petabit\",\n    \"petaBit\": \"petabit\",\n    \"PetaBit\": \"petabit\",\n    \"petabits\": \"petabit\",\n    \"Petabits\": \"petabit\",\n    \"petaBits\": \"petabit\",\n    \"PetaBits\": \"petabit\",\n    \"pb\": \"petabit\",\n    \"Pb\": \"petabit\",\n    \"petabyte\": \"petabyte\",\n    \"Petabyte\": \"petabyte\",\n    \"petaByte\": \"petabyte\",\n    \"PetaByte\": \"petabyte\",\n    \"petabytes\": \"petabyte\",\n    \"Petabytes\": \"petabyte\",\n    \"petaBytes\": \"petabyte\",\n    \"PetaBytes\": \"petabyte\",\n    \"PB\": \"petabyte\",\n    \"pB\": \"petabyte\"\n};\n\n/**\n * Convert a digitalStorage to another measure.\n * @static\n * @param to {string} unit to convert to\n * @param from {string} unit to convert from\n * @param digitalStorage {number} amount to be convert\n * @returns {number|undefined} the converted amount\n */\nilib.Measurement.DigitalStorage.convert = function(to, from, digitalStorage) {\n    from = ilib.Measurement.DigitalStorage.aliases[from] || from;\n    to = ilib.Measurement.DigitalStorage.aliases[to] || to;\n\tvar fromRow = ilib.Measurement.DigitalStorage.ratios[from];\n\tvar toRow = ilib.Measurement.DigitalStorage.ratios[to];\n\tif (typeof(from) === 'undefined' || typeof(to) === 'undefined') {\n\t\treturn undefined;\n\t}\n\tvar result = digitalStorage * fromRow[toRow[0]];\n    return result;\n};\n\n/**\n * @private\n * @static\n */\nilib.Measurement.DigitalStorage.getMeasures = function () {\n\tvar ret = [];\n\tfor (var m in ilib.Measurement.DigitalStorage.ratios) {\n\t\tret.push(m);\n\t}\n\treturn ret;\n};\n\n//register with the factory method\nilib.Measurement._constructors[\"digitalStorage\"] = ilib.Measurement.DigitalStorage;\n\n/*\n * temperature.js - Unit conversions for Temperature/temperature\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n!depends\nilibglobal.js\nunit.js\n*/\n\n/**\n * @class\n * Create a new Temperature measurement instance.\n *\n * @constructor\n * @extends ilib.Measurement\n * @param options {{unit:string,amount:number|string|undefined}} Options controlling\n * the construction of this instance\n */\nilib.Measurement.Temperature = function (options) {\n\tthis.unit = \"celsius\";\n\tthis.amount = 0;\n\tthis.aliases = ilib.Measurement.Temperature.aliases; // share this table in all instances\n\n\tif (options) {\n\t\tif (typeof(options.unit) !== 'undefined') {\n\t\t\tthis.originalUnit = options.unit;\n\t\t\tthis.unit = this.aliases[options.unit] || options.unit;\n\t\t}\n\n\t\tif (typeof(options.amount) === 'object') {\n\t\t\tif (options.amount.getMeasure() === \"temperature\") {\n\t\t\t\tthis.amount = ilib.Measurement.Temperature.convert(this.unit, options.amount.getUnit(), options.amount.getAmount());\n\t\t\t} else {\n\t\t\t\tthrow \"Cannot convert unit \" + options.amount.unit + \" to a temperature\";\n\t\t\t}\n\t\t} else if (typeof(options.amount) !== 'undefined') {\n\t\t\tthis.amount = parseFloat(options.amount);\n\t\t}\n\t}\n};\n\nilib.Measurement.Temperature.prototype = new ilib.Measurement({});\nilib.Measurement.Temperature.prototype.parent = ilib.Measurement;\nilib.Measurement.Temperature.prototype.constructor = ilib.Measurement.Temperature;\n\n/**\n * Return the type of this measurement. Examples are \"mass\",\n * \"length\", \"speed\", etc. Measurements can only be converted\n * to measurements of the same type.<p>\n *\n * The type of the units is determined automatically from the\n * units. For example, the unit \"grams\" is type \"mass\". Use the\n * static call {@link ilib.Measurement.getAvailableUnits}\n * to find out what units this version of ilib supports.\n *\n * @return {string} the name of the type of this measurement\n */\nilib.Measurement.Temperature.prototype.getMeasure = function() {\n\treturn \"temperature\";\n};\n\nilib.Measurement.Temperature.aliases = {\n    \"Celsius\": \"celsius\",\n    \"celsius\": \"celsius\",\n    \"C\": \"celsius\",\n    \"centegrade\": \"celsius\",\n    \"Centegrade\": \"celsius\",\n    \"centigrade\": \"celsius\",\n    \"Centigrade\": \"celsius\",\n    \"fahrenheit\": \"fahrenheit\",\n    \"Fahrenheit\": \"fahrenheit\",\n    \"F\": \"fahrenheit\",\n    \"kelvin\": \"kelvin\",\n    \"K\": \"kelvin\",\n    \"Kelvin\": \"kelvin\",\n    \"°F\": \"fahrenheit\",\n    \"℉\": \"fahrenheit\",\n    \"℃\": \"celsius\",\n    \"°C\": \"celsius\"\n};\n\n/**\n * Return a new measurement instance that is converted to a new\n * measurement unit. Measurements can only be converted\n * to measurements of the same type.<p>\n *\n * @param {string} to The name of the units to convert to\n * @return {ilib.Measurement|undefined} the converted measurement\n * or undefined if the requested units are for a different\n * measurement type\n */\nilib.Measurement.Temperature.prototype.convert = function(to) {\n\tif (!to || typeof(ilib.Measurement.Temperature.ratios[this.normalizeUnits(to)]) === 'undefined') {\n\t\treturn undefined;\n\t}\n\treturn new ilib.Measurement({\n\t\tunit: to,\n\t\tamount: this\n\t});\n};\n\n/**\n * Convert a temperature to another measure.\n * @static\n * @param to {string} unit to convert to\n * @param from {string} unit to convert from\n * @param temperature {number} amount to be convert\n * @returns {number|undefined} the converted amount\n */\nilib.Measurement.Temperature.convert = function(to, from, temperature) {\n\tvar result = 0;\n\tfrom = ilib.Measurement.Temperature.aliases[from] || from;\n\tto = ilib.Measurement.Temperature.aliases[to] || to;\n\tif (from === to)\n\t\treturn temperature;\n\n\telse if (from === \"celsius\") {\n\t\tif (to === \"fahrenheit\") {\n\t\t\tresult = ((temperature * 9 / 5) + 32);\n\t\t} else if (to === \"kelvin\") {\n\t\t\tresult = (temperature + 273.15);\n\t\t}\n\n\t} else if (from === \"fahrenheit\") {\n\t\tif (to === \"celsius\") {\n\t\t\tresult = ((5 / 9 * (temperature - 32)));\n\t\t} else if (to === \"kelvin\") {\n\t\t\tresult = ((temperature + 459.67) * 5 / 9);\n\t\t}\n\t} else if (from === \"kelvin\") {\n\t\tif (to === \"celsius\") {\n\t\t\tresult = (temperature - 273.15);\n\t\t} else if (to === \"fahrenheit\") {\n\t\t\tresult = ((temperature * 9 / 5) - 459.67);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Scale the measurement unit to an acceptable level. The scaling\n * happens so that the integer part of the amount is as small as\n * possible without being below zero. This will result in the\n * largest units that can represent this measurement without\n * fractions. Measurements can only be scaled to other measurements\n * of the same type.\n *\n * @param {string=} measurementsystem system to use (uscustomary|imperial|metric),\n * or undefined if the system can be inferred from the current measure\n * @return {ilib.Measurement} a new instance that is scaled to the\n * right level\n */\nilib.Measurement.Temperature.prototype.scale = function(measurementsystem) {\n    return new ilib.Measurement.Temperature({\n        unit: this.unit,\n        amount: this.amount\n    });\n};\n\n/**\n * @private\n * @static\n */\nilib.Measurement.Temperature.getMeasures = function () {\n\treturn [\"celsius\", \"kelvin\", \"fahrenheit\"];\n};\nilib.Measurement.Temperature.metricToUScustomary = {\n\t\"celsius\": \"fahrenheit\"\n};\nilib.Measurement.Temperature.usCustomaryToMetric = {\n\t\"fahrenheit\": \"celsius\"\n};\n\n/**\n * Localize the measurement to the commonly used measurement in that locale. For example\n * If a user's locale is \"en-US\" and the measurement is given as \"60 kmh\",\n * the formatted number should be automatically converted to the most appropriate\n * measure in the other system, in this case, mph. The formatted result should\n * appear as \"37.3 mph\".\n *\n * @abstract\n * @param {string} locale current locale string\n * @returns {ilib.Measurement} a new instance that is converted to locale\n */\nilib.Measurement.Temperature.prototype.localize = function(locale) {\n    var to;\n    if (locale === \"en-US\" ) {\n        to = ilib.Measurement.Temperature.metricToUScustomary[this.unit] || this.unit;\n    } else {\n        to = ilib.Measurement.Temperature.usCustomaryToMetric[this.unit] || this.unit;\n    }\n    return new ilib.Measurement.Temperature({\n        unit: to,\n        amount: this\n    });\n};\n//register with the factory method\nilib.Measurement._constructors[\"temperature\"] = ilib.Measurement.Temperature;\n\n/*\n * Unknown.js - Dummy unit conversions for unknown types\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n!depends\nilibglobal.js\nunit.js\n*/\n\n/**\n * @class\n * Create a new unknown measurement instance.\n *\n * @constructor\n * @extends ilib.Measurement\n * @param options {{unit:string,amount:number|string|undefined}} Options controlling\n * the construction of this instance\n */\nilib.Measurement.Unknown = function (options) {\n\tif (options) {\n\t\tthis.unit = options.unit;\n\t\tthis.amount = options.amount;\n\t}\n};\n\nilib.Measurement.Unknown.prototype = new ilib.Measurement({});\nilib.Measurement.Unknown.prototype.parent = ilib.Measurement;\nilib.Measurement.Unknown.prototype.constructor = ilib.Measurement.Unknown;\n\nilib.Measurement.Unknown.aliases = {\n\t\"unknown\":\"unknown\"\n};\n\n\n/**\n * Return the type of this measurement. Examples are \"mass\",\n * \"length\", \"speed\", etc. Measurements can only be converted\n * to measurements of the same type.<p>\n *\n * The type of the units is determined automatically from the\n * units. For example, the unit \"grams\" is type \"mass\". Use the\n * static call {@link ilib.Measurement.getAvailableUnits}\n * to find out what units this version of ilib supports.\n *\n * @return {string} the name of the type of this measurement\n */\nilib.Measurement.Unknown.prototype.getMeasure = function() {\n\treturn \"unknown\";\n};\n\n/**\n * Return a new measurement instance that is converted to a new\n * measurement unit. Measurements can only be converted\n * to measurements of the same type.<p>\n *\n * @param {string} to The name of the units to convert to\n * @return {ilib.Measurement|undefined} the converted measurement\n * or undefined if the requested units are for a different\n * measurement type\n */\nilib.Measurement.Unknown.prototype.convert = function(to) {\n\treturn undefined;\n};\n\n/**\n * Convert a unknown to another measure.\n * @static\n * @param {string} to unit to convert to\n * @param {string} from unit to convert from\n * @param {number} unknown amount to be convert\n * @returns {number|undefined} the converted amount\n */\nilib.Measurement.Unknown.convert = function(to, from, unknown) {\n    return undefined;\n};\n\n/**\n * Localize the measurement to the commonly used measurement in that locale. For example\n * If a user's locale is \"en-US\" and the measurement is given as \"60 kmh\",\n * the formatted number should be automatically converted to the most appropriate\n * measure in the other system, in this case, mph. The formatted result should\n * appear as \"37.3 mph\".\n *\n * @abstract\n * @param {string} locale current locale string\n * @returns {ilib.Measurement} a new instance that is converted to locale\n */\nilib.Measurement.Unknown.prototype.localize = function(locale) {\n    return new ilib.Measurement.Unknown({\n        unit: this.unit,\n        amount: this.amount\n    });\n};\n\n/**\n * Scale the measurement unit to an acceptable level. The scaling\n * happens so that the integer part of the amount is as small as\n * possible without being below zero. This will result in the\n * largest units that can represent this measurement without\n * fractions. Measurements can only be scaled to other measurements\n * of the same type.\n *\n * @param {string=} measurementsystem system to use (uscustomary|imperial|metric),\n * or undefined if the system can be inferred from the current measure\n * @return {ilib.Measurement} a new instance that is scaled to the\n * right level\n */\nilib.Measurement.Unknown.prototype.scale = function(measurementsystem) {\n    return new ilib.Measurement.Unknown({\n        unit: this.unit,\n        amount: this.amount\n    });\n};\n\n/**\n * @private\n * @static\n */\nilib.Measurement.Unknown.getMeasures = function () {\n\treturn [];\n};\n\n//register with the factory method\nilib.Measurement._constructors[\"unknown\"] = ilib.Measurement.Unknown;\n\n\n/*\n * Time.js - Unit conversions for Times/times\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n!depends\nilibglobal.js\nunit.js\n*/\n\n/**\n * @class\n * Create a new time measurement instance.\n *\n * @constructor\n * @extends ilib.Measurement\n * @param options {{unit:string,amount:number|string|undefined}} Options controlling\n * the construction of this instance\n */\nilib.Measurement.Time = function (options) {\n\tthis.unit = \"ns\";\n\tthis.amount = 0;\n\tthis.aliases = ilib.Measurement.Time.aliases; // share this table in all instances\n\n\tif (options) {\n\t\tif (typeof(options.unit) !== 'undefined') {\n\t\t\tthis.originalUnit = options.unit;\n\t\t\tthis.unit = this.aliases[options.unit] || options.unit;\n\t\t}\n\n\t\tif (typeof(options.amount) === 'object') {\n\t\t\tif (options.amount.getMeasure() === \"time\") {\n\t\t\t\tthis.amount = ilib.Measurement.Time.convert(this.unit, options.amount.getUnit(), options.amount.getAmount());\n\t\t\t} else {\n\t\t\t\tthrow \"Cannot convert units \" + options.amount.unit + \" to a time\";\n\t\t\t}\n\t\t} else if (typeof(options.amount) !== 'undefined') {\n\t\t\tthis.amount = parseFloat(options.amount);\n\t\t}\n\t}\n\n\tif (typeof(ilib.Measurement.Time.ratios[this.unit]) === 'undefined') {\n\t\tthrow \"Unknown unit: \" + options.unit;\n\t}\n};\n\nilib.Measurement.Time.ratios = {\n\t/*              index  nsec        msec        mlsec       sec        min          hour          day           week         month        year         decade        century    */\n\t\"nanosecond\":   [ 1,   1,          0.001,      1e-6,       1e-9,      1.6667e-11,  2.7778e-13,   1.1574e-14,   1.6534e-15,  3.8027e-16,  3.1689e-17,  3.1689e-18,   3.1689e-19  ],\n\t\"microsecond\":  [ 2,   1000,       1,          0.001,      1e-6,      1.6667e-8,   2.7778e-10,   1.1574e-11,   1.6534e-12,  3.8027e-13,  3.1689e-14,  3.1689e-15,   3.1689e-16  ],\n\t\"millisecond\":  [ 3,   1e+6,       1000,       1,          0.001,     1.6667e-5,   2.7778e-7,    1.1574e-8,    1.6534e-9,   3.8027e-10,  3.1689e-11,  3.1689e-12,   3.1689e-13  ],\n\t\"second\":       [ 4,   1e+9,       1e+6,       1000,       1,         0.0166667,   0.000277778,  1.1574e-5,    1.6534e-6,   3.8027e-7,   3.1689e-8,   3.1689e-9,    3.1689e-10  ],\n\t\"minute\":       [ 5,   6e+10,      6e+7,       60000,      60,        1,           0.0166667,    0.000694444,  9.9206e-5,   2.2816e-5,   1.9013e-6,   1.9013e-7,    1.9013e-8   ],\n    \"hour\":         [ 6,   3.6e+12,    3.6e+9,     3.6e+6,     3600,      60,          1,            0.0416667,    0.00595238,  0.00136895,  0.00011408,  1.1408e-5,    1.1408e-6   ],\n    \"day\":          [ 7,   8.64e+13,   8.64e+10,   8.64e+7,    86400,     1440,        24,           1,            0.142857,    0.0328549,   0.00273791,  0.000273791,  2.7379e-5   ],\n    \"week\":         [ 8,   6.048e+14,  6.048e+11,  6.048e+8,   604800,    10080,       168,          7,            1,           0.229984,    0.0191654,   0.00191654,   0.000191654 ],\n    \"month\":        [ 9,   2.63e+15,   2.63e+12,   2.63e+9,    2.63e+6,   43829.1,     730.484,      30.4368,      4.34812,     1,           0.0833333,   0.00833333,   0.000833333 ],\n    \"year\":         [ 10,  3.156e+16,  3.156e+13,  3.156e+10,  3.156e+7,  525949,      8765.81,      365.242,      52.1775,     12,          1,           0.1,          0.01        ],\n    \"decade\":       [ 11,  3.156e+17,  3.156e+14,  3.156e+11,  3.156e+8,  5.259e+6,    87658.1,      3652.42,      521.775,     120,         10,          1,            0.1         ],\n    \"century\":      [ 12,  3.156e+18,  3.156e+18,  3.156e+12,  3.156e+9,  5.259e+7,    876581,       36524.2,      5217.75,     1200,        100,         10,           1           ]\n};\n\nilib.Measurement.Time.prototype = new ilib.Measurement({});\nilib.Measurement.Time.prototype.parent = ilib.Measurement;\nilib.Measurement.Time.prototype.constructor = ilib.Measurement.Time;\n\n/**\n * Return the type of this measurement. Examples are \"mass\",\n * \"length\", \"speed\", etc. Measurements can only be converted\n * to measurements of the same type.<p>\n *\n * The type of the units is determined automatically from the\n * units. For example, the unit \"grams\" is type \"mass\". Use the\n * static call {@link ilib.Measurement.getAvailableUnits}\n * to find out what units this version of ilib supports.\n *\n * @return {string} the name of the type of this measurement\n */\nilib.Measurement.Time.prototype.getMeasure = function() {\n\treturn \"time\";\n};\n\n/**\n * Return a new measurement instance that is converted to a new\n * measurement unit. Measurements can only be converted\n * to measurements of the same type.<p>\n *\n * @param {string} to The name of the units to convert to\n * @return {ilib.Measurement|undefined} the converted measurement\n * or undefined if the requested units are for a different\n * measurement type\n */\nilib.Measurement.Time.prototype.convert = function(to) {\n\tif (!to || typeof(ilib.Measurement.Time.ratios[this.normalizeUnits(to)]) === 'undefined') {\n\t\treturn undefined;\n\t}\n\treturn new ilib.Measurement({\n\t\tunit: to,\n\t\tamount: this\n\t});\n};\n\nilib.Measurement.Time.aliases = {\n    \"ns\": \"nanosecond\",\n    \"NS\": \"nanosecond\",\n    \"nS\": \"nanosecond\",\n    \"Ns\": \"nanosecond\",\n    \"Nanosecond\": \"nanosecond\",\n    \"Nanoseconds\": \"nanosecond\",\n    \"nanosecond\": \"nanosecond\",\n    \"nanoseconds\": \"nanosecond\",\n    \"NanoSecond\": \"nanosecond\",\n    \"NanoSeconds\": \"nanosecond\",\n    \"μs\": \"microsecond\",\n    \"μS\": \"microsecond\",\n    \"microsecond\": \"microsecond\",\n    \"microseconds\": \"microsecond\",\n    \"Microsecond\": \"microsecond\",\n    \"Microseconds\": \"microsecond\",\n    \"MicroSecond\": \"microsecond\",\n    \"MicroSeconds\": \"microsecond\",\n    \"ms\": \"millisecond\",\n    \"MS\": \"millisecond\",\n    \"mS\": \"millisecond\",\n    \"Ms\": \"millisecond\",\n    \"millisecond\": \"millisecond\",\n    \"milliseconds\": \"millisecond\",\n    \"Millisecond\": \"millisecond\",\n    \"Milliseconds\": \"millisecond\",\n    \"MilliSecond\": \"millisecond\",\n    \"MilliSeconds\": \"millisecond\",\n    \"s\": \"second\",\n    \"S\": \"second\",\n    \"sec\": \"second\",\n    \"second\": \"second\",\n    \"seconds\": \"second\",\n    \"Second\": \"second\",\n    \"Seconds\": \"second\",\n    \"min\": \"minute\",\n    \"Min\": \"minute\",\n    \"minute\": \"minute\",\n    \"minutes\": \"minute\",\n    \"Minute\": \"minute\",\n    \"Minutes\": \"minute\",\n    \"h\": \"hour\",\n    \"H\": \"hour\",\n    \"hr\": \"hour\",\n    \"Hr\": \"hour\",\n    \"hR\": \"hour\",\n    \"HR\": \"hour\",\n    \"hour\": \"hour\",\n    \"hours\": \"hour\",\n    \"Hour\": \"hour\",\n    \"Hours\": \"hour\",\n    \"Hrs\": \"hour\",\n    \"hrs\": \"hour\",\n    \"day\": \"day\",\n    \"days\": \"day\",\n    \"Day\": \"day\",\n    \"Days\": \"day\",\n    \"week\": \"week\",\n    \"weeks\": \"week\",\n    \"Week\": \"week\",\n    \"Weeks\": \"week\",\n    \"month\": \"month\",\n    \"Month\": \"month\",\n    \"months\": \"month\",\n    \"Months\": \"month\",\n    \"year\": \"year\",\n    \"years\": \"year\",\n    \"Year\": \"year\",\n    \"Years\": \"year\",\n    \"yr\": \"year\",\n    \"Yr\": \"year\",\n    \"yrs\": \"year\",\n    \"Yrs\": \"year\",\n    \"decade\": \"decade\",\n    \"decades\": \"decade\",\n    \"Decade\": \"decade\",\n    \"Decades\": \"decade\",\n    \"century\": \"century\",\n    \"centuries\": \"century\",\n    \"Century\": \"century\",\n    \"Centuries\": \"century\"\n};\n\n/**\n * Convert a time to another measure.\n * @static\n * @param to {string} unit to convert to\n * @param from {string} unit to convert from\n * @param time {number} amount to be convert\n * @returns {number|undefined} the converted amount\n */\nilib.Measurement.Time.convert = function(to, from, time) {\n    from = ilib.Measurement.Time.aliases[from] || from;\n    to = ilib.Measurement.Time.aliases[to] || to;\n    var fromRow = ilib.Measurement.Time.ratios[from];\n    var toRow = ilib.Measurement.Time.ratios[to];\n    if (typeof(from) === 'undefined' || typeof(to) === 'undefined') {\n        return undefined;\n    }\n    return time * fromRow[toRow[0]];\n};\n\n/**\n * Localize the measurement to the commonly used measurement in that locale. For example\n * If a user's locale is \"en-US\" and the measurement is given as \"60 kmh\",\n * the formatted number should be automatically converted to the most appropriate\n * measure in the other system, in this case, mph. The formatted result should\n * appear as \"37.3 mph\".\n *\n * @abstract\n * @param {string} locale current locale string\n * @returns {ilib.Measurement} a new instance that is converted to locale\n */\nilib.Measurement.Time.prototype.localize = function(locale) {\n    return new ilib.Measurement.Time({\n        unit: this.unit,\n        amount: this.amount\n    });\n};\n\n/**\n * Scale the measurement unit to an acceptable level. The scaling\n * happens so that the integer part of the amount is as small as\n * possible without being below zero. This will result in the\n * largest units that can represent this measurement without\n * fractions. Measurements can only be scaled to other measurements\n * of the same type.\n *\n * @param {string=} measurementsystem system to use (uscustomary|imperial|metric),\n * or undefined if the system can be inferred from the current measure\n * @return {ilib.Measurement} a new instance that is scaled to the\n * right level\n */\nilib.Measurement.Time.prototype.scale = function(measurementsystem) {\n\n    var fromRow = ilib.Measurement.Time.ratios[this.unit];\n    var time = this.amount;\n    var munit = this.unit;\n    var i=1;\n\n    for (var m in ilib.Measurement.Time.ratios) {\n        var tmp = this.amount * fromRow[i];\n        if (tmp < 1) break;\n        time = tmp;\n        munit = m;\n        ++i\n    }\n\n    return new ilib.Measurement.Time({\n        unit: munit,\n        amount: time\n    });\n};\n/**\n * @private\n * @static\n */\nilib.Measurement.Time.getMeasures = function () {\n\tvar ret = [];\n\tfor (var m in ilib.Measurement.Time.ratios) {\n\t\tret.push(m);\n\t}\n\treturn ret;\n};\n\n//register with the factory method\nilib.Measurement._constructors[\"time\"] = ilib.Measurement.Time;\n\n/*\n * Mass.js - Unit conversions for Mass/mass\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n!depends\nilibglobal.js\n*/\n\n/**\n * @class\n * Create a new mass measurement instance.\n *\n * @constructor\n * @extends ilib.Measurement\n * @param options {{unit:string,amount:number|string|undefined}} Options controlling\n * the construction of this instance\n */\nilib.Measurement.Mass = function (options) {\n\tthis.unit = \"ns\";\n\tthis.amount = 0;\n\tthis.aliases = ilib.Measurement.Mass.aliases; // share this table in all instances\n\n\tif (options) {\n\t\tif (typeof(options.unit) !== 'undefined') {\n\t\t\tthis.originalUnit = options.unit;\n\t\t\tthis.unit = this.aliases[options.unit] || options.unit;\n\t\t}\n\n\t\tif (typeof(options.amount) === 'object') {\n\t\t\tif (options.amount.getMeasure() === \"mass\") {\n\t\t\t\tthis.amount = ilib.Measurement.Mass.convert(this.unit, options.amount.getUnit(), options.amount.getAmount());\n\t\t\t} else {\n\t\t\t\tthrow \"Cannot convert units \" + options.amount.unit + \" to a mass\";\n\t\t\t}\n\t\t} else if (typeof(options.amount) !== 'undefined') {\n\t\t\tthis.amount = parseFloat(options.amount);\n\t\t}\n\t}\n\n\tif (typeof(ilib.Measurement.Mass.ratios[this.unit]) === 'undefined') {\n\t\tthrow \"Unknown unit: \" + options.unit;\n\t}\n};\n\nilib.Measurement.Mass.ratios = {\n\t/*             index  µg          mg         g          oz          lp           kg          st            sh ton       mt ton        ln ton      */\n\t\"microgram\":   [ 1,   1,          0.001,     1e-6,      3.5274e-8,  2.2046e-9,   1e-9,       1.5747e-10,   1.1023e-12,  1e-12,        9.8421e-13   ],\n\t\"milligram\":   [ 2,   1000,       1,         0.001,     3.5274e-5,  2.2046e-6,   1e-6,       1.5747e-7,    1.1023e-9,   1e-9,         9.8421e-10   ],\n\t\"gram\":        [ 3,   1e+6,       1000,      1,         0.035274,   0.00220462,  0.001,      0.000157473,  1.1023e-6,   1e-6,         9.8421e-7    ],\n\t\"ounce\":       [ 4,   2.835e+7,   28349.5,   28.3495,   1,          0.0625,      0.0283495,  0.00446429,   3.125e-5,    2.835e-5,     2.7902e-5    ],\n\t\"pound\":       [ 5,   4.536e+8,   453592,    453.592,   16,         1,           0.453592,   0.0714286,    0.0005,      0.000453592,  0.000446429  ],\n    \"kilogram\":    [ 6,   1e+9,       1e+6,      1000,      35.274,     2.20462,     1,          0.157473,     0.00110231,  0.001,        0.000984207  ],\n    \"stone\":       [ 7,   6.35e+9,    6.35e+6,   6350.29,   224,        14,          6.35029,    1,            0.007,       0.00635029,   0.00625      ],\n    \"short ton\":   [ 8,   9.072e+11,  9.072e+8,  907185,    32000,      2000,        907.185,    142.857,      1,           0.907185,     0.892857     ],\n    \"metric ton\":  [ 9,   1e+12,      1e+9,      1e+6,      35274,      2204.62,     1000,       157.473,      1.10231,     1,            0.984207     ],\n    \"long ton\":    [ 10,  1.016e+12,  1.016e+9,  1.016e+6,  35840,      2240,        1016.05,    160,          1.12,        1.01605,      1            ]\n};\n\nilib.Measurement.Mass.metricSystem = {\n    \"microgram\": 1,\n    \"milligram\": 2,\n    \"gram\": 3,\n    \"kilogram\": 6,\n    \"metric ton\": 9\n};\nilib.Measurement.Mass.imperialSystem = {\n    \"ounce\": 4,\n    \"pound\": 5,\n    \"stone\": 7,\n    \"long ton\": 10\n};\nilib.Measurement.Mass.uscustomarySystem = {\n    \"ounce\": 4,\n    \"pound\": 5,\n    \"short ton\": 8\n};\n\nilib.Measurement.Mass.metricToUScustomary = {\n    \"microgram\": \"ounce\",\n    \"milligram\": \"ounce\",\n    \"gram\": \"ounce\",\n    \"kilogram\": \"pound\",\n    \"metric ton\": \"long ton\"\n};\nilib.Measurement.Mass.metricToImperial = {\n    \"microgram\": \"ounce\",\n    \"milligram\": \"ounce\",\n    \"gram\": \"ounce\",\n    \"kilogram\": \"pound\",\n    \"metric ton\": \"short ton\"\n};\n\nilib.Measurement.Mass.imperialToMetric = {\n    \"ounce\": \"gram\",\n    \"pound\": \"kilogram\",\n    \"stone\": \"kilogram\",\n    \"short ton\": \"metric ton\"\n};\nilib.Measurement.Mass.imperialToUScustomary = {\n    \"ounce\": \"ounce\",\n    \"pound\": \"pound\",\n    \"stone\": \"stone\",\n    \"short ton\": \"long ton\"\n};\n\nilib.Measurement.Mass.uScustomaryToImperial = {\n    \"ounce\": \"ounce\",\n    \"pound\": \"pound\",\n    \"stone\": \"stone\",\n    \"long ton\": \"short ton\"\n};\nilib.Measurement.Mass.uScustomarylToMetric = {\n    \"ounce\": \"gram\",\n    \"pound\": \"kilogram\",\n    \"stone\": \"kilogram\",\n    \"long ton\": \"metric ton\"\n};\n\n\nilib.Measurement.Mass.prototype = new ilib.Measurement({});\nilib.Measurement.Mass.prototype.parent = ilib.Measurement;\nilib.Measurement.Mass.prototype.constructor = ilib.Measurement.Mass;\n\n/**\n * Localize the measurement to the commonly used measurement in that locale. For example\n * If a user's locale is \"en-US\" and the measurement is given as \"60 kmh\",\n * the formatted number should be automatically converted to the most appropriate\n * measure in the other system, in this case, mph. The formatted result should\n * appear as \"37.3 mph\".\n *\n * @abstract\n * @param {string} locale current locale string\n * @returns {ilib.Measurement} a new instance that is converted to locale\n */\nilib.Measurement.Mass.prototype.localize = function(locale) {\n\tvar to;\n\tif (locale === \"en-US\") {\n\t\tto = ilib.Measurement.Mass.metricToUScustomary[this.unit] ||\n\t\t    ilib.Measurement.Mass.imperialToUScustomary[this.unit] || this.unit;\n\t} else if (locale === \"en-GB\") {\n\t\tto = ilib.Measurement.Mass.metricToImperial[this.unit] ||\n\t\t    ilib.Measurement.Mass.uScustomaryToImperial[this.unit] || this.unit;\n\t} else {\n\t\tto = ilib.Measurement.Mass.uScustomarylToMetric[this.unit] ||\n\t\t    ilib.Measurement.Mass.imperialToUScustomary[this.unit] || this.unit;\n\t}\n\treturn new ilib.Measurement.Mass({\n\t    unit: to,\n\t    amount: this\n\t});\n};\n\n/**\n * Return the type of this measurement. Examples are \"mass\",\n * \"length\", \"speed\", etc. Measurements can only be converted\n * to measurements of the same type.<p>\n *\n * The type of the units is determined automatically from the\n * units. For example, the unit \"grams\" is type \"mass\". Use the\n * static call {@link ilib.Measurement.getAvailableUnits}\n * to find out what units this version of ilib supports.\n *\n * @return {string} the name of the type of this measurement\n */\nilib.Measurement.Mass.prototype.getMeasure = function() {\n\treturn \"mass\";\n};\n\n/**\n * Return a new measurement instance that is converted to a new\n * measurement unit. Measurements can only be converted\n * to measurements of the same type.<p>\n *\n * @param {string} to The name of the units to convert to\n * @return {ilib.Measurement|undefined} the converted measurement\n * or undefined if the requested units are for a different\n * measurement type\n */\nilib.Measurement.Mass.prototype.convert = function(to) {\n\tif (!to || typeof(ilib.Measurement.Mass.ratios[this.normalizeUnits(to)]) === 'undefined') {\n\t\treturn undefined;\n\t}\n\treturn new ilib.Measurement({\n\t\tunit: to,\n\t\tamount: this\n\t});\n};\n\nilib.Measurement.Mass.aliases = {\n    \"µg\":\"microgram\",\n    \"microgram\":\"microgram\",\n    \"mcg\":\"microgram\",\n    \"milligram\":\"milligram\",\n    \"mg\":\"milligram\",\n    \"milligrams\":\"milligram\",\n    \"Milligram\":\"milligram\",\n    \"Milligrams\":\"milligram\",\n    \"MilliGram\":\"milligram\",\n    \"MilliGrams\":\"milligram\",\n    \"g\":\"gram\",\n    \"gram\":\"gram\",\n    \"grams\":\"gram\",\n    \"Gram\":\"gram\",\n    \"Grams\":\"gram\",\n    \"ounce\":\"ounce\",\n    \"oz\":\"ounce\",\n    \"Ounce\":\"ounce\",\n    \"℥\":\"ounce\",\n    \"pound\":\"pound\",\n    \"poundm\":\"pound\",\n    \"℔\":\"pound\",\n    \"lb\":\"pound\",\n    \"pounds\":\"pound\",\n    \"Pound\":\"pound\",\n    \"Pounds\":\"pound\",\n    \"kilogram\":\"kilogram\",\n    \"kg\":\"kilogram\",\n    \"kilograms\":\"kilogram\",\n    \"kilo grams\":\"kilogram\",\n    \"kilo gram\":\"kilogram\",\n    \"Kilogram\":\"kilogram\",\n    \"Kilograms\":\"kilogram\",\n    \"KiloGram\":\"kilogram\",\n    \"KiloGrams\":\"kilogram\",\n    \"Kilo gram\":\"kilogram\",\n    \"Kilo grams\":\"kilogram\",\n    \"Kilo Gram\":\"kilogram\",\n    \"Kilo Grams\":\"kilogram\",\n    \"stone\":\"stone\",\n    \"st\":\"stone\",\n    \"stones\":\"stone\",\n    \"Stone\":\"stone\",\n    \"short ton\":\"short ton\",\n    \"Short ton\":\"short ton\",\n    \"Short Ton\":\"short ton\",\n    \"metric ton\":\"metric ton\",\n    \"metricton\":\"metric ton\",\n    \"t\":\"metric ton\",\n    \"tonne\":\"metric ton\",\n    \"Tonne\":\"metric ton\",\n    \"Metric Ton\":\"metric ton\",\n    \"MetricTon\":\"metric ton\",\n    \"long ton\":\"long ton\",\n    \"longton\":\"long ton\",\n    \"Longton\":\"long ton\",\n    \"Long ton\":\"long ton\",\n    \"Long Ton\":\"long ton\",\n    \"ton\":\"long ton\",\n    \"Ton\":\"long ton\"\n};\n\n/**\n * Convert a mass to another measure.\n * @static\n * @param to {string} unit to convert to\n * @param from {string} unit to convert from\n * @param mass {number} amount to be convert\n * @returns {number|undefined} the converted amount\n */\nilib.Measurement.Mass.convert = function(to, from, mass) {\n    from = ilib.Measurement.Mass.aliases[from] || from;\n    to = ilib.Measurement.Mass.aliases[to] || to;\n    var fromRow = ilib.Measurement.Mass.ratios[from];\n    var toRow = ilib.Measurement.Mass.ratios[to];\n    if (typeof(from) === 'undefined' || typeof(to) === 'undefined') {\n        return undefined;\n    }\n    return mass * fromRow[toRow[0]];\n};\n\n/**\n * Scale the measurement unit to an acceptable level. The scaling\n * happens so that the integer part of the amount is as small as\n * possible without being below zero. This will result in the\n * largest units that can represent this measurement without\n * fractions. Measurements can only be scaled to other measurements\n * of the same type.\n *\n * @param {string=} measurementsystem system to use (uscustomary|imperial|metric),\n * or undefined if the system can be inferred from the current measure\n * @return {ilib.Measurement} a new instance that is scaled to the\n * right level\n */\nilib.Measurement.Mass.prototype.scale = function(measurementsystem) {\n    var mSystem;\n    if (measurementsystem === \"metric\" || (typeof(measurementsystem) === 'undefined'\n            && typeof(ilib.Measurement.Mass.metricSystem[this.unit]) !== 'undefined')) {\n        mSystem = ilib.Measurement.Mass.metricSystem;\n    } else if (measurementsystem === \"imperial\" || (typeof(measurementsystem) === 'undefined'\n            && typeof(ilib.Measurement.Mass.imperialSystem[this.unit]) !== 'undefined')) {\n        mSystem = ilib.Measurement.Mass.imperialSystem;\n    } else if (measurementsystem === \"uscustomary\" || (typeof(measurementsystem) === 'undefined'\n            && typeof(ilib.Measurement.Mass.uscustomarySystem[this.unit]) !== 'undefined')) {\n        mSystem = ilib.Measurement.Mass.uscustomarySystem;\n    } else {\n        return new ilib.Measurement.Mass({\n\t\t\tunit: this.unit,\n\t\t\tamount: this.amount\n\t\t});\n    }\n\n    var mass = this.amount;\n    var munit = this.amount;\n    var fromRow = ilib.Measurement.Mass.ratios[this.unit];\n\n    for (var m in mSystem) {\n        var tmp = this.amount * fromRow[mSystem[m]];\n        if (tmp < 1) break;\n        mass = tmp;\n        munit = m;\n    }\n\n    return new ilib.Measurement.Mass({\n\t\tunit: munit,\n\t\tamount: mass\n    });\n};\n\n/**\n * @private\n * @static\n */\nilib.Measurement.Mass.getMeasures = function () {\n\tvar ret = [];\n\tfor (var m in ilib.Measurement.Mass.ratios) {\n\t\tret.push(m);\n\t}\n\treturn ret;\n};\n\n//register with the factory method\nilib.Measurement._constructors[\"mass\"] = ilib.Measurement.Mass;\n\n/*\n * area.js - Unit conversions for Area\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n!depends\nilibglobal.js\nunit.js\n*/\n\n/**\n * @class\n * Create a new area measurement instance.\n * @constructor\n * @extends ilib.Measurement\n * @param options {{unit:string,amount:number|string|undefined}} Options controlling\n * the construction of this instance\n */\nilib.Measurement.Area = function (options) {\n\tthis.unit = \"square km\";\n\tthis.amount = 0;\n\tthis.aliases = ilib.Measurement.Area.aliases; // share this table in all instances\n\n\tif (options) {\n\t\tif (typeof(options.unit) !== 'undefined') {\n\t\t\tthis.originalUnit = options.unit;\n\t\t\tthis.unit = this.aliases[options.unit] || options.unit;\n\t\t}\n\n\t\tif (typeof(options.amount) === 'object') {\n\t\t\tif (options.amount.getMeasure() === \"area\") {\n\t\t\t\tthis.amount = ilib.Measurement.Area.convert(this.unit, options.amount.getUnit(), options.amount.getAmount());\n\t\t\t} else {\n\t\t\t\tthrow \"Cannot convert unit \" + options.amount.unit + \" to area\";\n\t\t\t}\n\t\t} else if (typeof(options.amount) !== 'undefined') {\n\t\t\tthis.amount = parseFloat(options.amount);\n\t\t}\n\t}\n\n\tif (typeof(ilib.Measurement.Area.ratios[this.unit]) === 'undefined') {\n\t\tthrow \"Unknown unit: \" + options.unit;\n\t}\n};\n\nilib.Measurement.Area.ratios = {\n    /*               index\t\tsquare cm,\t\tsquare meter,   hectare,   \tsquare km, \t, square inch \tsquare foot, \t\tsquare yard, \t  \t  \t\tacre,\t\t\tsquare mile\t\t\t        */\n    \"square centimeter\":[1,   \t1,\t\t\t\t0.0001,\t\t\t1e-8,\t    1e-10,        0.15500031,\t0.00107639104,\t\t0.000119599005,\t\t\t2.47105381e-8,\t\t3.86102159e-11 \t\t],\n    \"square meter\": \t[2,   \t10000,\t\t\t1,              1e-4,       1e-6,         1550,    \t \t10.7639,    \t  \t1.19599,   \t\t\t\t0.000247105,\t\t3.861e-7     \t    ],\n    \"hectare\":      \t[3,\t \t100000000,  \t10000,          1,          0.01,         1.55e+7, \t  \t107639,     \t \t11959.9,   \t\t\t\t2.47105\t,\t\t\t0.00386102    \t    ],\n    \"square km\":    \t[4,\t  \t10000000000, \t1e+6,          \t100,        1,\t          1.55e+9, \t  \t1.076e+7,   \t \t1.196e+6,  \t\t\t\t247.105 ,   \t\t0.386102     \t    ],\n    \"square inch\":  \t[5,\t  \t6.4516,\t\t\t0.00064516,     6.4516e-8,  6.4516e-10,   1,\t\t\t0.000771605,\t  \t0.0007716051, \t\t\t1.5942e-7,\t\t\t2.491e-10    \t    ],\n    \"square foot\":  \t[6,\t\t929.0304,\t\t0.092903,       9.2903e-6,  9.2903e-8,    144,\t\t\t1,          \t  \t0.111111,  \t\t\t\t2.2957e-5,\t\t\t3.587e-8    \t\t],\n    \"square yard\":  \t[7,\t\t8361.2736,\t\t0.836127,       8.3613e-5,  8.3613e-7,    1296,    \t  \t9,          \t  \t1,         \t\t\t\t0.000206612,\t\t3.2283e-7    \t    ],\n    \"acre\":         \t[8,\t\t40468564.2,\t\t4046.86,        0.404686,   0.00404686,   6.273e+6,\t  \t43560,      \t  \t4840,      \t\t\t\t1,\t\t    \t\t0.0015625    \t    ],\n    \"square mile\":  \t[9,\t   \t2.58998811e+10,\t2.59e+6,        258.999,    2.58999,      4.014e+9,\t \t2.788e+7,   \t  \t3.098e+6,  \t\t\t\t640,     \t\t\t1   \t     \t\t]\n}\n\nilib.Measurement.Area.prototype = new ilib.Measurement({});\nilib.Measurement.Area.prototype.parent = ilib.Measurement;\nilib.Measurement.Area.prototype.constructor = ilib.Measurement.Area;\n\n/**\n * Return the type of this measurement. Examples are \"mass\",\n * \"length\", \"speed\", etc. Measurements can only be converted\n * to measurements of the same type.<p>\n *\n * The type of the units is determined automatically from the\n * units. For example, the unit \"grams\" is type \"mass\". Use the\n * static call {@link ilib.Measurement.getAvailableUnits}\n * to find out what units this version of ilib supports.\n *\n * @return {string} the name of the type of this measurement\n */\nilib.Measurement.Area.prototype.getMeasure = function() {\n\treturn \"area\";\n};\n\n/**\n * Return a new measurement instance that is converted to a new\n * measurement unit. Measurements can only be converted\n * to measurements of the same type.<p>\n *\n * @param {string} to The name of the units to convert to\n * @return {ilib.Measurement|undefined} the converted measurement\n * or undefined if the requested units are for a different\n * measurement type\n *\n */\nilib.Measurement.Area.prototype.convert = function(to) {\n\tif (!to || typeof(ilib.Measurement.Area.ratios[this.normalizeUnits(to)]) === 'undefined') {\n\t\treturn undefined;\n\t}\n\treturn new ilib.Measurement({\n\t\tunit: to,\n\t\tamount: this\n\t});\n};\n\nilib.Measurement.Area.aliases = {\n    \"square centimeter\":\"square centimeter\",\n    \"square cm\":\"square centimeter\",\n    \"sq cm\":\"square centimeter\",\n    \"Square Cm\":\"square centimeter\",\n    \"square Centimeters\":\"square centimeter\",\n    \"square Centimeter\":\"square centimeter\",\n    \"square Centimetre\":\"square centimeter\",\n    \"square Centimetres\":\"square centimeter\",\n    \"square centimeters\":\"square centimeter\",\n    \"Square km\": \"square km\",\n\t\"Square kilometre\":\"square km\",\n\t\"square kilometer\":\"square km\",\n\t\"square kilometre\":\"square km\",\n\t\"square kilometers\":\"square km\",\n\t\"square kilometres\":\"square km\",\n        \"square km\":\"square km\",\n\t\"sq km\":\"square km\",\n\t\"km2\":\"square km\",\n\t\"Hectare\":\"hectare\",\n\t\"hectare\":\"hectare\",\n\t\"ha\":\"hectare\",\n\t\"Square meter\": \"square meter\",\n\t\"Square meters\":\"square meter\",\n\t\"square meter\": \"square meter\",\n\t\"square meters\":\"square meter\",\n\t\"Square metre\": \"square meter\",\n\t\"Square metres\":\"square meter\",\n\t\"square metres\": \"square meter\",\n\t\"Square Metres\":\"square meter\",\n\t\"sqm\":\"square meter\",\n\t\"m2\": \"square meter\",\n\t\"Square mile\":\"square mile\",\n\t\"Square miles\":\"square mile\",\n\t\"square mile\":\"square mile\",\n\t\"square miles\":\"square mile\",\n\t\"square mi\":\"square mile\",\n\t\"Square mi\":\"square mile\",\n\t\"sq mi\":\"square mile\",\n\t\"mi2\":\"square mile\",\n\t\"Acre\": \"acre\",\n\t\"acre\": \"acre\",\n\t\"Acres\":\"acre\",\n\t\"acres\":\"acre\",\n\t\"Square yard\": \"square yard\",\n\t\"Square yards\":\"square yard\",\n\t\"square yard\": \"square yard\",\n\t\"square yards\":\"square yard\",\n\t\"yd2\":\"square yard\",\n\t\"Square foot\": \"square foot\",\n\t\"square foot\": \"square foot\",\n\t\"Square feet\": \"square foot\",\n\t\"Square Feet\": \"square foot\",\n\t\"sq ft\":\"square foot\",\n\t\"ft2\":\"square foot\",\n\t\"Square inch\":\"square inch\",\n\t\"square inch\":\"square inch\",\n\t\"Square inches\":\"square inch\",\n\t\"square inches\":\"square inch\",\n\t\"in2\":\"square inch\"\n};\n\n/**\n * Convert a Area to another measure.\n * @static\n * @param to {string} unit to convert to\n * @param from {string} unit to convert from\n * @param area {number} amount to be convert\n * @returns {number|undefined} the converted amount\n */\nilib.Measurement.Area.convert = function(to, from, area) {\n    from = ilib.Measurement.Area.aliases[from] || from;\n    to = ilib.Measurement.Area.aliases[to] || to;\n\tvar fromRow = ilib.Measurement.Area.ratios[from];\n\tvar toRow = ilib.Measurement.Area.ratios[to];\n\tif (typeof(from) === 'undefined' || typeof(to) === 'undefined') {\n\t\treturn undefined;\n\t}\n\treturn area* fromRow[toRow[0]];\n};\n\n/**\n * @private\n * @static\n */\nilib.Measurement.Area.getMeasures = function () {\n\tvar ret = [];\n\tfor (var m in ilib.Measurement.Area.ratios) {\n\t\tret.push(m);\n\t}\n\treturn ret;\n};\n\nilib.Measurement.Area.metricSystem = {\n\t\"square centimeter\" : 1,\n\t\"square meter\" : 2,\n\t\"hectare\" : 3,\n\t\"square km\" : 4\n};\nilib.Measurement.Area.imperialSystem = {\n\t\"square inch\" : 5,\n\t\"square foot\" : 6,\n\t\"square yard\" : 7,\n\t\"acre\" : 8,\n\t\"square mile\" : 9\n};\nilib.Measurement.Area.uscustomarySystem = {\n\t\"square inch\" : 5,\n\t\"square foot\" : 6,\n\t\"square yard\" : 7,\n\t\"acre\" : 8,\n\t\"square mile\" : 9\n};\n\nilib.Measurement.Area.metricToUScustomary = {\n\t\"square centimeter\" : \"square inch\",\n\t\"square meter\" : \"square yard\",\n\t\"hectare\" : \"acre\",\n\t\"square km\" : \"square mile\"\n};\nilib.Measurement.Area.usCustomaryToMetric = {\n\t\"square inch\" : \"square centimeter\",\n\t\"square foot\" : \"square meter\",\n\t\"square yard\" : \"square meter\",\n\t\"acre\" : \"hectare\",\n\t\"square mile\" : \"square km\"\n};\n\n\n/**\n * Scale the measurement unit to an acceptable level. The scaling\n * happens so that the integer part of the amount is as small as\n * possible without being below zero. This will result in the\n * largest units that can represent this measurement without\n * fractions. Measurements can only be scaled to other measurements\n * of the same type.\n *\n * @param {string=} measurementsystem system to use (uscustomary|imperial|metric),\n * or undefined if the system can be inferred from the current measure\n * @return {ilib.Measurement} a new instance that is scaled to the\n * right level\n */\nilib.Measurement.Area.prototype.scale = function(measurementsystem) {\n    var fromRow = ilib.Measurement.Area.ratios[this.unit];\n    var mSystem;\n\n    if (measurementsystem === \"metric\" || (typeof(measurementsystem) === 'undefined'\n        && typeof(ilib.Measurement.Area.metricSystem[this.unit]) !== 'undefined')) {\n        mSystem = ilib.Measurement.Area.metricSystem;\n    }\n\n    else  if (measurementsystem === \"uscustomary\" || (typeof(measurementsystem) === 'undefined'\n        && typeof(ilib.Measurement.Area.metricSystem[this.unit]) !== 'undefined')) {\n        mSystem = ilib.Measurement.Area.uscustomarySystem;\n    }\n\n    else if (measurementsystem === \"imperial\" || (typeof(measurementsystem) === 'undefined'\n        && typeof(ilib.Measurement.Area.metricSystem[this.unit]) !== 'undefined')) {\n        mSystem = ilib.Measurement.Area.imperialSystem;\n    }\n\n    var area = this.amount;\n    var munit = this.unit;\n\n    for (var m in mSystem) {\n        var tmp = this.amount * fromRow[mSystem[m]];\n        if (tmp < 1) break;\n        area = tmp;\n        munit = m;\n    }\n\n    return new ilib.Measurement.Area({\n        unit: munit,\n        amount: area\n    });\n};\n\n/**\n * Localize the measurement to the commonly used measurement in that locale. For example\n * If a user's locale is \"en-US\" and the measurement is given as \"60 kmh\",\n * the formatted number should be automatically converted to the most appropriate\n * measure in the other system, in this case, mph. The formatted result should\n * appear as \"37.3 mph\".\n *\n * @abstract\n * @param {string} locale current locale string\n * @returns {ilib.Measurement} a new instance that is converted to locale\n */\nilib.Measurement.Area.prototype.localize = function(locale) {\n    var to;\n    if (locale === \"en-US\" || locale === \"en-GB\") {\n        to = ilib.Measurement.Area.metricToUScustomary[this.unit] || this.unit;\n    } else {\n        to = ilib.Measurement.Area.usCustomaryToMetric[this.unit] || this.unit;\n    }\n    return new ilib.Measurement.Area({\n        unit: to,\n        amount: this\n    });\n};\n\n\n//register with the factory method\nilib.Measurement._constructors[\"area\"] = ilib.Measurement.Area;\n\n/*\n * fuelconsumption.js - Unit conversions for FuelConsumption\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n!depends\nilibglobal.js\n*/\n/**\n * @class\n * Create a new fuelconsumption measurement instance.\n *\n * @constructor\n * @extends ilib.Measurement\n * @param options {{unit:string,amount:number|string|undefined}} Options controlling\n * the construction of this instance\n */\nilib.Measurement.FuelConsumption = function(options) {\n    this.unit = \"km/liter\";\n    this.amount = 0;\n    this.aliases = ilib.Measurement.FuelConsumption.aliases; // share this table in all instances\n\n    if (options) {\n        if (typeof(options.unit) !== 'undefined') {\n            this.originalUnit = options.unit;\n            this.unit = this.aliases[options.unit] || options.unit;\n        }\n\n        if (typeof(options.amount) === 'object') {\n            if (options.amount.getMeasure() === \"fuelconsumption\") {\n                this.amount = ilib.Measurement.FuelConsumption.convert(this.unit, options.amount.getUnit(), options.amount.getAmount());\n            } else {\n                throw \"Cannot convert unit \" + options.amount.unit + \" to fuelconsumption\";\n            }\n        } else if (typeof(options.amount) !== 'undefined') {\n            this.amount = parseFloat(options.amount);\n        }\n    }\n};\n\n\nilib.Measurement.FuelConsumption.ratios = [\n    \"km/liter\",\n    \"liter/100km\",\n    \"mpg\",\n    \"mpg(imp)\"\n];\n\nilib.Measurement.FuelConsumption.prototype = new ilib.Measurement({});\nilib.Measurement.FuelConsumption.prototype.parent = ilib.Measurement;\nilib.Measurement.FuelConsumption.prototype.constructor = ilib.Measurement.FuelConsumption;\n\n/**\n * Return the type of this measurement. Examples are \"mass\",\n * \"length\", \"speed\", etc. Measurements can only be converted\n * to measurements of the same type.<p>\n *\n * The type of the units is determined automatically from the\n * units. For example, the unit \"grams\" is type \"mass\". Use the\n * static call {@link ilib.Measurement.getAvailableUnits}\n * to find out what units this version of ilib supports.\n *\n * @return {string} the name of the type of this measurement\n */\nilib.Measurement.FuelConsumption.prototype.getMeasure = function() {\n    return \"fuelconsumption\";\n};\n\n/**\n * Return a new measurement instance that is converted to a new\n * measurement unit. Measurements can only be converted\n * to measurements of the same type.<p>\n *\n * @param {string} to The name of the units to convert to\n * @return {ilib.Measurement|undefined} the converted measurement\n * or undefined if the requested units are for a different\n * measurement type\n */\nilib.Measurement.FuelConsumption.prototype.convert = function(to) {\n    if (!to || typeof(ilib.Measurement.FuelConsumption.ratios[this.normalizeUnits(to)]) === 'undefined') {\n        return undefined;\n    }\n    return new ilib.Measurement({\n        unit: to,\n        amount: this\n    });\n};\n/*[\"km/liter\", \"liter/100km\", \"mpg\", \"mpg(imp)\"*/\nilib.Measurement.FuelConsumption.aliases = {\n    \"Km/liter\": \"km/liter\",\n    \"KM/Liter\": \"km/liter\",\n    \"KM/L\": \"km/liter\",\n    \"Kilometers Per Liter\": \"km/liter\",\n    \"kilometers per liter\": \"km/liter\",\n    \"km/l\": \"km/liter\",\n    \"Kilometers/Liter\": \"km/liter\",\n    \"Kilometer/Liter\": \"km/liter\",\n    \"kilometers/liter\": \"km/liter\",\n    \"kilometer/liter\": \"km/liter\",\n    \"km/liter\": \"km/liter\",\n    \"Liter/100km\": \"liter/100km\",\n    \"Liters/100km\": \"liter/100km\",\n    \"Liter/100kms\": \"liter/100km\",\n    \"Liters/100kms\": \"liter/100km\",\n    \"liter/100km\": \"liter/100km\",\n    \"liters/100kms\": \"liter/100km\",\n    \"liters/100km\": \"liter/100km\",\n    \"liter/100kms\": \"liter/100km\",\n    \"Liter/100KM\": \"liter/100km\",\n    \"Liters/100KM\": \"liter/100km\",\n    \"L/100km\": \"liter/100km\",\n    \"L/100KM\": \"liter/100km\",\n    \"l/100KM\": \"liter/100km\",\n    \"l/100km\": \"liter/100km\",\n    \"l/100kms\": \"liter/100km\",\n    \"MPG(US)\": \"mpg\",\n    \"USMPG \": \"mpg\",\n    \"mpg\": \"mpg\",\n    \"mpgUS\": \"mpg\",\n    \"mpg(US)\": \"mpg\",\n    \"mpg(us)\": \"mpg\",\n    \"mpg-us\": \"mpg\",\n    \"mpg Imp\": \"mpg(imp)\",\n    \"MPG(imp)\": \"mpg(imp)\",\n    \"mpg(imp)\": \"mpg(imp)\",\n    \"mpg-imp\": \"mpg(imp)\"\n};\n\nilib.Measurement.FuelConsumption.metricToUScustomary = {\n    \"km/liter\": \"mpg\",\n    \"liter/100km\": \"mpg\"\n};\nilib.Measurement.FuelConsumption.metricToImperial = {\n    \"km/liter\": \"mpg(imp)\",\n    \"liter/100km\": \"mpg(imp)\"\n};\n\nilib.Measurement.FuelConsumption.imperialToMetric = {\n\t\"mpg(imp)\": \"km/liter\"\n};\nilib.Measurement.FuelConsumption.imperialToUScustomary = {\n\t\"mpg(imp)\": \"mpg\"\n};\n\nilib.Measurement.FuelConsumption.uScustomaryToImperial = {\n\t\"mpg\": \"mpg(imp)\"\n};\nilib.Measurement.FuelConsumption.uScustomarylToMetric = {\n\t\"mpg\": \"km/liter\"\n};\n\n/**\n * Localize the measurement to the commonly used measurement in that locale. For example\n * If a user's locale is \"en-US\" and the measurement is given as \"60 kmh\",\n * the formatted number should be automatically converted to the most appropriate\n * measure in the other system, in this case, mph. The formatted result should\n * appear as \"37.3 mph\".\n *\n * @abstract\n * @param {string} locale current locale string\n * @returns {ilib.Measurement} a new instance that is converted to locale\n */\nilib.Measurement.FuelConsumption.prototype.localize = function(locale) {\n\tvar to;\n\tif (locale === \"en-US\") {\n\t\tto = ilib.Measurement.FuelConsumption.metricToUScustomary[this.unit] ||\n\t\t    ilib.Measurement.FuelConsumption.imperialToUScustomary[this.unit] ||\n\t\t    this.unit;\n\t} else if (locale === \"en-GB\") {\n\t\tto = ilib.Measurement.FuelConsumption.metricToImperial[this.unit] ||\n\t\t    ilib.Measurement.FuelConsumption.uScustomaryToImperial[this.unit] ||\n\t\t    this.unit;\n\t} else {\n\t\tto = ilib.Measurement.FuelConsumption.uScustomarylToMetric[this.unit] ||\n\t\t    ilib.Measurement.FuelConsumption.imperialToUScustomary[this.unit] ||\n\t\t    this.unit;\n\t}\n\treturn new ilib.Measurement.FuelConsumption({\n\t    unit: to,\n\t    amount: this\n\t});\n};\n\n/**\n * Convert a FuelConsumption to another measure.\n *\n * @static\n * @param to {string} unit to convert to\n * @param from {string} unit to convert from\n * @param fuelConsumption {number} amount to be convert\n * @returns {number|undefined} the converted amount\n */\nilib.Measurement.FuelConsumption.convert = function(to, from, fuelConsumption) {\n    from = ilib.Measurement.FuelConsumption.aliases[from] || from;\n    to = ilib.Measurement.FuelConsumption.aliases[to] || to;\n    var returnValue = 0;\n\n    switch (from) {\n        case \"km/liter\":\n            switch (to) {\n                case \"km/liter\":\n                    returnValue = fuelConsumption * 1;\n                    break;\n                case \"liter/100km\":\n                    returnValue = 100 / fuelConsumption;\n                    break;\n                case \"mpg\":\n                    returnValue = fuelConsumption * 2.35215;\n                    break;\n                case \"mpg(imp)\":\n                    returnValue = fuelConsumption * 2.82481;\n                    break;\n            }\n            break;\n        case \"liter/100km\":\n            switch (to) {\n                case \"km/liter\":\n                    returnValue = 100 / fuelConsumption;\n                    break;\n                case \"liter/100km\":\n                    returnValue = fuelConsumption * 1;\n                    break;\n                case \"mpg\":\n                    returnValue = 235.215 / fuelConsumption;\n                    break;\n                case \"mpg(imp)\":\n                    returnValue = 282.481 / fuelConsumption;\n                    break;\n            }\n            break;\n        case \"mpg\":\n            switch (to) {\n                case \"km/liter\":\n                    returnValue = fuelConsumption * 0.425144;\n                    break;\n                case \"liter/100km\":\n                    returnValue = 235.215 / fuelConsumption;\n                    break;\n                case \"mpg\":\n                    returnValue = 1 * fuelConsumption;\n                    break;\n                case \"mpg(imp)\":\n                    returnValue = 1.20095 * fuelConsumption;\n                    break;\n            }\n            break;\n        case \"mpg(imp)\":\n            switch (to) {\n                case \"km/liter\":\n                    returnValue = fuelConsumption * 0.354006;\n                    break;\n                case \"liter/100km\":\n                    returnValue = 282.481 / fuelConsumption;\n                    break;\n                case \"mpg\":\n                    returnValue = 0.832674 * fuelConsumption;\n                    break;\n                case \"mpg(imp)\":\n                    returnValue = 1 * fuelConsumption;\n                    break;\n            }\n            break;\n    }\n    return returnValue;\n};\n\n/**\n * Scale the measurement unit to an acceptable level. The scaling\n * happens so that the integer part of the amount is as small as\n * possible without being below zero. This will result in the\n * largest units that can represent this measurement without\n * fractions. Measurements can only be scaled to other measurements\n * of the same type.\n *\n * @param {string=} measurementsystem system to use (uscustomary|imperial|metric),\n * or undefined if the system can be inferred from the current measure\n * @return {ilib.Measurement} a new instance that is scaled to the\n * right level\n */\nilib.Measurement.FuelConsumption.prototype.scale = function(measurementsystem) {\n    return new ilib.Measurement.FuelConsumption({\n        unit: this.unit,\n        amount: this.amount\n    });\n};\n\n/**\n * @private\n * @static\n */\nilib.Measurement.FuelConsumption.getMeasures = function() {\n    var ret = [];\n    ret.push(\"km/liter\");\n    ret.push(\"liter/100km\");\n    ret.push(\"mpg\");\n    ret.push(\"mpg(imp)\");\n\n    return ret;\n};\n\n//register with the factory method\nilib.Measurement._constructors[\"fuelconsumption\"] = ilib.Measurement.FuelConsumption;\n\n/*\n * volume.js - Unit conversions for volume\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n!depends\nilibglobal.js\nunit.js\n*/\n\n/**\n * @class\n * Create a new Volume measurement instance.\n *\n * @constructor\n * @extends ilib.Measurement\n * @param options {{unit:string,amount:number|string|undefined}} Options controlling\n * the construction of this instance\n */\nilib.Measurement.Volume = function (options) {\n\tthis.unit = \"cubic meter\";\n\tthis.amount = 0;\n\tthis.aliases = ilib.Measurement.Volume.aliases; // share this table in all instances\n\n\tif (options) {\n\t\tif (typeof(options.unit) !== 'undefined') {\n\t\t\tthis.originalUnit = options.unit;\n\t\t\tthis.unit = this.aliases[options.unit] || options.unit;\n\t\t}\n\n\t\tif (typeof(options.amount) === 'object') {\n\t\t\tif (options.amount.getMeasure() === \"volume\") {\n\t\t\t\tthis.amount = ilib.Measurement.Volume.convert(this.unit, options.amount.getUnit(), options.amount.getAmount());\n\t\t\t} else {\n\t\t\t\tthrow \"Cannot convert unit \" + options.amount.unit + \" to a volume\";\n\t\t\t}\n\t\t} else if (typeof(options.amount) !== 'undefined') {\n\t\t\tthis.amount = parseFloat(options.amount);\n\t\t}\n\t}\n\n\tif (typeof(ilib.Measurement.Volume.ratios[this.unit]) === 'undefined') {\n\t\tthrow \"Unknown unit: \" + options.unit;\n\t}\n};\n\nilib.Measurement.Volume.ratios = {\n    /*                 index, tsp,      tbsp,          cubic inch  us ounce, cup,        pint,       quart,      gallon,      cubic foot,  milliliter  liter,      cubic meter, imperial tsp,  imperial tbsp, imperial ounce,  imperial pint,  imperial quart, imperial gal, */\n    \"tsp\" :            [1,    1,        0.333333,      0.300781,   0.166667, 0.0208333,  0.0104167,  0.00130208, 0.00130208,  0.000174063, 4.92892,    0.00492892, 4.9289e-6,   0.832674,      0.277558,      0.173474,        0.00867369,     0.00433684,     0.00108421          ],\n    \"tbsp\":            [2,    3,        1,             0.902344,   0.5,      0.0625,     0.0312,     0.015625,   0.00390625,  0.00052219,  14.7868,    0.0147868,  1.4787e-5,   2.49802,       0.832674,      0.520421,        0.0260211,      0.0130105,      0.00325263          ],\n    \"cubic inch\":      [3,    3.32468,  1.10823,       1,          0.554113, 0.0692641,  0.034632,   0.017316,   0.004329,    0.000578704, 16.3871,    0.0163871,  1.6387e-5,   2.76837,       0.92279,       0.576744,        0.0288372,      0.0144186,      0.00360465          ],\n    \"us ounce\":        [4,    6,        2,             1.80469,    1,        0.125,      0.0625,     0.0078125,  0.0078125,   0.00104438,  29.5735,    0.0295735,  2.9574e-5,   4.99604,       1.04084,       1.04084,         0.0520421,      0.0260211,      0.00650526          ],\n    \"cup\":             [5,    48,       16,            14.4375,    8,        1,          0.5,        0.25,       0.0625,      0.00835503,  236.588,    0.236588,   0.000236588, 39.9683,       13.3228,       8.32674,         0.416337,       0.208168,       0.0520421           ],\n    \"pint\":            [6,    96,       32,            28.875,     16,       2,          1,          0.5,        0.125,       0.0167101,   473.176,    0.473176,   0.000473176, 79.9367,       26.6456,       16.6535,         0.832674,       0.416337,       0.104084            ],\n    \"quart\":           [7,    192,      64,            57.75,      32,       4,          2,          1,          0.25,        0.0334201,   946.353,    0.946353,   0.000946353, 159.873,       53.2911,       33.307,          1.66535,        0.832674,       0.208168            ],\n    \"gallon\":          [8,    768,      256,           231,        128,      16,         8,          4,          1,           0.133681,    3785.41,    3.78541,    0.00378541,  639.494,       213.165,       133.228,         6.66139,        3.3307,         0.832674            ],\n    \"cubic foot\":      [9,    5745.04,  1915.01,       1728,       957.506,  119.688,    59.8442,    29.9221,    7.48052,     1,           28316.8,    28.3168,    0.0283168,   4783.74,       1594.58,       996.613,         49.8307,        24.9153,        6.22883             ],\n    \"milliliter\":      [10,   0.202884, 0.067628,      0.0610237,  0.033814, 0.00422675, 0.00211338, 0.00105669, 0.000264172, 3.5315e-5,   1,          0.001,      1e-6,        0.168936,      0.0563121,     0.0351951,       0.00175975,     0.000879877,    0.000219969         ],\n    \"liter\":           [11,   202.884,  67.628,        61.0237,    33.814,   4.22675,    2.11338,    1.05669,    0.264172,    0.0353147,   1000,       1,          0.001,       56.3121,       56.3121,       35.191,          1.75975,        0.879877,       0.219969            ],\n    \"cubic meter\":     [12,   202884,   67628,         61023.7,    33814,    4226.75,    2113.38,    1056.69,    264.172,     35.3147,     1e+6,       1000,       1,           168936,        56312.1,       35195.1,         1759.75,        879.877,        219.969             ],\n    \"imperial tsp\":    [13,   1.20095,  0.200158,      0.361223,   0.600475, 0.0250198,  0.0125099,  0.00625495, 0.00156374,  0.000209041, 5.91939,    0.00591939, 5.9194e-6,   1,             0.333333,      0.208333,        0.0104167,      0.00520833,     0.00130208          ],\n    \"imperial tbsp\":   [14,   3.60285,  1.20095,       1.08367,    0.600475, 0.0750594,  0.0375297,  0.0187649,  0.00469121,  0.000627124, 17.7582,    0.0177582,  1.7758e-5,   3,             1,             0.625,           0.03125,        0.015625,       0.00390625          ],\n    \"imperial ounce\":  [15,   5.76456,  1.92152,       1.73387,    0.96076,  0.120095,   0.0600475,  0.0300238,  0.00750594,  0.0010034,   28.4131,    0.0284131,  2.8413e-5,   4.8,           1.6,           1,               0.05,           0.025,          0.00625             ],\n    \"imperial pint\":   [16,   115.291,  38.4304,       34.6774,    19.2152,  2.4019,     1.20095,    0.600475,   0.150119,    0.020068,    568.261,    0.568261,   0.000568261, 96,            32,            20,              1,              0.5,            0.125               ],\n    \"imperial quart\":  [17,   230.582,  76.8608,       69.3549,    38.4304,  4.8038,     2.4019,     1.20095,    0.300238,    0.0401359,   1136.52,    1.13652,    0.00113652,  192,           64,            40,              2,              1,              0.25                ],\n    \"imperial gallon\": [18,   922.33,   307.443,       277.42,     153.722,  19.2152,    9.6076,     4.8038,     1.20095,     0.160544,    4546.09,    4.54609,    0.00454609,  768,           256,           160,             8,              4,              1                   ]\n};\n\nilib.Measurement.Volume.prototype = new ilib.Measurement({});\nilib.Measurement.Volume.prototype.parent = ilib.Measurement;\nilib.Measurement.Volume.prototype.constructor = ilib.Measurement.Volume;\n\n/**\n * Return the type of this measurement. Examples are \"mass\",\n * \"length\", \"speed\", etc. Measurements can only be converted\n * to measurements of the same type.<p>\n *\n * The type of the units is determined automatically from the\n * units. For example, the unit \"grams\" is type \"mass\". Use the\n * static call {@link ilib.Measurement.getAvailableUnits}\n * to find out what units this version of ilib supports.\n *\n * @return {string} the name of the type of this measurement\n */\nilib.Measurement.Volume.prototype.getMeasure = function() {\n\treturn \"volume\";\n};\n\n/**\n * Return a new measurement instance that is converted to a new\n * measurement unit. Measurements can only be converted\n * to measurements of the same type.<p>\n *\n * @param {string} to The name of the units to convert to\n * @return {ilib.Measurement|undefined} the converted measurement\n * or undefined if the requested units are for a different\n * measurement type\n */\nilib.Measurement.Volume.prototype.convert = function(to) {\n\tif (!to || typeof(ilib.Measurement.Volume.ratios[this.normalizeUnits(to)]) === 'undefined') {\n\t\treturn undefined;\n\t}\n\treturn new ilib.Measurement({\n\t\tunit: to,\n\t\tamount: this\n\t});\n};\n\nilib.Measurement.Volume.aliases = {\n    \"US gal\": \"gallon\",\n    \"US gallon\": \"gallon\",\n    \"US Gal\": \"gallon\",\n    \"US Gallons\": \"gallon\",\n    \"Gal(US)\": \"gallon\",\n    \"gal(US)\": \"gallon\",\n    \"gallon\": \"gallon\",\n    \"quart\": \"quart\",\n    \"US quart\": \"quart\",\n    \"US quarts\": \"quart\",\n    \"US Quart\": \"quart\",\n    \"US Quarts\": \"quart\",\n    \"US qt\": \"quart\",\n    \"Qt(US)\": \"quart\",\n    \"qt(US)\": \"quart\",\n    \"US pint\": \"pint\",\n    \"US Pint\": \"pint\",\n    \"pint\": \"pint\",\n    \"pint(US)\": \"pint\",\n    \"Pint(US)\": \"pint\",\n    \"US cup\": \"cup\",\n    \"US Cup\": \"cup\",\n    \"cup(US)\": \"cup\",\n    \"Cup(US)\": \"cup\",\n    \"cup\": \"cup\",\n    \"us ounce\": \"us ounce\",\n    \"US ounce\": \"us ounce\",\n    \"℥\": \"us ounce\",\n    \"US Oz\": \"us ounce\",\n    \"oz(US)\": \"us ounce\",\n    \"Oz(US)\": \"us ounce\",\n    \"US tbsp\": \"tbsp\",\n    \"tbsp\": \"tbsp\",\n    \"tbsp(US)\": \"tbsp\",\n    \"US tablespoon\": \"tbsp\",\n    \"US tsp\": \"tsp\",\n    \"tsp(US)\": \"tsp\",\n    \"tsp\": \"tsp\",\n    \"Cubic meter\": \"cubic meter\",\n    \"cubic meter\": \"cubic meter\",\n    \"Cubic metre\": \"cubic meter\",\n    \"cubic metre\": \"cubic meter\",\n    \"m3\": \"cubic meter\",\n    \"Liter\": \"liter\",\n    \"Liters\": \"liter\",\n    \"liter\": \"liter\",\n    \"L\": \"liter\",\n    \"l\": \"liter\",\n    \"Milliliter\": \"milliliter\",\n    \"ML\": \"milliliter\",\n    \"ml\": \"milliliter\",\n    \"milliliter\": \"milliliter\",\n    \"mL\": \"milliliter\",\n    \"Imperial gal\": \"imperial gallon\",\n    \"imperial gallon\": \"imperial gallon\",\n    \"Imperial gallon\": \"imperial gallon\",\n    \"gallon(imperial)\": \"imperial gallon\",\n    \"gal(imperial)\": \"imperial gallon\",\n    \"Imperial quart\": \"imperial quart\",\n    \"imperial quart\": \"imperial quart\",\n    \"Imperial Quart\": \"imperial quart\",\n    \"IMperial qt\": \"imperial quart\",\n    \"qt(Imperial)\": \"imperial quart\",\n    \"quart(imperial)\": \"imperial quart\",\n    \"Imperial pint\": \"imperial pint\",\n    \"imperial pint\": \"imperial pint\",\n    \"pint(Imperial)\": \"imperial pint\",\n    \"imperial oz\": \"imperial ounce\",\n    \"imperial ounce\": \"imperial ounce\",\n    \"Imperial Ounce\": \"imperial ounce\",\n    \"Imperial tbsp\": \"imperial tbsp\",\n    \"imperial tbsp\": \"imperial tbsp\",\n    \"tbsp(Imperial)\": \"imperial tbsp\",\n    \"Imperial tsp\": \"imperial tsp\",\n    \"imperial tsp\": \"imperial tsp\",\n    \"tsp(Imperial)\": \"imperial tsp\",\n    \"Cubic foot\": \"cubic foot\",\n    \"cubic foot\": \"cubic foot\",\n    \"Cubic Foot\": \"cubic foot\",\n    \"Cubic feet\": \"cubic foot\",\n    \"cubic Feet\": \"cubic foot\",\n    \"cubic ft\": \"cubic foot\",\n    \"ft3\": \"cubic foot\",\n    \"Cubic inch\": \"cubic inch\",\n    \"Cubic inches\": \"cubic inch\",\n    \"cubic inches\": \"cubic inch\",\n    \"cubic inch\": \"cubic inch\",\n    \"cubic in\": \"cubic inch\",\n    \"cu in\": \"cubic inch\",\n    \"cu inch\": \"cubic inch\",\n    \"inch³\": \"cubic inch\",\n    \"in³\": \"cubic inch\",\n    \"inch^3\": \"cubic inch\",\n    \"in^3\": \"cubic inch\",\n    \"c.i\": \"cubic inch\",\n    \"CI\": \"cubic inch\",\n    \"cui\": \"cubic inch\"\n};\n\n/**\n * Convert a volume to another measure.\n * @static\n * @param to {string} unit to convert to\n * @param from {string} unit to convert from\n * @param volume {number} amount to be convert\n * @returns {number|undefined} the converted amount\n */\nilib.Measurement.Volume.convert = function(to, from, volume) {\n    from = ilib.Measurement.Volume.aliases[from] || from;\n    to = ilib.Measurement.Volume.aliases[to] || to;\n\tvar fromRow = ilib.Measurement.Volume.ratios[from];\n\tvar toRow = ilib.Measurement.Volume.ratios[to];\n\tif (typeof(from) === 'undefined' || typeof(to) === 'undefined') {\n\t\treturn undefined;\n\t}\n\tvar result = volume * fromRow[toRow[0]];\n    return result;\n};\n\n/**\n * @private\n * @static\n */\nilib.Measurement.Volume.getMeasures = function () {\n\tvar ret = [];\n\tfor (var m in ilib.Measurement.Volume.ratios) {\n\t\tret.push(m);\n\t}\n\treturn ret;\n};\nilib.Measurement.Volume.metricSystem = {\n    \"milliliter\": 10,\n    \"liter\": 11,\n    \"cubic meter\": 12\n};\nilib.Measurement.Volume.imperialSystem = {\n    \"imperial tsp\": 13,\n    \"imperial tbsp\": 14,\n    \"imperial ounce\": 15,\n    \"imperial pint\": 16,\n    \"imperial quart\": 17,\n    \"imperial gallon\": 18\n};\nilib.Measurement.Volume.uscustomarySystem = {\n    \"tsp\": 1,\n    \"tbsp\": 2,\n    \"cubic inch\": 3,\n    \"us ounce\": 4,\n    \"cup\": 5,\n    \"pint\": 6,\n    \"quart\": 7,\n    \"gallon\": 8,\n    \"cubic foot\": 9\n};\n\nilib.Measurement.Volume.metricToUScustomary = {\n    \"milliliter\": \"tsp\",\n    \"liter\": \"quart\",\n    \"cubic meter\": \"cubic foot\"\n};\nilib.Measurement.Volume.metricToImperial = {\n    \"milliliter\": \"imperial tsp\",\n    \"liter\": \"imperial quart\",\n    \"cubic meter\": \"imperial gallon\"\n};\n\nilib.Measurement.Volume.imperialToMetric = {\n    \"imperial tsp\": \"milliliter\",\n    \"imperial tbsp\": \"milliliter\",\n    \"imperial ounce\": \"milliliter\",\n    \"imperial pint\": \"liter\",\n    \"imperial quart\": \"liter\",\n    \"imperial gallon\": \"cubic meter\"\n};\nilib.Measurement.Volume.imperialToUScustomary = {\n    \"imperial tsp\": \"tsp\",\n    \"imperial tbsp\": \"tbsp\",\n    \"imperial ounce\": \"us ounce\",\n    \"imperial pint\": \"pint\",\n    \"imperial quart\": \"quart\",\n    \"imperial gallon\": \"gallon\"\n};\n\nilib.Measurement.Volume.uScustomaryToImperial = {\n    \"tsp\": \"imperial tsp\",\n    \"tbsp\": \"imperial tbsp\",\n    \"cubic inch\": \"imperial tbsp\",\n    \"us ounce\": \"imperial ounce\",\n    \"cup\": \"imperial ounce\",\n    \"pint\": \"imperial pint\",\n    \"quart\": \"imperial quart\",\n    \"gallon\": \"imperial gallon\",\n    \"cubic foot\": \"imperial gallon\"\n};\nilib.Measurement.Volume.uScustomarylToMetric = {\n    \"tsp\": \"milliliter\",\n    \"tbsp\": \"milliliter\",\n    \"cubic inch\": \"milliliter\",\n    \"us ounce\": \"milliliter\",\n    \"cup\": \"milliliter\",\n    \"pint\": \"liter\",\n    \"quart\": \"liter\",\n    \"gallon\": \"cubic meter\",\n    \"cubic foot\": \"cubic meter\"\n};\n\n/**\n * Localize the measurement to the commonly used measurement in that locale. For example\n * If a user's locale is \"en-US\" and the measurement is given as \"60 kmh\",\n * the formatted number should be automatically converted to the most appropriate\n * measure in the other system, in this case, mph. The formatted result should\n * appear as \"37.3 mph\".\n *\n * @abstract\n * @param {string} locale current locale string\n * @returns {ilib.Measurement} a new instance that is converted to locale\n */\nilib.Measurement.Volume.prototype.localize = function(locale) {\n\tvar to;\n\tif (locale === \"en-US\") {\n\t\tto = ilib.Measurement.Volume.metricToUScustomary[this.unit] ||\n\t\t    ilib.Measurement.Volume.imperialToUScustomary[this.unit] ||\n\t\t    this.unit;\n\t} else if (locale === \"en-GB\") {\n\t\tto = ilib.Measurement.Volume.metricToImperial[this.unit] ||\n\t\t    ilib.Measurement.Volume.uScustomaryToImperial[this.unit] ||\n\t\t    this.unit;\n\t} else {\n\t\tto = ilib.Measurement.Volume.uScustomarylToMetric[this.unit] ||\n\t\t    ilib.Measurement.Volume.imperialToUScustomary[this.unit] ||\n\t\t    this.unit;\n\t}\n\treturn new ilib.Measurement.Volume({\n\t    unit: to,\n\t    amount: this\n\t});\n};\n\n/**\n * Scale the measurement unit to an acceptable level. The scaling\n * happens so that the integer part of the amount is as small as\n * possible without being below zero. This will result in the\n * largest units that can represent this measurement without\n * fractions. Measurements can only be scaled to other measurements\n * of the same type.\n *\n * @param {string=} measurementsystem system to use (uscustomary|imperial|metric),\n * or undefined if the system can be inferred from the current measure\n * @return {ilib.Measurement} a new instance that is scaled to the\n * right level\n */\nilib.Measurement.Volume.prototype.scale = function(measurementsystem) {\n    var fromRow = ilib.Measurement.Volume.ratios[this.unit];\n    var mSystem;\n\n    if (measurementsystem === \"metric\"|| (typeof(measurementsystem) === 'undefined'\n        && typeof(ilib.Measurement.Volume.metricSystem[this.unit]) !== 'undefined')) {\n        mSystem = ilib.Measurement.Volume.metricSystem;\n    } else if (measurementsystem === \"uscustomary\" || (typeof(measurementsystem) === 'undefined'\n        && typeof(ilib.Measurement.Volume.uscustomarySystem[this.unit]) !== 'undefined')) {\n        mSystem = ilib.Measurement.Volume.uscustomarySystem;\n    } else if (measurementsystem === \"imperial\"|| (typeof(measurementsystem) === 'undefined'\n        && typeof(ilib.Measurement.Volume.imperialSystem[this.unit]) !== 'undefined')) {\n        mSystem = ilib.Measurement.Volume.imperialSystem;\n    }\n\n    var volume = this.amount;\n    var munit = this.unit;\n\n    for (var m in mSystem) {\n        var tmp = this.amount * fromRow[mSystem[m]];\n        if (tmp < 1) break;\n        volume = tmp;\n        munit = m;\n    }\n\n    return new ilib.Measurement.Volume({\n        unit: munit,\n        amount: volume\n    });\n};\n\n\n\n//register with the factory method\nilib.Measurement._constructors[\"volume\"] = ilib.Measurement.Volume;\n\n\n/*\n * Energy.js - Unit conversions for Energys/energys\n *\n * Copyright © 2014, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n!depends\nilibglobal.js\n*/\n\n/**\n * @class\n * Create a new energy measurement instance.\n *\n * @constructor\n * @extends ilib.Measurement\n * @param options {{unit:string,amount:number|string|undefined}} Options controlling\n * the construction of this instance\n */\nilib.Measurement.Energy = function (options) {\n\tthis.unit = \"ns\";\n\tthis.amount = 0;\n\tthis.aliases = ilib.Measurement.Energy.aliases; // share this table in all instances\n\n\tif (options) {\n\t\tif (typeof(options.unit) !== 'undefined') {\n\t\t\tthis.originalUnit = options.unit;\n\t\t\tthis.unit = this.aliases[options.unit] || options.unit;\n\t\t}\n\n\t\tif (typeof(options.amount) === 'object') {\n\t\t\tif (options.amount.getMeasure() === \"energy\") {\n\t\t\t\tthis.amount = ilib.Measurement.Energy.convert(this.unit, options.amount.getUnit(), options.amount.getAmount());\n\t\t\t} else {\n\t\t\t\tthrow \"Cannot convert units \" + options.amount.unit + \" to a energy\";\n\t\t\t}\n\t\t} else if (typeof(options.amount) !== 'undefined') {\n\t\t\tthis.amount = parseFloat(options.amount);\n\t\t}\n\t}\n\n\tif (typeof(ilib.Measurement.Energy.ratios[this.unit]) === 'undefined') {\n\t\tthrow \"Unknown unit: \" + options.unit;\n\t}\n};\n\nilib.Measurement.Energy.ratios = {\n   /*                index mJ          J           BTU               kJ          Wh                Cal               MJ             kWh                gJ             MWh                 GWh         */\n    \"millijoule\":   [ 1,   1,          0.001,      9.4781707775e-7,  1e-6,       2.7777777778e-7,  2.3884589663e-7,  1.0e-9,        2.7777777778e-10,  1.0e-12,       2.7777777778e-13,   2.7777777778e-16  ],\n    \"joule\":        [ 2,   1000,       1,          9.4781707775e-4,  0.001,      2.7777777778e-4,  2.3884589663e-4,  1.0e-6,        2.7777777778e-7,   1.0e-9,        2.7777777778e-10,   2.7777777778e-13  ],\n    \"BTU\":          [ 3,   1055055.9,  1055.0559,  1,                1.0550559,  0.29307108333,    0.25199577243,    1.0550559e-3,  2.9307108333e-4,   1.0550559e-6,  2.9307108333e-7,    2.9307108333e-10  ],\n    \"kilojoule\":    [ 4,   1000000,    1000,       0.94781707775,    1,          0.27777777778,    0.23884589663,    0.001,         2.7777777778e-4,   1.0e-6,        2.7777777778e-7,    2.7777777778e-10  ],\n    \"watt hour\":    [ 5,   3.6e+6,     3600,       3.4121414799,     3.6,        1,                0.85984522786,    0.0036,        0.001,             3.6e-6,        1.0e-6,             1.0e-9            ],\n    \"calorie\":      [ 6,   4.868e+5,   4186.8,     3.9683205411,     4.1868,     1.163,            1,                4.1868e-3,     1.163e-3,          4.1868e-6,     1.163e-6,           1.163e-9          ],\n    \"megajoule\":    [ 7,   1e+9,       1e+6,       947.81707775,     1000,       277.77777778,     238.84589663,     1,             0.27777777778,     0.001,         2.7777777778e-4,    2.7777777778e-7   ],\n    \"kilowatt hour\":[ 8,   3.6e+9,     3.6e+6,     3412.1414799,     3600,       1000,             859.84522786,     3.6,           1,                 3.6e-3,        0.001,              1e-6              ],\n    \"gigajoule\":    [ 9,   1e+12,      1e+9,       947817.07775,     1e+6,       277777.77778,     238845.89663,     1000,          277.77777778,      1,             0.27777777778,      2.7777777778e-4   ],\n    \"megawatt hour\":[ 10,  3.6e+12,    3.6e+9,     3412141.4799,     3.6e+6,     1e+6,             859845.22786,     3600,          1000,              3.6,           1,                  0.001             ],\n    \"gigawatt hour\":[ 11,  3.6e+15,    3.6e+12,    3412141479.9,     3.6e+9,     1e+9,             859845227.86,     3.6e+6,        1e+6,              3600,          1000,               1                 ]\n};\n\nilib.Measurement.Energy.prototype = new ilib.Measurement({});\nilib.Measurement.Energy.prototype.parent = ilib.Measurement;\nilib.Measurement.Energy.prototype.constructor = ilib.Measurement.Energy;\n\n/**\n * Return the type of this measurement. Examples are \"mass\",\n * \"length\", \"speed\", etc. Measurements can only be converted\n * to measurements of the same type.<p>\n *\n * The type of the units is determined automatically from the\n * units. For example, the unit \"grams\" is type \"mass\". Use the\n * static call {@link ilib.Measurement.getAvailableUnits}\n * to find out what units this version of ilib supports.\n *\n * @return {string} the name of the type of this measurement\n */\nilib.Measurement.Energy.prototype.getMeasure = function() {\n\treturn \"energy\";\n};\n\n/**\n * Return a new measurement instance that is converted to a new\n * measurement unit. Measurements can only be converted\n * to measurements of the same type.<p>\n *\n * @param {string} to The name of the units to convert to\n * @return {ilib.Measurement|undefined} the converted measurement\n * or undefined if the requested units are for a different\n * measurement type\n */\nilib.Measurement.Energy.prototype.convert = function(to) {\n\tif (!to || typeof(ilib.Measurement.Energy.ratios[this.normalizeUnits(to)]) === 'undefined') {\n\t\treturn undefined;\n\t}\n\treturn new ilib.Measurement({\n\t\tunit: to,\n\t\tamount: this\n\t});\n};\n\nilib.Measurement.Energy.aliases = {\n    \"milli joule\": \"millijoule\",\n    \"millijoule\": \"millijoule\",\n    \"MilliJoule\": \"millijoule\",\n    \"milliJ\": \"millijoule\",\n    \"joule\": \"joule\",\n    \"J\": \"joule\",\n    \"j\": \"joule\",\n    \"Joule\": \"joule\",\n    \"Joules\": \"joule\",\n    \"joules\": \"joule\",\n    \"BTU\": \"BTU\",\n    \"btu\": \"BTU\",\n    \"British thermal unit\": \"BTU\",\n    \"british thermal unit\": \"BTU\",\n    \"kilo joule\": \"kilojoule\",\n    \"kJ\": \"kilojoule\",\n    \"kj\": \"kilojoule\",\n    \"Kj\": \"kilojoule\",\n    \"kiloJoule\": \"kilojoule\",\n    \"kilojoule\": \"kilojoule\",\n    \"kjoule\": \"kilojoule\",\n    \"watt hour\": \"watt hour\",\n    \"Wh\": \"watt hour\",\n    \"wh\": \"watt hour\",\n    \"watt-hour\": \"watt hour\",\n    \"calorie\": \"calorie\",\n    \"Cal\": \"calorie\",\n    \"cal\": \"calorie\",\n    \"Calorie\": \"calorie\",\n    \"calories\": \"calorie\",\n    \"mega joule\": \"megajoule\",\n    \"MJ\": \"megajoule\",\n    \"megajoule\": \"megajoule\",\n    \"megajoules\": \"megajoule\",\n    \"Megajoules\": \"megajoule\",\n    \"megaJoules\": \"megajoule\",\n    \"MegaJoules\": \"megajoule\",\n    \"megaJoule\": \"megajoule\",\n    \"MegaJoule\": \"megajoule\",\n    \"kilo Watt hour\": \"kilowatt hour\",\n    \"kWh\": \"kilowatt hour\",\n    \"kiloWh\": \"kilowatt hour\",\n    \"KiloWh\": \"kilowatt hour\",\n    \"KiloWatt-hour\": \"kilowatt hour\",\n    \"kilowatt hour\": \"kilowatt hour\",\n    \"kilowatt-hour\": \"kilowatt hour\",\n    \"KiloWatt-hours\": \"kilowatt hour\",\n    \"kilowatt-hours\": \"kilowatt hour\",\n    \"Kilo Watt-hour\": \"kilowatt hour\",\n    \"Kilo Watt-hours\": \"kilowatt hour\",\n    \"giga joule\": \"gigajoule\",\n    \"gJ\": \"gigajoule\",\n    \"GJ\": \"gigajoule\",\n    \"GigaJoule\": \"gigajoule\",\n    \"gigaJoule\": \"gigajoule\",\n    \"gigajoule\": \"gigajoule\",\n    \"GigaJoules\": \"gigajoule\",\n    \"gigaJoules\": \"gigajoule\",\n    \"Gigajoules\": \"gigajoule\",\n    \"gigajoules\": \"gigajoule\",\n    \"mega watt hour\": \"megawatt hour\",\n    \"MWh\": \"megawatt hour\",\n    \"MegaWh\": \"megawatt hour\",\n    \"megaWh\": \"megawatt hour\",\n    \"megaWatthour\": \"megawatt hour\",\n    \"megaWatt-hour\": \"megawatt hour\",\n    \"mega Watt-hour\": \"megawatt hour\",\n    \"megaWatt hour\": \"megawatt hour\",\n    \"megawatt hour\": \"megawatt hour\",\n    \"mega Watt hour\": \"megawatt hour\",\n    \"giga watt hour\": \"gigawatt hour\",\n    \"gWh\": \"gigawatt hour\",\n    \"GWh\": \"gigawatt hour\",\n    \"gigaWh\": \"gigawatt hour\",\n    \"gigaWatt-hour\": \"gigawatt hour\",\n    \"gigawatt-hour\": \"gigawatt hour\",\n    \"gigaWatt hour\": \"gigawatt hour\",\n    \"gigawatt hour\": \"gigawatt hour\",\n    \"gigawatthour\": \"gigawatt hour\"\n};\n\n/**\n * Convert a energy to another measure.\n * @static\n * @param to {string} unit to convert to\n * @param from {string} unit to convert from\n * @param energy {number} amount to be convert\n * @returns {number|undefined} the converted amount\n */\nilib.Measurement.Energy.convert = function(to, from, energy) {\n    from = ilib.Measurement.Energy.aliases[from] || from;\n    to = ilib.Measurement.Energy.aliases[to] || to;\n    var fromRow = ilib.Measurement.Energy.ratios[from];\n    var toRow = ilib.Measurement.Energy.ratios[to];\n    if (typeof(from) === 'undefined' || typeof(to) === 'undefined') {\n        return undefined;\n    }\n    return energy * fromRow[toRow[0]];\n};\n\n/**\n * @private\n * @static\n */\nilib.Measurement.Energy.getMeasures = function () {\n\tvar ret = [];\n\tfor (var m in ilib.Measurement.Energy.ratios) {\n\t\tret.push(m);\n\t}\n\treturn ret;\n};\n\nilib.Measurement.Energy.metricJouleSystem = {\n    \"millijoule\": 1,\n    \"joule\": 2,\n    \"kilojoule\": 4,\n    \"megajoule\": 7,\n    \"gigajoule\": 9\n};\nilib.Measurement.Energy.metricWattHourSystem = {\n    \"watt hour\": 5,\n    \"kilowatt hour\": 8,\n    \"megawatt hour\": 10,\n    \"gigawatt hour\": 11\n};\n\nilib.Measurement.Energy.imperialSystem = {\n\t\"BTU\": 3\n};\nilib.Measurement.Energy.uscustomarySystem = {\n\t\"calorie\": 6\n};\n\nilib.Measurement.Energy.metricToImperial = {\n    \"millijoule\": \"BTU\",\n    \"joule\": \"BTU\",\n    \"kilojoule\": \"BTU\",\n    \"megajoule\": \"BTU\",\n    \"gigajoule\": \"BTU\"\n};\nilib.Measurement.Energy.imperialToMetric = {\n\t\"BTU\": \"joule\"\n};\n\n/**\n * Localize the measurement to the commonly used measurement in that locale. For example\n * If a user's locale is \"en-US\" and the measurement is given as \"60 kmh\",\n * the formatted number should be automatically converted to the most appropriate\n * measure in the other system, in this case, mph. The formatted result should\n * appear as \"37.3 mph\".\n *\n * @abstract\n * @param {string} locale current locale string\n * @returns {ilib.Measurement} a new instance that is converted to locale\n */\nilib.Measurement.Energy.prototype.localize = function(locale) {\n\tvar to;\n\tif (locale === \"en-GB\") {\n\t\tto = ilib.Measurement.Energy.metricToImperial[this.unit] || this.unit;\n\t} else {\n\t\tto = ilib.Measurement.Energy.imperialToMetric[this.unit] || this.unit;\n\t}\n\n\treturn new ilib.Measurement.Energy({\n\t    unit: to,\n\t    amount: this\n\t});\n};\n\n/**\n * Scale the measurement unit to an acceptable level. The scaling\n * happens so that the integer part of the amount is as small as\n * possible without being below zero. This will result in the\n * largest units that can represent this measurement without\n * fractions. Measurements can only be scaled to other measurements\n * of the same type.\n *\n * @param {string=} measurementsystem system to use (uscustomary|imperial|metric),\n * or undefined if the system can be inferred from the current measure\n * @return {ilib.Measurement} a new instance that is scaled to the\n * right level\n */\nilib.Measurement.Energy.prototype.scale = function(measurementsystem) {\n    var fromRow = ilib.Measurement.Energy.ratios[this.unit];\n    var mSystem;\n\n    if ((measurementsystem === \"metric\" && typeof(ilib.Measurement.Energy.metricJouleSystem[this.unit]) !== 'undefined')|| (typeof(measurementsystem) === 'undefined'\n        && typeof(ilib.Measurement.Energy.metricJouleSystem[this.unit]) !== 'undefined')) {\n        mSystem = ilib.Measurement.Energy.metricJouleSystem;\n    }\n    else if ((measurementsystem === \"metric\" && typeof(ilib.Measurement.Energy.metricWattHourSystem[this.unit]) !== 'undefined')|| (typeof(measurementsystem) === 'undefined'\n        && typeof(ilib.Measurement.Energy.metricWattHourSystem[this.unit]) !== 'undefined')) {\n        mSystem = ilib.Measurement.Energy.metricWattHourSystem;\n    }\n\n    else  if (measurementsystem === \"uscustomary\" || (typeof(measurementsystem) === 'undefined'\n        && typeof(ilib.Measurement.Energy.uscustomarySystem[this.unit]) !== 'undefined')) {\n        mSystem = ilib.Measurement.Energy.uscustomarySystem;\n    }\n    else if (measurementsystem === \"imperial\"|| (typeof(measurementsystem) === 'undefined'\n        && typeof(ilib.Measurement.Energy.imperialSystem[this.unit]) !== 'undefined')) {\n        mSystem = ilib.Measurement.Energy.imperialSystem;\n    }\n\n    var energy = this.amount;\n    var munit = this.unit;\n\n    for (var m in mSystem) {\n        var tmp = this.amount * fromRow[mSystem[m]];\n        if (tmp < 1) break;\n        energy = tmp;\n        munit = m;\n    }\n\n    return new ilib.Measurement.Energy({\n        unit: munit,\n        amount: energy\n    });\n};\n//register with the factory method\nilib.Measurement._constructors[\"energy\"] = ilib.Measurement.Energy;\n\n/**\n * @license\n * Copyright © 2012-2013, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * ilib-full-inc.js - metafile that includes all other js files\n */\n\n/* !depends\nilibglobal.js\ndaterangefmt.js\ndate.js\ncalendar/hebrewdate.js\ncalendar/hebrew.js\ncalendar/islamic.js\ncalendar/islamicdate.js\ncalendar/julian.js\ncalendar/juliandate.js\ncalendar/gregorian.js\ncalendar/gregoriandate.js\ncalendar/thaisolar.js\ncalendar/thaisolardate.js\ncalendar/persian.js\ncalendar/persiandate.js\ncalendar/persianastro.js\ncalendar/persianastrodate.js\ncalendar/han.js\ncalendar/handate.js\ncalendar/ethiopic.js\ncalendar/ethiopicdate.js\ncalendar/coptic.js\ncalendar/copticdate.js\nnumprs.js\nnumfmt.js\njulianday.js\ndatefmt.js\ncalendar.js\nutil/utils.js\nlocale.js\nstrings.js\ndurfmt.js\nresources.js\nctype.js\nlocaleinfo.js\ndaterangefmt.js\nctype.isalnum.js\nctype.isalpha.js\nctype.isascii.js\nctype.isblank.js\nctype.iscntrl.js\nctype.isdigit.js\nctype.isgraph.js\nctype.isideo.js\nctype.islower.js\nctype.isprint.js\nctype.ispunct.js\nctype.isspace.js\nctype.isupper.js\nctype.isxdigit.js\nctype.isscript.js\nscriptinfo.js\nnameprs.js\nnamefmt.js\naddressprs.js\naddressfmt.js\ncollate.js\nnfkc/all.js\nlocalematch.js\nnormstring.js\nmaps/casemapper.js\nglyphstring.js\nphone/phonefmt.js\nphone/phonegeo.js\nphone/phonenum.js\nunit.js\nunitfmt.js\nunits/length.js\nunits/speed.js\nunits/digitalStorage.js\nunits/temperature.js\nunits/unknown.js\nunits/time.js\nunits/mass.js\nunits/area.js\nunits/fuelConsumption.js\nunits/volume.js\nunits/energy.js\n*/\n\n",
    "mtime": 1434758950000,
    "relPath": "ilib/js/ilib-dyn-full",
    "requires": [],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./packedbuffer.js",
    "base": "/Users/jason/Git/bootplate/lib/enyo-ilib/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/enyo-ilib",
    "libName": "enyo-ilib",
    "relName": "enyo-ilib/packedbuffer",
    "name": "enyo-ilib/packedbuffer",
    "fullpath": "/Users/jason/Git/bootplate/lib/enyo-ilib/lib/packedbuffer.js",
    "contents": "/*\n * packedbuffer.js - represent a packed buffer of bytes\n * \n * Copyright © 2014 LG Electronics, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @constructor\n * Represents a binary buffer of unsigned bytes that will be parsed in various ways. The buffer \n * can be decoded by reading various lengths of bytes and interpretting them as longs\n * or unsigned bytes, etc. The bytes are interpretted in big-endian (network) format.\n * @param {string} buffer the binary buffer represented as a string\n */\nvar PackedBuffer = function (buffer) {\n\tthis.buffer = buffer;\n\tthis.index = 0;\n};\n\n/**\n * Return the specified number of signed long integers from the current location in\n * the buffer as an array of numbers and advance the current pointer in the buffer.\n * This method will only return as many longs as are available in the rest of the\n * buffer.\n * \n * @param {number} num The number of longs to return\n * @returns {Array.<number>} the array of signed long integers\n */\nPackedBuffer.prototype.getLongs = function(num) {\n\tvar result = undefined;\n\tif (this.buffer && this.index < this.buffer.length) {\n\t\tresult = [];\n\t\tfor (var i = 0; i < num && this.index+3 < this.buffer.length; i++) {\n\t\t\tvar longnum = this.buffer[this.index] << 24 | \n\t\t\t\tthis.buffer[this.index+1] << 16 | \n\t\t\t\tthis.buffer[this.index+2] << 8 | \n\t\t\t\tthis.buffer[this.index+3];\n\t\t\tresult.push(longnum);\n\t\t\tthis.index += 4;\n\t\t}\n\t}\n\treturn result;\n};\n\n/**\n * Return a signed long integer from the current location in\n * the buffer as an array of numbers and advance the current pointer in the buffer.\n * This method will only return a long if it is available in the buffer, otherwise\n * it will return undefined.\n * \n * @returns {number} the long at the current point in the buffer, or undefined if\n * there is not enough bytes left in the buffer to form a long\n */\nPackedBuffer.prototype.getLong = function() {\n\tvar longs = this.getLongs(1);\n\tif (longs && longs.length > 0) {\n\t\treturn longs[0];\n\t}\n\treturn undefined;\n};\n\n/**\n * Return the specified number of signed byte integers from the current location in\n * the buffer as an array of numbers and advance the current pointer in the buffer.\n * This method will only return as many bytes as are available in the rest of the\n * buffer.\n * \n * @param {number|undefined} num The number of bytes to return\n * @returns {Array.<number>} the array of signed byte integers\n */\nPackedBuffer.prototype.getBytes = function(num) {\n\tvar result = undefined;\n\tif (this.buffer && this.index < this.buffer.length) {\n\t\tresult = [];\n\t\tfor (var i = 0; i < num && this.index < this.buffer.length; i++) {\n\t\t\tvar bytenum = this.buffer[this.index++];\n\t\t\tif (bytenum & 0x80) {\n\t\t\t\tbytenum -= 0x100;\n\t\t\t}\n\t\t\tresult.push(bytenum);\n\t\t}\n\t}\n\treturn result;\n};\n\n/**\n * Return a signed byte integer from the current location in\n * the buffer as an array of numbers and advance the current pointer in the buffer.\n * This method will only return a byte if it is available in the buffer, otherwise\n * it will return undefined.\n * \n * @returns {number} the byte at the current point in the buffer, or undefined if\n * there is not enough bytes left in the buffer to form a byte\n */\nPackedBuffer.prototype.getByte = function() {\n\tvar bytes = this.getBytes(1);\n\tif (bytes && bytes.length > 0) {\n\t\treturn bytes[0];\n\t}\n\treturn undefined;\n};\n\n/**\n * Return the specified number of unsigned byte integers from the current location in\n * the buffer as an array of numbers and advance the current pointer in the buffer.\n * This method will only return as many bytes as are available in the rest of the\n * buffer.\n * \n * @param {number} num The number of bytes to return\n * @returns {Array.<number>} the array of unsigned byte integers\n */\nPackedBuffer.prototype.getUnsignedBytes = function(num) {\n\tvar result = undefined;\n\tif (this.buffer && this.index < this.buffer.length) {\n\t\tresult = [];\n\t\tfor (var i = 0; i < num && this.index < this.buffer.length; i++) {\n\t\t\tresult.push(this.buffer[this.index++]);\n\t\t}\n\t}\n\treturn result;\n\t\n};\n\n/**\n * Return a string made out of the given number of bytes and convert\n * from UTF-8 to UTF-16.\n * \n * @param {number} num The number of bytes to make a string out of\n * @returns {string} a string made out of the given bytes\n */\nPackedBuffer.prototype.getString = function(num) {\n\tvar arr = this.getUnsignedBytes(num);\n\tvar str = \"\";\n\tfor (var i = 0; i < arr.length; i++) {\n\t\tstr += String.fromCharCode(arr[i]);\n\t}\n\treturn str;\n\t\n};\n\n/**\n * Advance the current pointer in the buffer by the specified number of\n * bytes in the string.\n * \n * @param {number} num The number of bytes to skip\n */\nPackedBuffer.prototype.skip = function(num) {\n\tthis.index += num;\n};\n\nmodule.exports = PackedBuffer;",
    "mtime": 1434758951000,
    "relPath": "enyo-ilib/packedbuffer",
    "requires": [],
    "requests": [],
    "resolved": true
  },
  {
    "path": "layout/FittableRows",
    "base": "/Users/jason/Git/bootplate/src/views",
    "external": true,
    "relName": "layout/FittableRows",
    "name": "layout/FittableRows",
    "fullpath": "/Users/jason/Git/bootplate/lib/layout/lib/FittableRows.js",
    "contents": "/**\n* Contains the declaration for the {@link module:layout/FittableRows~FittableRows} kind.\n* @module layout/FittableRows\n*/\n\nvar\n\tkind = require('enyo/kind')\t;\n\nvar\n\tFittableLayout = require('./FittableLayout'),\n\tFittableRowsLayout = FittableLayout.Rows;\n\n/**\n* {@link module:layout/FittableRows~FittableRows} provides a container in which items are laid out in a\n* set\tof horizontal rows, with most of the items having natural size, but one\n* expanding to fill the remaining space. The one that expands is labeled with\n* the attribute `fit: true`.\n*\n* For more information, see the documentation on\n* [Fittables]{@linkplain $dev-guide/building-apps/layout/fittables.html} in the\n* Enyo Developer Guide.\n*\n* @class FittableRows\n* @extends module:enyo/Control~Control\n* @ui\n* @public\n*/\nmodule.exports = kind(/** @lends module:layout/FittableRows~FittableRows.prototype */{\n\n\t/**\n\t* @private\n\t*/\n\tname: 'enyo.FittableRows',\n\n\t/**\n\t* A {@glossary kind} used to manage the size and placement of child\n\t* [components]{@link module:enyo/Component~Component}.\n\t*\n\t* @type {String}\n\t* @default ''\n\t* @private\n\t*/\n\tlayoutKind: FittableRowsLayout,\n\n\t/**\n\t* By default, items in columns stretch to fit horizontally; set to `true` to\n\t* avoid this behavior.\n\t*\n\t* @type {Boolean}\n\t* @default false\n\t* @public\n\t*/\n\tnoStretch: false\n});\n",
    "mtime": 1434758949000,
    "lib": "/Users/jason/Git/bootplate/lib/layout",
    "libName": "layout",
    "relPath": "layout/FittableRows",
    "requires": [
      "enyo/kind",
      "./FittableLayout"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./FittableLayout",
    "base": "/Users/jason/Git/bootplate/lib/layout/lib",
    "external": true,
    "lib": "/Users/jason/Git/bootplate/lib/layout",
    "libName": "layout",
    "relName": "layout/FittableLayout",
    "name": "layout/FittableLayout",
    "fullpath": "/Users/jason/Git/bootplate/lib/layout/lib/FittableLayout",
    "isPackage": true,
    "packageFile": "/Users/jason/Git/bootplate/lib/layout/lib/FittableLayout/package.json",
    "mtime": {
      "/Users/jason/Git/bootplate/lib/layout/lib/FittableLayout/package.json": 1434758949000,
      "/Users/jason/Git/bootplate/lib/layout/lib/FittableLayout/FittableLayout.js": 1434758949000,
      "/Users/jason/Git/bootplate/lib/layout/lib/FittableLayout/FittableLayout.css": 1434758949000
    },
    "json": {
      "main": "FittableLayout.js",
      "styles": [
        "FittableLayout.css"
      ]
    },
    "main": "/Users/jason/Git/bootplate/lib/layout/lib/FittableLayout/FittableLayout.js",
    "contents": "/**\n* Contains the declaration for the {@link module:layout/FittableLayout~FittableLayout}, {@link module:layout/FittableLayout~FittableColumnsLayout}\n* and {@link module:layout/FittableLayout~FittableRowsLayout} kinds.\n* @module layout/FittableLayout\n*/\n\nvar\n\tkind = require('enyo/kind'),\n\tdom = require('enyo/dom'),\n\tControl = require('enyo/Control'),\n\tLayout = require('enyo/Layout');\n\nvar detector = document.createElement('div'),\n\tflexAvailable =\n\t\t(detector.style.flexBasis !== undefined) ||\n\t\t(detector.style.webkitFlexBasis !== undefined) ||\n\t\t(detector.style.mozFlexBasis !== undefined) ||\n\t\t(detector.style.msFlexBasis !== undefined);\n\n/**\n* {@link module:layout/FittableLayout~FittableLayout} provides the base positioning and boundary logic for\n* the fittable layout strategy. The fittable layout strategy is based on\n* laying out items in either a set of rows or a set of columns, with most of\n* the items having natural size, but one item expanding to fill the remaining\n* space. The item that expands is labeled with the attribute `fit: true`.\n*\n* The subkinds {@link module:layout/FittableLayout~FittableColumnsLayout} and {@link module:layout/FittableLayout~FittableRowsLayout}\n* (or _their_ subkinds) are used for layout rather than `enyo.FittableLayout` because\n* they specify properties that the framework expects to be available when laying items\n* out.\n*\n* When available on the platform, you can opt-in to have `enyo.FittableLayout` use CSS\n* flexible box (flexbox) to implement fitting behavior on the platform for better\n* performance; Enyo will fall back to JavaScript-based layout on older platforms.\n* Three subtle differences between the flexbox and JavaScript implementations\n* should be noted:\n\n* - When using flexbox, vertical margins (i.e., `margin-top`, `margin-bottom`) will\n* not collapse; when using JavaScript layout, vertical margins will collapse according\n* to static layout rules.\n*\n* - When using flexbox, non-fitting children of the Fittable must not be sized\n* using percentages of the container (even if set to `position: relative`);\n* this is explicitly not supported by the flexbox 2013 spec.\n*\n* - The flexbox-based Fittable implementation will respect multiple children\n* with `fit: true` (the fitting space will be divided equally between them).\n* This is NOT supported by the JavaScript implementation, and you should not rely\n* upon this behavior if you are deploying to platforms without flexbox support.\n*\n* The flexbox implementation was added to Enyo 2.5.0 as an optional performance\n* optimization; to use the optimization, set `useFlex: true` on the Fittable\n* container.  This will cause flexbox to be used when possible.\n*\n* @class FittableLayout\n* @extends module:enyo/Layout~Layout\n* @public\n*/\nvar FittableLayout = module.exports = kind(/** @lends module:layout/FittableLayout~FittableLayout.prototype */{\n\tname: 'enyo.FittableLayout',\n\n\t/**\n\t* @private\n\t*/\n\tkind: Layout,\n\n\t/**\n\t* @private\n\t*/\n\tnoDefer: true,\n\n\t/**\n\t* @method\n\t* @private\n\t*/\n\tconstructor: function () {\n\t\tLayout.prototype._constructor.apply(this, arguments);\n\n\t\t// Add the force-ltr class if we're in RTL mode, but this control is set explicitly to NOT be in RTL mode.\n\t\tthis.container.addRemoveClass('force-left-to-right', (Control.prototype.rtl && !this.container.get('rtl')) );\n\n\t\t// Flexbox optimization is determined by global flexAvailable and per-instance opt-in useFlex flag\n\t\tthis.useFlex = flexAvailable && (this.container.useFlex === true);\n\t\tif (this.useFlex) {\n\t\t\tthis.container.addClass(this.flexLayoutClass);\n\t\t} else {\n\t\t\tthis.container.addClass(this.fitLayoutClass);\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tcalcFitIndex: function () {\n\t\tvar aChildren = this.container.children,\n\t\t\toChild,\n\t\t\tn;\n\n\t\tfor (n=0; n<aChildren.length; n++) {\n\t\t\toChild = aChildren[n];\n\t\t\tif (oChild.fit && oChild.showing) {\n\t\t\t\treturn n;\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tgetFitControl: function () {\n\t\tvar aChildren = this.container.children,\n\t\t\toFitChild = aChildren[this.fitIndex];\n\n\t\tif (!(oFitChild && oFitChild.fit && oFitChild.showing)) {\n\t\t\tthis.fitIndex = this.calcFitIndex();\n\t\t\toFitChild = aChildren[this.fitIndex];\n\t\t}\n\t\treturn oFitChild;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tshouldReverse: function () {\n\t\treturn this.container.rtl && this.orient === 'h';\n\t},\n\t\n\t/**\n\t* @private\n\t*/\n\tdestroy: function () {\n\t\tLayout.prototype.destroy.apply(this, arguments);\n\t\t\n\t\tif (this.container) {\n\t\t\tthis.container.removeClass(this.useFlex ? this.flexLayoutClass : this.fitLayoutClass);\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tgetFirstChild: function() {\n\t\tvar aChildren = this.getShowingChildren();\n\n\t\tif (this.shouldReverse()) {\n\t\t\treturn aChildren[aChildren.length - 1];\n\t\t} else {\n\t\t\treturn aChildren[0];\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tgetLastChild: function() {\n\t\tvar aChildren = this.getShowingChildren();\n\n\t\tif (this.shouldReverse()) {\n\t\t\treturn aChildren[0];\n\t\t} else {\n\t\t\treturn aChildren[aChildren.length - 1];\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t*/\n\tgetShowingChildren: function() {\n\t\tvar a = [],\n\t\t\tn = 0,\n\t\t\taChildren = this.container.children,\n\t\t\tnLength   = aChildren.length;\n\n\t\tfor (;n<nLength; n++) {\n\t\t\tif (aChildren[n].showing) {\n\t\t\t\ta.push(aChildren[n]);\n\t\t\t}\n\t\t}\n\n\t\treturn a;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\t_reflow: function(sMeasureName, sClienMeasure, sAttrBefore, sAttrAfter) {\n\t\tthis.container.addRemoveClass('enyo-stretch', !this.container.noStretch);\n\n\t\tvar oFitChild       = this.getFitControl(),\n\t\t\toContainerNode  = this.container.hasNode(),  // Container node\n\t\t\tnTotalSize     = 0,                          // Total container width or height without padding\n\t\t\tnBeforeOffset   = 0,                         // Offset before fit child\n\t\t\tnAfterOffset    = 0,                         // Offset after fit child\n\t\t\toPadding,                                    // Object containing t,b,r,l paddings\n\t\t\toBounds,                                     // Bounds object of fit control\n\t\t\toLastChild,\n\t\t\toFirstChild,\n\t\t\tnFitSize;\n\n\t\tif (!oFitChild || !oContainerNode) { return; }\n\n\t\toPadding   = dom.calcPaddingExtents(oContainerNode);\n\t\toBounds    = oFitChild.getBounds();\n\t\tnTotalSize = oContainerNode[sClienMeasure] - (oPadding[sAttrBefore] + oPadding[sAttrAfter]);\n\n\t\tif (this.shouldReverse()) {\n\t\t\toFirstChild  = this.getFirstChild();\n\t\t\tnAfterOffset = nTotalSize - (oBounds[sAttrBefore] + oBounds[sMeasureName]);\n\n\t\t\tvar nMarginBeforeFirstChild = dom.getComputedBoxValue(oFirstChild.hasNode(), 'margin', sAttrBefore) || 0;\n\n\t\t\tif (oFirstChild == oFitChild) {\n\t\t\t\tnBeforeOffset = nMarginBeforeFirstChild;\n\t\t\t} else {\n\t\t\t\tvar oFirstChildBounds      = oFirstChild.getBounds(),\n\t\t\t\t\tnSpaceBeforeFirstChild = oFirstChildBounds[sAttrBefore];\n\n\t\t\t\tnBeforeOffset = oBounds[sAttrBefore] + nMarginBeforeFirstChild - nSpaceBeforeFirstChild;\n\t\t\t}\n\t\t} else {\n\t\t\toLastChild    = this.getLastChild();\n\t\t\tnBeforeOffset = oBounds[sAttrBefore] - (oPadding[sAttrBefore] || 0);\n\n\t\t\tvar nMarginAfterLastChild = dom.getComputedBoxValue(oLastChild.hasNode(), 'margin', sAttrAfter) || 0;\n\n\t\t\tif (oLastChild == oFitChild) {\n\t\t\t\tnAfterOffset = nMarginAfterLastChild;\n\t\t\t} else {\n\t\t\t\tvar oLastChildBounds = oLastChild.getBounds(),\n\t\t\t\t\tnFitChildEnd     = oBounds[sAttrBefore] + oBounds[sMeasureName],\n\t\t\t\t\tnLastChildEnd    = oLastChildBounds[sAttrBefore] + oLastChildBounds[sMeasureName] +  nMarginAfterLastChild;\n\n\t\t\t\tnAfterOffset = nLastChildEnd - nFitChildEnd;\n\t\t\t}\n\t\t}\n\n\t\tnFitSize = nTotalSize - (nBeforeOffset + nAfterOffset);\n\t\toFitChild.applyStyle(sMeasureName, nFitSize + 'px');\n\t},\n\n\t/**\n\t* Assigns any static layout properties not dependent on changes to the\n\t* rendered component or container sizes, etc.\n\t* \n\t* @public\n\t*/\n\tflow: function() {\n\t\tif (this.useFlex) {\n\t\t\tvar i,\n\t\t\t\tchildren = this.container.children,\n\t\t\t\tchild;\n\t\t\tthis.container.addClass(this.flexLayoutClass);\n\t\t\tthis.container.addRemoveClass('nostretch', this.container.noStretch);\n\t\t\tfor (i=0; i<children.length; i++) {\n\t\t\t\tchild = children[i];\n\t\t\t\tchild.addClass('enyo-flex-item');\n\t\t\t\tchild.addRemoveClass('flex', child.fit);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* Updates the layout to reflect any changes made to the layout container or\n\t* the contained components.\n\t*\n\t* @public\n\t*/\n\treflow: function() {\n\t\tif (!this.useFlex) {\n\t\t\tif (this.orient == 'h') {\n\t\t\t\tthis._reflow('width', 'clientWidth', 'left', 'right');\n\t\t\t} else {\n\t\t\t\tthis._reflow('height', 'clientHeight', 'top', 'bottom');\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t* @private\n\t* @lends module:layout/FittableLayout~FittableLayout.prototype\n\t*/\n\tstatics: {\n\t\t/**\n\t\t* Indicates whether flexbox optimization can be used.\n\t\t*\n\t\t* @type {Boolean}\n\t\t* @default  false\n\t\t* @private\n\t\t*/\n\t\tflexAvailable: flexAvailable\n\t}\n});\n\n/**\n* {@link module:layout/FittableLayout~FittableColumnsLayout} provides a container in which items are laid\n* out in a set of vertical columns, with most of the items having natural\n* size, but one expanding to fill the remaining space. The one that expands is\n* labeled with the attribute `fit: true`.\n*\n* `enyo.FittableColumnsLayout` is meant to be used as a value for the\n* `layoutKind` property of other kinds. `layoutKind` provides a way to add\n* layout behavior in a pluggable fashion while retaining the ability to use a\n* specific base kind.\n*\n* For more information, see the documentation on\n* [Fittables]{@linkplain $dev-guide/building-apps/layout/fittables.html} in the\n* Enyo Developer Guide.\n*\n* @class FittableColumnsLayout\n* @extends module:layout/FittableLayout~FittableLayout\n* @public\n*/\n\n/**\n* The declaration for {@link module:layout/FittableLayout~FittableColumnsLayout}\n*/\nmodule.exports.Columns = kind(/** @lends module:layout/FittableLayout~FittableColumnsLayout.prototype */{\n\tname        : 'enyo.FittableColumnsLayout',\n\tkind        : FittableLayout,\n\torient      : 'h',\n\tfitLayoutClass : 'enyo-fittable-columns-layout',\n\tflexLayoutClass: 'enyo-flex-container columns'\n});\n\n\n/**\n* {@link module:layout/FittableLayout~FittableRowsLayout} provides a container in which items are laid out\n* in a set of horizontal rows, with most of the items having natural size, but\n* one expanding to fill the remaining space. The one that expands is labeled\n* with the attribute `fit: true`.\n*\n* `enyo.FittableRowsLayout` is meant to be used as a value for the\n* `layoutKind` property of other kinds. `layoutKind` provides a way to add\n* layout behavior in a pluggable fashion while retaining the ability to use a\n* specific base kind.\n*\n* For more information, see the documentation on\n* [Fittables]{@linkplain $dev-guide/building-apps/layout/fittables.html} in the\n* Enyo Developer Guide.\n*\n* @class FittableRowsLayout\n* @extends module:layout/FittableLayout~FittableLayout\n* @public\n*/\n\n/**\n* The declaration for {@link module:layout/FittableLayout~FittableRowsLayout}\n*/\nmodule.exports.Rows = kind(\n\t/** @lends module:layout/FittableLayout~FittableRowsLayout.prototype */ {\n\n\t/**\n\t* @private\n\t*/\n\tname        : 'enyo.FittableRowsLayout',\n\n\t/**\n\t* @private\n\t*/\n\tkind        : FittableLayout,\n\n\t/**\n\t* Layout CSS class used to fit rows.\n\t*\n\t* @type {String}\n\t* @default 'enyo-fittable-rows-layout'\n\t* @public\n\t*/\n\tfitLayoutClass : 'enyo-fittable-rows-layout',\n\n\t/**\n\t* The orientation of the layout.\n\t*\n\t* @type {String}\n\t* @default 'v'\n\t* @public\n\t*/\n\torient      : 'v',\n\n\t/**\n\t* @private\n\t*/\n\tflexLayoutClass: 'enyo-flex-container rows'\n});\n",
    "relPath": "layout/FittableLayout",
    "requires": [
      "enyo/kind",
      "enyo/dom",
      "enyo/Control",
      "enyo/Layout"
    ],
    "requests": [],
    "resolved": true,
    "styleEntries": [
      {
        "glob": "FittableLayout.css",
        "files": [
          "/Users/jason/Git/bootplate/lib/layout/lib/FittableLayout/FittableLayout.css"
        ],
        "sources": {
          "/Users/jason/Git/bootplate/lib/layout/lib/FittableLayout/FittableLayout.css": ".enyo-fittable-rows-layout {\n\tposition: relative;\n}\n\n.enyo-fittable-rows-layout > * {\n\tbox-sizing: border-box;\n\t-webkit-box-sizing: border-box;\n\t-moz-box-sizing: border-box;\n\t/* float when not stretched */\n\tfloat: left;\n\tclear: both;\n}\n\n/* non-floating when stretched */\n.enyo-fittable-rows-layout.enyo-stretch > * {\n\tfloat: none;\n\tclear: none;\n}\n\n/* setting to enforce margin collapsing */\n/* NOTE: rows cannot have margin left/right */\n.enyo-fittable-rows-layout.enyo-stretch.enyo-margin-expand > * {\n\tfloat: left;\n\tclear: both;\n\twidth: 100%;\n\t/* note: harsh resets */\n\tmargin-left: 0 !important;\n\tmargin-right: 0 !important;\n}\n\n.enyo-fittable-columns-layout {\n\tposition: relative;\n\ttext-align: left;\n\twhite-space: nowrap;\n}\n\n.enyo-locale-right-to-left .enyo-fittable-columns-layout {\n\ttext-align: right;\n}\n\n.enyo-fittable-columns-layout.enyo-center,\n.enyo-locale-right-to-left .enyo-fittable-columns-layout.enyo-center {\n\ttext-align: center;\n}\n\n.enyo-fittable-columns-layout > * {\n\tbox-sizing: border-box;\n\t-webkit-box-sizing: border-box;\n\t-moz-box-sizing: border-box;\n\tvertical-align: top;\n\tdisplay: inline-block;\n\twhite-space: normal;\n}\n\n.enyo-fittable-columns-layout > table {\n\tdisplay: inline-table;\n}\n\n.enyo-fittable-columns-layout.enyo-tool-decorator > * {\n\tvertical-align: middle;\n}\n\n/* repair clobbered white-space setting for pre, code */\n.enyo-fittable-columns-layout > pre, .enyo-fittable-columns-layout > code {\n\twhite-space: pre;\n}\n\n.enyo-fittable-columns-layout > .enyo-fittable-columns-layout, .enyo-fittable-columns-layout > .onyx-toolbar-inline {\n\twhite-space: nowrap;\n}\n\n/* NOTE: columns cannot have margin top/bottom */\n.enyo-fittable-columns-layout.enyo-stretch > * {\n\theight: 100%;\n\t/* note: harsh resets */\n\tmargin-top: 0 !important;\n\tmargin-bottom: 0 !important;\n}\n\n.enyo-locale-right-to-left .enyo-fittable-columns-layout {\n\tdirection: rtl;\n\ttext-align: right;\n}\n.enyo-locale-right-to-left .enyo-fittable-columns-layout.force-left-to-right {\n\tdirection: ltr;\n\ttext-align: left;\n}\n\n\n.enyo-flex-container {\n\tdisplay: -webkit-box;\n\tdisplay: -moz-box;\n\tdisplay: -ms-flexbox;\n\tdisplay: -webkit-flex;\n\tdisplay: flex;\n}\n.enyo-flex-container.enyo-center {\n\tjustify-content: center;\n}\n.enyo-flex-container.columns {\n\t-webkit-flex-direction: row;\n\t-ms-flex-direction: row;\n\tflex-direction: row;\n}\n.enyo-flex-container.rows {\n\t-webkit-flex-direction: column;\n\t-ms-flex-direction: column;\n\tflex-direction: column;\n}\n.enyo-flex-item {\n\t-webkit-box-flex: 0;\n\t-moz-box-flex: 0;\n\t-webkit-flex: 0 0 auto;\n\t-ms-flex: 0 0 auto;\n\tflex: 0 0 auto;\n}\n.enyo-flex-item.flex {\n\t-webkit-box-flex: 1;\n\t-moz-box-flex: 1;\n\t-webkit-flex: 1 1 auto;\n\t-ms-flex: 1 1 auto;\n\tflex: 1 1 auto;\n}\n.enyo-flex-container.nostretch > .enyo-flex-item {\n\t-webkit-align-self: flex-start;\n\t-ms-flex-item-align: flex-start;\n\talign-self: flex-start;\n}\n"
        },
        "source": ".enyo-fittable-rows-layout {\n\tposition: relative;\n}\n\n.enyo-fittable-rows-layout > * {\n\tbox-sizing: border-box;\n\t-webkit-box-sizing: border-box;\n\t-moz-box-sizing: border-box;\n\t/* float when not stretched */\n\tfloat: left;\n\tclear: both;\n}\n\n/* non-floating when stretched */\n.enyo-fittable-rows-layout.enyo-stretch > * {\n\tfloat: none;\n\tclear: none;\n}\n\n/* setting to enforce margin collapsing */\n/* NOTE: rows cannot have margin left/right */\n.enyo-fittable-rows-layout.enyo-stretch.enyo-margin-expand > * {\n\tfloat: left;\n\tclear: both;\n\twidth: 100%;\n\t/* note: harsh resets */\n\tmargin-left: 0 !important;\n\tmargin-right: 0 !important;\n}\n\n.enyo-fittable-columns-layout {\n\tposition: relative;\n\ttext-align: left;\n\twhite-space: nowrap;\n}\n\n.enyo-locale-right-to-left .enyo-fittable-columns-layout {\n\ttext-align: right;\n}\n\n.enyo-fittable-columns-layout.enyo-center,\n.enyo-locale-right-to-left .enyo-fittable-columns-layout.enyo-center {\n\ttext-align: center;\n}\n\n.enyo-fittable-columns-layout > * {\n\tbox-sizing: border-box;\n\t-webkit-box-sizing: border-box;\n\t-moz-box-sizing: border-box;\n\tvertical-align: top;\n\tdisplay: inline-block;\n\twhite-space: normal;\n}\n\n.enyo-fittable-columns-layout > table {\n\tdisplay: inline-table;\n}\n\n.enyo-fittable-columns-layout.enyo-tool-decorator > * {\n\tvertical-align: middle;\n}\n\n/* repair clobbered white-space setting for pre, code */\n.enyo-fittable-columns-layout > pre, .enyo-fittable-columns-layout > code {\n\twhite-space: pre;\n}\n\n.enyo-fittable-columns-layout > .enyo-fittable-columns-layout, .enyo-fittable-columns-layout > .onyx-toolbar-inline {\n\twhite-space: nowrap;\n}\n\n/* NOTE: columns cannot have margin top/bottom */\n.enyo-fittable-columns-layout.enyo-stretch > * {\n\theight: 100%;\n\t/* note: harsh resets */\n\tmargin-top: 0 !important;\n\tmargin-bottom: 0 !important;\n}\n\n.enyo-locale-right-to-left .enyo-fittable-columns-layout {\n\tdirection: rtl;\n\ttext-align: right;\n}\n.enyo-locale-right-to-left .enyo-fittable-columns-layout.force-left-to-right {\n\tdirection: ltr;\n\ttext-align: left;\n}\n\n\n.enyo-flex-container {\n\tdisplay: -webkit-box;\n\tdisplay: -moz-box;\n\tdisplay: -ms-flexbox;\n\tdisplay: -webkit-flex;\n\tdisplay: flex;\n}\n.enyo-flex-container.enyo-center {\n\tjustify-content: center;\n}\n.enyo-flex-container.columns {\n\t-webkit-flex-direction: row;\n\t-ms-flex-direction: row;\n\tflex-direction: row;\n}\n.enyo-flex-container.rows {\n\t-webkit-flex-direction: column;\n\t-ms-flex-direction: column;\n\tflex-direction: column;\n}\n.enyo-flex-item {\n\t-webkit-box-flex: 0;\n\t-moz-box-flex: 0;\n\t-webkit-flex: 0 0 auto;\n\t-ms-flex: 0 0 auto;\n\tflex: 0 0 auto;\n}\n.enyo-flex-item.flex {\n\t-webkit-box-flex: 1;\n\t-moz-box-flex: 1;\n\t-webkit-flex: 1 1 auto;\n\t-ms-flex: 1 1 auto;\n\tflex: 1 1 auto;\n}\n.enyo-flex-container.nostretch > .enyo-flex-item {\n\t-webkit-align-self: flex-start;\n\t-ms-flex-item-align: flex-start;\n\talign-self: flex-start;\n}\n"
      }
    ]
  },
  {
    "path": "/Users/jason/Git/bootplate",
    "entry": true,
    "relName": "bootplate",
    "name": "/Users/jason/Git/bootplate",
    "fullpath": "/Users/jason/Git/bootplate",
    "isPackage": true,
    "packageFile": "/Users/jason/Git/bootplate/package.json",
    "mtime": {
      "/Users/jason/Git/bootplate/package.json": 1434993570000,
      "/Users/jason/Git/bootplate/index.js": 1434992814000,
      "/Users/jason/Git/bootplate/src/style/main.less": 1433354980000,
      "/Users/jason/Git/bootplate/icon.png": 1433354980000,
      "/Users/jason/Git/bootplate/assets/favicon.ico": 1433354980000
    },
    "json": {
      "name": "enyo-bootplate",
      "description": "An Enyo-based self contained template to build web applications using HTML, CSS and JavaScript.",
      "version": "2.6.0-dev",
      "main": "index.js",
      "assets": [
        "icon.png",
        "assets/*"
      ],
      "styles": [
        "src/style/*.less"
      ],
      "homepage": "http://enyojs.com/",
      "bugs": "http://jira.enyojs.com/",
      "maintainers": [
        {
          "name": "Enyo JS Framework Team",
          "web": "http://enyojs.com/"
        }
      ],
      "licenses": [
        {
          "type": "Apache-2.0",
          "url": "http://www.apache.org/licenses/LICENSE-2.0"
        }
      ],
      "dependencies": {}
    },
    "main": "/Users/jason/Git/bootplate/index.js",
    "contents": "/**\n\tInstantiate your enyo.Application kind in this file.  Note,\n\tapplication rendering should be deferred until DOM is ready by wrapping\n\tit in a call to ready().\n*/\n\nvar\n\tready = require('enyo/ready'),\n\tApp = require('./src/App');\n\nready(function () {\n\tnew App();\n});\n",
    "relPath": "/Users/jason/Git/bootplate",
    "requires": [
      "enyo/ready",
      "./src/App"
    ],
    "requests": [],
    "resolved": true,
    "styleEntries": [
      {
        "glob": "src/style/*.less",
        "files": [
          "/Users/jason/Git/bootplate/src/style/main.less"
        ],
        "sources": {
          "/Users/jason/Git/bootplate/src/style/main.less": "/*\n+    App-specific LESS/CSS would go here, but to make your\n+    application easier to maintain, you should try to\n+    minimize the use of custom CSS.\n+*/\n\n.main-view {\n}"
        },
        "source": "/*\n+    App-specific LESS/CSS would go here, but to make your\n+    application easier to maintain, you should try to\n+    minimize the use of custom CSS.\n+*/\n\n.main-view {\n}"
      }
    ],
    "assetEntries": [
      {
        "glob": "icon.png",
        "files": [
          "/Users/jason/Git/bootplate/icon.png"
        ],
        "updated": [
          "/Users/jason/Git/bootplate/icon.png"
        ]
      },
      {
        "glob": "assets/*",
        "files": [
          "/Users/jason/Git/bootplate/assets/favicon.ico"
        ],
        "updated": [
          "/Users/jason/Git/bootplate/assets/favicon.ico"
        ]
      }
    ]
  },
  {
    "path": "./src/App",
    "base": "/Users/jason/Git/bootplate",
    "relName": "src/App",
    "name": "/Users/jason/Git/bootplate/src/App",
    "fullpath": "/Users/jason/Git/bootplate/src/App.js",
    "contents": "/**\n\tDefine your enyo.Application kind in this file.\n*/\n\nvar\n\tkind = require('enyo/kind'),\n\tApplication = require('enyo/Application'),\n\tMainView = require('./views/MainView');\n\nmodule.exports = kind({\n\tkind: Application,\n\tview: MainView\n});\n",
    "mtime": 1434759988000,
    "relPath": "src/App.js",
    "requires": [
      "enyo/kind",
      "enyo/Application",
      "./views/MainView"
    ],
    "requests": [],
    "resolved": true
  },
  {
    "path": "./views/MainView",
    "base": "/Users/jason/Git/bootplate/src",
    "relName": "src/views/MainView",
    "name": "/Users/jason/Git/bootplate/src/views/MainView",
    "fullpath": "/Users/jason/Git/bootplate/src/views/MainView.js",
    "contents": "/**\n\tFor simple applications, you might define all of your views in this file.  \n\tFor more complex applications, you might choose to separate these kind definitions \n\tinto multiple files under this folder.\n*/\n\nvar\n\tkind = require('enyo/kind'),\n\tFittableRows = require('layout/FittableRows'),\n\tToolbar = require('onyx/Toolbar'),\n\tScroller = require('enyo/Scroller'),\n\tButton = require('onyx/Button');\n\n\nmodule.exports = kind({\n\tkind: FittableRows,\n\tfit: true,\n\tcomponents:[\n\t\t{kind: Toolbar, content: \"Hello World\"},\n\t\t{kind: Scroller, fit: true, components: [\n\t\t\t{name: \"main\", classes: \"nice-padding\", allowHtml: true}\n\t\t]},\n\t\t{kind: Toolbar, components: [\n\t\t\t{kind: Button, content: \"Tap me\", ontap: \"helloWorldTap\"}\n\t\t]}\n\t],\n\thelloWorldTap: function(inSender, inEvent) {\n\t\tthis.$.main.addContent(\"The button was tapped.<br/>\");\n\t}\n});\n",
    "mtime": 1434760138000,
    "relPath": "src/views/MainView.js",
    "requires": [
      "enyo/kind",
      "layout/FittableRows",
      "onyx/Toolbar",
      "enyo/Scroller",
      "onyx/Button"
    ],
    "requests": [],
    "resolved": true
  }
]
